{
    "2d_mix/clusterer_gradient_visualization.py": {
        "sklearn": {},
        "torch": {
            "meshgrid_41": {
                "variable": {
                    "value": "(mesh_x, mesh_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.linspace(mesh_lim_m, mesh_lim_M, 150)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.linspace(mesh_lim_m, mesh_lim_M, 150)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "concated",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mesh_x.reshape(-1, 1), mesh_y.reshape(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_41": {
                "start": {
                    "value": "mesh_lim_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(x_test.min() * 1.2)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "mesh_lim_M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(x_test.max() * 1.2)",
                            "Call"
                        ]
                    ]
                },
                "steps": {
                    "value": "150",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "clusterers/kmeans.py": {
        "sklearn": {
            "KMeans_15": {
                "variable": {
                    "value": "self.kmeans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "init": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'k-means++'",
                            "Method Argument"
                        ]
                    ]
                },
                "n_clusters": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_init": {
                    "value": "n_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_23": {
                "ndarray": {
                    "value": "permuted_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([self.mapping[x] for x in np_prediction])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "clusterers/scan_selflabel_guide.py": {
        "sklearn": {
            "normalized_mutual_info_score_93": {
                "variable": {
                    "value": "nmi",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "ReLU_21": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_22": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_42": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scan_selflabel_model(x, forward_pass='default')[0]",
                            "Subscript"
                        ],
                        [
                            "self.scan_selflabel_model(x, forward_pass='default')[self.head]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Multinomial_73": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "total_count": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.shape[0]",
                            "Subscript"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "probs": {
                    "value": "torch.tensor(distribution)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_35": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(x, dim=0)[:N]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_36": {
                "tensors": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y, dim=0)[:N]",
                            "Subscript"
                        ],
                        [
                            "torch.argmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "self.x_labels",
                            "Attribute"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "data": {
                    "value": "distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_label_distribution()",
                            "Call"
                        ],
                        [
                            "[i / sum(distribution) for i in distribution]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_89": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_52": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.shape[0]",
                            "Subscript"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "clusterers/toy_guide_clusterer.py": {
        "sklearn": {
            "KMeans_44": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "n_init": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "3000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalized_mutual_info_score_128": {
                "variable": {
                    "value": "nmi",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "pred_labels.cpu().detach().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "self.dataset.labels.detach().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Sequential_16": {
                "variable": {
                    "value": "self.fp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2, k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.fp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "kmeans.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_46": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "self.X[index]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_77": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_78": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataLoader_90": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "5000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_92": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adagrad_101": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.classifier_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.07",
                            "float"
                        ],
                        [
                            "0.07",
                            "float"
                        ]
                    ]
                }
            },
            "Multinomial_182": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "total_count": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.shape[0]",
                            "Subscript"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "probs": {
                    "value": "torch.tensor(distribution)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_143": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_144": {
                "tensors": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.labels[index]",
                            "Subscript"
                        ],
                        [
                            "outputs.argmax(dim=1)",
                            "Call"
                        ],
                        [
                            "self.x_labels",
                            "Attribute"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_183": {
                "data": {
                    "value": "distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_label_distribution()",
                            "Call"
                        ],
                        [
                            "[i / sum(distribution) for i in distribution]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "arange_161": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.shape[0]",
                            "Subscript"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gan_training/metrics/clustering_metrics.py": {
        "sklearn": {
            "contingency_matrix_31": {
                "variable": {
                    "value": "contingency_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normalized_mutual_info_score_15": {
                "labels_true": {
                    "value": "inferred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inferred",
                            "Method Argument"
                        ],
                        [
                            "inferred",
                            "Method Argument"
                        ],
                        [
                            "inferred",
                            "Method Argument"
                        ],
                        [
                            "inferred",
                            "Method Argument"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt.astype(np.int64)",
                            "Call"
                        ],
                        [
                            "gt",
                            "Method Argument"
                        ],
                        [
                            "gt",
                            "Method Argument"
                        ],
                        [
                            "gt",
                            "Method Argument"
                        ],
                        [
                            "gt",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "adjusted_rand_score_37": {
                "labels_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt.astype(np.int64)",
                            "Call"
                        ],
                        [
                            "gt",
                            "Method Argument"
                        ],
                        [
                            "gt",
                            "Method Argument"
                        ],
                        [
                            "gt",
                            "Method Argument"
                        ],
                        [
                            "gt",
                            "Method Argument"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "inferred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inferred",
                            "Method Argument"
                        ],
                        [
                            "inferred",
                            "Method Argument"
                        ],
                        [
                            "inferred",
                            "Method Argument"
                        ],
                        [
                            "inferred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "homogeneity_score_41": {
                "labels_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt.astype(np.int64)",
                            "Call"
                        ],
                        [
                            "gt",
                            "Method Argument"
                        ],
                        [
                            "gt",
                            "Method Argument"
                        ],
                        [
                            "gt",
                            "Method Argument"
                        ],
                        [
                            "gt",
                            "Method Argument"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "inferred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inferred",
                            "Method Argument"
                        ],
                        [
                            "inferred",
                            "Method Argument"
                        ],
                        [
                            "inferred",
                            "Method Argument"
                        ],
                        [
                            "inferred",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/invertible_resnet/models/toy_data.py": {
        "sklearn": {
            "make_swiss_roll_13": {
                "n_samples": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                },
                "noise": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "make_circles_20": {
                "n_samples": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "noise": {
                    "value": "0.08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "make_moons_27": {
                "n_samples": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                },
                "noise": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_16": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sklearn.datasets.make_swiss_roll(n_samples=batch_size, noise=1.0)[0]",
                            "Subscript"
                        ],
                        [
                            "data.astype('float32')[:, [0, 2]]",
                            "Subscript"
                        ],
                        [
                            "data * 3",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(data)",
                            "Call"
                        ],
                        [
                            "sklearn.datasets.make_circles(n_samples=batch_size, factor=0.5, noise=0.08)[0]",
                            "Subscript"
                        ],
                        [
                            "data.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data)",
                            "Call"
                        ],
                        [
                            "sklearn.datasets.make_moons(n_samples=batch_size, noise=0.1)[0]",
                            "Subscript"
                        ],
                        [
                            "data.astype('float32')",
                            "Call"
                        ],
                        [
                            "data * 2 + np.array([-1, -0.2])",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(data)",
                            "Call"
                        ],
                        [
                            "2 * rng.permutation(np.einsum('ti,tij->tj', features, rotations))",
                            "BinOp"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_23": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sklearn.datasets.make_swiss_roll(n_samples=batch_size, noise=1.0)[0]",
                            "Subscript"
                        ],
                        [
                            "data.astype('float32')[:, [0, 2]]",
                            "Subscript"
                        ],
                        [
                            "data * 3",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(data)",
                            "Call"
                        ],
                        [
                            "sklearn.datasets.make_circles(n_samples=batch_size, factor=0.5, noise=0.08)[0]",
                            "Subscript"
                        ],
                        [
                            "data.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data)",
                            "Call"
                        ],
                        [
                            "sklearn.datasets.make_moons(n_samples=batch_size, noise=0.1)[0]",
                            "Subscript"
                        ],
                        [
                            "data.astype('float32')",
                            "Call"
                        ],
                        [
                            "data * 2 + np.array([-1, -0.2])",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(data)",
                            "Call"
                        ],
                        [
                            "2 * rng.permutation(np.einsum('ti,tij->tj', features, rotations))",
                            "BinOp"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_30": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sklearn.datasets.make_swiss_roll(n_samples=batch_size, noise=1.0)[0]",
                            "Subscript"
                        ],
                        [
                            "data.astype('float32')[:, [0, 2]]",
                            "Subscript"
                        ],
                        [
                            "data * 3",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(data)",
                            "Call"
                        ],
                        [
                            "sklearn.datasets.make_circles(n_samples=batch_size, factor=0.5, noise=0.08)[0]",
                            "Subscript"
                        ],
                        [
                            "data.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data)",
                            "Call"
                        ],
                        [
                            "sklearn.datasets.make_moons(n_samples=batch_size, noise=0.1)[0]",
                            "Subscript"
                        ],
                        [
                            "data.astype('float32')",
                            "Call"
                        ],
                        [
                            "data * 2 + np.array([-1, -0.2])",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(data)",
                            "Call"
                        ],
                        [
                            "2 * rng.permutation(np.einsum('ti,tij->tj', features, rotations))",
                            "BinOp"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(dataset, dtype='float32')",
                            "Call"
                        ],
                        [
                            "dataset / 1.414",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_74": {
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sklearn.datasets.make_swiss_roll(n_samples=batch_size, noise=1.0)[0]",
                            "Subscript"
                        ],
                        [
                            "data.astype('float32')[:, [0, 2]]",
                            "Subscript"
                        ],
                        [
                            "data * 3",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(data)",
                            "Call"
                        ],
                        [
                            "sklearn.datasets.make_circles(n_samples=batch_size, factor=0.5, noise=0.08)[0]",
                            "Subscript"
                        ],
                        [
                            "data.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data)",
                            "Call"
                        ],
                        [
                            "sklearn.datasets.make_moons(n_samples=batch_size, noise=0.1)[0]",
                            "Subscript"
                        ],
                        [
                            "data.astype('float32')",
                            "Call"
                        ],
                        [
                            "data * 2 + np.array([-1, -0.2])",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(data)",
                            "Call"
                        ],
                        [
                            "2 * rng.permutation(np.einsum('ti,tij->tj', features, rotations))",
                            "BinOp"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gan_training/metrics/fid.py": {
        "tensorflow": {
            "ConfigProto_208": {
                "variable": {
                    "value": "config1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_35": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_37": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "FID_Inception_Net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_34": {
                "name": {
                    "value": "pth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pth",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_210": {
                "config": {
                    "value": "config1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorShape_83": {
                "variable": {
                    "value": "o.__dict__[_shape_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "global_variables_initializer_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gan_training/metrics/tf_is/inception_score.py": {
        "tensorflow": {
            "InteractiveSession_24": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "inception_images",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_34": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.image.resize_bilinear(images, [size, size])",
                            "Call"
                        ],
                        [
                            "inception_images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bilinear_36": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.image.resize_bilinear(images, [size, size])",
                            "Call"
                        ],
                        [
                            "inception_images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_37": {
                "variable": {
                    "value": "generated_images_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.image.resize_bilinear(images, [size, size])",
                            "Call"
                        ],
                        [
                            "inception_images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "map_fn_38": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "functools.partial(tfgan.eval.run_inception, default_graph_def_fn=functools.partial(tfgan.eval.get_graph_def_from_url_tarball, INCEPTION_URL, INCEPTION_FROZEN_GRAPH, os.path.basename(INCEPTION_URL)), output_tensor='logits:0')",
                    "type": "Call",
                    "possible_values": []
                },
                "elems": {
                    "value": "array_ops.stack(generated_images_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "RunClassifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_52": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "array_ops.unstack(logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_52": {
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inception_logits()",
                            "Call"
                        ],
                        [
                            "tf.map_fn(fn=functools.partial(tfgan.eval.run_inception, default_graph_def_fn=functools.partial(tfgan.eval.get_graph_def_from_url_tarball, INCEPTION_URL, INCEPTION_FROZEN_GRAPH, os.path.basename(INCEPTION_URL)), output_tensor='logits:0'), elems=array_ops.stack(generated_images_list), parallel_iterations=8, back_prop=False, swap_memory=True, name='RunClassifier')",
                            "Call"
                        ],
                        [
                            "array_ops.concat(array_ops.unstack(logits), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_47": {
                "values": {
                    "value": "generated_images_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(images, num_or_size_splits=num_splits)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "2d_mix/config.py": {
        "torch": {
            "Adam_21": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_24": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_39": {
                "variable": {
                    "value": "tensor_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.Tensor(x) for x in samples]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_40": {
                "variable": {
                    "value": "tensor_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor(x) for x in labels]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "TensorDataset_41": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "tensor_samples",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_42": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.TensorDataset(tensor_samples, tensor_labels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "ndarray": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_data(batch_size, var=variance)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x_test).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_33": {
                "ndarray": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_data(batch_size, var=variance)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_test).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_40": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "2d_mix/models/cluster.py": {
        "torch": {
            "Sequential_31": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z_dim + embed_size, act_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(act_dim, act_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(act_dim, act_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(act_dim, act_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "act_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ],
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "x_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_out * pool_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "z_dim + embed_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "act_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ],
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_32": {
                "num_features": {
                    "value": "act_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ],
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "act_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ],
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "act_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ],
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_34": {
                "num_features": {
                    "value": "act_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ],
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "act_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ],
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "act_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ],
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_36": {
                "num_features": {
                    "value": "act_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ],
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "act_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ],
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "act_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ],
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_38": {
                "num_features": {
                    "value": "act_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ],
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_38": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "2d_mix/train.py": {
        "torch": {
            "device_52": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Normal_92": {
                "variable": {
                    "value": "zdist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(z_dim, device=device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.ones(z_dim, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_92": {
                "*size": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.z_dim",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_93": {
                "*size": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.z_dim",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_147": {
                "obj": {
                    "value": "{'generator': g.state_dict(), 'discriminator': d.state_dict(), 'g_optimizer': g_optimizer.state_dict(), 'd_optimizer': d_optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(exp_dir, 'snapshots', 'model_%d.pt' % it)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cluster_metrics.py": {
        "torch": {
            "DataLoader_50": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(name=name, data_dir=config['data']['train_dir'], size=config['data']['img_size'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config['training']['nworkers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "load_config(args.config, 'configs/default.yaml')",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "y_reals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_reals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f['y_reals']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_reals).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_77": {
                "variable": {
                    "value": "y_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f['y_preds']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.random.randint(0, 100, size=y_reals.shape)",
                            "Call"
                        ],
                        [
                            "torch.cat(y_preds).numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "clusterers/base_clusterer.py": {
        "torch": {
            "Multinomial_35": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "total_count": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "probs": {
                    "value": "torch.tensor(distribution)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "data": {
                    "value": "distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_label_distribution()",
                            "Call"
                        ],
                        [
                            "[i / sum(distribution) for i in distribution]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "clusterers/random_labels.py": {
        "torch": {
            "randint_10": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "y.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "clusterers/single_label.py": {
        "torch": {
            "randint_12": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "y.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gan_training/checkpoints.py": {
        "torch": {
            "save_40": {
                "obj": {
                    "value": "outdict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs",
                            "variable"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.checkpoint_dir, filename)",
                            "Call"
                        ],
                        [
                            "pretrained['model']",
                            "Subscript"
                        ],
                        [
                            "os.path.join(self.checkpoint_dir, filename)",
                            "Call"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_67": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.checkpoint_dir, filename)",
                            "Call"
                        ],
                        [
                            "pretrained['model']",
                            "Subscript"
                        ],
                        [
                            "os.path.join(self.checkpoint_dir, filename)",
                            "Call"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_126": {
                "variable": {
                    "value": "clusterer.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f['x']",
                            "Subscript"
                        ],
                        [
                            "clusterer.x",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "gan_training/config.py": {
        "torch": {
            "RMSprop_100": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "g_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generator.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['lr_g']",
                            "Subscript"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "RMSprop_101": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "d_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['lr_d']",
                            "Subscript"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_109": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "g_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generator.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['lr_g']",
                            "Subscript"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['adam_eps']",
                            "Subscript"
                        ],
                        [
                            "1e-08",
                            "float"
                        ]
                    ]
                }
            },
            "Adam_110": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "d_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['lr_d']",
                            "Subscript"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['adam_eps']",
                            "Subscript"
                        ],
                        [
                            "1e-08",
                            "float"
                        ]
                    ]
                }
            },
            "SGD_112": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "g_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generator.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['lr_g']",
                            "Subscript"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_113": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "d_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['lr_d']",
                            "Subscript"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "gan_training/distributions.py": {
        "torch": {
            "zeros_25": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nlabels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nlabels",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Categorical_26": {
                "variable": {
                    "value": "ydist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(nlabels, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "acos_38": {
                "variable": {
                    "value": "omega",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(z1 * z2).sum(dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "p / z1.pow(2).sum(dim=-1, keepdim=True).sqrt()",
                            "BinOp"
                        ],
                        [
                            "p / z2.pow(2).sum(dim=-1, keepdim=True).sqrt()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_9": {
                "variable": {
                    "value": "high",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Uniform_10": {
                "variable": {
                    "value": "zdist",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "low",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.ones(dim, device=device)",
                            "UnaryOp"
                        ]
                    ]
                },
                "high": {
                    "value": "high",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(dim, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_12": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_13": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Normal_14": {
                "variable": {
                    "value": "zdist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(dim, device=device)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(dim, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_39": {
                "input": {
                    "value": "omega",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(p)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_40": {
                "input": {
                    "value": "omega",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(p)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_8": {
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gan_training/eval.py": {
        "torch": {
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_74": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_y(x_real, y_gt)",
                            "Call"
                        ],
                        [
                            "torch.full((batch_size,), y, device=self.device, dtype=torch.int64)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gan_training/inputs.py": {
        "torch": {
            "Tensor_231": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_153": {
                "tensors": {
                    "value": "[x1, x2, x3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_32": {
                "*size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "gan_training/metrics/inception_score.py": {
        "torch": {
            "DataLoader_28": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imgs",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Upsample_34": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_41": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "up(x)",
                            "Call"
                        ],
                        [
                            "inception_model(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gan_training/models/biggan.py": {
        "torch": {
            "ModuleList_189": {
                "modules": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": [
                        [
                            "blocklist",
                            "variable"
                        ],
                        [
                            "blocklist",
                            "variable"
                        ]
                    ]
                }
            },
            "Sequential_193": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "layers.bn(self.arch['out_channels'][-1], cross_replica=self.cross_replica, mybn=self.mybn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_381": {
                "modules": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": [
                        [
                            "blocklist",
                            "variable"
                        ],
                        [
                            "blocklist",
                            "variable"
                        ]
                    ]
                }
            },
            "sum_450": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.activation(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "variable": {
                    "value": "G_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_215": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(self.B1, self.B2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.adam_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_251": {
                "variable": {
                    "value": "zs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zs[0]",
                            "Subscript"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.z_chunk_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_271": {
                "input": {
                    "value": "self.output_layer(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_314": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_319": {
                "variable": {
                    "value": "G_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_404": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(self.B1, self.B2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.adam_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_480": {
                "mode": {
                    "value": "train_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_254": {
                "tensors": {
                    "value": "[y, item]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_503": {
                "tensors": {
                    "value": "[G_z, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_504": {
                "tensors": {
                    "value": "[gy, dy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_494": {
                "tensors": {
                    "value": "[c_cls_f, c_cls_r]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_374": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gan_training/models/blocks.py": {
        "torch": {
            "leaky_relu_60": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.repeat_interleave(self.nlabels, dim=0)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fhidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fhidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "is_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_69": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "nlabels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nlabels",
                            "Method Argument"
                        ],
                        [
                            "nlabels",
                            "Method Argument"
                        ],
                        [
                            "nlabels",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_75": {
                "variable": {
                    "value": "yz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, yembed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "act_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "act_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "k_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normalize_85": {
                "variable": {
                    "value": "self.lin.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nc",
                            "Method Argument"
                        ],
                        [
                            "nc",
                            "Method Argument"
                        ],
                        [
                            "nc",
                            "Method Argument"
                        ],
                        [
                            "nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nlabels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nlabels",
                            "Method Argument"
                        ],
                        [
                            "nlabels",
                            "Method Argument"
                        ],
                        [
                            "nlabels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nc",
                            "Method Argument"
                        ],
                        [
                            "nc",
                            "Method Argument"
                        ],
                        [
                            "nc",
                            "Method Argument"
                        ],
                        [
                            "nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_129": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "nlabels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nlabels",
                            "Method Argument"
                        ],
                        [
                            "nlabels",
                            "Method Argument"
                        ],
                        [
                            "nlabels",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nc",
                            "Method Argument"
                        ],
                        [
                            "nc",
                            "Method Argument"
                        ],
                        [
                            "nc",
                            "Method Argument"
                        ],
                        [
                            "nc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_157": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nc",
                            "Method Argument"
                        ],
                        [
                            "nc",
                            "Method Argument"
                        ],
                        [
                            "nc",
                            "Method Argument"
                        ],
                        [
                            "nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_182": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_183": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "num_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_202": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nc",
                            "Method Argument"
                        ],
                        [
                            "nc",
                            "Method Argument"
                        ],
                        [
                            "nc",
                            "Method Argument"
                        ],
                        [
                            "nc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_136": {
                "variable": {
                    "value": "label_info",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedding(y) * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_143": {
                "variable": {
                    "value": "label_info",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedding(labels) * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_74": {
                "input": {
                    "value": "yembed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(y)",
                            "Call"
                        ],
                        [
                            "yembed / torch.norm(yembed, p=2, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "gan_training/models/dcgan_deep.py": {
        "torch": {
            "zeros_132": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 128)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_36": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_39": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_42": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.conv_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ngf, nc, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_53": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(out), y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out), y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(out), y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nc * pack_size, ndf, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ndf, ndf, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ndf, ndf * 2, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ndf * 2, ndf * 2, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ndf * 2, ndf * 4, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ndf * 4, ndf * 4, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ndf * 4, ndf * 8, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim + embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6 * 6 * ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_107": {
                "tensors": {
                    "value": "x_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pack_size",
                            "Attribute"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "nc * pack_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_75": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_76": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_77": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_78": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_79": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_80": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_81": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_106": {
                "tensors": {
                    "value": "[t for t in imgs_to_stack]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gan_training/models/dcgan_shallow.py": {
        "torch": {
            "zeros_126": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 128)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_128": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_36": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_39": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_42": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.conv_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ngf, nc, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(out), y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out), y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(out), y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nc * pack_size, ndf, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ndf, ndf * 2, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ndf * 2, ndf * 4, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ndf * 4, ndf * 8, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim + embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * 4 * ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_109": {
                "tensors": {
                    "value": "x_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pack_size",
                            "Attribute"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "nc * pack_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "num_features": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_77": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "num_features": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_80": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_82": {
                "num_features": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_83": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "num_features": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_86": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_108": {
                "tensors": {
                    "value": "[t for t in imgs_to_stack]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gan_training/models/resnet2.py": {
        "torch": {
            "leaky_relu_185": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_74": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.get_latent(z, y)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(z.size(0), 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out, y)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out, y)",
                            "Call"
                        ],
                        [
                            "actvn(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_78": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.get_latent(z, y)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(z.size(0), 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out, y)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out, y)",
                            "Call"
                        ],
                        [
                            "actvn(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_82": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.get_latent(z, y)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(z.size(0), 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out, y)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out, y)",
                            "Call"
                        ],
                        [
                            "actvn(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_86": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.get_latent(z, y)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(z.size(0), 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out, y)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out, y)",
                            "Call"
                        ],
                        [
                            "actvn(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_90": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.get_latent(z, y)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(z.size(0), 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out, y)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out, y)",
                            "Call"
                        ],
                        [
                            "actvn(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_95": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.get_latent(z, y)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(z.size(0), 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out, y)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out, y)",
                            "Call"
                        ],
                        [
                            "actvn(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_116": {
                "variable": {
                    "value": "self.conv_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_156": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.get_latent(z, y)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(z.size(0), 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out, y)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out, y)",
                            "Call"
                        ],
                        [
                            "actvn(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_159": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.get_latent(z, y)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(z.size(0), 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out, y)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out, y)",
                            "Call"
                        ],
                        [
                            "actvn(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_162": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.get_latent(z, y)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(z.size(0), 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out, y)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out, y)",
                            "Call"
                        ],
                        [
                            "actvn(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_165": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.get_latent(z, y)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(z.size(0), 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out, y)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out, y)",
                            "Call"
                        ],
                        [
                            "actvn(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_168": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.get_latent(z, y)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "out.view(z.size(0), 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out, y)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out, y)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out, y)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out, y)",
                            "Call"
                        ],
                        [
                            "actvn(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim + embed_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16 * nf * s0 * s0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "16 * nf * s0 * s0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "gan_training/models/resnet2s.py": {
        "torch": {
            "leaky_relu_183": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('fc', nn.Linear(latent_dim, 16 * nf * s0 * s0)), ('reshape', Reshape(16 * self.nf, self.s0, self.s0)), ('resnet_0_0', ResnetBlock(16 * nf, 16 * nf)), ('resnet_0_1', ResnetBlock(16 * nf, 16 * nf)), ('upsample_1', nn.Upsample(scale_factor=2)), ('resnet_1_0', ResnetBlock(16 * nf, 16 * nf)), ('resnet_1_1', ResnetBlock(16 * nf, 16 * nf)), ('upsample_2', nn.Upsample(scale_factor=2)), ('resnet_2_0', ResnetBlock(16 * nf, 8 * nf)), ('resnet_2_1', ResnetBlock(8 * nf, 8 * nf)), ('upsample_3', nn.Upsample(scale_factor=2)), ('resnet_3_0', ResnetBlock(8 * nf, 4 * nf)), ('resnet_3_1', ResnetBlock(4 * nf, 4 * nf)), ('upsample_4', nn.Upsample(scale_factor=2)), ('resnet_4_0', ResnetBlock(4 * nf, 2 * nf)), ('resnet_4_1', ResnetBlock(2 * nf, 2 * nf)), ('upsample_5', nn.Upsample(scale_factor=2)), ('resnet_5_0', ResnetBlock(2 * nf, 1 * nf)), ('resnet_5_1', ResnetBlock(1 * nf, 1 * nf)), ('img_relu', nn.LeakyReLU(0.2)), ('conv_img', nn.Conv2d(nf, 3, 3, padding=1)), ('tanh', nn.Tanh())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_96": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "nlabels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "gen.embedding.num_embeddings",
                            "Attribute"
                        ],
                        [
                            "gen.get_latent.embedding.num_embeddings",
                            "Attribute"
                        ],
                        [
                            "nlabels",
                            "Method Argument"
                        ],
                        [
                            "nlabels",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "gen.embedding.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "gen.get_latent.embedding.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_147": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fhidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fhidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "is_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_110": {
                "tensors": {
                    "value": "[z, yembed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_159": {
                "variable": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_109": {
                "input": {
                    "value": "yembed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(y)",
                            "Call"
                        ],
                        [
                            "y",
                            "variable"
                        ],
                        [
                            "yembed / torch.norm(yembed, p=2, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.condition.latent_dim",
                            "Attribute"
                        ],
                        [
                            "z_dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "16 * nf * s0 * s0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Upsample_52": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_55": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_58": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_61": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_64": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_67": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gan_training/models/resnet3.py": {
        "torch": {
            "leaky_relu_160": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('fc', nn.Linear(latent_dim, 16 * nf * s0 * s0)), ('reshape', Reshape(16 * self.nf, self.s0, self.s0)), ('resnet_0_0', ResnetBlock(16 * nf, 16 * nf)), ('resnet_0_1', ResnetBlock(16 * nf, 16 * nf)), ('upsample_1', nn.Upsample(scale_factor=2)), ('resnet_1_0', ResnetBlock(16 * nf, 16 * nf)), ('resnet_1_1', ResnetBlock(16 * nf, 16 * nf)), ('upsample_2', nn.Upsample(scale_factor=2)), ('resnet_2_0', ResnetBlock(16 * nf, 8 * nf)), ('resnet_2_1', ResnetBlock(8 * nf, 8 * nf)), ('upsample_3', nn.Upsample(scale_factor=2)), ('resnet_3_0', ResnetBlock(8 * nf, 4 * nf)), ('resnet_3_1', ResnetBlock(4 * nf, 4 * nf)), ('upsample_4', nn.Upsample(scale_factor=2)), ('resnet_4_0', ResnetBlock(4 * nf, 2 * nf)), ('resnet_4_1', ResnetBlock(2 * nf, 2 * nf)), ('upsample_5', nn.Upsample(scale_factor=2)), ('resnet_5_0', ResnetBlock(2 * nf, 1 * nf)), ('resnet_5_1', ResnetBlock(1 * nf, 1 * nf)), ('img_relu', nn.LeakyReLU(0.2)), ('conv_img', nn.Conv2d(nf, 3, 3, padding=1)), ('tanh', nn.Tanh())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_86": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "nlabels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "gen.get_latent.embedding.num_embeddings",
                            "Attribute"
                        ],
                        [
                            "gen.embedding.num_embeddings",
                            "Attribute"
                        ],
                        [
                            "nlabels",
                            "Method Argument"
                        ],
                        [
                            "nlabels",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "gen.get_latent.embedding.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "gen.embedding.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_135": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fhidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fhidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "is_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_100": {
                "tensors": {
                    "value": "[z, yembed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_140": {
                "variable": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_99": {
                "input": {
                    "value": "yembed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(y)",
                            "Call"
                        ],
                        [
                            "y",
                            "variable"
                        ],
                        [
                            "yembed / torch.norm(yembed, p=2, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.condition.latent_dim",
                            "Attribute"
                        ],
                        [
                            "z_dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "16 * nf * s0 * s0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Upsample_35": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_38": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_41": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_44": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_47": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_50": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gan_training/train.py": {
        "torch": {
            "rand_148": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_in.size(0)",
                            "Call"
                        ],
                        [
                            "y.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_130": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.discriminator(x_interp, y)",
                            "Call"
                        ],
                        [
                            "d_out",
                            "Method Argument"
                        ],
                        [
                            "d_out",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_out.new_full(size=d_out.size(), fill_value=target)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_167": {
                "outputs": {
                    "value": "d_out.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_in",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_137": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(1.0 - d_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_139": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(1.0 + d_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_135": {
                "input": {
                    "value": "d_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.discriminator(x_interp, y)",
                            "Call"
                        ],
                        [
                            "d_out",
                            "Method Argument"
                        ],
                        [
                            "d_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_137": {
                "input": {
                    "value": "1.0 - d_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_139": {
                "input": {
                    "value": "1.0 + d_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "gan_training/utils.py": {
        "torch": {
            "cat_24": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(x, dim=0)[:N]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_25": {
                "tensors": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y, dim=0)[:N]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "guide_utils/load_model.py": {
        "torch": {
            "load_33": {
                "variable": {
                    "value": "check_point",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_17": {
                "variable": {
                    "value": "model_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "guide_utils/resnet.py": {
        "torch": {
            "Identity_11": {
                "variable": {
                    "value": "backbone.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "guide_utils/resnet_cifar.py": {
        "torch": {
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "self.avgpool(out)",
                            "Call"
                        ],
                        [
                            "torch.flatten(out, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_61": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "self.avgpool(out)",
                            "Call"
                        ],
                        [
                            "torch.flatten(out, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_84": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_114": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_120": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "self.avgpool(out)",
                            "Call"
                        ],
                        [
                            "torch.flatten(out, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "guide_utils/resnet_cifar_leaky_relu.py": {
        "torch": {
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "leaky_relu_28": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_32": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(self.bn1(self.conv1(x)), negative_slope=0.25)",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(out, negative_slope=0.25)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn1(self.conv1(x)), negative_slope=0.25)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn2(self.conv2(out)), negative_slope=0.25)",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out, negative_slope=0.25)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn1(self.conv1(x)), negative_slope=0.25)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "self.avgpool(out)",
                            "Call"
                        ],
                        [
                            "torch.flatten(out, 1)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "leaky_relu_60": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_61": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_65": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(self.bn1(self.conv1(x)), negative_slope=0.25)",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(out, negative_slope=0.25)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn1(self.conv1(x)), negative_slope=0.25)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn2(self.conv2(out)), negative_slope=0.25)",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out, negative_slope=0.25)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn1(self.conv1(x)), negative_slope=0.25)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "self.avgpool(out)",
                            "Call"
                        ],
                        [
                            "torch.flatten(out, 1)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_84": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "leaky_relu_114": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "flatten_120": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(self.bn1(self.conv1(x)), negative_slope=0.25)",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(out, negative_slope=0.25)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn1(self.conv1(x)), negative_slope=0.25)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn2(self.conv2(out)), negative_slope=0.25)",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out, negative_slope=0.25)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn1(self.conv1(x)), negative_slope=0.25)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "self.avgpool(out)",
                            "Call"
                        ],
                        [
                            "torch.flatten(out, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "layers.py": {
        "torch": {
            "rsqrt_176": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_196": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "float_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.float()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_198": {
                "variable": {
                    "value": "m2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "float_x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_159": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.phi(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_160": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.g(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_166": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(theta.transpose(1, 2), phi)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "group_norm_270": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - proj(x, y)",
                            "BinOp"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "num_groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(int(x.shape[1]) // ch, 1)",
                            "Call"
                        ],
                        [
                            "int(norm_style.split('_')[-1])",
                            "Call"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_17": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys",
                            "variable"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_34": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u in enumerate(u_)",
                            "Call"
                        ],
                        [
                            "torch.matmul(v, W.t())",
                            "Call"
                        ],
                        [
                            "F.normalize(gram_schmidt(u, us), eps=eps)",
                            "Call"
                        ],
                        [
                            "u",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normalize_36": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gram_schmidt(v, vs)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-12",
                            "Method Argument"
                        ],
                        [
                            "1e-12",
                            "Method Argument"
                        ],
                        [
                            "1e-12",
                            "Method Argument"
                        ],
                        [
                            "1e-12",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_40": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(u, W)",
                            "Call"
                        ],
                        [
                            "F.normalize(gram_schmidt(v, vs), eps=eps)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "W.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_42": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gram_schmidt(u, us)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-12",
                            "Method Argument"
                        ],
                        [
                            "1e-12",
                            "Method Argument"
                        ],
                        [
                            "1e-12",
                            "Method Argument"
                        ],
                        [
                            "1e-12",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_111": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - proj(x, y)",
                            "BinOp"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W_()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_122": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - proj(x, y)",
                            "BinOp"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W_()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_138": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - proj(x, y)",
                            "BinOp"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_450": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - proj(x, y)",
                            "BinOp"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_48": {
                "input": {
                    "value": "torch.matmul(torch.matmul(v, W.t()), u.t())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "bmm_166": {
                "input": {
                    "value": "theta.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(self.phi(x), [2, 2])",
                            "Call"
                        ],
                        [
                            "phi.view(-1, self.ch // 8, x.shape[2] * x.shape[3] // 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_168": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(self.g(x), [2, 2])",
                            "Call"
                        ],
                        [
                            "g.view(-1, self.ch // 2, x.shape[2] * x.shape[3] // 4)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "beta.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_222": {
                "*size": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_223": {
                "*size": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_224": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_norm_316": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - proj(x, y)",
                            "BinOp"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.stored_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.stored_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_339": {
                "*size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_340": {
                "*size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_norm_365": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - proj(x, y)",
                            "BinOp"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.stored_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.stored_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.gain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_48": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(u, W)",
                            "Call"
                        ],
                        [
                            "F.normalize(gram_schmidt(v, vs), eps=eps)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "W.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_72": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_outputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_73": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "instance_norm_319": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - proj(x, y)",
                            "BinOp"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.stored_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.stored_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_input_stats": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_356": {
                "*size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_357": {
                "*size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_302": {
                "*size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_303": {
                "*size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "metrics.py": {
        "torch": {
            "stack_71": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "samples[:N]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/invertible_resnet/CIFAR_main.py": {
        "torch": {
            "DataLoader_87": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root='./data', train=False, download=False, transform=transform_test_mnist)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root='./data', split='test', download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "testset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "is_available_271": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_227": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform_train_mnist)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root='./data', split='train', download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "np.random.seed(1234)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_229": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root='./data', train=False, download=False, transform=transform_test_mnist)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root='./data', split='test', download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "testset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "np.random.seed(1234)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_232": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform_train_mnist)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root='./data', split='train', download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_233": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root='./data', train=False, download=False, transform=transform_test_mnist)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root='./data', split='test', download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "testset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_274": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model(args)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, range(torch.cuda.device_count()))",
                            "Call"
                        ],
                        [
                            "checkpoint['model']",
                            "Subscript"
                        ],
                        [
                            "torch.nn.DataParallel(model.module)",
                            "Call"
                        ],
                        [
                            "multiscale_iResNet(in_shape, args.nBlocks, args.nStrides, args.nChannels, args.init_ds == 2, args.inj_pad, args.coeff, args.densityEstimation, args.nClasses, args.numTraceSamples, args.numSeriesTerms, args.powerIterSpectralNorm, actnorm=not args.noActnorm, learn_prior=not args.fixedPrior, nonlin=args.nonlin)",
                            "Call"
                        ],
                        [
                            "iResNet(nBlocks=args.nBlocks, nStrides=args.nStrides, nChannels=args.nChannels, nClasses=args.nClasses, init_ds=args.init_ds, inj_pad=args.inj_pad, in_shape=in_shape, coeff=args.coeff, numTraceSamples=args.numTraceSamples, numSeriesTerms=args.numSeriesTerms, n_power_iter=args.powerIterSpectralNorm, density_estimation=args.densityEstimation, actnorm=not args.noActnorm, learn_prior=not args.fixedPrior, nonlin=args.nonlin)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(torch.cuda.device_count())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_317": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model.module",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_328": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_158": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_159": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_284": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adamax_330": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_332": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "args.nesterov",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_165": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataloader",
                            "variable"
                        ]
                    ]
                }
            },
            "device_count_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/invertible_resnet/matrix_utils.py": {
        "torch": {
            "sum_21": {
                "variable": {
                    "value": "outVector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Fx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fx",
                            "Method Argument"
                        ],
                        [
                            "Fx",
                            "Method Argument"
                        ],
                        [
                            "Fx",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_24": {
                "variable": {
                    "value": "jac",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[bs, outdim, indim[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_49": {
                "variable": {
                    "value": "summand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "jacPower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jac",
                            "variable"
                        ],
                        [
                            "torch.matmul(jacPower, jac)",
                            "Call"
                        ]
                    ]
                }
            },
            "diagonal_57": {
                "variable": {
                    "value": "trace",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "summand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(jacPower)",
                            "Call"
                        ],
                        [
                            "summand - jacPower / np.float(i)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(vjp4D, u4D)",
                            "Call"
                        ]
                    ]
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim2": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_57": {
                "variable": {
                    "value": "trace",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_76": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(outSum.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_101": {
                "variable": {
                    "value": "outVector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_103": {
                "variable": {
                    "value": "jac",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.autograd.grad(outVector[i], inputs, retain_graph=True, create_graph=True)[0].view(batch_size, outdim) for i in range(outdim)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_105": {
                "variable": {
                    "value": "log_det",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[log_det_fn(jac[i, :, :]) for i in range(batch_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_85": {
                "variable": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u",
                            "variable"
                        ],
                        [
                            "[torch.autograd.grad(Fx, x, grad_outputs=vectors[:, i], retain_graph=True, create_graph=True)[0] for i in range(n)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(vectors, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_88": {
                "variable": {
                    "value": "summand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vjp4D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vectors.view(x.size(0), n, 1, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "u4D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u.view(x.size(0), n, -1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_110": {
                "input": {
                    "value": "x[0, 0] * x[1, 1] - x[0, 1] * x[1, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logdet_114": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_52": {
                "variable": {
                    "value": "jacPower",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "jacPower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jac",
                            "variable"
                        ],
                        [
                            "torch.matmul(jacPower, jac)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "jac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty([bs, outdim, indim[1]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "jac.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "compute_log_det(x, Fx)",
                            "Call"
                        ],
                        [
                            "torch.stack([torch.autograd.grad(outVector[i], inputs, retain_graph=True, create_graph=True)[0].view(batch_size, outdim) for i in range(outdim)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_82": {
                "outputs": {
                    "value": "Fx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fx",
                            "Method Argument"
                        ],
                        [
                            "Fx",
                            "Method Argument"
                        ],
                        [
                            "Fx",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "vectors[:, i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "u",
                            "variable"
                        ],
                        [
                            "[torch.autograd.grad(Fx, x, grad_outputs=vectors[:, i], retain_graph=True, create_graph=True)[0] for i in range(n)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(vectors, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_28": {
                "outputs": {
                    "value": "outVector[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_103": {
                "outputs": {
                    "value": "outVector[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/invertible_resnet/models/conv_iResNet.py": {
        "torch": {
            "Uniform_49": {
                "variable": {
                    "value": "base_distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "torch.zeros_like(loc)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "torch.ones_like(loc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TransformedDistribution_51": {
                "variable": {
                    "value": "logistic",
                    "type": "variable",
                    "possible_values": []
                },
                "base_distribution": {
                    "value": "base_distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distributions.Uniform(0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "distributions.Uniform(torch.zeros_like(loc), torch.ones_like(loc))",
                            "Call"
                        ]
                    ]
                },
                "transforms": {
                    "value": "transforms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[LogisticTransform(), distributions.AffineTransform(loc=loc, scale=scale)]",
                            "List"
                        ]
                    ]
                }
            },
            "Uniform_637": {
                "variable": {
                    "value": "base_distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "high": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "TransformedDistribution_639": {
                "variable": {
                    "value": "logistic_1",
                    "type": "variable",
                    "possible_values": []
                },
                "base_distribution": {
                    "value": "base_distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distributions.Uniform(0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "distributions.Uniform(torch.zeros_like(loc), torch.ones_like(loc))",
                            "Call"
                        ]
                    ]
                },
                "transforms": {
                    "value": "transforms_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[distributions.SigmoidTransform().inv, distributions.AffineTransform(loc=loc, scale=scale)]",
                            "List"
                        ]
                    ]
                }
            },
            "TransformedDistribution_642": {
                "variable": {
                    "value": "logistic_2",
                    "type": "variable",
                    "possible_values": []
                },
                "base_distribution": {
                    "value": "base_distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distributions.Uniform(0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "distributions.Uniform(torch.zeros_like(loc), torch.ones_like(loc))",
                            "Call"
                        ]
                    ]
                },
                "transforms": {
                    "value": "transforms_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[LogisticTransform(), distributions.AffineTransform(loc=loc, scale=scale)]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_644": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_653": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, channels, h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.bottleneck_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_191": {
                "variable": {
                    "value": "block_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_210": {
                "variable": {
                    "value": "trace",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "traces[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_291": {
                "variable": {
                    "value": "blocks",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_308": {
                "variable": {
                    "value": "self.prior_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((dim,)).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "learn_prior",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "learn_prior",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "learn_prior",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_309": {
                "variable": {
                    "value": "self.prior_logstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((dim,)).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "learn_prior",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "learn_prior",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "learn_prior",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_319": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_320": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "resnet(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(z))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size(2))",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn1(z), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size(2))",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_462": {
                "variable": {
                    "value": "self.prior_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((dim,)).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "learn_prior",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "learn_prior",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "learn_prior",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_463": {
                "variable": {
                    "value": "self.prior_logstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((dim,)).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "learn_prior",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "learn_prior",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "learn_prior",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "leaky_relu_479": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(z)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "avg_pool2d_481": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "resnet(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(z))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size(2))",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn1(z), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size(2))",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_494": {
                "variable": {
                    "value": "block_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_41": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fx + x",
                            "BinOp"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_48": {
                "input": {
                    "value": "log_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_scale",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_49": {
                "input": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "loc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_49": {
                "input": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "loc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AffineTransform_50": {
                "loc": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "loc",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "torch.exp(log_scale) + 1e-05",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_127": {
                "variable": {
                    "value": "trace",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_315": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "final_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_316": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "final_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nClasses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "nClasses",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "nClasses",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Normal_325": {
                "loc": {
                    "value": "self.prior_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.exp(self.prior_logstd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_355": {
                "variable": {
                    "value": "tmp_trace",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "traces[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_361": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "zs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[z.view(bs, -1) for z in zs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_469": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "final_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_470": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "final_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nClasses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "nClasses",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "nClasses",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Normal_486": {
                "loc": {
                    "value": "self.prior_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.exp(self.prior_logstd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_575": {
                "variable": {
                    "value": "tmp_trace",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "traces[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "AffineTransform_638": {
                "loc": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "loc",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "torch.exp(log_scale) + 1e-05",
                            "BinOp"
                        ]
                    ]
                }
            },
            "AffineTransform_641": {
                "loc": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "loc",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "torch.exp(log_scale) + 1e-05",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softplus_44": {
                "input": {
                    "value": "-y",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_308": {
                "*size": {
                    "value": "(dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_309": {
                "*size": {
                    "value": "(dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_325": {
                "input": {
                    "value": "self.prior_logstd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_372": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_408": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_462": {
                "*size": {
                    "value": "(dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_463": {
                "*size": {
                    "value": "(dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_486": {
                "input": {
                    "value": "self.prior_logstd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_590": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_604": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SigmoidTransform_638": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch * stride ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "in_channels": {
                    "value": "int_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "int_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch * stride ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/invertible_resnet/models/density_modeling_utils.py": {
        "torch": {
            "Parameter_24": {
                "variable": {
                    "value": "self.param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.shape[0], np.prod(self.shape[1:]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.param).view(x.size()[0], self.shape[1], self.shape[2], self.shape[3])",
                            "Call"
                        ],
                        [
                            "x + self.param",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.01 * torch.randn(shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "masked_select_69": {
                "variable": {
                    "value": "p_x_given_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_x_given_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(x.shape[0], self.n_classes).cuda()",
                            "Call"
                        ],
                        [
                            "p_x_given_class",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "labels_onehot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indexes_to_one_hot(labels.cpu(), n_classes).byte().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_70": {
                "variable": {
                    "value": "p_y_given_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_class_given_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax(p_x_given_class)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "labels_onehot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indexes_to_one_hot(labels.cpu(), n_classes).byte().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_74": {
                "variable": {
                    "value": "p_y_given_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logmeanexp(p_x_given_class, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_102": {
                "variable": {
                    "value": "mean_and_logsd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros_like(x) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_103": {
                "variable": {
                    "value": "(mean, logsd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_and_logsd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.zeros_like(x) for _ in range(2)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cuda.FloatTensor(bs, 2 * c, h, w).fill_(0.0)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros_like(x) for _ in range(2)], dim=1)",
                            "Call"
                        ],
                        [
                            "self.prior_f[i](mean_and_logsd)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros(shape) for _ in range(2)], dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "self.prior_f[i](mean_and_logsd)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_137": {
                "variable": {
                    "value": "(mean, logsd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_and_logsd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.zeros_like(x) for _ in range(2)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cuda.FloatTensor(bs, 2 * c, h, w).fill_(0.0)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros_like(x) for _ in range(2)], dim=1)",
                            "Call"
                        ],
                        [
                            "self.prior_f[i](mean_and_logsd)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros(shape) for _ in range(2)], dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "self.prior_f[i](mean_and_logsd)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softplus_156": {
                "variable": {
                    "value": "self.softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_164": {
                "variable": {
                    "value": "p_x_given_class",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "variable": {
                    "value": "samples_",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape + [self.n_classes]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_151": {
                "variable": {
                    "value": "self.prior_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Conv2dZeroInit(2 * input_shape[1], 2 * input_shape[1], 3, padding=(3 - 1) // 2) for i in range(self.n_classes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "mean_and_logsd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros_like(x) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_168": {
                "variable": {
                    "value": "(mean_, logsd_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_and_logsd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.zeros_like(x) for _ in range(2)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cuda.FloatTensor(bs, 2 * c, h, w).fill_(0.0)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros_like(x) for _ in range(2)], dim=1)",
                            "Call"
                        ],
                        [
                            "self.prior_f[i](mean_and_logsd)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros(shape) for _ in range(2)], dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "self.prior_f[i](mean_and_logsd)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "mean_and_logsd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(shape) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_185": {
                "variable": {
                    "value": "(mean_, logsd_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_and_logsd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.zeros_like(x) for _ in range(2)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cuda.FloatTensor(bs, 2 * c, h, w).fill_(0.0)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros_like(x) for _ in range(2)], dim=1)",
                            "Call"
                        ],
                        [
                            "self.prior_f[i](mean_and_logsd)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros(shape) for _ in range(2)], dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "self.prior_f[i](mean_and_logsd)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_196": {
                "variable": {
                    "value": "samples_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(shape + [self.n_classes])",
                            "Call"
                        ],
                        [
                            "torch.gather(samples_, 4, labels_)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "labels_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.cpu().view(-1, 1, 1, 1, 1).repeat(1, shape[1], shape[2], shape[3], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "self.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "np.prod(self.shape[1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_45": {
                "data": {
                    "value": "torch.zeros(channels_out, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_54": {
                "input": {
                    "value": "self.logs * self.logscale_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_123": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(mean_and_logsd, 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.chunk(mean_and_logsd, 2, dim=1)",
                            "Call"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_153": {
                "variable": {
                    "value": "self.prior_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MeanVarFC(input_shape) for i in range(self.n_classes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_155": {
                "variable": {
                    "value": "self.prior_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[IdentityFunc() for i in range(self.n_classes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "randn_36": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "list(self.input_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_45": {
                "*size": {
                    "value": "channels_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels_out",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_102": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.param).view(x.size()[0], self.shape[1], self.shape[2], self.shape[3])",
                            "Call"
                        ],
                        [
                            "x + self.param",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_166": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.param).view(x.size()[0], self.shape[1], self.shape[2], self.shape[3])",
                            "Call"
                        ],
                        [
                            "x + self.param",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_124": {
                "input": {
                    "value": "logsd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(mean_and_logsd, 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.chunk(mean_and_logsd, 2, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "logsd",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_119": {
                "input": {
                    "value": "logsd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(mean_and_logsd, 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.chunk(mean_and_logsd, 2, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "logsd",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_183": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "list(self.input_shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/invertible_resnet/models/model_utils.py": {
        "torch": {
            "randn_252": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, num_channels, h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_261": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AN(x)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_261": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_262": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AN(x)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_262": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_21": {
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ZeroPad2d_28": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 0, pad_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_69": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[t_t.contiguous().view(batch_size, d_height, s_width, s_depth) for t_t in spl]",
                            "ListComp"
                        ],
                        [
                            "[t_t.contiguous().view(batch_size, d_height, d_depth) for t_t in t_1]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_69": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_69": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_80": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[t_t.contiguous().view(batch_size, d_height, s_width, s_depth) for t_t in spl]",
                            "ListComp"
                        ],
                        [
                            "[t_t.contiguous().view(batch_size, d_height, d_depth) for t_t in t_1]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_138": {
                "variable": {
                    "value": "self._log_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_139": {
                "variable": {
                    "value": "self._shift",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_174": {
                "variable": {
                    "value": "self._log_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_175": {
                "variable": {
                    "value": "self._shift",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_214": {
                "variable": {
                    "value": "maxmin",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(maxes, mins)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_50": {
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_238": {
                "input": {
                    "value": "x.view(*size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_244": {
                "input": {
                    "value": "x.view(*size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_153": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((batch_size, num_channels, h, w))",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_153": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_155": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_mean ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_155": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_157": {
                "variable": {
                    "value": "log_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 / std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_166": {
                "input": {
                    "value": "-self.log_scale()",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_189": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((batch_size, num_channels, h, w))",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_189": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_191": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_mean ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_191": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_193": {
                "variable": {
                    "value": "log_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 / std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_202": {
                "input": {
                    "value": "-self.log_scale()",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_158": {
                "input": {
                    "value": "log_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_scale",
                            "Call"
                        ],
                        [
                            "self.log_scale()",
                            "Call"
                        ],
                        [
                            "torch.log(1.0 / std)",
                            "Call"
                        ],
                        [
                            "log_scale",
                            "Call"
                        ],
                        [
                            "self.log_scale()",
                            "Call"
                        ],
                        [
                            "torch.log(1.0 / std)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_163": {
                "input": {
                    "value": "log_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_scale",
                            "Call"
                        ],
                        [
                            "self.log_scale()",
                            "Call"
                        ],
                        [
                            "torch.log(1.0 / std)",
                            "Call"
                        ],
                        [
                            "log_scale",
                            "Call"
                        ],
                        [
                            "self.log_scale()",
                            "Call"
                        ],
                        [
                            "torch.log(1.0 / std)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_194": {
                "input": {
                    "value": "log_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_scale",
                            "Call"
                        ],
                        [
                            "self.log_scale()",
                            "Call"
                        ],
                        [
                            "torch.log(1.0 / std)",
                            "Call"
                        ],
                        [
                            "log_scale",
                            "Call"
                        ],
                        [
                            "self.log_scale()",
                            "Call"
                        ],
                        [
                            "torch.log(1.0 / std)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_199": {
                "input": {
                    "value": "log_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_scale",
                            "Call"
                        ],
                        [
                            "self.log_scale()",
                            "Call"
                        ],
                        [
                            "torch.log(1.0 / std)",
                            "Call"
                        ],
                        [
                            "log_scale",
                            "Call"
                        ],
                        [
                            "self.log_scale()",
                            "Call"
                        ],
                        [
                            "torch.log(1.0 / std)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/invertible_resnet/models/utils.py": {
        "torch": {
            "Softmax_134": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_128": {
                "variable": {
                    "value": "(s, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.view(-1)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_30": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_31": {
                "obj": {
                    "value": "optim.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, 'optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "one_hots",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "indexes.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes if n_classes is not None else int(torch.max(indexes)) + 1",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "one_hots",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "indexes.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes if n_classes is not None else int(torch.max(indexes)) + 1",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "masked_select_142": {
                "variable": {
                    "value": "p_x_given_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_x_given_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_x_given_class",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "labels_onehot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indexes_to_one_hot(labels.cpu(), n_classes).byte().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_143": {
                "variable": {
                    "value": "p_y_given_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_class_given_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax(p_x_given_class)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "labels_onehot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indexes_to_one_hot(labels.cpu(), n_classes).byte().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_147": {
                "variable": {
                    "value": "p_y_given_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logmeanexp(p_x_given_class, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_83": {
                "variable": {
                    "value": "unif",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand(size=mu.shape) - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-0.5 + eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.5 - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_37": {
                "f": {
                    "value": "os.path.join(args.load_dir, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_38": {
                "f": {
                    "value": "os.path.join(args.load_dir, 'optim.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_103": {
                "input": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indexes.type(torch.int64).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "indexes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_64": {
                "input": {
                    "value": "logsd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logsd",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_84": {
                "input": {
                    "value": "1 - 2.0 * torch.abs(unif)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_94": {
                "input": {
                    "value": "1 + x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_60": {
                "input": {
                    "value": "2.0 * logsd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_79": {
                "input": {
                    "value": "(x - mu) / torch.exp(log_b)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_84": {
                "input": {
                    "value": "log_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sign_84": {
                "input": {
                    "value": "unif",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(torch.rand(size=mu.shape) - 0.5, min=-0.5 + eps, max=0.5 - eps).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_83": {
                "size": {
                    "value": "mu.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_79": {
                "input": {
                    "value": "log_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_84": {
                "input": {
                    "value": "unif",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(torch.rand(size=mu.shape) - 0.5, min=-0.5 + eps, max=0.5 - eps).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/invertible_resnet/models/utils_cifar.py": {
        "torch": {
            "CrossEntropyLoss_21": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_356": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_62": {
                "variable": {
                    "value": "imc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_331": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_182": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_237": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_256": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model if use_cuda else model, 'objective': objective, 'epoch': epoch}",
                            "Dict"
                        ],
                        [
                            "{'model': model if use_cuda else model, 'acc': acc, 'epoch': epoch}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.save_dir, 'checkpoint.t7')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_352": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model if use_cuda else model, 'objective': objective, 'epoch': epoch}",
                            "Dict"
                        ],
                        [
                            "{'model': model if use_cuda else model, 'acc': acc, 'epoch': epoch}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_point + fname + '.t7'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_305": {
                "data": {
                    "value": "convKernelClipped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.transpose(convKernelClippedfull[:kernelSize1, :kernelSize2])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_307": {
                "data": {
                    "value": "convKernelClipped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.transpose(convKernelClippedfull[:kernelSize1, :kernelSize2])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_176": {
                "variable": {
                    "value": "prior_scales_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.state_dict()['module.prior_logstd']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_177": {
                "variable": {
                    "value": "prior_scales_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.state_dict()['module.prior_logstd']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_162": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.state_dict()[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_163": {
                "variable": {
                    "value": "scale_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.state_dict()[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_164": {
                "variable": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.state_dict()[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/invertible_resnet/spectral_norm_conv_inplace.py": {
        "torch": {
            "conv2d_89": {
                "variable": {
                    "value": "weight_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v.view(self.input_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_orig')",
                            "Call"
                        ],
                        [
                            "weight / (factorReverse + 1e-05)",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(module, do_power_iteration=False)",
                            "Call"
                        ],
                        [
                            "module._parameters[name]",
                            "Subscript"
                        ],
                        [
                            "state_dict.pop(prefix + fn.name)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.stride",
                            "Attribute"
                        ],
                        [
                            "module.stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.padding",
                            "Attribute"
                        ],
                        [
                            "module.padding",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "dot_92": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "weight_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(v.view(self.input_dim), weight, stride=stride, padding=padding, bias=None)",
                            "Call"
                        ],
                        [
                            "weight_v.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_94": {
                "variable": {
                    "value": "factorReverse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(1).to(weight.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_127": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn(num_input_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "fn.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_133": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v.view(input_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_orig')",
                            "Call"
                        ],
                        [
                            "weight / (factorReverse + 1e-05)",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(module, do_power_iteration=False)",
                            "Call"
                        ],
                        [
                            "module._parameters[name]",
                            "Subscript"
                        ],
                        [
                            "state_dict.pop(prefix + fn.name)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.stride",
                            "Attribute"
                        ],
                        [
                            "module.stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.padding",
                            "Attribute"
                        ],
                        [
                            "module.padding",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "normalize_138": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn(num_output_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "fn.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_94": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_109": {
                "data": {
                    "value": "weight.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_147": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv_transpose2d_77": {
                "variable": {
                    "value": "v_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u.view(self.out_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_orig')",
                            "Call"
                        ],
                        [
                            "weight / (factorReverse + 1e-05)",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(module, do_power_iteration=False)",
                            "Call"
                        ],
                        [
                            "module._parameters[name]",
                            "Subscript"
                        ],
                        [
                            "state_dict.pop(prefix + fn.name)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.stride",
                            "Attribute"
                        ],
                        [
                            "module.stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.padding",
                            "Attribute"
                        ],
                        [
                            "module.padding",
                            "Attribute"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_80": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_s.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_v')",
                            "Call"
                        ],
                        [
                            "normalize(v_s.view(-1), dim=0, eps=self.eps, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "normalize(torch.randn(num_input_dim), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_82": {
                "variable": {
                    "value": "u_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v.view(self.input_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_orig')",
                            "Call"
                        ],
                        [
                            "weight / (factorReverse + 1e-05)",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(module, do_power_iteration=False)",
                            "Call"
                        ],
                        [
                            "module._parameters[name]",
                            "Subscript"
                        ],
                        [
                            "state_dict.pop(prefix + fn.name)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.stride",
                            "Attribute"
                        ],
                        [
                            "module.stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.padding",
                            "Attribute"
                        ],
                        [
                            "module.padding",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "normalize_84": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_s.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "normalize(u_s.view(-1), dim=0, eps=self.eps, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "conv2d(v.view(input_dim), weight, stride=stride, padding=padding, bias=None)",
                            "Call"
                        ],
                        [
                            "normalize(torch.randn(num_output_dim), dim=0, eps=fn.eps)",
                            "Call"
                        ],
                        [
                            "state_dict[prefix + fn.name + '_u']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randn_127": {
                "*size": {
                    "value": "num_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim[0] * input_dim[1] * input_dim[2] * input_dim[3]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_138": {
                "*size": {
                    "value": "num_output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn.out_shape[0] * fn.out_shape[1] * fn.out_shape[2] * fn.out_shape[3]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/invertible_resnet/spectral_norm_fc.py": {
        "torch": {
            "dot_91": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "normalize(torch.mv(weight_mat, v), dim=0, eps=self.eps, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(h).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ],
                        [
                            "state_dict[prefix + fn.name + '_u']",
                            "Subscript"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.mv(weight_mat, v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_93": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(1).to(weight.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "chain_matmul_117": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "*matrices": {
                    "value": "weight_mat.t().mm(weight_mat).pinverse()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "weight_mat.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_117": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_135": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.new_empty(h).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "fn.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_136": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.new_empty(w).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "fn.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_91": {
                "input": {
                    "value": "weight_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "variable"
                        ],
                        [
                            "weight_mat.permute(self.dim, *[d for d in range(weight_mat.dim()) if d != self.dim])",
                            "Call"
                        ],
                        [
                            "self.reshape_weight_to_matrix(weight)",
                            "Call"
                        ],
                        [
                            "fn.reshape_weight_to_matrix(weight)",
                            "Call"
                        ],
                        [
                            "fn.reshape_weight_to_matrix(weight_orig)",
                            "Call"
                        ],
                        [
                            "weight_mat",
                            "Method Argument"
                        ]
                    ]
                },
                "vec": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_v')",
                            "Call"
                        ],
                        [
                            "normalize(torch.mv(weight_mat.t(), u), dim=0, eps=self.eps, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "torch.chain_matmul(weight_mat.t().mm(weight_mat).pinverse(), weight_mat.t(), u.unsqueeze(1)).squeeze(1)",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(w).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ],
                        [
                            "fn._solve_v_and_rescale(weight_mat, u, sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_93": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_108": {
                "data": {
                    "value": "weight.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_148": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_84": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mv(weight_mat.t(), u)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_v')",
                            "Call"
                        ],
                        [
                            "normalize(torch.mv(weight_mat.t(), u), dim=0, eps=self.eps, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "torch.chain_matmul(weight_mat.t().mm(weight_mat).pinverse(), weight_mat.t(), u.unsqueeze(1)).squeeze(1)",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(w).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ],
                        [
                            "fn._solve_v_and_rescale(weight_mat, u, sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_85": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mv(weight_mat, v)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "normalize(torch.mv(weight_mat, v), dim=0, eps=self.eps, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(h).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ],
                        [
                            "state_dict[prefix + fn.name + '_u']",
                            "Subscript"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dot_118": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "normalize(torch.mv(weight_mat, v), dim=0, eps=self.eps, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(h).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ],
                        [
                            "state_dict[prefix + fn.name + '_u']",
                            "Subscript"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.mv(weight_mat, v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mv_118": {
                "input": {
                    "value": "weight_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "variable"
                        ],
                        [
                            "weight_mat.permute(self.dim, *[d for d in range(weight_mat.dim()) if d != self.dim])",
                            "Call"
                        ],
                        [
                            "self.reshape_weight_to_matrix(weight)",
                            "Call"
                        ],
                        [
                            "fn.reshape_weight_to_matrix(weight)",
                            "Call"
                        ],
                        [
                            "fn.reshape_weight_to_matrix(weight_orig)",
                            "Call"
                        ],
                        [
                            "weight_mat",
                            "Method Argument"
                        ]
                    ]
                },
                "vec": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_v')",
                            "Call"
                        ],
                        [
                            "normalize(torch.mv(weight_mat.t(), u), dim=0, eps=self.eps, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "torch.chain_matmul(weight_mat.t().mm(weight_mat).pinverse(), weight_mat.t(), u.unsqueeze(1)).squeeze(1)",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(w).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ],
                        [
                            "fn._solve_v_and_rescale(weight_mat, u, sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_84": {
                "input": {
                    "value": "weight_mat.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "normalize(torch.mv(weight_mat, v), dim=0, eps=self.eps, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(h).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ],
                        [
                            "state_dict[prefix + fn.name + '_u']",
                            "Subscript"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mv_85": {
                "input": {
                    "value": "weight_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "variable"
                        ],
                        [
                            "weight_mat.permute(self.dim, *[d for d in range(weight_mat.dim()) if d != self.dim])",
                            "Call"
                        ],
                        [
                            "self.reshape_weight_to_matrix(weight)",
                            "Call"
                        ],
                        [
                            "fn.reshape_weight_to_matrix(weight)",
                            "Call"
                        ],
                        [
                            "fn.reshape_weight_to_matrix(weight_orig)",
                            "Call"
                        ],
                        [
                            "weight_mat",
                            "Method Argument"
                        ]
                    ]
                },
                "vec": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_v')",
                            "Call"
                        ],
                        [
                            "normalize(torch.mv(weight_mat.t(), u), dim=0, eps=self.eps, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "torch.chain_matmul(weight_mat.t().mm(weight_mat).pinverse(), weight_mat.t(), u.unsqueeze(1)).squeeze(1)",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(w).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ],
                        [
                            "fn._solve_v_and_rescale(weight_mat, u, sigma)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/models.py": {
        "torch": {
            "normalize_30": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.contrastive_head(self.backbone(x))",
                            "Call"
                        ],
                        [
                            "F.normalize(features, dim=1)",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_42": {
                "variable": {
                    "value": "self.cluster_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(self.backbone_dim, nclusters) for _ in range(self.nheads)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.contrastive_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.backbone_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "features_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.contrastive_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.backbone_dim, self.backbone_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "self.backbone_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nclusters",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "self.backbone_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.backbone_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "self.backbone_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "features_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "seeded_sampler.py": {
        "torch": {
            "DataParallel_111": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_models(self.config)",
                            "Call"
                        ],
                        [
                            "generator.to(self.device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "build_models(self.config)",
                            "Call"
                        ],
                        [
                            "generator.to(self.device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_304": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_models(self.config)",
                            "Call"
                        ],
                        [
                            "generator.to(self.device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "build_models(self.config)",
                            "Call"
                        ],
                        [
                            "generator.to(self.device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_225": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.yz_dist(seeds)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor([yi]).to(self.device)",
                            "Call"
                        ],
                        [
                            "self.yz_dist(seeds)",
                            "Call"
                        ],
                        [
                            "self.yz_dist(seeds)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor([yi]).to(self.device)",
                            "Call"
                        ],
                        [
                            "self.yz_dist(seeds)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "seeing/frechet_distance.py": {
        "torch": {}
    },
    "seeing/fsd.py": {
        "torch": {
            "DataLoader_101": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parallelfolder.ParallelImageFolders([directory], transform=transforms.Compose([transforms.Resize(256), transforms.CenterCrop(256), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "TensorDataset(images)",
                            "Call"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "FixedRandomSubsetSampler(dataset, end=size, seed=seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "batch_result",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "loader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "NUM_OBJECTS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "336",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_128": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parallelfolder.ParallelImageFolders([directory], transform=transforms.Compose([transforms.Resize(256), transforms.CenterCrop(256), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "TensorDataset(images)",
                            "Call"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "FixedRandomSubsetSampler(dataset, end=size)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "batch_result",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "loader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "NUM_OBJECTS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "336",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_154": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "zds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zdataset.z_dataset_for_model(model, size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "variable": {
                    "value": "batch_result",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "loader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "NUM_OBJECTS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "336",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_91": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_86": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "f['fake']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_89": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(f['fake'])",
                            "Call"
                        ],
                        [
                            "images.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "images / 127.5 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.interpolate(images, size=(256, 256))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "seeing/parallelfolder.py": {
        "torch": {}
    },
    "seeing/sampler.py": {
        "torch": {}
    },
    "seeing/segmenter.py": {
        "torch": {
            "bincount_236": {
                "variable": {
                    "value": "bc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flip_123": {
                "variable": {
                    "value": "tensor_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tensor_images + 1) / 2 * 255",
                            "BinOp"
                        ],
                        [
                            "torch.flip(tensor_images, (1,))",
                            "Call"
                        ],
                        [
                            "tensor_images - torch.tensor([102.9801, 115.9465, 122.7717]).to(dtype=tensor_images.dtype, device=tensor_images.device)[None, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "tensor_images",
                            "Method Argument"
                        ],
                        [
                            "tensor_images",
                            "Method Argument"
                        ],
                        [
                            "tensor_images",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_166": {
                "variable": {
                    "value": "segs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(tensor_images)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "seg_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor_images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_169": {
                "variable": {
                    "value": "(_, segs[:, 0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred['object']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_171": {
                "variable": {
                    "value": "(_, segs[:, 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred['material']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "data": {
                    "value": "[102.9801, 115.9465, 122.7717]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "*size": {
                    "value": "len(tensor_images)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "len(self.segmodel.labeldata[category])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "seg_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "seg_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "*size": {
                    "value": "len(tensor_images)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "len(partindex)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "seg_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "seg_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "data": {
                    "value": "numeric_part_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_142": {
                "output_size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sizes",
                            "variable"
                        ]
                    ]
                }
            },
            "max_179": {
                "input": {
                    "value": "part_pred[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_232": {
                "ndarray": {
                    "value": "numpy.asarray(testim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_232": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "seeing/upsegmodel/models.py": {
        "torch": {
            "max_18": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(pred_part, dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder(self.encoder(feed_dict['img'], return_feature_maps=True), output_switch=output_switch, seg_size=seg_size)",
                            "Call"
                        ],
                        [
                            "self.decoder(self.encoder(feed_dict['img'], return_feature_maps=True), output_switch=output_switch)",
                            "Call"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_20": {
                "variable": {
                    "value": "acc_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid * (preds == label).long()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_21": {
                "variable": {
                    "value": "pixel_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(label != ignore_index).long()",
                            "Call"
                        ],
                        [
                            "valid",
                            "Method Argument"
                        ],
                        [
                            "valid",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_28": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_part",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_part",
                            "Method Argument"
                        ],
                        [
                            "pred_part",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_30": {
                "variable": {
                    "value": "acc_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc_sum.view(acc_sum.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_31": {
                "variable": {
                    "value": "acc_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc_sum * valid",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_32": {
                "variable": {
                    "value": "pixel_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_object.view(mask_object.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_33": {
                "variable": {
                    "value": "pixel_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pixel_sum * valid",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nll_loss_39": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_part",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_part",
                            "Method Argument"
                        ],
                        [
                            "pred_part",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "gt_seg_part * mask_object.long()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_41": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss.view(loss.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_42": {
                "variable": {
                    "value": "nr_pixel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_object.view(mask_object.shape[0], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleDict_53": {
                "variable": {
                    "value": "self.crit_dict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_60": {
                "variable": {
                    "value": "self.crit_dict[object]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_61": {
                "variable": {
                    "value": "self.crit_dict[material]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_62": {
                "variable": {
                    "value": "self.crit_dict[scene]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_143": {
                "*args": {
                    "value": "conv3x3(in_planes, out_planes, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_273": {
                "variable": {
                    "value": "self.ppm_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.ppm_pooling",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_274": {
                "variable": {
                    "value": "self.ppm_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.ppm_conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_285": {
                "variable": {
                    "value": "self.fpn_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.fpn_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_292": {
                "variable": {
                    "value": "self.fpn_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.fpn_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_301": {
                "variable": {
                    "value": "self.scene_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3_bn_relu(fpn_dim, fpn_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_308": {
                "variable": {
                    "value": "self.object_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3_bn_relu(fpn_dim, fpn_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_314": {
                "variable": {
                    "value": "self.part_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3_bn_relu(fpn_dim, fpn_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_320": {
                "variable": {
                    "value": "self.material_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3_bn_relu(fpn_dim, fpn_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_335": {
                "variable": {
                    "value": "roi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "roi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(roi, dim=0).type_as(conv5)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_342": {
                "variable": {
                    "value": "ppm_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ppm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_146": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_385": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "output_dict['scene']",
                            "Subscript"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict['part']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "output_dict['part'][:, head:head + n_part]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_fusion(fusion_out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_397": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "output_dict['scene']",
                            "Subscript"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict['part']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "output_dict['part'][:, head:head + n_part]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_fusion(fusion_out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "seg_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_44": {
                "input": {
                    "value": "sum_pixel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nr_pixel * valid).sum()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_303": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_304": {
                "in_channels": {
                    "value": "fpn_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.nr_scene_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_310": {
                "in_channels": {
                    "value": "fpn_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.nr_object_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_316": {
                "in_channels": {
                    "value": "fpn_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.nr_part_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_322": {
                "in_channels": {
                    "value": "fpn_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.nr_material_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_354": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ppm_last_conv(ppm_out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(f, size=conv_x.size()[2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "conv_x + f",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "conv_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_373": {
                "variable": {
                    "value": "fusion_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fusion_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[fpn_feature_list[0]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_391": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "output_dict['scene']",
                            "Subscript"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict['part']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "output_dict['part'][:, head:head + n_part]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_fusion(fusion_out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "seg_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_392": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "output_dict['scene']",
                            "Subscript"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict['part']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "output_dict['part'][:, head:head + n_part]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_fusion(fusion_out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_401": {
                "variable": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, head:head + n_part]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "seg_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_402": {
                "variable": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x[:, head:head + n_part], size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(_x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_413": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "output_dict['scene']",
                            "Subscript"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict['part']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "output_dict['part'][:, head:head + n_part]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_fusion(fusion_out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_184": {
                "f": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_209": {
                "f": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Sequential_268": {
                "*args": {
                    "value": "nn.Conv2d(fc_dim, 512, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_280": {
                "*args": {
                    "value": "nn.Conv2d(fpn_inplane, fpn_dim, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_289": {
                "*args": {
                    "value": "conv3x3_bn_relu(fpn_dim, fpn_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_422": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "output_dict['scene']",
                            "Subscript"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict['part']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "output_dict['part'][:, head:head + n_part]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_fusion(fusion_out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_269": {
                "in_channels": {
                    "value": "fc_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "4096",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_271": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_281": {
                "in_channels": {
                    "value": "fpn_inplane",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fpn_inplanes[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fpn_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_283": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_338": {
                "input": {
                    "value": "pool_scale(conv5, roi.detach())",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size[2], input_size[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_369": {
                "input": {
                    "value": "fpn_feature_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fpn_feature_list[0].size()[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "seeing/upsegmodel/prroi_pool/build.py": {
        "torch": {
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "seeing/upsegmodel/prroi_pool/functional.py": {
        "torch": {}
    },
    "seeing/upsegmodel/prroi_pool/prroi_pool.py": {
        "torch": {}
    },
    "seeing/upsegmodel/prroi_pool/test_prroi_pooling2d.py": {
        "torch": {
            "rand_23": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(4, 16, 24, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 0, 14, 14], [1, 14, 14, 28, 28]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool2d_30": {
                "variable": {
                    "value": "out_gold",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand((4, 16, 24, 32)).cuda()",
                            "Call"
                        ],
                        [
                            "torch.rand((4, 2, 24, 32)).cuda()",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_40": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(4, 2, 24, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 0, 4, 4], [1, 14, 14, 18, 18]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_32": {
                "tensors": {
                    "value": "(out_gold[0, :, :7, :7], out_gold[1, :, 7:14, 7:14])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "seeing/upsegmodel/resnet.py": {
        "torch": {
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_117": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_123": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_235": {
                "f": {
                    "value": "cached_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_137": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "seeing/upsegmodel/resnext.py": {
        "torch": {
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_85": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_91": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_183": {
                "f": {
                    "value": "cached_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "seeing/yz_dataset.py": {
        "torch": {
            "from_numpy_16": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rng.standard_normal(self.zdim).reshape(1, self.zdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_19": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rng.choice(self.nlabels, 1, replace=False, p=self.distribution)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_24": {
                "tensors": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "seeing/zdataset.py": {
        "torch": {
            "from_numpy_35": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rng.standard_normal(size * depth).reshape(size, depth)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_5": {
                "*tensors": {
                    "value": "z_sample_for_model(model, size, seed)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "sync_batchnorm/batchnorm.py": {
        "torch": {
            "batch_norm_51": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(input.size(0), input.size(1), -1)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rsqrt_158": {
                "input": {
                    "value": "bias_var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "sync_batchnorm/batchnorm_reimpl.py": {
        "torch": {
            "Parameter_33": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_33": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_34": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_36": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "sync_batchnorm/replicate.py": {
        "torch": {}
    },
    "sync_batchnorm/unittest.py": {
        "torch": {
            "allclose_28": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "is_available_46": {
                "variable": {
                    "value": "is_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_69": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if is_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_77": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(name=config['data']['type'], data_dir=config['data']['train_dir'], size=config['data']['img_size'], deterministic=config['data']['deterministic'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config['training']['nworkers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "load_config(args.config, 'configs/default.yaml')",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_101": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_models(config)",
                            "Call"
                        ],
                        [
                            "generator.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator, device_ids=devices)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "devices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(x) for x in args.devices]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "DataParallel_102": {
                "variable": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_models(config)",
                            "Call"
                        ],
                        [
                            "discriminator.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator, device_ids=devices)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "devices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(x) for x in args.devices]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "utils/classifiers/imagenet.py": {
        "torch": {
            "stack_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.trn(xi) for xi in x]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "interpolate_22": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(224, 224)) / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.stack([self.trn(xi) for xi in x]).cuda()",
                            "Call"
                        ],
                        [
                            "self.transform(x)",
                            "Call"
                        ],
                        [
                            "self.transform(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "utils/classifiers/places.py": {
        "torch": {
            "randn_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 128, 128)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_20": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s_places365.pth.tar' % arch",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stack_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.trn(xi) for xi in x]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "interpolate_49": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((2, 3, 128, 128))",
                            "Call"
                        ],
                        [
                            "c.get_predictions(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(224, 224)) / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.stack([self.trn(xi) for xi in x]).cuda()",
                            "Call"
                        ],
                        [
                            "self.transform(x)",
                            "Call"
                        ],
                        [
                            "self.transform(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "utils/classifiers/pytorch_playground/cifar/dataset.py": {
        "torch": {
            "DataLoader_13": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root=data_root, train=True, download=True, transform=transforms.Compose([transforms.Pad(4), transforms.RandomCrop(32), transforms.RandomHorizontalFlip(), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_26": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root=data_root, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_45": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR100(root=data_root, train=True, download=True, transform=transforms.Compose([transforms.Pad(4), transforms.RandomCrop(32), transforms.RandomHorizontalFlip(), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_59": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR100(root=data_root, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/classifiers/pytorch_playground/cifar/model.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(n_channel, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v[0] if isinstance(v, tuple) else v",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v[1] if isinstance(v, tuple) else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "n_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "n_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPool2d_35": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v[0] if isinstance(v, tuple) else v",
                            "IfExp"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/classifiers/pytorch_playground/cifar/train.py": {
        "torch": {
            "is_available_47": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_60": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.cifar10(n_channel=args.channel)",
                            "Call"
                        ],
                        [
                            "model.cifar100(n_channel=args.channel)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=range(args.ngpu))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.ngpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_65": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_48": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_50": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_84": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(target)",
                            "Call"
                        ],
                        [
                            "test_loader",
                            "variable"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(target)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_114": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(target)",
                            "Call"
                        ],
                        [
                            "test_loader",
                            "variable"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(target)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/classifiers/pytorch_playground/quantize.py": {
        "torch": {
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_41": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_42": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/classifiers/pytorch_playground/utee/misc.py": {
        "torch": {
            "DataParallel_177": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.module",
                            "Attribute"
                        ],
                        [
                            "ModelWrapper(model)",
                            "Call"
                        ],
                        [
                            "model.eval()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=range(ngpu)).cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(ngpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_114": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OrderedDict()",
                            "Call"
                        ],
                        [
                            "model_zoo.load_url(model_urls, model_root)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "expand_user(new_file)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/classifiers/pytorch_playground/utee/quant.py": {
        "torch": {
            "floor_26": {
                "variable": {
                    "value": "rounded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input / delta + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_36": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_37": {
                "variable": {
                    "value": "input0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(input) + 1e-20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_47": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_48": {
                "variable": {
                    "value": "input0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(input) + 1e-20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_75": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_180": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clamp_28": {
                "input": {
                    "value": "rounded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor(input / delta + 0.5)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "min_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-bound",
                            "UnaryOp"
                        ],
                        [
                            "input.min()",
                            "Call"
                        ],
                        [
                            "float(min_val.data.cpu().numpy()[0])",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "max_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bound - 1",
                            "BinOp"
                        ],
                        [
                            "input.max()",
                            "Call"
                        ],
                        [
                            "float(max_val.data.cpu().numpy()[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_39": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sorted_value[split_idx]",
                            "Subscript"
                        ],
                        [
                            "float(v.data.cpu())",
                            "Call"
                        ],
                        [
                            "min_max_quantize(input0, bits - 1)",
                            "Call"
                        ],
                        [
                            "torch.exp(v) * s",
                            "BinOp"
                        ],
                        [
                            "linear_quantize(input0, sf, bits - 1)",
                            "Call"
                        ],
                        [
                            "torch.exp(v) * s",
                            "BinOp"
                        ],
                        [
                            "torch.floor(input_rescale * n + 0.5) / n",
                            "BinOp"
                        ],
                        [
                            "v * (max_val - min_val) + min_val",
                            "BinOp"
                        ],
                        [
                            "torch.floor(input_rescale * n + 0.5) / n",
                            "BinOp"
                        ],
                        [
                            "2 * v - 1",
                            "BinOp"
                        ],
                        [
                            "0.5 * torch.log((1 + v) / (1 - v))",
                            "BinOp"
                        ],
                        [
                            "model._modules.items()",
                            "Call"
                        ],
                        [
                            "model._modules.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_50": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sorted_value[split_idx]",
                            "Subscript"
                        ],
                        [
                            "float(v.data.cpu())",
                            "Call"
                        ],
                        [
                            "min_max_quantize(input0, bits - 1)",
                            "Call"
                        ],
                        [
                            "torch.exp(v) * s",
                            "BinOp"
                        ],
                        [
                            "linear_quantize(input0, sf, bits - 1)",
                            "Call"
                        ],
                        [
                            "torch.exp(v) * s",
                            "BinOp"
                        ],
                        [
                            "torch.floor(input_rescale * n + 0.5) / n",
                            "BinOp"
                        ],
                        [
                            "v * (max_val - min_val) + min_val",
                            "BinOp"
                        ],
                        [
                            "torch.floor(input_rescale * n + 0.5) / n",
                            "BinOp"
                        ],
                        [
                            "2 * v - 1",
                            "BinOp"
                        ],
                        [
                            "0.5 * torch.log((1 + v) / (1 - v))",
                            "BinOp"
                        ],
                        [
                            "model._modules.items()",
                            "Call"
                        ],
                        [
                            "model._modules.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_66": {
                "input": {
                    "value": "input_rescale * n + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_74": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "floor_78": {
                "input": {
                    "value": "input_rescale * n + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_81": {
                "input": {
                    "value": "(1 + v) / (1 - v)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_130": {
                "variable": {
                    "value": "log_abs_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_21": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sign_34": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_37": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sign_45": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_48": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sign_56": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_130": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/classifiers/stacked_mnist.py": {
        "torch": {
            "DataLoader_37": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST('data/MNIST', download=True, train=True, transform=transforms.Compose([transforms.Resize(32), transforms.CenterCrop(32), transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "layers[out]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "current_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dims",
                            "variable"
                        ],
                        [
                            "n_hidden",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_79": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "layers[fc{}.format(i + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "current_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dims",
                            "variable"
                        ],
                        [
                            "n_hidden",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_hidden in enumerate(n_hiddens)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_55": {
                "variable": {
                    "value": "layers[relu{}.format(i + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_56": {
                "variable": {
                    "value": "layers[drop{}.format(i + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_94": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "CLASSIFIER_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mnist_model.pt'",
                            "str"
                        ]
                    ]
                }
            },
            "load_73": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_entropy_86": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(input)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_107": {
                "tensors": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/get_gt_imgs.py": {
        "torch": {
            "stack_50": {
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "images[0:nimgs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_56": {
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "images[0:nimgs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_67": {
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "images[0:nimgs]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "utils/np_to_pt_img.py": {
        "torch": {
            "from_numpy_6": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "visualize_clusters.py": {
        "torch": {
            "DataLoader_70": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(name=get_dataset_name, data_dir=config['data']['train_dir'], size=config['data']['img_size'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['training']['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "load_config(args.config, 'configs/default.yaml')",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config['training']['nworkers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "load_config(args.config, 'configs/default.yaml')",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "generated",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "generated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(generated)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_100": {
                "tensors": {
                    "value": "clusters[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}