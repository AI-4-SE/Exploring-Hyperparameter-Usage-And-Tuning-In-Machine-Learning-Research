{
    "archive/datasets.py": {
        "sklearn": {
            "train_test_split_81": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "data[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "rand_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "45",
                            "int"
                        ]
                    ]
                },
                "stratify": {
                    "value": "data[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[x50, y50]",
                            "List"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "tensor_44": {
                "variable": {
                    "value": "ids_review",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ids_review",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tokenizer.convert_tokens_to_ids(tokenized_review)",
                            "Call"
                        ],
                        [
                            "ids_review + padding",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(ids_review)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "mask_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * len(ids_review)",
                            "BinOp"
                        ],
                        [
                            "mask_input + padding",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(mask_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "input_type",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0] * self.max_seq_length",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(input_type)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_49": {
                "ndarray": {
                    "value": "np.array(sentiment)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "archive/train_bert.py": {
        "sklearn": {
            "f1_score_87": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "actual.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_162": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.cuda_device if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_168": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StepLR_170": {
                "variable": {
                    "value": "exp_lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense_opt.get_optim()",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "variable": {
                    "value": "actual",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_157": {
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "text_dataset(x_y_list=test_lists, vocab=args.vocab, vocab_path=args.vocab_path)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "actual",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[actual, torch.max(outputs, 1)[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pred, torch.max(sentiment, 1)[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_69": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_ids, token_type_ids, attention_mask)",
                            "Call"
                        ],
                        [
                            "F.softmax(outputs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_79": {
                "input": {
                    "value": "torch.max(outputs, 1)[1] == torch.max(sentiment, 1)[1]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "save_106": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, '{}.pth'.format(model_type))",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_67": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "max_70": {
                "input": {
                    "value": "sentiment.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_79": {
                "input": {
                    "value": "sentiment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataloaders_dict[phase]",
                            "Subscript"
                        ],
                        [
                            "sentiment.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_80": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_ids, token_type_ids, attention_mask)",
                            "Call"
                        ],
                        [
                            "F.softmax(outputs, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_81": {
                "input": {
                    "value": "sentiment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataloaders_dict[phase]",
                            "Subscript"
                        ],
                        [
                            "sentiment.to(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "archive/bertModel.py": {
        "torch": {
            "Dropout_29": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_46": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': model.bert.parameters(), 'lr': self.lrmain}, {'params': model.classifier.parameters(), 'lr': self.lrlast}]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}