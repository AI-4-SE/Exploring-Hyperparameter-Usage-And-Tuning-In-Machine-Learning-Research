{
    "models/pointSIFT_pointnet.py": {
        "tensorflow": {
            "placeholder_10": {
                "variable": {
                    "value": "pointclouds_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_point, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_11": {
                "variable": {
                    "value": "labels_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_point)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_12": {
                "variable": {
                    "value": "smpws_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_point)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_34": {
                "variable": {
                    "value": "l2_cat_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[c0_l2_points, c1_l2_points]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_45": {
                "variable": {
                    "value": "l2_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[l2_points_1, l2_points_2, l2_points_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_51": {
                "variable": {
                    "value": "l1_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[l1_points_1, l1_points_2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_72": {
                "variable": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "weights": {
                    "value": "smpw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "smpw",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_73": {
                "name": {
                    "value": "classify loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.sparse_softmax_cross_entropy(labels=label, logits=pred, weights=smpw)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_74": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "classify_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.sparse_softmax_cross_entropy(labels=label, logits=pred, weights=smpw)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tf_utils/pointSIFT_util.py": {
        "tensorflow": {
            "constant_196": {
                "variable": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.tile(np.array([0, 0, 0]).reshape((1, 1, 3)), (batch_size, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_198": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.tile(np.array(range(nsample)).reshape((1, 1, nsample)), (batch_size, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_199": {
                "variable": {
                    "value": "grouped_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, 1, nsample, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_18": {
                "input": {
                    "value": "tf.expand_dims(xyz, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 8, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_32": {
                "input": {
                    "value": "tf.expand_dims(xyz, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 8, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_46": {
                "input": {
                    "value": "tf.expand_dims(xyz, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 32, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_60": {
                "input": {
                    "value": "tf.expand_dims(xyz, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 32, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_93": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_fc', bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c0_conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group_with_idx(xyz, idx=idx, points=new_points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(new_points)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c1_conv%d' % i, bn_decay=bn_decay, activation_fn=act, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "new_points + points",
                            "BinOp"
                        ],
                        [
                            "tf.concat([new_points, points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(npoint, radius, nsample, xyz, points, knn, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_108": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_fc', bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c0_conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group_with_idx(xyz, idx=idx, points=new_points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(new_points)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c1_conv%d' % i, bn_decay=bn_decay, activation_fn=act, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "new_points + points",
                            "BinOp"
                        ],
                        [
                            "tf.concat([new_points, points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(npoint, radius, nsample, xyz, points, knn, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_123": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_fc', bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c0_conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group_with_idx(xyz, idx=idx, points=new_points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(new_points)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c1_conv%d' % i, bn_decay=bn_decay, activation_fn=act, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "new_points + points",
                            "BinOp"
                        ],
                        [
                            "tf.concat([new_points, points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(npoint, radius, nsample, xyz, points, knn, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_134": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_fc', bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c0_conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group_with_idx(xyz, idx=idx, points=new_points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(new_points)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c1_conv%d' % i, bn_decay=bn_decay, activation_fn=act, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "new_points + points",
                            "BinOp"
                        ],
                        [
                            "tf.concat([new_points, points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(npoint, radius, nsample, xyz, points, knn, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_169": {
                "input": {
                    "value": "tf.expand_dims(new_xyz, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, nsample, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_205": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_fc', bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c0_conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group_with_idx(xyz, idx=idx, points=new_points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(new_points)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c1_conv%d' % i, bn_decay=bn_decay, activation_fn=act, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "new_points + points",
                            "BinOp"
                        ],
                        [
                            "tf.concat([new_points, points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(npoint, radius, nsample, xyz, points, knn, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_279": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_fc', bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c0_conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group_with_idx(xyz, idx=idx, points=new_points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(new_points)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c1_conv%d' % i, bn_decay=bn_decay, activation_fn=act, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "new_points + points",
                            "BinOp"
                        ],
                        [
                            "tf.concat([new_points, points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(npoint, radius, nsample, xyz, points, knn, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_323": {
                "variable": {
                    "value": "new_points_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "new_points_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "maximum_340": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "three_nn(xyz1, xyz2)",
                            "Call"
                        ],
                        [
                            "tf.maximum(dist, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_341": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1.0 / dist",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_342": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(1.0 / dist, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_350": {
                "variable": {
                    "value": "new_points1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=2, values=[interpolated_points, points1])",
                            "Call"
                        ],
                        [
                            "interpolated_points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points1, 2)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points1, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_%d' % i, bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points1, [2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_356": {
                "variable": {
                    "value": "new_points1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=2, values=[interpolated_points, points1])",
                            "Call"
                        ],
                        [
                            "interpolated_points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points1, 2)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points1, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_%d' % i, bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points1, [2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_18": {
                "input": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_22": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[grouped_xyz, grouped_points]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_32": {
                "input": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_36": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[grouped_xyz, grouped_points]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_46": {
                "input": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_50": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[grouped_xyz, grouped_points]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_60": {
                "input": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_64": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[grouped_xyz, grouped_points]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'point_sift'",
                            "Method Argument"
                        ],
                        [
                            "'point_sift'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_78": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_fc', bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c0_conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group_with_idx(xyz, idx=idx, points=new_points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(new_points)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c1_conv%d' % i, bn_decay=bn_decay, activation_fn=act, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "new_points + points",
                            "BinOp"
                        ],
                        [
                            "tf.concat([new_points, points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(npoint, radius, nsample, xyz, points, knn, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_91": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_fc', bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c0_conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group_with_idx(xyz, idx=idx, points=new_points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(new_points)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c1_conv%d' % i, bn_decay=bn_decay, activation_fn=act, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "new_points + points",
                            "BinOp"
                        ],
                        [
                            "tf.concat([new_points, points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(npoint, radius, nsample, xyz, points, knn, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'point_sift'",
                            "Method Argument"
                        ],
                        [
                            "'point_sift'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_169": {
                "input": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "gather_point(xyz, farthest_point_sample(npoint, xyz))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.tile(np.array([0, 0, 0]).reshape((1, 1, 3)), (batch_size, 1, 1)), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(npoint, radius, nsample, xyz, points, knn, use_xyz)",
                            "Call"
                        ],
                        [
                            "gather_point(xyz, farthest_point_sample(npoint, xyz))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_173": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[grouped_xyz, grouped_points]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_202": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[xyz, points]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_232": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'point_sift'",
                            "Method Argument"
                        ],
                        [
                            "'point_sift'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_241": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_fc', bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c0_conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group_with_idx(xyz, idx=idx, points=new_points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(new_points)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c1_conv%d' % i, bn_decay=bn_decay, activation_fn=act, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "new_points + points",
                            "BinOp"
                        ],
                        [
                            "tf.concat([new_points, points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(npoint, radius, nsample, xyz, points, knn, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_248": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_fc', bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c0_conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group_with_idx(xyz, idx=idx, points=new_points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(new_points)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c1_conv%d' % i, bn_decay=bn_decay, activation_fn=act, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "new_points + points",
                            "BinOp"
                        ],
                        [
                            "tf.concat([new_points, points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(npoint, radius, nsample, xyz, points, knn, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_252": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_fc', bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c0_conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group_with_idx(xyz, idx=idx, points=new_points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(new_points)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c1_conv%d' % i, bn_decay=bn_decay, activation_fn=act, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "new_points + points",
                            "BinOp"
                        ],
                        [
                            "tf.concat([new_points, points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(npoint, radius, nsample, xyz, points, knn, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "maxpool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_300": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'point_sift'",
                            "Method Argument"
                        ],
                        [
                            "'point_sift'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_321": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grouped_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_points, grouped_xyz], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(grouped_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(grouped_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d_%d' % (i, j), bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf.transpose(grouped_points, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_338": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'point_sift'",
                            "Method Argument"
                        ],
                        [
                            "'point_sift'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_347": {
                "variable": {
                    "value": "new_points1",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[interpolated_points, points1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_254": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_fc', bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c0_conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group_with_idx(xyz, idx=idx, points=new_points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(new_points)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c1_conv%d' % i, bn_decay=bn_decay, activation_fn=act, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "new_points + points",
                            "BinOp"
                        ],
                        [
                            "tf.concat([new_points, points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(npoint, radius, nsample, xyz, points, knn, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "avgpool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_270": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_fc', bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c0_conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group_with_idx(xyz, idx=idx, points=new_points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(new_points)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c1_conv%d' % i, bn_decay=bn_decay, activation_fn=act, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "new_points + points",
                            "BinOp"
                        ],
                        [
                            "tf.concat([new_points, points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(npoint, radius, nsample, xyz, points, knn, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_277": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_fc', bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c0_conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group_with_idx(xyz, idx=idx, points=new_points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(new_points)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c1_conv%d' % i, bn_decay=bn_decay, activation_fn=act, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "new_points + points",
                            "BinOp"
                        ],
                        [
                            "tf.concat([new_points, points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(npoint, radius, nsample, xyz, points, knn, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_308": {
                "input": {
                    "value": "tf.expand_dims(new_xyz, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, nsample, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_315": {
                "variable": {
                    "value": "grouped_points",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "grouped_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_points, grouped_xyz], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(grouped_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(grouped_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d_%d' % (i, j), bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf.transpose(grouped_points, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_320": {
                "variable": {
                    "value": "grouped_points",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "grouped_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_points, grouped_xyz], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(grouped_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(grouped_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d_%d' % (i, j), bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf.transpose(grouped_points, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_131": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[new_points, points]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_308": {
                "input": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "gather_point(xyz, farthest_point_sample(npoint, xyz))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.tile(np.array([0, 0, 0]).reshape((1, 1, 3)), (batch_size, 1, 1)), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(npoint, radius, nsample, xyz, points, knn, use_xyz)",
                            "Call"
                        ],
                        [
                            "gather_point(xyz, farthest_point_sample(npoint, xyz))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_312": {
                "variable": {
                    "value": "grouped_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[grouped_points, grouped_xyz]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_257": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grouped_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_point(xyz, idx)",
                            "Call"
                        ],
                        [
                            "grouped_xyz - tf.tile(tf.expand_dims(new_xyz, 2), [1, 1, nsample, 1])",
                            "BinOp"
                        ],
                        [
                            "group_point(xyz, idx)",
                            "Call"
                        ],
                        [
                            "group_point(xyz, idx)",
                            "Call"
                        ],
                        [
                            "group_point(xyz, idx)",
                            "Call"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "group_point(xyz, idx)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xyz, (batch_size, 1, nsample, 3))",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(npoint, radius, nsample, xyz, points, knn, use_xyz)",
                            "Call"
                        ],
                        [
                            "group_point(xyz, idx)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "ord": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_258": {
                "variable": {
                    "value": "exp_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-dists * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_262": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_fc', bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c0_conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group_with_idx(xyz, idx=idx, points=new_points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(new_points)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c1_conv%d' % i, bn_decay=bn_decay, activation_fn=act, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "new_points + points",
                            "BinOp"
                        ],
                        [
                            "tf.concat([new_points, points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(npoint, radius, nsample, xyz, points, knn, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_264": {
                "variable": {
                    "value": "max_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_fc', bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c0_conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group_with_idx(xyz, idx=idx, points=new_points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(new_points)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c1_conv%d' % i, bn_decay=bn_decay, activation_fn=act, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "new_points + points",
                            "BinOp"
                        ],
                        [
                            "tf.concat([new_points, points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(npoint, radius, nsample, xyz, points, knn, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "maxpool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_265": {
                "variable": {
                    "value": "avg_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_fc', bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group(radius, xyz, points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c0_conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "pointSIFT_group_with_idx(xyz, idx=idx, points=new_points, use_xyz=use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(new_points)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, out_channel, [1, 2], padding='VALID', stride=[1, 2], bn=bn, is_training=is_training, scope='c1_conv%d' % i, bn_decay=bn_decay, activation_fn=act, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "new_points + points",
                            "BinOp"
                        ],
                        [
                            "tf.concat([new_points, points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(npoint, radius, nsample, xyz, points, knn, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True, name='maxpool')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(new_points, axis=[2], keep_dims=True, name='avgpool')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_points, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "avgpool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_266": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[avg_points, max_points]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_256": {
                "name_or_scope": {
                    "value": "weighted_avg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_259": {
                "input_tensor": {
                    "value": "exp_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-dists * 5)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tf_utils/tf_ops/grouping/tf_grouping.py": {
        "tensorflow": {
            "load_op_library_7": {
                "variable": {
                    "value": "grouping_module",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "os.path.join(BASE_DIR, 'tf_grouping_so.so')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RegisterGradient_42": {
                "op_type": {
                    "value": "GroupPoint",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_64": {
                "variable": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(xyz1, (b, 1, n, c))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, m, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_65": {
                "variable": {
                    "value": "xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(xyz2, (b, m, 1, c))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_66": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(xyz1 - xyz2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "slice_69": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "outi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "select_top_k(k, dist)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_70": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "select_top_k(k, dist)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "tensor": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(xyz1, (b, 1, n, c)), [1, m, 1, 1])",
                            "Call"
                        ],
                        [
                            "xyz1",
                            "Method Argument"
                        ],
                        [
                            "xyz1",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(b, 1, n, c)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "tensor": {
                    "value": "xyz2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(xyz2, (b, m, 1, c)), [1, 1, n, 1])",
                            "Call"
                        ],
                        [
                            "xyz2",
                            "Method Argument"
                        ],
                        [
                            "xyz2",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(b, m, 1, c)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tf_utils/tf_ops/grouping/tf_grouping_op_test.py": {
        "tensorflow": {}
    },
    "tf_utils/tf_ops/interpolation/tf_interpolate.py": {
        "tensorflow": {
            "load_op_library_7": {
                "variable": {
                    "value": "interpolate_module",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "os.path.join(BASE_DIR, 'tf_interpolate_so.so')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RegisterGradient_29": {
                "op_type": {
                    "value": "ThreeInterpolate",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tf_utils/tf_ops/interpolation/tf_interpolate_op_test.py": {
        "tensorflow": {}
    },
    "tf_utils/tf_ops/interpolation/visu_interpolation.py": {
        "tensorflow": {}
    },
    "tf_utils/tf_ops/pointSIFT_op/pointSIFT_op.py": {
        "tensorflow": {
            "load_op_library_14": {
                "variable": {
                    "value": "pointSIFT_module",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "os.path.join(BASE_DIR, 'tf_pointSIFT_so.so')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tf_utils/tf_ops/sampling/tf_sampling.py": {
        "tensorflow": {
            "load_op_library_12": {
                "variable": {
                    "value": "sampling_module",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "os.path.join(BASE_DIR, 'tf_sampling_so.so')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RegisterGradient_43": {
                "op_type": {
                    "value": "GatherPoint",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tf_utils/tf_util.py": {
        "tensorflow": {
            "get_variable_21": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ],
                        [
                            "initializer",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float16 if use_fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_44": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stddev",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_47": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wd",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "weight_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_100": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ],
                        [
                            "[2",
                            "Method Argument"
                        ],
                        [
                            "[2",
                            "Method Argument"
                        ],
                        [
                            "[2",
                            "Method Argument"
                        ],
                        [
                            "[2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "Method Argument"
                        ],
                        [
                            "'NHWC'",
                            "Method Argument"
                        ],
                        [
                            "'NHWC'",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_106": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "Method Argument"
                        ],
                        [
                            "'NHWC'",
                            "Method Argument"
                        ],
                        [
                            "'NHWC'",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_170": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "Method Argument"
                        ],
                        [
                            "'NHWC'",
                            "Method Argument"
                        ],
                        [
                            "'NHWC'",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_176": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "Method Argument"
                        ],
                        [
                            "'NHWC'",
                            "Method Argument"
                        ],
                        [
                            "'NHWC'",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ],
                        [
                            "data_format",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_251": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size, out_height, out_width, num_output_channels]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_256": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv3d_312": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_d, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_317": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_353": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[num_input_units, num_outputs], use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_356": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_384": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool_409": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool3d_435": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, kernel_d, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_d, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool3d_460": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, kernel_d, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_d, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "moments_488": {
                "variable": {
                    "value": "(batch_mean, batch_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "moments_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "moments_dims",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "moments",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_490": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn_decay if bn_decay is not None else 0.9",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cond_505": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "mean_var_with_update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean_var_with_update",
                            "Call"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "lambda : (ema.average(batch_mean), ema.average(batch_var))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "batch_normalization_508": {
                "variable": {
                    "value": "normed",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(is_training, mean_var_with_update, lambda : (ema.average(batch_mean), ema.average(batch_var)))",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu(name, shape, initializer)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, mean_var_with_update, lambda : (ema.average(batch_mean), ema.average(batch_var)))",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu(name='beta', shape=[num_channels], initializer=tf.constant_initializer(0))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu(name='gamma', shape=[num_channels], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cond_612": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.nn.dropout(inputs, keep_prob, noise_shape)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : inputs",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "device_19": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_48": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_155": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_223": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_301": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_346": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_381": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_406": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_432": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_457": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_482": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cond_495": {
                "variable": {
                    "value": "ema_apply_op",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : ema.apply([batch_mean, batch_var])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.no_op()",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "variable_scope_611": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l2_loss_47": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu(name, shape, initializer)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, mean_var_with_update, lambda : (ema.average(batch_mean), ema.average(batch_var)))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_105": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_175": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_255": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_316": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_355": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_494": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_initializer_485": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_487": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_scope_494": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_501": {
                "control_inputs": {
                    "value": "[ema_apply_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_613": {
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "noise_shape": {
                    "value": "noise_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_op_497": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "identity_502": {
                "input": {
                    "value": "batch_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(inputs, moments_dims, name='moments')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_and_eval_scannet.py": {
        "tensorflow": {
            "exponential_decay_94": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "LEARNING_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.learning_rate",
                            "Attribute"
                        ]
                    ]
                },
                "global_step": {
                    "value": "self.batch * BATCH_SZ",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "DECAY_STEP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200000",
                            "int"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "DECAY_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.7",
                            "float"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_99": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(LEARNING_RATE, self.batch * BATCH_SZ, DECAY_STEP, DECAY_RATE, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, 1e-05)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exponential_decay_104": {
                "variable": {
                    "value": "bn_momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "BN_INIT_DECAY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                },
                "global_step": {
                    "value": "self.batch * BATCH_SZ",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "BN_DECAY_DECAY_STEP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(DECAY_STEP)",
                            "Call"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "BN_DECAY_DECAY_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "minimum_109": {
                "variable": {
                    "value": "bn_momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "BN_DECAY_CLIP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.99",
                            "float"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - bn_momentum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_160": {
                "variable": {
                    "value": "self.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "batch",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_162": {
                "variable": {
                    "value": "self.is_train_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_163": {
                "variable": {
                    "value": "self.ave_tp_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdamOptimizer_164": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.get_learning_rate()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Summary_358": {
                "variable": {
                    "value": "ave_tp_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.summary.Summary.Value(tag='TP', simple_value=caliacc)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_100": {
                "name": {
                    "value": "learning rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(LEARNING_RATE, self.batch * BATCH_SZ, DECAY_STEP, DECAY_RATE, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, 1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_110": {
                "name": {
                    "value": "bn_decay",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "bn_momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(BN_INIT_DECAY, self.batch * BATCH_SZ, BN_DECAY_DECAY_STEP, BN_DECAY_DECAY_RATE, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.minimum(BN_DECAY_CLIP, 1 - bn_momentum)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_152": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_153": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(grads, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_173": {
                "variable": {
                    "value": "point_cloud_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "self.point_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[gpu_idx * BATCH_PER_GPU, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[BATCH_PER_GPU, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_174": {
                "variable": {
                    "value": "label_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "self.label_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[gpu_idx * BATCH_PER_GPU, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[BATCH_PER_GPU, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_175": {
                "variable": {
                    "value": "smpws_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "self.smpws_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[gpu_idx * BATCH_PER_GPU, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[BATCH_PER_GPU, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_179": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_n_180": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection('losses', scope=scope)",
                            "Call"
                        ],
                        [
                            "sess.run([self.loss, self.train_op, merged, self.batch], feed_dict={self.point_pl: aug_data, self.label_pl: batch_label, self.smpws_pl: batch_smpw, self.is_train_pl: True})",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_200": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.net_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_201": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.total_loss_gpu_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_206": {
                "variable": {
                    "value": "self.predict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(self.net, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_216": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_218": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_221": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_150": {
                "variable": {
                    "value": "t_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gpu_data",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_172": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_172": {
                "name": {
                    "value": "'gpu_%d' % gpu_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_190": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_209": {
                "name": {
                    "value": "TP",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.TP",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_210": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_227": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "TRAIN_LOG_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.train_log_path",
                            "Attribute"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_228": {
                "variable": {
                    "value": "evaluate_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "TEST_LOG_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.test_log_path",
                            "Attribute"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_182": {
                "name": {
                    "value": "_i.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss + [total_loss]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_206": {
                "input": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_226": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_207": {
                "input_tensor": {
                    "value": "tf.cast(tf.equal(self.predict, self.label_pl), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_208": {
                "x": {
                    "value": "tf.equal(self.predict, self.label_pl)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_208": {
                "x": {
                    "value": "self.predict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.label_pl",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}