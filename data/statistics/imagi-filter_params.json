{
    "load_data.py": {
        "torch": {}
    },
    "models/lenet.py": {
        "torch": {
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(16 * (((width - 4) / 2 - 4) / 2) ** 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_16": {
                "variable": {
                    "value": "self.drop1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_17": {
                "variable": {
                    "value": "self.drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_21": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.drop1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.drop2(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_22": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.drop1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.drop2(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.drop1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.drop2(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_26": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.drop1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.drop2(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "resnet.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/vgg.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "vgg.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_179": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_189": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_190": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_127": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple([load_image(i[0], args.width, args.height, args.resize, transform) for i in batch])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_67": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple([load_image(i[0], args.width, args.height, args.resize, transform) for i in batch])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_101": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_save + args.model + '_test_' + str(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_104": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_save + args.model + '_test_' + str(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train_finegrained.py": {
        "torch": {
            "device_176": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:1 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_186": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_187": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_68": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple([load_image(i[0], args.width, args.height, args.resize, transform) for i in batch])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_144": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple([load_image(i[0], args.width, args.height, args.resize, transform) for i in batch])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_121": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_save + args.category + '/' + args.model + '_test_' + str(update_i) + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}