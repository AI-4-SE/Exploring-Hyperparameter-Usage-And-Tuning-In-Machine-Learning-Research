{
    "datasets/ETH3D_interval.py": {
        "torch": {}
    },
    "datasets/dataset_no_gt.py": {
        "torch": {}
    },
    "datasets/hpatches.py": {
        "torch": {
            "from_numpy_104": {
                "variable": {
                    "value": "XwarpHom",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "XYwarpHom[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "YwarpHom",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "XYwarpHom[1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_106": {
                "variable": {
                    "value": "ZwarpHom",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "XYwarpHom[2, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_111": {
                "variable": {
                    "value": "grid_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Xwarp.view(h_scale, w_scale), Ywarp.view(h_scale, w_scale)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/listdataset.py": {
        "torch": {}
    },
    "datasets/training_dataset.py": {
        "torch": {
            "Tensor_180": {
                "variable": {
                    "value": "self.THETA_IDENTITY",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_239": {
                "variable": {
                    "value": "XwarpHom",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "XYwarpHom[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_240": {
                "variable": {
                    "value": "YwarpHom",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "XYwarpHom[1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_241": {
                "variable": {
                    "value": "ZwarpHom",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "XYwarpHom[2, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_249": {
                "variable": {
                    "value": "grid_full",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Xwarp, Ywarp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_266": {
                "variable": {
                    "value": "grid_crop",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Xwarp_crop_range, Ywarp_crop_range]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "image_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image_batch.index_select(3, idx_pad_left), image_batch, image_batch.index_select(3, idx_pad_right))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_291": {
                "variable": {
                    "value": "image_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image_batch.index_select(2, idx_pad_top), image_batch, image_batch.index_select(2, idx_pad_bottom))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_501": {
                "variable": {
                    "value": "self.grid_X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_502": {
                "variable": {
                    "value": "self.grid_Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_544": {
                "variable": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_dist_squared",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.pow(Xmat - Xmat.transpose(0, 1), 2) + torch.pow(Ymat - Ymat.transpose(0, 1), 2)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(P_dist_squared)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_549": {
                "variable": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(OO, X, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_550": {
                "tensors": {
                    "value": "(K, P)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inverse_552": {
                "variable": {
                    "value": "Li",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((torch.cat((K, P), 1), torch.cat((P.transpose(0, 1), Z), 1)), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_586": {
                "variable": {
                    "value": "W_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Li[:, :self.N, :self.N].expand((batch_size, self.N, self.N))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Q_X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "theta[:, :self.N, :, :].squeeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_590": {
                "variable": {
                    "value": "W_Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Li[:, :self.N, :self.N].expand((batch_size, self.N, self.N))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Q_Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "theta[:, self.N:, :, :].squeeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_611": {
                "variable": {
                    "value": "A_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Li[:, self.N:, :self.N].expand((batch_size, 3, self.N))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Q_X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "theta[:, :self.N, :, :].squeeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_615": {
                "variable": {
                    "value": "A_Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Li[:, self.N:, :self.N].expand((batch_size, 3, self.N))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Q_Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "theta[:, self.N:, :, :].squeeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_658": {
                "variable": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_squared",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.pow(delta_X, 2) + torch.pow(delta_Y, 2)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(dist_squared)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_28": {
                "variable": {
                    "value": "mapping",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "map.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "map.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "map.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "map.permute(1, 2, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_33": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_34": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_52": {
                "variable": {
                    "value": "mapping",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "map.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "map.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "map.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "map.permute(1, 2, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_57": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_58": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_197": {
                "variable": {
                    "value": "warped_image_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor(source_img.astype(np.float32))",
                            "Call"
                        ],
                        [
                            "torch.Tensor(np.dstack((source_img.astype(np.float32), source_img.astype(np.float32), source_img.astype(np.float32))))",
                            "Call"
                        ],
                        [
                            "image.transpose(1, 2).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "sampling_grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.generate_grid(out_h, out_w, theta)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_199": {
                "variable": {
                    "value": "warped_image_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor(source_img.astype(np.float32))",
                            "Call"
                        ],
                        [
                            "torch.Tensor(np.dstack((source_img.astype(np.float32), source_img.astype(np.float32), source_img.astype(np.float32))))",
                            "Call"
                        ],
                        [
                            "image.transpose(1, 2).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "sampling_grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.generate_grid(out_h, out_w, theta)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_331": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_415": {
                "variable": {
                    "value": "cropped_source_image",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_417": {
                "variable": {
                    "value": "cropped_target_image",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_680": {
                "tensors": {
                    "value": "(points_X_prime, points_Y_prime)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "affine_grid_207": {
                "theta": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.THETA_IDENTITY",
                            "Attribute"
                        ],
                        [
                            "theta.expand(1, 2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "data.iloc[2:11].values.astype('double').reshape(3, 3)",
                            "Call"
                        ],
                        [
                            "data.iloc[2:8].values.astype('float').reshape(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(theta.astype(np.float32)).expand(1, 2, 3)",
                            "Call"
                        ],
                        [
                            "data.iloc[2:].values.astype('float')",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.expand_dims(theta, 1), 2)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(theta.astype(np.float32))",
                            "Call"
                        ],
                        [
                            "theta.expand(1, 18, 1, 1)",
                            "Call"
                        ],
                        [
                            "theta.unsqueeze(2).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Size((1, 3, out_h, out_w))",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_323": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_327": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_335": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_389": {
                "variable": {
                    "value": "img_src_orig",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_527": {
                "tensors": {
                    "value": "(self.grid_X, self.grid_Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_539": {
                "input": {
                    "value": "Xmat - Xmat.transpose(0, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_540": {
                "input": {
                    "value": "Ymat - Ymat.transpose(0, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_544": {
                "input": {
                    "value": "P_dist_squared",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.pow(Xmat - Xmat.transpose(0, 1), 2) + torch.pow(Ymat - Ymat.transpose(0, 1), 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_652": {
                "input": {
                    "value": "delta_Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p_Y_for_summation - P_Y",
                            "BinOp"
                        ],
                        [
                            "p_Y_for_summation - P_Y.expand_as(p_Y_for_summation)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_658": {
                "input": {
                    "value": "dist_squared",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.pow(delta_X, 2) + torch.pow(delta_Y, 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_673": {
                "input": {
                    "value": "torch.mul(W_X, U.expand_as(W_X))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_679": {
                "input": {
                    "value": "torch.mul(W_Y, U.expand_as(W_Y))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "affine_grid_209": {
                "theta": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.THETA_IDENTITY",
                            "Attribute"
                        ],
                        [
                            "theta.expand(1, 2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "data.iloc[2:11].values.astype('double').reshape(3, 3)",
                            "Call"
                        ],
                        [
                            "data.iloc[2:8].values.astype('float').reshape(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(theta.astype(np.float32)).expand(1, 2, 3)",
                            "Call"
                        ],
                        [
                            "data.iloc[2:].values.astype('float')",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.expand_dims(theta, 1), 2)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(theta.astype(np.float32))",
                            "Call"
                        ],
                        [
                            "theta.expand(1, 18, 1, 1)",
                            "Call"
                        ],
                        [
                            "theta.unsqueeze(2).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Size((1, 3, out_h, out_w))",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_392": {
                "variable": {
                    "value": "img_orig_target_vrbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_src_orig.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid_full",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([Xwarp, Ywarp], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_395": {
                "variable": {
                    "value": "img_orig_target_vrbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_src_orig.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid_full",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([Xwarp, Ywarp], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_442": {
                "variable": {
                    "value": "grid_m",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cv2.resize(grid.numpy(), (layer_size, layer_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_551": {
                "tensors": {
                    "value": "(P.transpose(0, 1), Z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_672": {
                "input": {
                    "value": "A_X[:, :, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "points_Y_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "points[:, :, :, 1].unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "points_Y_batch.expand((batch_size,) + points_Y_batch.size()[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_673": {
                "input": {
                    "value": "W_X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(self.Li[:, :self.N, :self.N].expand((batch_size, self.N, self.N)), Q_X)",
                            "Call"
                        ],
                        [
                            "W_X.unsqueeze(3).unsqueeze(4).transpose(1, 4).repeat(1, points_h, points_w, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "U.expand_as(W_X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_678": {
                "input": {
                    "value": "A_Y[:, :, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "points_Y_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "points[:, :, :, 1].unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "points_Y_batch.expand((batch_size,) + points_Y_batch.size()[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_679": {
                "input": {
                    "value": "W_Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(self.Li[:, :self.N, :self.N].expand((batch_size, self.N, self.N)), Q_Y)",
                            "Call"
                        ],
                        [
                            "W_Y.unsqueeze(3).unsqueeze(4).transpose(1, 4).repeat(1, points_h, points_w, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "U.expand_as(W_Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_451": {
                "variable": {
                    "value": "grid_m",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cv2.resize(grid.numpy(), (layer_size, layer_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_671": {
                "input": {
                    "value": "A_X[:, :, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "points_X_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "points[:, :, :, 0].unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "points_X_batch.expand((batch_size,) + points_X_batch.size()[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_677": {
                "input": {
                    "value": "A_Y[:, :, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "points_X_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "points[:, :, :, 0].unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "points_X_batch.expand((batch_size,) + points_X_batch.size()[1:])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/util.py": {
        "torch": {
            "arange_90": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_91": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_108": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_109": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_163": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_164": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_181": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_182": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "eval.py": {
        "torch": {
            "device_56": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "empty_cache_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_52": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_53": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_54": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_110": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.__dict__[args.datasets](args.data_dir, first_image_transform=input_images_transform, second_image_transform=input_images_transform)",
                            "Call"
                        ],
                        [
                            "datasets.HPatchesdataset(args.data_dir, os.path.join('datasets/csv_files/', 'hpatches_all.csv'.format(k)), input_images_transform, gt_flow_transform, co_transform, original_size=args.hpatches_original_size)",
                            "Call"
                        ],
                        [
                            "datasets.HPatchesdataset(args.data_dir, os.path.join('datasets/csv_files/', 'hpatches_1_{}.csv'.format(k)), input_images_transform, gt_flow_transform, co_transform, original_size=args.hpatches_original_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_192": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.__dict__[args.datasets](args.data_dir, first_image_transform=input_images_transform, second_image_transform=input_images_transform)",
                            "Call"
                        ],
                        [
                            "datasets.HPatchesdataset(args.data_dir, os.path.join('datasets/csv_files/', 'hpatches_all.csv'.format(k)), input_images_transform, gt_flow_transform, co_transform, original_size=args.hpatches_original_size)",
                            "Call"
                        ],
                        [
                            "datasets.HPatchesdataset(args.data_dir, os.path.join('datasets/csv_files/', 'hpatches_1_{}.csv'.format(k)), input_images_transform, gt_flow_transform, co_transform, original_size=args.hpatches_original_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_130": {
                "variable": {
                    "value": "flow_estimated",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_estimated",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "network.estimate_flow(source_img, target_img, device, mode='channel_first')",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(flow_estimated, size=(h_g, w_g), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h_g, w_g)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_172": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.__dict__[args.datasets](args.data_dir, first_image_transform=input_images_transform, second_image_transform=input_images_transform)",
                            "Call"
                        ],
                        [
                            "datasets.HPatchesdataset(args.data_dir, os.path.join('datasets/csv_files/', 'hpatches_all.csv'.format(k)), input_images_transform, gt_flow_transform, co_transform, original_size=args.hpatches_original_size)",
                            "Call"
                        ],
                        [
                            "datasets.HPatchesdataset(args.data_dir, os.path.join('datasets/csv_files/', 'hpatches_1_{}.csv'.format(k)), input_images_transform, gt_flow_transform, co_transform, original_size=args.hpatches_original_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "eval_ETH3D.py": {
        "torch": {
            "device_44": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "empty_cache_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_40": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_41": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_42": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_112": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETH_interval(root=args.data_dir, path_list=os.path.join(args.data_dir, 'info_ETH3D_files', '{}_every_5_rate_of_{}'.format(name_dataset, rate)), source_image_transform=input_images_transform, target_image_transform=input_images_transform, flow_transform=gt_flow_transform, co_transform=co_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/correlation/correlation.py": {
        "torch": {
            "current_stream_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/feature_backbones/ResNet_features.py": {
        "torch": {
            "Sequential_26": {
                "variable": {
                    "value": "modules[level_0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[self.model.conv1, self.model.bn1, self.model.relu]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "modules[level_1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[self.model.maxpool, self.model.layer1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "modules[level_2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[self.model.layer2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "modules[level_3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[self.model.layer3]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "modules[level_4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[self.model.layer4]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "interpolate_65": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.__dict__['_modules']['level_' + str(layer_n)](x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=0.5, mode='area')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "models/feature_backbones/VGG_features.py": {
        "torch": {
            "Sequential_23": {
                "variable": {
                    "value": "modules[level_ + str(n_block)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "*tmp",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "interpolate_58": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.__dict__['_modules']['level_' + str(layer_n)](x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=0.5, mode='area', recompute_scale_factor=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=0.5, mode='area')",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=0.5, mode='area', recompute_scale_factor=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=0.5, mode='area')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                },
                "recompute_scale_factor": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_60": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.__dict__['_modules']['level_' + str(layer_n)](x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=0.5, mode='area', recompute_scale_factor=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=0.5, mode='area')",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=0.5, mode='area', recompute_scale_factor=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=0.5, mode='area')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_64": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.__dict__['_modules']['level_' + str(layer_n)](x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=0.5, mode='area', recompute_scale_factor=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=0.5, mode='area')",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=0.5, mode='area', recompute_scale_factor=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=0.5, mode='area')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                },
                "recompute_scale_factor": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_66": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.__dict__['_modules']['level_' + str(layer_n)](x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=0.5, mode='area', recompute_scale_factor=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=0.5, mode='area')",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=0.5, mode='area', recompute_scale_factor=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(x, scale_factor=0.5, mode='area')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "models/models_compared.py": {
        "torch": {
            "device_55": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_130": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "interpolate_150": {
                "variable": {
                    "value": "source_img_copy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(int_preprocessed_height, int_preprocessed_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_153": {
                "variable": {
                    "value": "target_img_copy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(int_preprocessed_height, int_preprocessed_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_tensor_160": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([0.485, 0.456, 0.406])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img_copy.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img_copy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_161": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([0.229, 0.224, 0.225])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img_copy.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img_copy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_192": {
                "variable": {
                    "value": "estimated_flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.net(target_img_copy, source_img_copy)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h_scale, w_scale)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_73": {
                "variable": {
                    "value": "flow_original_reso",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "estimated_flow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.net(target_img_copy, source_img_copy, target_img_256, source_img_256)",
                            "Call"
                        ],
                        [
                            "self.net(target_img_copy, source_img_copy, target_img_256, source_img_256)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=self.net(target_img_copy, source_img_copy), size=(h_scale, w_scale), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h_original, w_original)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_95": {
                "variable": {
                    "value": "flow_original_reso",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "estimated_flow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.net(target_img_copy, source_img_copy, target_img_256, source_img_256)",
                            "Call"
                        ],
                        [
                            "self.net(target_img_copy, source_img_copy, target_img_256, source_img_256)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=self.net(target_img_copy, source_img_copy), size=(h_scale, w_scale), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h_original, w_original)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_86": {
                "variable": {
                    "value": "mapping",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.float32(mapping_per_batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_86": {
                "variable": {
                    "value": "mapping",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_58": {
                "f": {
                    "value": "checkpoint_fname",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "osp.join(path_pre_trained_models, 'Semantic_GLUNet_' + model_type + '.pth')",
                            "Call"
                        ],
                        [
                            "osp.join(path_pre_trained_models, 'GLUNet_' + model_type + '.pth')",
                            "Call"
                        ],
                        [
                            "osp.join(path_pre_trained_models, 'LOCALNet_' + model_type + '.pth')",
                            "Call"
                        ],
                        [
                            "osp.join(path_pre_trained_models, 'GLOCALNet_' + model_type + '.pth')",
                            "Call"
                        ],
                        [
                            "osp.join(path_pre_trained_models, 'GLOBALNet_' + model_type + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_132": {
                "f": {
                    "value": "checkpoint_fname",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "osp.join(path_pre_trained_models, 'Semantic_GLUNet_' + model_type + '.pth')",
                            "Call"
                        ],
                        [
                            "osp.join(path_pre_trained_models, 'GLUNet_' + model_type + '.pth')",
                            "Call"
                        ],
                        [
                            "osp.join(path_pre_trained_models, 'LOCALNet_' + model_type + '.pth')",
                            "Call"
                        ],
                        [
                            "osp.join(path_pre_trained_models, 'GLOCALNet_' + model_type + '.pth')",
                            "Call"
                        ],
                        [
                            "osp.join(path_pre_trained_models, 'GLOBALNet_' + model_type + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_60": {
                "f": {
                    "value": "checkpoint_fname",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "osp.join(path_pre_trained_models, 'Semantic_GLUNet_' + model_type + '.pth')",
                            "Call"
                        ],
                        [
                            "osp.join(path_pre_trained_models, 'GLUNet_' + model_type + '.pth')",
                            "Call"
                        ],
                        [
                            "osp.join(path_pre_trained_models, 'LOCALNet_' + model_type + '.pth')",
                            "Call"
                        ],
                        [
                            "osp.join(path_pre_trained_models, 'GLOCALNet_' + model_type + '.pth')",
                            "Call"
                        ],
                        [
                            "osp.join(path_pre_trained_models, 'GLOBALNet_' + model_type + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_134": {
                "f": {
                    "value": "checkpoint_fname",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "osp.join(path_pre_trained_models, 'Semantic_GLUNet_' + model_type + '.pth')",
                            "Call"
                        ],
                        [
                            "osp.join(path_pre_trained_models, 'GLUNet_' + model_type + '.pth')",
                            "Call"
                        ],
                        [
                            "osp.join(path_pre_trained_models, 'LOCALNet_' + model_type + '.pth')",
                            "Call"
                        ],
                        [
                            "osp.join(path_pre_trained_models, 'GLOCALNet_' + model_type + '.pth')",
                            "Call"
                        ],
                        [
                            "osp.join(path_pre_trained_models, 'GLOBALNet_' + model_type + '.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/our_models/GLOBALNet.py": {
        "torch": {
            "LeakyReLU_37": {
                "variable": {
                    "value": "self.leakyRELU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_98": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_99": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "concat3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c13, warp3, up_flow4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "concat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c12, warp2, up_flow3, up_feat3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_116": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dc_conv4(self.dc_conv3(self.dc_conv2(self.dc_conv1(x))))",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grid + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_118": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dc_conv4(self.dc_conv3(self.dc_conv2(self.dc_conv1(x))))",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grid + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_141": {
                "input": {
                    "value": "corr4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.corr(self.l2norm(c24), self.l2norm(c14))",
                            "Call"
                        ],
                        [
                            "self.l2norm(F.relu(corr4))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/our_models/GLOCALNet.py": {
        "torch": {
            "LeakyReLU_36": {
                "variable": {
                    "value": "self.leakyRELU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_130": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_131": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_148": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dc_conv4_level3(self.dc_conv3_level3(self.dc_conv2_level3(self.dc_conv1_level3(x3))))",
                            "Call"
                        ],
                        [
                            "self.dc_conv4(self.dc_conv3(self.dc_conv2(self.dc_conv1(x))))",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grid + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_150": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dc_conv4_level3(self.dc_conv3_level3(self.dc_conv2_level3(self.dc_conv1_level3(x3))))",
                            "Call"
                        ],
                        [
                            "self.dc_conv4(self.dc_conv3(self.dc_conv2(self.dc_conv1(x))))",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grid + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "corr3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3, up_flow4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "corr2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr2, up_flow3, up_feat3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_173": {
                "input": {
                    "value": "corr4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.corr(self.l2norm(c24), self.l2norm(c14))",
                            "Call"
                        ],
                        [
                            "self.l2norm(F.relu(corr4))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_202": {
                "variable": {
                    "value": "corr3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3, c13, up_flow4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "corr2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr2, c12)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_204": {
                "variable": {
                    "value": "corr3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3, c13)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_235": {
                "variable": {
                    "value": "corr2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr2, c12, up_flow3, up_feat3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "corr3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3, up_flow4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_239": {
                "variable": {
                    "value": "corr2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr2, up_flow3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/our_models/GLUNet.py": {
        "torch": {
            "LeakyReLU_34": {
                "variable": {
                    "value": "self.leakyRELU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "interpolate_201": {
                "variable": {
                    "value": "source_img_copy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(int_preprocessed_height, int_preprocessed_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_204": {
                "variable": {
                    "value": "target_img_copy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(int_preprocessed_height, int_preprocessed_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_tensor_209": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([0.485, 0.456, 0.406])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img_copy.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img_copy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_210": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([0.229, 0.224, 0.225])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img_copy.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img_copy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_215": {
                "variable": {
                    "value": "source_img_256",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_218": {
                "variable": {
                    "value": "target_img_256",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_199": {
                "variable": {
                    "value": "target_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.uint8(target_img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_199": {
                "variable": {
                    "value": "target_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_311": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_363": {
                "variable": {
                    "value": "corr3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3, up_flow4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_416": {
                "variable": {
                    "value": "up_flow3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "res_flow3 + up_flow4",
                            "BinOp"
                        ],
                        [
                            "flow3 + self.dc_conv7(self.dc_conv6(self.dc_conv5(x)))",
                            "BinOp"
                        ],
                        [
                            "res_flow3 + up_flow3",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(h_full / 8.0), int(w_full / 8.0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_420": {
                "variable": {
                    "value": "up_flow3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "res_flow3 + up_flow4",
                            "BinOp"
                        ],
                        [
                            "flow3 + self.dc_conv7(self.dc_conv6(self.dc_conv5(x)))",
                            "BinOp"
                        ],
                        [
                            "res_flow3 + up_flow3",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(h_full / 8.0), int(w_full / 8.0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_432": {
                "variable": {
                    "value": "corr2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr2, up_flow3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_453": {
                "variable": {
                    "value": "corr1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr1, up_flow2, up_feat2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_457": {
                "variable": {
                    "value": "corr1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr1, up_flow2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_255": {
                "variable": {
                    "value": "average_flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(flow4[:, 0, :, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_309": {
                "input": {
                    "value": "corr4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "corr4d.squeeze(1).view(b, c24.shape[2] * c24.shape[3], c14.shape[2], c14.shape[3])",
                            "Call"
                        ],
                        [
                            "self.l2norm(F.relu(corr4))",
                            "Call"
                        ],
                        [
                            "corr4d.squeeze(1).view(c24.shape[0], c24.shape[2] * c24.shape[3], c14.shape[2], c14.shape[3])",
                            "Call"
                        ],
                        [
                            "self.corr(self.l2norm(c24), self.l2norm(c14))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_331": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_276": {
                "variable": {
                    "value": "average_flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(flow4[:, 0, :, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_367": {
                "variable": {
                    "value": "corr3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3, up_flow4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_398": {
                "variable": {
                    "value": "up_flow3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "res_flow3 + up_flow4",
                            "BinOp"
                        ],
                        [
                            "flow3 + self.dc_conv7(self.dc_conv6(self.dc_conv5(x)))",
                            "BinOp"
                        ],
                        [
                            "res_flow3 + up_flow3",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(h_full * ratio), int(w_full * ratio))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_401": {
                "variable": {
                    "value": "c23_bis",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c22",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "im2_pyr[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(h_full * ratio), int(w_full * ratio))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_402": {
                "variable": {
                    "value": "c13_bis",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c12",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "im1_pyr[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(h_full * ratio), int(w_full * ratio))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_436": {
                "variable": {
                    "value": "corr2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr2, up_flow3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_255": {
                "input": {
                    "value": "flow4[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_407": {
                "variable": {
                    "value": "corr3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3, up_flow3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_276": {
                "input": {
                    "value": "flow4[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_411": {
                "variable": {
                    "value": "corr3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3, up_flow3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/our_models/LOCALNet.py": {
        "torch": {
            "LeakyReLU_31": {
                "variable": {
                    "value": "self.leakyRELU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_92": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_93": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "corr3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3, up_flow4, up_feat4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "corr2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr2, up_flow3, up_feat3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_110": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dc_conv4(self.dc_conv3(self.dc_conv2(self.dc_conv1(x))))",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grid + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_112": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dc_conv4(self.dc_conv3(self.dc_conv2(self.dc_conv1(x))))",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grid + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/our_models/Semantic_GLUNet.py": {
        "torch": {
            "LeakyReLU_29": {
                "variable": {
                    "value": "self.leakyRELU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "interpolate_145": {
                "variable": {
                    "value": "source_img_copy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(int_preprocessed_height, int_preprocessed_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_148": {
                "variable": {
                    "value": "target_img_copy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(int_preprocessed_height, int_preprocessed_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_tensor_153": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([0.485, 0.456, 0.406])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img_copy.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img_copy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_154": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([0.229, 0.224, 0.225])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img_copy.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img_copy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_159": {
                "variable": {
                    "value": "source_img_256",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_161": {
                "variable": {
                    "value": "target_img_256",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_303": {
                "variable": {
                    "value": "c24_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c24, F.interpolate(input=c25, size=(16, 16), mode='bilinear', align_corners=False))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_304": {
                "variable": {
                    "value": "c14_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c14, F.interpolate(input=c15, size=(16, 16), mode='bilinear', align_corners=False))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_314": {
                "variable": {
                    "value": "c23_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c23, F.interpolate(input=c24, size=(32, 32), mode='bilinear', align_corners=False), F.interpolate(input=c25, size=(32, 32), mode='bilinear', align_corners=False))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_316": {
                "variable": {
                    "value": "c13_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c13, F.interpolate(input=c14, size=(32, 32), mode='bilinear', align_corners=False), F.interpolate(input=c15, size=(32, 32), mode='bilinear', align_corners=False))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_322": {
                "variable": {
                    "value": "corr3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3, up_flow4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_380": {
                "variable": {
                    "value": "corr2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr2, up_flow3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_391": {
                "variable": {
                    "value": "corr1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr1, up_flow2, up_feat2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_143": {
                "variable": {
                    "value": "target_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.uint8(target_img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_143": {
                "variable": {
                    "value": "target_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_364": {
                "variable": {
                    "value": "up_flow3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "res_flow3 + up_flow4",
                            "BinOp"
                        ],
                        [
                            "flow3 + self.dc_conv7(self.dc_conv6(self.dc_conv5(x)))",
                            "BinOp"
                        ],
                        [
                            "res_flow3 + up_flow3",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(h_original / 8.0), int(w_original / 8.0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_368": {
                "variable": {
                    "value": "up_flow3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "res_flow3 + up_flow4",
                            "BinOp"
                        ],
                        [
                            "flow3 + self.dc_conv7(self.dc_conv6(self.dc_conv5(x)))",
                            "BinOp"
                        ],
                        [
                            "res_flow3 + up_flow3",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(h_original / 8.0), int(w_original / 8.0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_202": {
                "variable": {
                    "value": "average_flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(flow4[:, 0, :, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_261": {
                "input": {
                    "value": "corr4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "corr4d.squeeze(1).view(b, c24.shape[2] * c24.shape[3], c14.shape[2], c14.shape[3])",
                            "Call"
                        ],
                        [
                            "self.l2norm(F.relu(corr4))",
                            "Call"
                        ],
                        [
                            "corr4d.squeeze(1).view(c24.shape[0], c24.shape[2] * c24.shape[3], c14.shape[2], c14.shape[3])",
                            "Call"
                        ],
                        [
                            "self.corr(self.l2norm(c24), self.l2norm(c14))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "c24_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c24, F.interpolate(input=c25, size=(16, 16), mode='bilinear', align_corners=False))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "c14_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c14, F.interpolate(input=c15, size=(16, 16), mode='bilinear', align_corners=False))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_229": {
                "variable": {
                    "value": "average_flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(flow4[:, 0, :, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_303": {
                "input": {
                    "value": "c25",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "im2_pyr_256[-2]",
                            "Subscript"
                        ],
                        [
                            "im2_pyr_256[-2]",
                            "Subscript"
                        ],
                        [
                            "im2_pyr_256[-2]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_304": {
                "input": {
                    "value": "c15",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "im1_pyr_256[-2]",
                            "Subscript"
                        ],
                        [
                            "im1_pyr_256[-2]",
                            "Subscript"
                        ],
                        [
                            "im1_pyr_256[-2]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_314": {
                "input": {
                    "value": "c24",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "im2_pyr_256[-3]",
                            "Subscript"
                        ],
                        [
                            "im2_pyr_256[-3]",
                            "Subscript"
                        ],
                        [
                            "im2_pyr_256[-3]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_315": {
                "input": {
                    "value": "c25",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "im2_pyr_256[-2]",
                            "Subscript"
                        ],
                        [
                            "im2_pyr_256[-2]",
                            "Subscript"
                        ],
                        [
                            "im2_pyr_256[-2]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_316": {
                "input": {
                    "value": "c14",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "im1_pyr_256[-3]",
                            "Subscript"
                        ],
                        [
                            "im1_pyr_256[-3]",
                            "Subscript"
                        ],
                        [
                            "im1_pyr_256[-3]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_317": {
                "input": {
                    "value": "c15",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "im1_pyr_256[-2]",
                            "Subscript"
                        ],
                        [
                            "im1_pyr_256[-2]",
                            "Subscript"
                        ],
                        [
                            "im1_pyr_256[-2]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_352": {
                "variable": {
                    "value": "up_flow3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "res_flow3 + up_flow4",
                            "BinOp"
                        ],
                        [
                            "flow3 + self.dc_conv7(self.dc_conv6(self.dc_conv5(x)))",
                            "BinOp"
                        ],
                        [
                            "res_flow3 + up_flow3",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(h_original * ratio), int(w_original * ratio))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_354": {
                "variable": {
                    "value": "c23_bis",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c22",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "im2_pyr[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(h_original * ratio), int(w_original * ratio))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_355": {
                "variable": {
                    "value": "c13_bis",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c12",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "im1_pyr[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(h_original * ratio), int(w_original * ratio))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_359": {
                "variable": {
                    "value": "corr3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3, up_flow3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_202": {
                "input": {
                    "value": "flow4[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "c24_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c24, F.interpolate(input=c25, size=(16, 16), mode='bilinear', align_corners=False))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "c14_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c14, F.interpolate(input=c15, size=(16, 16), mode='bilinear', align_corners=False))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_229": {
                "input": {
                    "value": "flow4[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_197": {
                "input": {
                    "value": "c25",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "im2_pyr_256[-2]",
                            "Subscript"
                        ],
                        [
                            "im2_pyr_256[-2]",
                            "Subscript"
                        ],
                        [
                            "im2_pyr_256[-2]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_199": {
                "input": {
                    "value": "c15",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "im1_pyr_256[-2]",
                            "Subscript"
                        ],
                        [
                            "im1_pyr_256[-2]",
                            "Subscript"
                        ],
                        [
                            "im1_pyr_256[-2]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_224": {
                "input": {
                    "value": "c25",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "im2_pyr_256[-2]",
                            "Subscript"
                        ],
                        [
                            "im2_pyr_256[-2]",
                            "Subscript"
                        ],
                        [
                            "im2_pyr_256[-2]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_226": {
                "input": {
                    "value": "c15",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "im1_pyr_256[-2]",
                            "Subscript"
                        ],
                        [
                            "im1_pyr_256[-2]",
                            "Subscript"
                        ],
                        [
                            "im1_pyr_256[-2]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/our_models/bilinear_deconv.py": {
        "torch": {
            "ones_54": {
                "variable": {
                    "value": "bilinear_kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "arange_65": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kernel_size[dim]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "abs_66": {
                "input": {
                    "value": "delta / factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/our_models/consensus_network_modules.py": {
        "torch": {
            "unsqueeze_15": {
                "variable": {
                    "value": "x_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_17": {
                "variable": {
                    "value": "exp_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x - x_k.expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "self.conv(x) + self.conv(x.permute(0, 1, 4, 5, 2, 3)).permute(0, 1, 4, 5, 2, 3)",
                            "BinOp"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_46": {
                "variable": {
                    "value": "data_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Z, data, Z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_106": {
                "input": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_106": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_188": {
                "variable": {
                    "value": "(corr4d_B_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "corr4d_B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "corr4d.view(batch_size, fs1 * fs2, fs3, fs4)",
                            "Call"
                        ],
                        [
                            "corr4d_B / (corr4d_B_max + eps)",
                            "BinOp"
                        ],
                        [
                            "corr4d_B.view(batch_size, 1, fs1, fs2, fs3, fs4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_189": {
                "variable": {
                    "value": "(corr4d_A_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "corr4d_A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "corr4d.view(batch_size, fs1, fs2, fs3 * fs4)",
                            "Call"
                        ],
                        [
                            "corr4d_A / (corr4d_A_max + eps)",
                            "BinOp"
                        ],
                        [
                            "corr4d_A.view(batch_size, 1, fs1, fs2, fs3, fs4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "slices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(slices)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_211": {
                "variable": {
                    "value": "(corr4d, max_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "slices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tuple(slices), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "fmod_212": {
                "variable": {
                    "value": "max_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "k_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kernel_sizes[i]",
                            "Subscript"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "fmod_213": {
                "variable": {
                    "value": "max_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_idx.sub(max_l).div(k_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "k_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kernel_sizes[i]",
                            "Subscript"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "fmod_214": {
                "variable": {
                    "value": "max_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_idx.sub(max_l).div(k_size).sub(max_k).div(k_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "k_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kernel_sizes[i]",
                            "Subscript"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "div_18": {
                "input": {
                    "value": "exp_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.sum(exp_x, dim).unsqueeze(dim).expand_as(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv3d_50": {
                "variable": {
                    "value": "output[i, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "data_padded[i + padding, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "filters[padding, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filters.size(0) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "_quadruple(padding)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_107": {
                "input": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.pow(torch.sum(torch.pow(feature, 2), 1) + epsilon, 0.5).unsqueeze(1).expand_as(feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_115": {
                "variable": {
                    "value": "self.ReLU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_163": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*nn_modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sum_18": {
                "input": {
                    "value": "exp_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_18": {
                "input": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bmm_126": {
                "variable": {
                    "value": "feature_mul",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feature_target.view(b, c, h * w).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "feature_target.view(b, c, htarget * wtarget)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "feature_source",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feature_source.transpose(2, 3).contiguous().view(b, c, h * w)",
                            "Call"
                        ],
                        [
                            "feature_source.view(b, c, hsource * wsource).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_34": {
                "*size": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "c_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filters.size(1)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "*size": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filters.size(0) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "_quadruple(padding)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "*size": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filters.size(0) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "_quadruple(padding)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bmm_136": {
                "variable": {
                    "value": "feature_mul",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_source",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feature_source.transpose(2, 3).contiguous().view(b, c, h * w)",
                            "Call"
                        ],
                        [
                            "feature_source.view(b, c, hsource * wsource).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "feature_target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feature_target.view(b, c, h * w).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "feature_target.view(b, c, htarget * wtarget)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_15": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x - x_k.expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "self.conv(x) + self.conv(x.permute(0, 1, 4, 5, 2, 3)).permute(0, 1, 4, 5, 2, 3)",
                            "BinOp"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv3d_54": {
                "input": {
                    "value": "data_padded[i + padding - p, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "filters[padding - p, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filters.size(0) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "_quadruple(padding)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv3d_57": {
                "input": {
                    "value": "data_padded[i + padding + p, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "filters[padding + p, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filters.size(0) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "_quadruple(padding)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_162": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_106": {
                "input": {
                    "value": "torch.pow(feature, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/our_models/mod.py": {
        "torch": {
            "ConvTranspose2d_26": {
                "variable": {
                    "value": "deconv_",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_38": {
                "variable": {
                    "value": "mapping",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_43": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_44": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_194": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_195": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_71": {
                "variable": {
                    "value": "feature_mul",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feature_B.view(b, c, h * w).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "feature_A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feature_A.transpose(2, 3).contiguous().view(b, c, h * w)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_87": {
                "input": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_87": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv_0(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_212": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((self.conv_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "self.conv_4(self.conv_3(self.conv_2(self.conv_1(self.conv_0(x)))))",
                            "Call"
                        ],
                        [
                            "x1",
                            "Name"
                        ],
                        [
                            "torch.cat((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x3), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3), 1)",
                            "Call"
                        ],
                        [
                            "super().forward(x1, x2, x3)",
                            "Call"
                        ],
                        [
                            "self.conv4(self.conv3(self.conv2(self.conv1(self.conv0(x)))))",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grid + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_214": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((self.conv_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "self.conv_4(self.conv_3(self.conv_2(self.conv_1(self.conv_0(x)))))",
                            "Call"
                        ],
                        [
                            "x1",
                            "Name"
                        ],
                        [
                            "torch.cat((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x3), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3), 1)",
                            "Call"
                        ],
                        [
                            "super().forward(x1, x2, x3)",
                            "Call"
                        ],
                        [
                            "self.conv4(self.conv3(self.conv2(self.conv1(self.conv0(x)))))",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grid + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_9": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_88": {
                "input": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.pow(torch.sum(torch.pow(feature, 2), 1) + epsilon, 0.5).unsqueeze(1).expand_as(feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_136": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding, dilation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding, dilation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_12": {
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_13": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_18": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_138": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_143": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_87": {
                "input": {
                    "value": "torch.pow(feature, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "save_training_dataset_to_disk.py": {
        "torch": {
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_67": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "HomoAffTps_Dataset(image_path=args.image_data_path, csv_file=args.csv_path, transforms=source_img_transforms, transforms_target=target_img_transforms, pyramid_param=pyramid_param, get_flow=True, output_size=(520, 520))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_35": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_36": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test_GLUNet.py": {
        "torch": {
            "device_47": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "empty_cache_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_45": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "source_image_",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "source_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "imageio.imread(args.path_source_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_72": {
                "variable": {
                    "value": "source_image_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_72": {
                "variable": {
                    "value": "source_image_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "target_image_",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "imageio.imread(args.path_target_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_73": {
                "variable": {
                    "value": "target_image_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_73": {
                "variable": {
                    "value": "target_image_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_GLOBALNet.py": {
        "torch": {
            "device_71": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_133": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "HomoAffTps_Dataset(image_path=args.training_data_dir, csv_file=osp.join('datasets', 'csv_files', 'homo_aff_tps_train_DPED_CityScape_ADE.csv'), transforms=source_transforms, transforms_target=source_transforms, pyramid_param=pyramid_param, get_flow=True, output_size=(520, 520))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_138": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "HomoAffTps_Dataset(image_path=args.evaluation_data_dir, csv_file=osp.join('datasets', 'csv_files', 'homo_aff_tps_test_DPED_CityScape_ADE.csv'), transforms=source_transforms, transforms_target=source_transforms, pyramid_param=pyramid_param, get_flow=True, output_size=(520, 520))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_152": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_157": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[3, 30, 40, 50, 60]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataParallel_190": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "GLOBALNet_model(batch_norm=True, pyramid_type='VGG', div=args.div_flow, evaluation=False, refinement=True)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_69": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_70": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_GLOCALNet.py": {
        "torch": {
            "device_69": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_131": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "HomoAffTps_Dataset(image_path=args.training_data_dir, csv_file=osp.join('datasets', 'csv_files', 'homo_aff_tps_train_DPED_CityScape_ADE.csv'), transforms=source_transforms, transforms_target=source_transforms, pyramid_param=pyramid_param, get_flow=True, output_size=(520, 520))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_136": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "HomoAffTps_Dataset(image_path=args.evaluation_data_dir, csv_file=osp.join('datasets', 'csv_files', 'homo_aff_tps_test_DPED_CityScape_ADE.csv'), transforms=source_transforms, transforms_target=source_transforms, pyramid_param=pyramid_param, get_flow=True, output_size=(520, 520))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_149": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_154": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[3, 65, 75, 85]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataParallel_187": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "GLOCALNet_model(batch_norm=True, pyramid_type='VGG', div=args.div_flow, evaluation=False, refinement=True, residual=True, input_decoder='flow_and_feat', refinement_32=False)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_67": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_68": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_GLUNet.py": {
        "torch": {
            "device_66": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_116": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "HomoAffTps_Dataset(image_path=args.training_data_dir, csv_file=osp.join('datasets', 'csv_files', 'homo_aff_tps_train_DPED_CityScape_ADE.csv'), transforms=source_img_transforms, transforms_target=target_img_transforms, pyramid_param=pyramid_param, get_flow=True, output_size=(520, 520))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_121": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "HomoAffTps_Dataset(image_path=args.evaluation_data_dir, csv_file=osp.join('datasets', 'csv_files', 'homo_aff_tps_test_DPED_CityScape_ADE.csv'), transforms=source_img_transforms, transforms_target=target_img_transforms, pyramid_param=pyramid_param, get_flow=True, output_size=(520, 520))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_160": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_164": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[65, 75, 95]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataParallel_198": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "GLUNet_model(batch_norm=True, pyramid_type='VGG', div=args.div_flow, evaluation=False, consensus_network=False, cyclic_consistency=True, dense_connection=True, decoder_inputs='corr_flow_feat', refinement_at_all_levels=False, refinement_at_adaptive_reso=True)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_64": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_65": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_LOCALNet.py": {
        "torch": {
            "device_70": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_133": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "HomoAffTps_Dataset(image_path=args.training_data_dir, csv_file=osp.join('datasets', 'csv_files', 'homo_aff_tps_train_DPED_CityScape_ADE.csv'), transforms=source_transforms, transforms_target=source_transforms, pyramid_param=pyramid_param, get_flow=True, output_size=(520, 520))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_138": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "HomoAffTps_Dataset(image_path=args.evaluation_data_dir, csv_file=osp.join('datasets', 'csv_files', 'homo_aff_tps_test_DPED_CityScape_ADE.csv'), transforms=source_transforms, transforms_target=source_transforms, pyramid_param=pyramid_param, get_flow=True, output_size=(520, 520))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.n_threads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_151": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_156": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[3, 65, 75, 85]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataParallel_189": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LOCALNet_model(batch_norm=True, pyramid_type='VGG', div=args.div_flow, evaluation=False, refinement=True)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_68": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_69": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/evaluate.py": {
        "torch": {
            "norm_17": {
                "variable": {
                    "value": "EPE",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_flow - input_flow",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_35": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_flow - input_flow",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_55": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_flow - input_flow",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_56": {
                "variable": {
                    "value": "gt_magnitude",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "flow_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(flow_target_x[mask_gt].unsqueeze(1), flow_target_y[mask_gt].unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "flow_est",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(flow_est_x[mask_gt].unsqueeze(1), flow_est_y[mask_gt].unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_97": {
                "variable": {
                    "value": "flow_estimated",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_estimated",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "network.estimate_flow(source_img, target_img, device, mode='channel_first')",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(flow_estimated, size=(h_g, w_g), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h_g, w_g)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/image_transforms.py": {
        "torch": {
            "from_numpy_32": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tensor.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "np.transpose(array, (0, 2, 3, 1))",
                            "Call"
                        ],
                        [
                            "np.transpose(array, (1, 2, 0))",
                            "Call"
                        ],
                        [
                            "np.array(array)",
                            "Call"
                        ],
                        [
                            "np.transpose(array, (2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_48": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "interpolate_50": {
                "variable": {
                    "value": "resized_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils_training/multiscale_loss.py": {
        "torch": {
            "norm_7": {
                "variable": {
                    "value": "EPE_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_flow - input_flow",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_23": {
                "variable": {
                    "value": "L1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_flow - target_flow",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_24": {
                "variable": {
                    "value": "L1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.abs(input_flow - target_flow)",
                            "Call"
                        ],
                        [
                            "torch.sum(L1, 1)",
                            "Call"
                        ],
                        [
                            "L1_loss(input_flow, target_flow)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_34": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L1 + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.4",
                            "Constant"
                        ]
                    ]
                }
            },
            "cat_142": {
                "variable": {
                    "value": "flow_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(flow_target_x[mask_gt].unsqueeze(1), flow_target_y[mask_gt].unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "flow_est",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(flow_est_x[mask_gt].unsqueeze(1), flow_est_y[mask_gt].unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_129": {
                "variable": {
                    "value": "upsampled_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.adaptive_max_pool2d(input * positive, size) - F.adaptive_max_pool2d(-input * negative, size)",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_133": {
                "variable": {
                    "value": "upsampled_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.adaptive_max_pool2d(input * positive, size) - F.adaptive_max_pool2d(-input * negative, size)",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "adaptive_max_pool2d_58": {
                "*args": {
                    "value": "-input * negative",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "interpolate_83": {
                "variable": {
                    "value": "target_scaled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_89": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.float().unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils_training/optimize_GLOCALNet.py": {
        "torch": {
            "interpolate_11": {
                "variable": {
                    "value": "flow_est",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net(mini_batch['target_image'].to(device), mini_batch['source_image'].to(device))",
                            "Call"
                        ],
                        [
                            "net(mini_batch['target_image'].to(device), mini_batch['source_image'].to(device))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "variable": {
                    "value": "mean_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mini_batch['source_image'].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_21": {
                "variable": {
                    "value": "std_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mini_batch['source_image'].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_103": {
                "variable": {
                    "value": "mask_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_gt.float().unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_103": {
                "variable": {
                    "value": "mask_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_179": {
                "variable": {
                    "value": "mask_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_gt.float().unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_179": {
                "variable": {
                    "value": "mask_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils_training/optimize_GLUNet_with_adaptive_resolution.py": {
        "torch": {
            "as_tensor_34": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([0.485, 0.456, 0.406])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img_copy.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img_copy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_35": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([0.229, 0.224, 0.225])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "source_img_copy.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_img_copy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_40": {
                "variable": {
                    "value": "source_img_256",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_43": {
                "variable": {
                    "value": "target_img_256",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_img.float().to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_60": {
                "variable": {
                    "value": "flow_est_original",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(h_original, w_original)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "mean_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "source_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "std_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "source_image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_83": {
                "variable": {
                    "value": "flow_est_256",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_net_256",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(h_256, w_256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_291": {
                "variable": {
                    "value": "EPE_array",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(loss_grid_weights), len(val_loader)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_373": {
                "variable": {
                    "value": "mean_epe",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "EPE_array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros([len(loss_grid_weights), len(val_loader)], dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_196": {
                "variable": {
                    "value": "flow_gt_256",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_gt_original",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mini_batch['flow_map'].to(device)",
                            "Call"
                        ],
                        [
                            "flow_gt_original.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "mini_batch['flow_map'].to(device)",
                            "Call"
                        ],
                        [
                            "flow_gt_original.permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_211": {
                "variable": {
                    "value": "mask_256",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.unsqueeze(1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_211": {
                "variable": {
                    "value": "mask_256",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_313": {
                "variable": {
                    "value": "flow_gt_256",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_gt_original",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mini_batch['flow_map'].to(device)",
                            "Call"
                        ],
                        [
                            "flow_gt_original.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "mini_batch['flow_map'].to(device)",
                            "Call"
                        ],
                        [
                            "flow_gt_original.permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_328": {
                "variable": {
                    "value": "mask_256",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.unsqueeze(1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_328": {
                "variable": {
                    "value": "mask_256",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils_training/utils_CNN.py": {
        "torch": {
            "save_9": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_path, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_20": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}