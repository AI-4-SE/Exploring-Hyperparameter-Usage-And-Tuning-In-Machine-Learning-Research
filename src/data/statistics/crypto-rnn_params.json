{
    "crack_train_utils.py": {
        "tensorflow": {}
    },
    "main.py": {
        "tensorflow": {
            "DEFINE_bool_15": {
                "name": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "Run the train loop (else eval model)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_16": {
                "name": {
                    "value": "vary_mem",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "Train this model repeatedly for different memory sizes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_17": {
                "name": {
                    "value": "key_len",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum length of key for encoding/decoding message",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_18": {
                "name": {
                    "value": "tsteps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of timesteps for backpropagation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_19": {
                "name": {
                    "value": "rnn_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of hidden units in the rnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_20": {
                "name": {
                    "value": "ncells",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of recurrent cells to stack",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_21": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Size of batch in minibatch gradient descent",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_22": {
                "name": {
                    "value": "save_every",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Save model after this number of train steps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_23": {
                "name": {
                    "value": "total_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "250000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Total number of training steps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_24": {
                "name": {
                    "value": "print_every",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Print training info after this number of train steps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_25": {
                "name": {
                    "value": "acc_every",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Print/save accuracy info after this number of train steps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_26": {
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Dropout for the last (full-connected) layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_27": {
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate (alpha) for the model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_28": {
                "name": {
                    "value": "cipher",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "vigenere",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Type of cipher to solve. One of \"vigenere\", \"autokey\", or \"enigma\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_29": {
                "name": {
                    "value": "A",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Alphabet to use for polyalphabetic cipher",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "stacked_rnn.py": {
        "tensorflow": {
            "InteractiveSession_14": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_23": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, xlen]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, ylen]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_31": {
                "variable": {
                    "value": "rnn_init",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.075",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_32": {
                "variable": {
                    "value": "xavier_dense",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0 / np.sqrt(rnn_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_46": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Saver_141": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_40": {
                "variable": {
                    "value": "layers[-1][W_fc1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "W_fc1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[rnn_size, ylen]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "xavier_dense",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(stddev=1.0 / np.sqrt(rnn_size), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.xlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "rnn_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat(hs, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.rnn_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_69": {
                "variable": {
                    "value": "rnn_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rnn_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.concat(hs, 1), [-1, self.rnn_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(rnn_out, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_71": {
                "variable": {
                    "value": "logps",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "rnn_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.concat(hs, 1), [-1, self.rnn_size])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(rnn_out, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.layers[-1]['W_fc1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_72": {
                "variable": {
                    "value": "logps",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(rnn_out, self.layers[-1]['W_fc1'])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logps)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_73": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(rnn_out, self.layers[-1]['W_fc1'])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logps)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tsteps, self.ylen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_145": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "save_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/'.join(self.save_path.split('/')[:-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_153": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTMCell_37": {
                "variable": {
                    "value": "cell[rnn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "rnn_size",
                    "type": "variable",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "rnn_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(stddev=0.075, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_45": {
                "t": {
                    "value": "y - y_hat_batch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_61": {
                "input": {
                    "value": "h_",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_68": {
                "values": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.squeeze(h_, [1]) for h_ in tf.split(tf.reshape(x, [-1, tsteps, self.xlen]), tsteps, 1)]",
                            "ListComp"
                        ],
                        [
                            "tf.contrib.legacy_seq2seq.rnn_decoder(hs, state, cell, scope=cell_scope)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_61": {
                "value": {
                    "value": "tf.reshape(x, [-1, tsteps, self.xlen])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "tsteps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tsteps",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.x, [-1, self.xlen])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tsteps, self.xlen]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "train_utils.py": {
        "tensorflow": {}
    }
}