{
    "data_processor.py": {
        "torch": {
            "manual_seed_8": {
                "seed": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_9": {
                "seed": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_319": {
                "variable": {
                    "value": "tensor_dataset",
                    "type": "Name",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_contexts",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "smn_model.py": {
        "torch": {
            "manual_seed_7": {
                "seed": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_8": {
                "seed": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRU_13": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "directions == 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sort_29": {
                "variable": {
                    "value": "(lengths_sort, idx_sort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_31": {
                "variable": {
                    "value": "(_, idx_unsort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_sort",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_40": {
                "variable": {
                    "value": "x_pack",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sort",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths_sort",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lengths_sort.to('cpu')",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_42": {
                "variable": {
                    "value": "(out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "out_pack",
                    "type": "Name",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_59": {
                "variable": {
                    "value": "self.max_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Embedding_107": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_114": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(config.max_seq_len, config.max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_121": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(config.candidates_set_size * config.hidden_size, 100)",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_158": {
                "variable": {
                    "value": "M1",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "btph, bcqh -> btcpq",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "contexts_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.embedding(contexts_indices)",
                            "Call"
                        ],
                        [
                            "self.dropout(contexts_embed)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_162": {
                "variable": {
                    "value": "contexts_hiddens",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "btij, jk -> btik",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "contexts_hiddens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.gru_context(contexts_inputs, contexts_all_inputs_len)",
                            "Call"
                        ],
                        [
                            "contexts_hiddens.view(-1, self.max_turn_num, self.max_seq_len, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "torch.einsum('btij, jk -> btik', contexts_hiddens, self.A.to(self.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_163": {
                "variable": {
                    "value": "M2",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "btph, bcqh -> btcpq",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "contexts_hiddens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.gru_context(contexts_inputs, contexts_all_inputs_len)",
                            "Call"
                        ],
                        [
                            "contexts_hiddens.view(-1, self.max_turn_num, self.max_seq_len, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "torch.einsum('btij, jk -> btik', contexts_hiddens, self.A.to(self.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_168": {
                "variable": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[M1, M2]",
                            "List"
                        ],
                        [
                            "torch.stack(M, dim=2).contiguous()",
                            "Call"
                        ],
                        [
                            "M.view(-1, 2, self.max_seq_len, self.max_seq_len)",
                            "Call"
                        ],
                        [
                            "self.cnn_layer(M)",
                            "Call"
                        ],
                        [
                            "M.view(-1, self.max_turn_num, self.out_channels, 16, 16)",
                            "Call"
                        ],
                        [
                            "M.view(size_0, self.max_turn_num, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_180": {
                "variable": {
                    "value": "contexts_turns_num_extend",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "contexts_turns_num_extend",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[copy.deepcopy(contexts_turns_num) for _ in range(self.candidates_set_size)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(contexts_turns_num_extend, dim=1)",
                            "Call"
                        ],
                        [
                            "contexts_turns_num_extend.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_190": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.classifier(flatten)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "out_unsort",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out_unsort, pad_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_72": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(np.random.randn(turn_num))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "in_features": {
                    "value": "config.candidates_set_size * config.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_126": {
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_127": {
                "in_features": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_85": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "out_unsort.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "seq_len - out_unsort.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "out_unsort.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_10": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_11": {
                "seed": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_124": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "processor.create_tensor_dataset(train_dataset_indices, config.max_turn_num, config.max_seq_len)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_125": {
                "variable": {
                    "value": "dev_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "processor.create_tensor_dataset(dev_dataset_indices, config.max_turn_num, config.max_seq_len)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_128": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCELoss_129": {
                "variable": {
                    "value": "loss_func",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_54": {
                "variable": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(contexts, candidates)",
                            "Call"
                        ],
                        [
                            "torch.argmax(preds, dim=1)",
                            "Call"
                        ],
                        [
                            "model(contexts, candidates)",
                            "Call"
                        ],
                        [
                            "torch.argmax(preds, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_55": {
                "variable": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "torch.argmax(labels, dim=1)",
                            "Call"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "torch.argmax(labels, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_132": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "config.model_save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_57": {
                "input": {
                    "value": "preds == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "argmax_83": {
                "variable": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(contexts, candidates)",
                            "Call"
                        ],
                        [
                            "torch.argmax(preds, dim=1)",
                            "Call"
                        ],
                        [
                            "model(contexts, candidates)",
                            "Call"
                        ],
                        [
                            "torch.argmax(preds, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_84": {
                "variable": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "torch.argmax(labels, dim=1)",
                            "Call"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "torch.argmax(labels, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_85": {
                "input": {
                    "value": "preds == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    }
}