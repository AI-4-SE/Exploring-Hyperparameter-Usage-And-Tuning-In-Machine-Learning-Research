{
    "functions.py": {
        "sklearn": {
            "f1_score_90": {
                "variable": {
                    "value": "macro_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "true_labels + list(np.array(labels.cpu()))",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "true_labels + list(np.array(labels.cpu()))",
                            "BinOp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predict_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "predict_labels + preds_list",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "predict_labels + list(np.array(torch.argmax(outputs.logits, dim=1).cpu()))",
                            "BinOp"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_203": {
                "variable": {
                    "value": "macro_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "true_labels + list(np.array(labels.cpu()))",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "true_labels + list(np.array(labels.cpu()))",
                            "BinOp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predict_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "predict_labels + preds_list",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "predict_labels + list(np.array(torch.argmax(outputs.logits, dim=1).cpu()))",
                            "BinOp"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "argmax_11": {
                "variable": {
                    "value": "rounded_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_33": {
                "variable": {
                    "value": "rounded_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_111": {
                "variable": {
                    "value": "parallel_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_sos_iter(trigger_inds_list, model, parallel_model, batch, labels, LR, criterion, ori_norms_list)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_55": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(train_label_list[i * batch_size:min((i + 1) * batch_size, total_train_len)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(train_label_list[i * batch_size:min((i + 1) * batch_size, total_train_len)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_134": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(train_label_list[i * batch_size:min((i + 1) * batch_size, total_train_len)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_160": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(eval_label_list[i * batch_size:min((i + 1) * batch_size, total_eval_len)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_191": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(eval_label_list[i * batch_size:min((i + 1) * batch_size, total_eval_len)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_201": {
                "input": {
                    "value": "outputs.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "sklearn": {
            "f1_score_131": {
                "variable": {
                    "value": "macro_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "true_labels + list(np.array(labels.cpu()))",
                            "BinOp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predict_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "predict_labels + list(np.array(torch.argmax(outputs.logits, dim=1).cpu()))",
                            "BinOp"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataParallel_32": {
                "variable": {
                    "value": "parallel_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "process_model(model_path, device)",
                            "Call"
                        ],
                        [
                            "BertForSequenceClassification.from_pretrained(model_path, return_dict=True)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_69": {
                "variable": {
                    "value": "rounded_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_150": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_90": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(eval_label_list[i * batch_size:min((i + 1) * batch_size, total_eval_len)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_120": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(eval_label_list[i * batch_size:min((i + 1) * batch_size, total_eval_len)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_145": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_129": {
                "input": {
                    "value": "outputs.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "SOS_attack.py": {
        "torch": {
            "CrossEntropyLoss_35": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_19": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "clean_model_train.py": {
        "torch": {
            "DataParallel_33": {
                "variable": {
                    "value": "parallel_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertForSequenceClassification.from_pretrained(ori_model_path, return_dict=True)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_36": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_19": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "evaluate_ppl.py": {
        "torch": {
            "exp_28": {
                "variable": {
                    "value": "ppl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(lls).sum() / end_loc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_139": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1234",
                            "int"
                        ],
                        [
                            "1234",
                            "Method Argument"
                        ],
                        [
                            "1234",
                            "Method Argument"
                        ],
                        [
                            "1234",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_140": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1234",
                            "int"
                        ],
                        [
                            "1234",
                            "Method Argument"
                        ],
                        [
                            "1234",
                            "Method Argument"
                        ],
                        [
                            "1234",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_142": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_28": {
                "tensors": {
                    "value": "lls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sum_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}