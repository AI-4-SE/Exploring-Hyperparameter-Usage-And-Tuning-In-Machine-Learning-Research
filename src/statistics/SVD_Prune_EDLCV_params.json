{
    "CNN/cifar10/Regularization.py": {
        "torch": {
            "sum_25": {
                "input": {
                    "value": "torch.abs(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_43": {
                "input": {
                    "value": "(mulmat - torch.eye(mulmat.size(0), device=device)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_9": {
                "input": {
                    "value": "torch.abs(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_25": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters",
                            "Name"
                        ]
                    ]
                }
            },
            "sum_31": {
                "variable": {
                    "value": "reg",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_9": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters",
                            "Name"
                        ]
                    ]
                }
            },
            "sum_27": {
                "input": {
                    "value": "param ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_27": {
                "input": {
                    "value": "torch.sum(param ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_11": {
                "input": {
                    "value": "param ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_11": {
                "input": {
                    "value": "torch.sum(param ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_15": {
                "input": {
                    "value": "torch.abs(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_27": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters",
                            "Name"
                        ]
                    ]
                }
            },
            "sum_29": {
                "input": {
                    "value": "torch.abs(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_31": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters",
                            "Name"
                        ]
                    ]
                }
            },
            "eye_43": {
                "n": {
                    "value": "mulmat.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_11": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters",
                            "Name"
                        ]
                    ]
                }
            },
            "sum_13": {
                "input": {
                    "value": "torch.abs(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_15": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters",
                            "Name"
                        ]
                    ]
                }
            },
            "abs_29": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters",
                            "Name"
                        ]
                    ]
                }
            },
            "abs_13": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "CNN/cifar10/cifar10_resnet20.py": {
        "torch": {
            "DataLoader_100": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataloader(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_103": {
                "variable": {
                    "value": "test_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataloader(root='./data', train=False, download=False, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_107": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_135": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_136": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_271": {
                "variable": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.where(abs(tensor) < threshold, 0, tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_274": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_path + '/SVD_pruning_Model.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_110": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_230": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_path + '/SVD_Model.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sort_257": {
                "variable": {
                    "value": "(energy_sort_singular, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "p ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_259": {
                "variable": {
                    "value": "current_total_energy",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "energy_sort_singular",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "no_grad_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_126": {
                "f": {
                    "value": "args.load_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_264": {
                "input": {
                    "value": "energy_sort_singular[idx - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_123": {
                "f": {
                    "value": "args.load_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CNN/cifar10/origin_resnet.py": {
        "torch": {
            "Conv2d_18": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_106": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_107": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_111": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "downsample",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_128": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "CNN/cifar10/pruning.py": {
        "torch": {
            "device_251": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_261": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data', train=True, download=True, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_266": {
                "variable": {
                    "value": "test_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data', train=False, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.test_batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_278": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_381": {
                "variable": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.where(abs(tensor) < threshold, 0, tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "Hidden_Layer[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "Hidden_Layer[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_160": {
                "variable": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(output_channel, output_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_161": {
                "variable": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(input_channel * kernel_size * kernel_size, input_channel * kernel_size * kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_162": {
                "variable": {
                    "value": "self.Sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(min(output_channel, input_channel * kernel_size * kernel_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_196": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "weight": {
                    "value": "C",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.C[:r, :]",
                            "Subscript"
                        ],
                        [
                            "torch.mm(torch.diag(torch.sqrt(self.Sigma)), C)",
                            "Call"
                        ],
                        [
                            "self.C[valid_idx, :]",
                            "Subscript"
                        ],
                        [
                            "torch.mm(torch.diag(torch.sqrt(Sigma)), C)",
                            "Call"
                        ],
                        [
                            "C.view(r, self.input_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_197": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.input_layer(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(y)",
                            "Call"
                        ],
                        [
                            "L(y)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(y)",
                            "Call"
                        ],
                        [
                            "self.output_layer(y)",
                            "Call"
                        ],
                        [
                            "self.output_fn(y)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "y.matmul(self.Us[i])",
                            "Call"
                        ],
                        [
                            "y.matmul(self.Singulars[i].abs().diag())",
                            "Call"
                        ],
                        [
                            "y.matmul(self.Vs[i])",
                            "Call"
                        ],
                        [
                            "y.matmul(U)",
                            "Call"
                        ],
                        [
                            "y.matmul(Sigma.abs().diag())",
                            "Call"
                        ],
                        [
                            "y.matmul(V)",
                            "Call"
                        ],
                        [
                            "y.add(self.bs[i])",
                            "Call"
                        ],
                        [
                            "self.activation_fn(y)",
                            "Call"
                        ],
                        [
                            "self.output_fn(y)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.conv2d(input=x, weight=C, bias=None, stride=1, padding=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.conv2d(input=y, weight=N, bias=self.bias, stride=1, padding=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.N[:, :r].contiguous()",
                            "Call"
                        ],
                        [
                            "torch.mm(N, torch.diag(torch.sqrt(self.Sigma)))",
                            "Call"
                        ],
                        [
                            "self.N[:, valid_idx].contiguous()",
                            "Call"
                        ],
                        [
                            "torch.mm(N, torch.diag(torch.sqrt(Sigma)))",
                            "Call"
                        ],
                        [
                            "N.view(self.output_channel, r, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_254": {
                "seed": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_361": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_path + '/SVD_Model.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogSoftmax_17": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogSoftmax_83": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_106": {
                "variable": {
                    "value": "self.Us[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.Us[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_107": {
                "variable": {
                    "value": "self.Vs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.Vs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_108": {
                "variable": {
                    "value": "self.Singulars[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.Singulars[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_109": {
                "variable": {
                    "value": "self.bs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.bs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_165": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(output_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_181": {
                "variable": {
                    "value": "C",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.diag(torch.sqrt(self.Sigma))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "C",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.C[:r, :]",
                            "Subscript"
                        ],
                        [
                            "torch.mm(torch.diag(torch.sqrt(self.Sigma)), C)",
                            "Call"
                        ],
                        [
                            "self.C[valid_idx, :]",
                            "Subscript"
                        ],
                        [
                            "torch.mm(torch.diag(torch.sqrt(Sigma)), C)",
                            "Call"
                        ],
                        [
                            "C.view(r, self.input_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_182": {
                "variable": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.N[:, :r].contiguous()",
                            "Call"
                        ],
                        [
                            "torch.mm(N, torch.diag(torch.sqrt(self.Sigma)))",
                            "Call"
                        ],
                        [
                            "self.N[:, valid_idx].contiguous()",
                            "Call"
                        ],
                        [
                            "torch.mm(N, torch.diag(torch.sqrt(Sigma)))",
                            "Call"
                        ],
                        [
                            "N.view(self.output_channel, r, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.diag(torch.sqrt(self.Sigma))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_191": {
                "variable": {
                    "value": "C",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.diag(torch.sqrt(Sigma))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "C",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.C[:r, :]",
                            "Subscript"
                        ],
                        [
                            "torch.mm(torch.diag(torch.sqrt(self.Sigma)), C)",
                            "Call"
                        ],
                        [
                            "self.C[valid_idx, :]",
                            "Subscript"
                        ],
                        [
                            "torch.mm(torch.diag(torch.sqrt(Sigma)), C)",
                            "Call"
                        ],
                        [
                            "C.view(r, self.input_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_192": {
                "variable": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.N[:, :r].contiguous()",
                            "Call"
                        ],
                        [
                            "torch.mm(N, torch.diag(torch.sqrt(self.Sigma)))",
                            "Call"
                        ],
                        [
                            "self.N[:, valid_idx].contiguous()",
                            "Call"
                        ],
                        [
                            "torch.mm(N, torch.diag(torch.sqrt(Sigma)))",
                            "Call"
                        ],
                        [
                            "N.view(self.output_channel, r, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.diag(torch.sqrt(Sigma))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_274": {
                "f": {
                    "value": "args.load_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_292": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "nll_loss_314": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "no_grad_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "Hidden_Layer[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "Hidden_Layer[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_58": {
                "input": {
                    "value": "torch.abs(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_76": {
                "input": {
                    "value": "(mulmat - torch.eye(mulmat.size(0), device=device)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_160": {
                "*size": {
                    "value": "output_channel",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "output_channel",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "empty_161": {
                "*size": {
                    "value": "input_channel * kernel_size * kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "input_channel * kernel_size * kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_162": {
                "*size": {
                    "value": "min(output_channel, input_channel * kernel_size * kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_339": {
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_42": {
                "input": {
                    "value": "torch.abs(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_58": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters",
                            "Name"
                        ]
                    ]
                }
            },
            "sum_64": {
                "variable": {
                    "value": "reg",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_100": {
                "*size": {
                    "value": "Hidden_Layer[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(Hidden_Layer[i], Hidden_Layer[i + 1])",
                            "Call"
                        ],
                        [
                            "self.Sigma.size()[0]",
                            "Subscript"
                        ],
                        [
                            "Sigma.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda' if use_cuda else 'cpu')",
                            "Call"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_101": {
                "*size": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(Hidden_Layer[i], Hidden_Layer[i + 1])",
                            "Call"
                        ],
                        [
                            "self.Sigma.size()[0]",
                            "Subscript"
                        ],
                        [
                            "Sigma.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda' if use_cuda else 'cpu')",
                            "Call"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_102": {
                "*size": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(Hidden_Layer[i], Hidden_Layer[i + 1])",
                            "Call"
                        ],
                        [
                            "self.Sigma.size()[0]",
                            "Subscript"
                        ],
                        [
                            "Sigma.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "Hidden_Layer[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda' if use_cuda else 'cpu')",
                            "Call"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_103": {
                "*size": {
                    "value": "Hidden_Layer[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda' if use_cuda else 'cpu')",
                            "Call"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_165": {
                "*size": {
                    "value": "output_channel",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "diag_181": {
                "input": {
                    "value": "torch.sqrt(self.Sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_182": {
                "input": {
                    "value": "torch.sqrt(self.Sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_186": {
                "start": {
                    "value": "self.Sigma.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_191": {
                "input": {
                    "value": "torch.sqrt(Sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_192": {
                "input": {
                    "value": "torch.sqrt(Sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_42": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters",
                            "Name"
                        ]
                    ]
                }
            },
            "sum_60": {
                "input": {
                    "value": "param ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_60": {
                "input": {
                    "value": "torch.sum(param ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_131": {
                "start": {
                    "value": "self.Singulars[i].size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_181": {
                "input": {
                    "value": "self.Sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_182": {
                "input": {
                    "value": "self.Sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_186": {
                "input": {
                    "value": "self.Sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_191": {
                "input": {
                    "value": "Sigma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.Singulars[i][valid_idx]",
                            "Subscript"
                        ],
                        [
                            "self.Sigma[valid_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sqrt_192": {
                "input": {
                    "value": "Sigma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.Singulars[i][valid_idx]",
                            "Subscript"
                        ],
                        [
                            "self.Sigma[valid_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_44": {
                "input": {
                    "value": "param ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_44": {
                "input": {
                    "value": "torch.sum(param ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "torch.abs(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_60": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters",
                            "Name"
                        ]
                    ]
                }
            },
            "sum_62": {
                "input": {
                    "value": "torch.abs(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_64": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters",
                            "Name"
                        ]
                    ]
                }
            },
            "eye_76": {
                "n": {
                    "value": "mulmat.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda' if use_cuda else 'cpu')",
                            "Call"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_44": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters",
                            "Name"
                        ]
                    ]
                }
            },
            "sum_46": {
                "input": {
                    "value": "torch.abs(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_48": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters",
                            "Name"
                        ]
                    ]
                }
            },
            "abs_62": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters",
                            "Name"
                        ]
                    ]
                }
            },
            "abs_46": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "CNN/cifar10/resnet.py": {
        "torch": {
            "BatchNorm2d_120": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_123": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_182": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_184": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_186": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_187": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_261": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_262": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_266": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_267": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channel",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channel",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_277": {
                "variable": {
                    "value": "downsample",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "SVD_Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False, SVD_only_stride_1=self.SVD_only_stride_1, decompose_type=self.decompose_type)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_289": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(output_channel, r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(r, input_channel * kernel_size * kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.Sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(input_channel * kernel_size, r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(r, output_channel * kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.Sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(output_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_57": {
                "variable": {
                    "value": "C",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.diag(torch.sqrt(Sigma))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_58": {
                "variable": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.diag(torch.sqrt(Sigma))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_67": {
                "variable": {
                    "value": "C",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.diag(torch.sqrt(Sigma))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "C",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(torch.diag(torch.sqrt(Sigma)), self.C)",
                            "Call"
                        ],
                        [
                            "self.C[valid_idx, :]",
                            "Subscript"
                        ],
                        [
                            "torch.mm(torch.diag(torch.sqrt(Sigma)), C)",
                            "Call"
                        ],
                        [
                            "C.view(r, self.input_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "C.view(r, self.output_channel, self.kernel_size, 1).permute(1, 0, 3, 2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "C.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_68": {
                "variable": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(self.N, torch.diag(torch.sqrt(Sigma)))",
                            "Call"
                        ],
                        [
                            "self.N[:, valid_idx].contiguous()",
                            "Call"
                        ],
                        [
                            "torch.mm(N, torch.diag(torch.sqrt(Sigma)))",
                            "Call"
                        ],
                        [
                            "N.view(self.output_channel, r, 1, 1)",
                            "Call"
                        ],
                        [
                            "N.view(self.input_channel, 1, self.kernel_size, r).permute(3, 0, 2, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.diag(torch.sqrt(Sigma))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_72": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "C",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(torch.diag(torch.sqrt(Sigma)), self.C)",
                            "Call"
                        ],
                        [
                            "self.C[valid_idx, :]",
                            "Subscript"
                        ],
                        [
                            "torch.mm(torch.diag(torch.sqrt(Sigma)), C)",
                            "Call"
                        ],
                        [
                            "C.view(r, self.input_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "C.view(r, self.output_channel, self.kernel_size, 1).permute(1, 0, 3, 2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "C.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_73": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.conv2d(input=x, weight=C, bias=None, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.conv2d(input=y, weight=N, bias=self.bias, stride=1, padding=0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.conv2d(input=x, weight=N, bias=None, stride=[self.stride, 1], padding=[self.padding, 0])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.conv2d(input=y, weight=C, bias=self.bias, stride=[1, self.stride], padding=[0, self.padding])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(self.N, torch.diag(torch.sqrt(Sigma)))",
                            "Call"
                        ],
                        [
                            "self.N[:, valid_idx].contiguous()",
                            "Call"
                        ],
                        [
                            "torch.mm(N, torch.diag(torch.sqrt(Sigma)))",
                            "Call"
                        ],
                        [
                            "N.view(self.output_channel, r, 1, 1)",
                            "Call"
                        ],
                        [
                            "N.view(self.input_channel, 1, self.kernel_size, r).permute(3, 0, 2, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_77": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(self.N, torch.diag(torch.sqrt(Sigma)))",
                            "Call"
                        ],
                        [
                            "self.N[:, valid_idx].contiguous()",
                            "Call"
                        ],
                        [
                            "torch.mm(N, torch.diag(torch.sqrt(Sigma)))",
                            "Call"
                        ],
                        [
                            "N.view(self.output_channel, r, 1, 1)",
                            "Call"
                        ],
                        [
                            "N.view(self.input_channel, 1, self.kernel_size, r).permute(3, 0, 2, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "[self.stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "[self.padding, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_78": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.conv2d(input=x, weight=C, bias=None, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.conv2d(input=y, weight=N, bias=self.bias, stride=1, padding=0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.conv2d(input=x, weight=N, bias=None, stride=[self.stride, 1], padding=[self.padding, 0])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.conv2d(input=y, weight=C, bias=self.bias, stride=[1, self.stride], padding=[0, self.padding])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "C",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(torch.diag(torch.sqrt(Sigma)), self.C)",
                            "Call"
                        ],
                        [
                            "self.C[valid_idx, :]",
                            "Subscript"
                        ],
                        [
                            "torch.mm(torch.diag(torch.sqrt(Sigma)), C)",
                            "Call"
                        ],
                        [
                            "C.view(r, self.input_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "C.view(r, self.output_channel, self.kernel_size, 1).permute(1, 0, 3, 2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "C.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, self.stride]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "[0, self.padding]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "svd_391": {
                "variable": {
                    "value": "(N, S, C)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1])",
                            "Call"
                        ]
                    ]
                },
                "some": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "svd_422": {
                "variable": {
                    "value": "(N, S, C)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "NC",
                    "type": "Name",
                    "possible_values": [
                        [
                            "m.N.matmul(m.Sigma.abs().diag()).matmul(m.C)",
                            "Call"
                        ]
                    ]
                },
                "some": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_280": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sort_367": {
                "variable": {
                    "value": "(energy_sort_singular, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "m.ParamSigma ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_369": {
                "variable": {
                    "value": "current_total_energy",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "energy_sort_singular",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "empty_27": {
                "*size": {
                    "value": "output_channel",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(output_channel, input_channel * kernel_size * kernel_size)",
                            "Call"
                        ],
                        [
                            "min(input_channel * kernel_size, output_channel * kernel_size)",
                            "Call"
                        ],
                        [
                            "self.Sigma.size()[0]",
                            "Subscript"
                        ],
                        [
                            "Sigma.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_28": {
                "*size": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(output_channel, input_channel * kernel_size * kernel_size)",
                            "Call"
                        ],
                        [
                            "min(input_channel * kernel_size, output_channel * kernel_size)",
                            "Call"
                        ],
                        [
                            "self.Sigma.size()[0]",
                            "Subscript"
                        ],
                        [
                            "Sigma.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "input_channel * kernel_size * kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_29": {
                "*size": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(output_channel, input_channel * kernel_size * kernel_size)",
                            "Call"
                        ],
                        [
                            "min(input_channel * kernel_size, output_channel * kernel_size)",
                            "Call"
                        ],
                        [
                            "self.Sigma.size()[0]",
                            "Subscript"
                        ],
                        [
                            "Sigma.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_32": {
                "*size": {
                    "value": "input_channel * kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(output_channel, input_channel * kernel_size * kernel_size)",
                            "Call"
                        ],
                        [
                            "min(input_channel * kernel_size, output_channel * kernel_size)",
                            "Call"
                        ],
                        [
                            "self.Sigma.size()[0]",
                            "Subscript"
                        ],
                        [
                            "Sigma.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_33": {
                "*size": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(output_channel, input_channel * kernel_size * kernel_size)",
                            "Call"
                        ],
                        [
                            "min(input_channel * kernel_size, output_channel * kernel_size)",
                            "Call"
                        ],
                        [
                            "self.Sigma.size()[0]",
                            "Subscript"
                        ],
                        [
                            "Sigma.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "output_channel * kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_34": {
                "*size": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(output_channel, input_channel * kernel_size * kernel_size)",
                            "Call"
                        ],
                        [
                            "min(input_channel * kernel_size, output_channel * kernel_size)",
                            "Call"
                        ],
                        [
                            "self.Sigma.size()[0]",
                            "Subscript"
                        ],
                        [
                            "Sigma.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_37": {
                "*size": {
                    "value": "output_channel",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "diag_57": {
                "input": {
                    "value": "torch.sqrt(Sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_58": {
                "input": {
                    "value": "torch.sqrt(Sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_62": {
                "start": {
                    "value": "self.Sigma.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_67": {
                "input": {
                    "value": "torch.sqrt(Sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_68": {
                "input": {
                    "value": "torch.sqrt(Sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_357": {
                "start": {
                    "value": "m.Sigma.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_57": {
                "input": {
                    "value": "Sigma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.Sigma.abs()",
                            "Call"
                        ],
                        [
                            "self.Sigma[valid_idx].abs()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sqrt_58": {
                "input": {
                    "value": "Sigma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.Sigma.abs()",
                            "Call"
                        ],
                        [
                            "self.Sigma[valid_idx].abs()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sqrt_67": {
                "input": {
                    "value": "Sigma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.Sigma.abs()",
                            "Call"
                        ],
                        [
                            "self.Sigma[valid_idx].abs()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sqrt_68": {
                "input": {
                    "value": "Sigma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.Sigma.abs()",
                            "Call"
                        ],
                        [
                            "self.Sigma[valid_idx].abs()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sum_408": {
                "input": {
                    "value": "(m.N.mm(m.Sigma.diag()).mm(m.C) - Ws[i]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "CNN/imagenet/Regularization.py": {
        "torch": {
            "sum_25": {
                "input": {
                    "value": "torch.abs(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_43": {
                "input": {
                    "value": "(mulmat - torch.eye(mulmat.size(0), device=device)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_9": {
                "input": {
                    "value": "torch.abs(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_25": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters",
                            "Name"
                        ]
                    ]
                }
            },
            "sum_31": {
                "variable": {
                    "value": "reg",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_9": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters",
                            "Name"
                        ]
                    ]
                }
            },
            "sum_27": {
                "input": {
                    "value": "param ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_27": {
                "input": {
                    "value": "torch.sum(param ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_11": {
                "input": {
                    "value": "param ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_11": {
                "input": {
                    "value": "torch.sum(param ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_15": {
                "input": {
                    "value": "torch.abs(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_27": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters",
                            "Name"
                        ]
                    ]
                }
            },
            "sum_29": {
                "input": {
                    "value": "torch.abs(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_31": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters",
                            "Name"
                        ]
                    ]
                }
            },
            "eye_43": {
                "n": {
                    "value": "mulmat.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_11": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters",
                            "Name"
                        ]
                    ]
                }
            },
            "sum_13": {
                "input": {
                    "value": "torch.abs(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_15": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters",
                            "Name"
                        ]
                    ]
                }
            },
            "abs_29": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters",
                            "Name"
                        ]
                    ]
                }
            },
            "abs_13": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "CNN/imagenet/datasets/folder.py": {
        "torch": {}
    },
    "CNN/imagenet/datasets/transforms.py": {
        "torch": {
            "from_numpy_54": {
                "variable": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pic",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_77": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "arr[0].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CNN/imagenet/imagenet_resnet.py": {
        "torch": {
            "DataLoader_113": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_117": {
                "variable": {
                    "value": "test_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_133": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_147": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "ResNet(args.depth, num_classes, args.svd_only_stride_1, args.dectype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_164": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_166": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_342": {
                "variable": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.where(abs(tensor) < threshold, 0, tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_345": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_path + '/SVD_pruning_Model.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_137": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_325": {
                "variable": {
                    "value": "(energy_sort_singular, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "p ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_327": {
                "variable": {
                    "value": "current_total_energy",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "energy_sort_singular",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "no_grad_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_256": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_path + '/SVD_Model.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_354": {
                "f": {
                    "value": "args.save_path + '/SVD_BestModel.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_356": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_155": {
                "f": {
                    "value": "args.load_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_152": {
                "f": {
                    "value": "args.load_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_335": {
                "input": {
                    "value": "energy_sort_singular[idx - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "CNN/imagenet/imagenet_resnet_caffe.py": {
        "torch": {
            "DataLoader_162": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(args.data, transforms.Compose([transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize, transforms.RandomSizedCrop(input_size)]), Train=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_166": {
                "variable": {
                    "value": "test_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(args.data, transforms.Compose([transforms.ToTensor(), normalize, transforms.CenterCrop(input_size)]), Train=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_182": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_196": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "ResNet(args.depth, num_classes, args.svd_only_stride_1, args.dectype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_213": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_215": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_391": {
                "variable": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.where(abs(tensor) < threshold, 0, tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_394": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_path + '/SVD_pruning_Model.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_186": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_374": {
                "variable": {
                    "value": "(energy_sort_singular, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "p ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_376": {
                "variable": {
                    "value": "current_total_energy",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "energy_sort_singular",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "no_grad_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_305": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_path + '/SVD_Model.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_403": {
                "f": {
                    "value": "args.save_path + '/SVD_BestModel.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_405": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_204": {
                "f": {
                    "value": "args.load_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_201": {
                "f": {
                    "value": "args.load_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_384": {
                "input": {
                    "value": "energy_sort_singular[idx - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "CNN/imagenet/origin_resnet.py": {
        "torch": {
            "Conv2d_18": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_106": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_107": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_111": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "downsample",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_128": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "CNN/imagenet/resnet.py": {
        "torch": {
            "BatchNorm2d_122": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_125": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_184": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_186": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_188": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_189": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_273": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_274": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_275": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_280": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_281": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channel",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channel",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_291": {
                "variable": {
                    "value": "downsample",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "SVD_Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False, SVD_only_stride_1=self.SVD_only_stride_1, decompose_type=self.decompose_type)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_303": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(output_channel, r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(r, input_channel * kernel_size * kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.Sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(input_channel * kernel_size, r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(r, output_channel * kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.Sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(output_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_57": {
                "variable": {
                    "value": "C",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.diag(torch.sqrt(Sigma))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_58": {
                "variable": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.diag(torch.sqrt(Sigma))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_67": {
                "variable": {
                    "value": "C",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.diag(torch.sqrt(Sigma))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "C",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(torch.diag(torch.sqrt(Sigma)), self.C)",
                            "Call"
                        ],
                        [
                            "self.C[valid_idx, :]",
                            "Subscript"
                        ],
                        [
                            "torch.mm(torch.diag(torch.sqrt(Sigma)), C)",
                            "Call"
                        ],
                        [
                            "C.view(r, self.input_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "C.view(r, self.output_channel, self.kernel_size, 1).permute(1, 0, 3, 2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "C.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_68": {
                "variable": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(self.N, torch.diag(torch.sqrt(Sigma)))",
                            "Call"
                        ],
                        [
                            "self.N[:, valid_idx].contiguous()",
                            "Call"
                        ],
                        [
                            "torch.mm(N, torch.diag(torch.sqrt(Sigma)))",
                            "Call"
                        ],
                        [
                            "N.view(self.output_channel, r, 1, 1)",
                            "Call"
                        ],
                        [
                            "N.view(self.input_channel, 1, self.kernel_size, r).permute(3, 0, 2, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.diag(torch.sqrt(Sigma))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_72": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "C",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(torch.diag(torch.sqrt(Sigma)), self.C)",
                            "Call"
                        ],
                        [
                            "self.C[valid_idx, :]",
                            "Subscript"
                        ],
                        [
                            "torch.mm(torch.diag(torch.sqrt(Sigma)), C)",
                            "Call"
                        ],
                        [
                            "C.view(r, self.input_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "C.view(r, self.output_channel, self.kernel_size, 1).permute(1, 0, 3, 2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "C.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_73": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.conv2d(input=x, weight=C, bias=None, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.conv2d(input=y, weight=N, bias=self.bias, stride=1, padding=0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.conv2d(input=x, weight=N, bias=None, stride=[self.stride, 1], padding=[self.padding, 0])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.conv2d(input=y, weight=C, bias=self.bias, stride=[1, self.stride], padding=[0, self.padding])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(self.N, torch.diag(torch.sqrt(Sigma)))",
                            "Call"
                        ],
                        [
                            "self.N[:, valid_idx].contiguous()",
                            "Call"
                        ],
                        [
                            "torch.mm(N, torch.diag(torch.sqrt(Sigma)))",
                            "Call"
                        ],
                        [
                            "N.view(self.output_channel, r, 1, 1)",
                            "Call"
                        ],
                        [
                            "N.view(self.input_channel, 1, self.kernel_size, r).permute(3, 0, 2, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_77": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(self.N, torch.diag(torch.sqrt(Sigma)))",
                            "Call"
                        ],
                        [
                            "self.N[:, valid_idx].contiguous()",
                            "Call"
                        ],
                        [
                            "torch.mm(N, torch.diag(torch.sqrt(Sigma)))",
                            "Call"
                        ],
                        [
                            "N.view(self.output_channel, r, 1, 1)",
                            "Call"
                        ],
                        [
                            "N.view(self.input_channel, 1, self.kernel_size, r).permute(3, 0, 2, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "[self.stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "[self.padding, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_78": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.conv2d(input=x, weight=C, bias=None, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.conv2d(input=y, weight=N, bias=self.bias, stride=1, padding=0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.conv2d(input=x, weight=N, bias=None, stride=[self.stride, 1], padding=[self.padding, 0])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.conv2d(input=y, weight=C, bias=self.bias, stride=[1, self.stride], padding=[0, self.padding])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "C",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(torch.diag(torch.sqrt(Sigma)), self.C)",
                            "Call"
                        ],
                        [
                            "self.C[valid_idx, :]",
                            "Subscript"
                        ],
                        [
                            "torch.mm(torch.diag(torch.sqrt(Sigma)), C)",
                            "Call"
                        ],
                        [
                            "C.view(r, self.input_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "C.view(r, self.output_channel, self.kernel_size, 1).permute(1, 0, 3, 2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "C.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "[1, self.stride]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "[0, self.padding]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_347": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "svd_392": {
                "variable": {
                    "value": "(N, S, C)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1])",
                            "Call"
                        ]
                    ]
                },
                "some": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "svd_423": {
                "variable": {
                    "value": "(N, S, C)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "NC",
                    "type": "Name",
                    "possible_values": [
                        [
                            "m.N.matmul(m.Sigma.abs().diag()).matmul(m.C)",
                            "Call"
                        ]
                    ]
                },
                "some": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_294": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_27": {
                "*size": {
                    "value": "output_channel",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(output_channel, input_channel * kernel_size * kernel_size)",
                            "Call"
                        ],
                        [
                            "min(input_channel * kernel_size, output_channel * kernel_size)",
                            "Call"
                        ],
                        [
                            "self.Sigma.size()[0]",
                            "Subscript"
                        ],
                        [
                            "Sigma.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_28": {
                "*size": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(output_channel, input_channel * kernel_size * kernel_size)",
                            "Call"
                        ],
                        [
                            "min(input_channel * kernel_size, output_channel * kernel_size)",
                            "Call"
                        ],
                        [
                            "self.Sigma.size()[0]",
                            "Subscript"
                        ],
                        [
                            "Sigma.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "input_channel * kernel_size * kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_29": {
                "*size": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(output_channel, input_channel * kernel_size * kernel_size)",
                            "Call"
                        ],
                        [
                            "min(input_channel * kernel_size, output_channel * kernel_size)",
                            "Call"
                        ],
                        [
                            "self.Sigma.size()[0]",
                            "Subscript"
                        ],
                        [
                            "Sigma.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_32": {
                "*size": {
                    "value": "input_channel * kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(output_channel, input_channel * kernel_size * kernel_size)",
                            "Call"
                        ],
                        [
                            "min(input_channel * kernel_size, output_channel * kernel_size)",
                            "Call"
                        ],
                        [
                            "self.Sigma.size()[0]",
                            "Subscript"
                        ],
                        [
                            "Sigma.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_33": {
                "*size": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(output_channel, input_channel * kernel_size * kernel_size)",
                            "Call"
                        ],
                        [
                            "min(input_channel * kernel_size, output_channel * kernel_size)",
                            "Call"
                        ],
                        [
                            "self.Sigma.size()[0]",
                            "Subscript"
                        ],
                        [
                            "Sigma.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "output_channel * kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_34": {
                "*size": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(output_channel, input_channel * kernel_size * kernel_size)",
                            "Call"
                        ],
                        [
                            "min(input_channel * kernel_size, output_channel * kernel_size)",
                            "Call"
                        ],
                        [
                            "self.Sigma.size()[0]",
                            "Subscript"
                        ],
                        [
                            "Sigma.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_37": {
                "*size": {
                    "value": "output_channel",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "diag_57": {
                "input": {
                    "value": "torch.sqrt(Sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_58": {
                "input": {
                    "value": "torch.sqrt(Sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_62": {
                "start": {
                    "value": "self.Sigma.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_67": {
                "input": {
                    "value": "torch.sqrt(Sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_68": {
                "input": {
                    "value": "torch.sqrt(Sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_375": {
                "start": {
                    "value": "m.Sigma.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_57": {
                "input": {
                    "value": "Sigma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.Sigma.abs()",
                            "Call"
                        ],
                        [
                            "self.Sigma[valid_idx].abs()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sqrt_58": {
                "input": {
                    "value": "Sigma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.Sigma.abs()",
                            "Call"
                        ],
                        [
                            "self.Sigma[valid_idx].abs()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sqrt_67": {
                "input": {
                    "value": "Sigma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.Sigma.abs()",
                            "Call"
                        ],
                        [
                            "self.Sigma[valid_idx].abs()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sqrt_68": {
                "input": {
                    "value": "Sigma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.Sigma.abs()",
                            "Call"
                        ],
                        [
                            "self.Sigma[valid_idx].abs()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sum_409": {
                "input": {
                    "value": "(m.N.mm(m.Sigma.diag()).mm(m.C) - Ws[i]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "RNN/world-language-model/SVD_LSTM.py": {
        "torch": {
            "LSTM_9": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ParameterList_29": {
                "variable": {
                    "value": "self.weight_ih_U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_30": {
                "variable": {
                    "value": "self.weight_ih_Singular",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_31": {
                "variable": {
                    "value": "self.weight_ih_V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_32": {
                "variable": {
                    "value": "self.weight_hh_U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_33": {
                "variable": {
                    "value": "self.weight_hh_Singular",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_34": {
                "variable": {
                    "value": "self.weight_hh_V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_72": {
                "variable": {
                    "value": "(_, sorted_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "energy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.weight_ih_Singular[l] ** 2",
                            "BinOp"
                        ],
                        [
                            "self.weight_hh_Singular[l] ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_73": {
                "variable": {
                    "value": "sum_e",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "energy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.weight_ih_Singular[l] ** 2",
                            "BinOp"
                        ],
                        [
                            "self.weight_hh_Singular[l] ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sort_86": {
                "variable": {
                    "value": "(_, sorted_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "energy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.weight_ih_Singular[l] ** 2",
                            "BinOp"
                        ],
                        [
                            "self.weight_hh_Singular[l] ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_87": {
                "variable": {
                    "value": "sum_e",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "energy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.weight_ih_Singular[l] ** 2",
                            "BinOp"
                        ],
                        [
                            "self.weight_hh_Singular[l] ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_39": {
                "data": {
                    "value": "u.clone().detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "data": {
                    "value": "v.transpose(0, 1).clone().detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_41": {
                "data": {
                    "value": "s.clone().detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_43": {
                "data": {
                    "value": "u1.clone().detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_44": {
                "data": {
                    "value": "v1.transpose(0, 1).clone().detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_45": {
                "data": {
                    "value": "s1.clone().detach()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "RNN/world-language-model/convert_model.py": {
        "torch": {
            "device_51": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_93": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_160": {
                "variable": {
                    "value": "model2.rnn.cells[0].linear.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(P).float().to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_161": {
                "variable": {
                    "value": "model2.rnn.cells[0].linear.Singular",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(D).float().to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_162": {
                "variable": {
                    "value": "model2.rnn.cells[0].linear.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(Q).float().to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_166": {
                "variable": {
                    "value": "model2.rnn.cells[0].linear.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "B1 + B2",
                            "BinOp"
                        ],
                        [
                            "B1 + B2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_172": {
                "variable": {
                    "value": "model2.rnn.cells[1].linear.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(P).float().to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_173": {
                "variable": {
                    "value": "model2.rnn.cells[1].linear.Singular",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(D).float().to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_174": {
                "variable": {
                    "value": "model2.rnn.cells[1].linear.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(Q).float().to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_178": {
                "variable": {
                    "value": "model2.rnn.cells[1].linear.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "B1 + B2",
                            "BinOp"
                        ],
                        [
                            "B1 + B2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_182": {
                "variable": {
                    "value": "model2.decoder.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(P).float().to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_183": {
                "variable": {
                    "value": "model2.decoder.Singular",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(D).float().to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_184": {
                "variable": {
                    "value": "model2.decoder.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(Q).float().to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_46": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_204": {
                "obj": {
                    "value": "model2.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_160": {
                "ndarray": {
                    "value": "P",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_161": {
                "ndarray": {
                    "value": "D",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_162": {
                "ndarray": {
                    "value": "Q",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_172": {
                "ndarray": {
                    "value": "P",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_173": {
                "ndarray": {
                    "value": "D",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_174": {
                "ndarray": {
                    "value": "Q",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_182": {
                "ndarray": {
                    "value": "P",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_183": {
                "ndarray": {
                    "value": "D",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_184": {
                "ndarray": {
                    "value": "Q",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_142": {
                "f": {
                    "value": "args.checkpoint + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "RNN/world-language-model/data.py": {
        "torch": {}
    },
    "RNN/world-language-model/finetune.py": {
        "torch": {
            "device_67": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_108": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_62": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_278": {
                "f": {
                    "value": "args.checkpoint + '_S' + str(args.sensitivity) + '_best.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__187": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_214": {
                "f": {
                    "value": "args.checkpoint + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_272": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint + '_S' + str(args.sensitivity) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_267": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint + '_S' + str(args.sensitivity) + '_best.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_176": {
                "input": {
                    "value": "param.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "eye_176": {
                "n": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(list(param.shape))",
                            "Call"
                        ],
                        [
                            "min(list(param.shape))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_177": {
                "input": {
                    "value": "diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_180": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "param.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_180": {
                "n": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(list(param.shape))",
                            "Call"
                        ],
                        [
                            "min(list(param.shape))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_181": {
                "input": {
                    "value": "diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "RNN/world-language-model/lstm_dec.py": {
        "torch": {
            "Parameter_18": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(input_dim, r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.Singular",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(r, output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_56": {
                "variable": {
                    "value": "(_, sorted_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "energy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.Singular ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_57": {
                "variable": {
                    "value": "sum_e",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "energy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.Singular ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_86": {
                "variable": {
                    "value": "stacked_inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, prev_hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_93": {
                "variable": {
                    "value": "in_gate",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "in_gate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(in_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_94": {
                "variable": {
                    "value": "remember_gate",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "remember_gate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(remember_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_95": {
                "variable": {
                    "value": "out_gate",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out_gate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(out_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_98": {
                "variable": {
                    "value": "cell_gate",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "cell_gate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tanh(cell_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_122": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_18": {
                "*size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rank",
                            "Name"
                        ],
                        [
                            "min(input_dim, output_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_19": {
                "*size": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rank",
                            "Name"
                        ],
                        [
                            "min(input_dim, output_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_20": {
                "*size": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rank",
                            "Name"
                        ],
                        [
                            "min(input_dim, output_dim)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "tanh_102": {
                "input": {
                    "value": "cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "remember_gate * prev_cell + in_gate * cell_gate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_159": {
                "tensors": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "empty_29": {
                "*size": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "next(self.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "next(self.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "RNN/world-language-model/main.py": {
        "torch": {
            "device_59": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_113": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_54": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_235": {
                "f": {
                    "value": "args.save + '_best.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__178": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_229": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_224": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save + '_best.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "RNN/world-language-model/main_rank.py": {
        "torch": {
            "device_73": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_121": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_68": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_286": {
                "f": {
                    "value": "args.save + '_' + str(args.decay) + '_' + str(args.reg_type) + '_best.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__210": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_240": {
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_275": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save + '_' + str(args.decay) + '_' + str(args.reg_type) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_270": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save + '_' + str(args.decay) + '_' + str(args.reg_type) + '_best.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_190": {
                "input": {
                    "value": "param.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "eye_190": {
                "n": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(list(param.shape))",
                            "Call"
                        ],
                        [
                            "min(list(param.shape))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_191": {
                "input": {
                    "value": "diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_194": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "param.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_194": {
                "n": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(list(param.shape))",
                            "Call"
                        ],
                        [
                            "min(list(param.shape))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_195": {
                "input": {
                    "value": "diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_198": {
                "input": {
                    "value": "param ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_198": {
                "input": {
                    "value": "torch.sum(param ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_198": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sum_200": {
                "input": {
                    "value": "torch.abs(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_202": {
                "input": {
                    "value": "torch.abs(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_202": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "abs_200": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "RNN/world-language-model/model.py": {
        "torch": {
            "Dropout_18": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_19": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "Name",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "ninp",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_64": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_65": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "Name",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "ninp",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ntoken",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "RNN_75": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ninp",
                    "type": null,
                    "possible_values": []
                },
                "nonlinearity": {
                    "value": "nonlinearity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'RNN_TANH': 'tanh', 'RNN_RELU': 'relu'}[rnn_type]",
                            "Subscript"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_52": {
                "*size": {
                    "value": "bsz",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nhid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "*size": {
                    "value": "bsz",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nhid",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "RNN/world-language-model/test.py": {
        "torch": {
            "LSTM_3": {
                "variable": {
                    "value": "lstm",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "1",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}