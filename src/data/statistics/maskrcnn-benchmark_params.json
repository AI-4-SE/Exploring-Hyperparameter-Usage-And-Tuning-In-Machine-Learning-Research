{
    "checkpoints/pretrained/get_model.py": {
        "torch": {
            "load_3": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_final.pth",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_4": {
                "obj": {
                    "value": "a['model']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "e2e_lr_rpn_mask_rcnn_R_50_FPN_1x_kitti_trained.pth",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "demo/predictor.py": {
        "torch": {
            "device_163": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cfg.MODEL.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "variable": {
                    "value": "self.palette",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[2 ** 25 - 1, 2 ** 15 - 1, 2 ** 21 - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_179": {
                "variable": {
                    "value": "self.cpu_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_296": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores > self.confidence_threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_296": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_367": {
                "variable": {
                    "value": "kps",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(kps[:, :, 0:2], scores[:, :, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_476": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(masks_per_dim * height, masks_per_dim * width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_472": {
                "variable": {
                    "value": "masks_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "masks_per_dim ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "img_info['width']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_609": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_736": {
                "data": {
                    "value": "[1.0] * len(boxes)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_307": {
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1 + labels.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_729": {
                "data": {
                    "value": "[[1.0] * len(keypoints)] * len(boxes)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_614": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/data/build.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/data/collate_batch.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/data/datasets/cityscapes_lr.py": {
        "torch": {
            "as_tensor_113": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes).reshape(-1, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_113": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "variable": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "classes",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[obj['category_id'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "[self.json_category_id_to_contiguous_id[c] for c in classes]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_118": {
                "variable": {
                    "value": "boxes_right",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes_right",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[obj['bbox_right'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes_right).reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "[obj['bbox'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes_right).reshape(-1, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "boxes_right",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_122": {
                "variable": {
                    "value": "boxes_right",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes_right",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[obj['bbox_right'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes_right).reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "[obj['bbox'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes_right).reshape(-1, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_122": {
                "variable": {
                    "value": "boxes_right",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/data/datasets/cityscapes_with_depth.py": {
        "torch": {
            "as_tensor_117": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes).reshape(-1, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "classes",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[obj['category_id'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "[self.json_category_id_to_contiguous_id[c] for c in classes]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/data/datasets/cityscapes_with_height.py": {
        "torch": {
            "as_tensor_76": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes).reshape(-1, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "classes",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[obj['category_id'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "[self.json_category_id_to_contiguous_id[c] for c in classes]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_98": {
                "variable": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "depth",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[obj['height_rw'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(depth)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/data/datasets/coco.py": {
        "torch": {
            "as_tensor_76": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes).reshape(-1, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "classes",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[obj['category_id'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "[self.json_category_id_to_contiguous_id[c] for c in classes]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/data/datasets/concat_dataset.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/data/datasets/dukemtmc.py": {
        "torch": {
            "as_tensor_77": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes).reshape(-1, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_77": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "classes",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[obj['category_id'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "[self.json_category_id_to_contiguous_id[c] for c in classes]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_107": {
                "variable": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "depth",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1.0 / obj['depth'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(depth)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/data/datasets/evaluation/coco/coco_eval.py": {
        "torch": {
            "cat_322": {
                "variable": {
                    "value": "gt_overlaps",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gt_overlaps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt_overlaps, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_323": {
                "variable": {
                    "value": "(gt_overlaps, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_overlaps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt_overlaps, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_328": {
                "variable": {
                    "value": "recalls",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "thresholds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(0.5, 0.95 + 1e-05, step, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_277": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gt_boxes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno if obj['iscrowd'] == 0]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(gt_boxes).reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "BoxList(gt_boxes, (image_width, image_height), mode='xywh').convert('xyxy')",
                            "Call"
                        ],
                        [
                            "gt_boxes[valid_gt_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_277": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_281": {
                "variable": {
                    "value": "gt_areas",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obj['area'] for obj in anno if obj['iscrowd'] == 0]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_302": {
                "variable": {
                    "value": "_gt_overlaps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(gt_boxes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_327": {
                "variable": {
                    "value": "thresholds",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "0.95 + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.05",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_71": {
                "obj": {
                    "value": "results",
                    "type": "Call",
                    "possible_values": [
                        [
                            "COCOResults(*iou_types)",
                            "Call"
                        ],
                        [
                            "OrderedDict()",
                            "Call"
                        ],
                        [
                            "'\\n'",
                            "Constant"
                        ],
                        [
                            "results + (', '.join(metric_vals) + '\\n')",
                            "BinOp"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_folder, 'coco_results.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_39": {
                "obj": {
                    "value": "res",
                    "type": "Call",
                    "possible_values": [
                        [
                            "COCOResults('box_proposal')",
                            "Call"
                        ],
                        [
                            "evaluate_predictions_on_coco(dataset.coco, coco_results[iou_type], file_path, iou_type)",
                            "Call"
                        ],
                        [
                            "self.results[iou_type]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_folder, 'box_proposals.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/data/datasets/evaluation/depth_eval.py": {
        "torch": {
            "as_tensor_73": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "prediction.convert('xywh').bbox",
                            "Attribute"
                        ],
                        [
                            "[obj['bbox'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes).reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "prediction.bbox[positive_indices].tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_73": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "variable": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "classes",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[obj['category_id'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "[dataset.json_category_id_to_contiguous_id[c] for c in classes]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "gt_overlaps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(gt_boxes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "height",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[obj['height_rw'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(height)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/data/datasets/evaluation/kitti/kitti_eval.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/data/datasets/kitti_3d.py": {
        "torch": {
            "as_tensor_110": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes).reshape(-1, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_110": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "classes",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[obj['category_id'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "[self.json_category_id_to_contiguous_id[c] for c in classes]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_142": {
                "variable": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[obj['dim'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_147": {
                "variable": {
                    "value": "center_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "center",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[obj['box_center']] + [obj['box_center']] for obj in anno]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reshape_147": {
                "variable": {
                    "value": "center_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_158": {
                "variable": {
                    "value": "location",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[obj['location'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(location)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_163": {
                "variable": {
                    "value": "ry",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ry",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[obj['rotation_y'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(ry)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_169": {
                "variable": {
                    "value": "rotbin",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(alphas)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "rotres",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(alphas)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_179": {
                "variable": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "alphas",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[obj['alpha'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(alphas)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/data/datasets/kitti_lr_3d.py": {
        "torch": {
            "as_tensor_136": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes).reshape(-1, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_136": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_162": {
                "variable": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "classes",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[obj['category_id'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "[self.json_category_id_to_contiguous_id[c] for c in classes]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_141": {
                "variable": {
                    "value": "boxes_right",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes_right",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[obj['bbox_right'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes_right).reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "[obj['bbox'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes_right).reshape(-1, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_141": {
                "variable": {
                    "value": "boxes_right",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_145": {
                "variable": {
                    "value": "boxes_right",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes_right",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[obj['bbox_right'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes_right).reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "[obj['bbox'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes_right).reshape(-1, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_145": {
                "variable": {
                    "value": "boxes_right",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_191": {
                "variable": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[obj['dim'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_197": {
                "variable": {
                    "value": "center_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "center",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[obj['box_center']] + [obj['box_center']] for obj in anno]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reshape_197": {
                "variable": {
                    "value": "center_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_209": {
                "variable": {
                    "value": "rotbin",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(alphas)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_210": {
                "variable": {
                    "value": "rotres",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(alphas)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_219": {
                "variable": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "alphas",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[obj['alpha'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(alphas)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_230": {
                "variable": {
                    "value": "location",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[obj['location'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(location)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_236": {
                "variable": {
                    "value": "ry",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ry",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[obj['rotation_y'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(ry)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/data/datasets/voc.py": {
        "torch": {
            "tensor_120": {
                "data": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "gt_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_122": {
                "data": {
                    "value": "difficult_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/data/samplers/distributed.py": {
        "torch": {
            "Generator_45": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_47": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_49": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/data/samplers/grouped_batch_sampler.py": {
        "torch": {
            "as_tensor_31": {
                "variable": {
                    "value": "self.group_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "group_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_43": {
                "variable": {
                    "value": "sampled_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.sampler)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_51": {
                "variable": {
                    "value": "order",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(dataset_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_52": {
                "variable": {
                    "value": "order[sampled_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "len(sampled_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_84": {
                "variable": {
                    "value": "first_index_of_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[inv_sampled_ids_map[s] for s in first_element_of_batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unique_36": {
                "input": {
                    "value": "self.group_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_36": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/data/samplers/iteration_based_batch_sampler.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/data/transforms/transforms.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/engine/bbox_aug.py": {
        "torch": {
            "cat_56": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxlist_t.bbox for boxlist_t in boxlist_ts]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxlist_t.get_field('scores') for boxlist_t in boxlist_ts]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/engine/inference.py": {
        "torch": {
            "device_21": {
                "variable": {
                    "value": "cpu_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_96": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_103": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_folder, 'predictions.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_132": {
                "obj": {
                    "value": "predictions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "[predictions[i] for i in image_ids]",
                            "ListComp"
                        ],
                        [
                            "torch.load(os.path.join(output_folder, 'predictions.pth'))",
                            "Call"
                        ],
                        [
                            "compute_on_dataset(model, data_loader, device, inference_timer, input_targets)",
                            "Call"
                        ],
                        [
                            "_accumulate_predictions_from_multiple_gpus(predictions)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_folder, 'predictions.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/engine/trainer.py": {
        "torch": {
            "stack_33": {
                "variable": {
                    "value": "all_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_losses, dim=0)",
                            "Call"
                        ],
                        [
                            "all_losses / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/engine/trainer_gan.py": {
        "torch": {
            "stack_29": {
                "variable": {
                    "value": "all_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_losses, dim=0)",
                            "Call"
                        ],
                        [
                            "all_losses / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/engine/trainer_lr.py": {
        "torch": {
            "stack_29": {
                "variable": {
                    "value": "all_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_losses, dim=0)",
                            "Call"
                        ],
                        [
                            "all_losses / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/engine/trainer_mt.py": {
        "torch": {
            "stack_32": {
                "variable": {
                    "value": "all_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_losses, dim=0)",
                            "Call"
                        ],
                        [
                            "all_losses / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_135": {
                "input": {
                    "value": "model_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(images, targets, **kwargs)",
                            "Call"
                        ],
                        [
                            "model_out['output']",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "ema_model_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ema_model(images, targets, **kwargs)['output']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_memory_allocated_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_133": {
                "input": {
                    "value": "model_out[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "ema_model_out[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/layers/__init__.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/layers/_utils.py": {
        "torch": {
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/layers/batch_norm.py": {
        "torch": {
            "ones_14": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_17": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/layers/dcn/deform_conv_func.py": {
        "torch": {
            "zeros_like_211": {
                "variable": {
                    "value": "grad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_212": {
                "variable": {
                    "value": "grad_offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_213": {
                "variable": {
                    "value": "grad_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_214": {
                "variable": {
                    "value": "grad_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_215": {
                "variable": {
                    "value": "grad_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input.new_empty(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_85": {
                "variable": {
                    "value": "grad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_86": {
                "variable": {
                    "value": "grad_offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_109": {
                "variable": {
                    "value": "grad_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/layers/dcn/deform_conv_module.py": {
        "torch": {
            "Parameter_43": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // self.groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_101": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "variable": {
                    "value": "self.conv_offset_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels // self.groups",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.deformable_groups * 3 * self.kernel_size[0] * self.kernel_size[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "_pair(self.stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(self.padding)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_172": {
                "variable": {
                    "value": "(o1, o2, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv_offset_mask(input)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(o1, o2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_174": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_107": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/layers/dcn/deform_pool_func.py": {
        "torch": {
            "zeros_like_71": {
                "variable": {
                    "value": "grad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_73": {
                "variable": {
                    "value": "grad_offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/layers/dcn/deform_pool_module.py": {
        "torch": {
            "Sequential_55": {
                "variable": {
                    "value": "self.offset_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.out_size * self.out_size * self.out_channels, self.deform_fc_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.offset_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.out_size * self.out_size * self.out_channels, self.deform_fc_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.mask_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.out_size * self.out_size * self.out_channels, self.deform_fc_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "self.out_size * self.out_size * self.out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_size * self.out_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "in_features": {
                    "value": "self.out_size * self.out_size * self.out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "in_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_114": {
                "in_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_size * self.out_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "in_features": {
                    "value": "self.out_size * self.out_size * self.out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "in_features": {
                    "value": "self.deform_fc_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_size * self.out_size * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/layers/misc.py": {
        "torch": {
            "interpolate_80": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'nearest'",
                            "MethodArgument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/layers/roi_align.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/layers/roi_pool.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/layers/sigmoid_focal_loss.py": {
        "torch": {
            "arange_46": {
                "variable": {
                    "value": "class_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "targets.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "targets.device",
                            "Attribute"
                        ],
                        [
                            "logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unsqueeze_46": {
                "variable": {
                    "value": "class_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_49": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_50": {
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_51": {
                "input": {
                    "value": "1 - p",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/layers/smooth_l1_loss.py": {
        "torch": {
            "abs_11": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_13": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "Name",
                    "possible_values": [
                        [
                            "n < beta",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "0.5 * n ** 2 / beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "n - 0.5 * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/backbone/backbone.py": {
        "torch": {
            "Sequential_22": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body)])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body), ('fpn', fpn)])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body), ('fpn', fpn)])",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_275": {
                "variable": {
                    "value": "enc_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.MODEL.DEPTHNET.MONODEPTH2.ENCODER.PRETRAINED_WEIGHT",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_276": {
                "variable": {
                    "value": "dec_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.MODEL.DEPTHNET.MONODEPTH2.DECODER.PRETRAINED_WEIGHT",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_295": {
                "input": {
                    "value": "depth_out['dispfeat', i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(fpn_out[i - 1].shape[2], fpn_out[i - 1].shape[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/backbone/depthnet_decoder.py": {
        "torch": {
            "Sigmoid_57": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_149": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_181": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_input_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_output_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_183": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_output_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_184": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_185": {
                "variable": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_output_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_output_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_187": {
                "variable": {
                    "value": "self.bn1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_output_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_input_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_output_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_191": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_output_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "interpolate_194": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_features[i]",
                            "Subscript"
                        ],
                        [
                            "input_features[-1]",
                            "Subscript"
                        ],
                        [
                            "[F.interpolate(out1, scale_factor=2, mode='nearest')]",
                            "List"
                        ],
                        [
                            "x + [input_features[i - 1]]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.convs['upconv', i, 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=size, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ELU_235": {
                "variable": {
                    "value": "self.nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_254": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(in_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(out_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_255": {
                "variable": {
                    "value": "self.normalize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_273": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(in_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(out_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_274": {
                "variable": {
                    "value": "self.normalize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_features[i]",
                            "Subscript"
                        ],
                        [
                            "input_features[-1]",
                            "Subscript"
                        ],
                        [
                            "[F.interpolate(out1, scale_factor=2, mode='nearest')]",
                            "List"
                        ],
                        [
                            "x + [input_features[i - 1]]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.convs['upconv', i, 1](x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=size, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_251": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ZeroPad2d_253": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_80": {
                "variable": {
                    "value": "prev_disp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_disp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "F.interpolate(prev_disp, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "disp",
                            "Name"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_160": {
                "input": {
                    "value": "out1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.convs['upconv', i, 0](x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/backbone/depthnet_loss.py": {
        "torch": {
            "abs_14": {
                "variable": {
                    "value": "grad_disp_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "disp[:, :, :, :-1] - disp[:, :, :, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_15": {
                "variable": {
                    "value": "grad_disp_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "disp[:, :, :-1, :] - disp[:, :, 1:, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_17": {
                "variable": {
                    "value": "grad_img_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(img[:, :, :, :-1] - img[:, :, :, 1:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_18": {
                "variable": {
                    "value": "grad_img_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(img[:, :, :-1, :] - img[:, :, 1:, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_20": {
                "input": {
                    "value": "-grad_img_x",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_21": {
                "input": {
                    "value": "-grad_img_y",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.id_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(self.id_coords)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.ones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.batch_size, 1, self.height * self.width)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_43": {
                "variable": {
                    "value": "self.pix_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack([self.id_coords[0].view(-1), self.id_coords[1].view(-1)], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_46": {
                "variable": {
                    "value": "self.pix_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.cat([self.pix_coords, self.ones], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_50": {
                "variable": {
                    "value": "cam_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inv_K[:, :3, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.pix_coords",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "cam_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cam_points, self.ones]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_71": {
                "variable": {
                    "value": "cam_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(K, T)[:, :3, :]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AvgPool2d_86": {
                "variable": {
                    "value": "self.mu_x_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_87": {
                "variable": {
                    "value": "self.mu_y_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_88": {
                "variable": {
                    "value": "self.sig_x_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_89": {
                "variable": {
                    "value": "self.sig_y_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_90": {
                "variable": {
                    "value": "self.sig_xy_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_92": {
                "variable": {
                    "value": "self.refl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_122": {
                "variable": {
                    "value": "abs_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target - pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_141": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.pad(img, (0, 1, 0, 0), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(img, (0, 0, 0, 1), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_147": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.pad(img, (0, 1, 0, 0), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(img, (0, 0, 0, 1), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_17": {
                "input": {
                    "value": "img[:, :, :, :-1] - img[:, :, :, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_18": {
                "input": {
                    "value": "img[:, :, :-1, :] - img[:, :, 1:, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_111": {
                "input": {
                    "value": "(1 - SSIM_n / SSIM_d) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_179": {
                "variable": {
                    "value": "grad_disp_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "disp[:, :, :, :-1] - disp[:, :, :, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_180": {
                "variable": {
                    "value": "grad_disp_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "disp[:, :, :-1, :] - disp[:, :, 1:, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_182": {
                "variable": {
                    "value": "grad_img_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(img[:, :, :, :-1] - img[:, :, :, 1:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_183": {
                "variable": {
                    "value": "grad_img_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(img[:, :, :-1, :] - img[:, :, 1:, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_197": {
                "variable": {
                    "value": "abs_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target - pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "interpolate_218": {
                "variable": {
                    "value": "disp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "disp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.interpolate(disp, [height, width], mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_234": {
                "variable": {
                    "value": "x_base",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_236": {
                "variable": {
                    "value": "y_base",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_236": {
                "variable": {
                    "value": "y_base",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_242": {
                "variable": {
                    "value": "flow_field",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_base + x_shifts, y_base)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grid_sample_244": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "2 * flow_field - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "border",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_37": {
                "ndarray": {
                    "value": "self.id_coords",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_40": {
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.height * self.width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_43": {
                "tensors": {
                    "value": "[self.id_coords[0].view(-1), self.id_coords[1].view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_46": {
                "tensors": {
                    "value": "[self.pix_coords, self.ones]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_69": {
                "input": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_159": {
                "input": {
                    "value": "-torch.mean(torch.abs(g), 1, keepdim=True)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_161": {
                "input": {
                    "value": "-torch.mean(torch.abs(g), 1, keepdim=True)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_185": {
                "input": {
                    "value": "-grad_img_x",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_186": {
                "input": {
                    "value": "-grad_img_y",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_169": {
                "input": {
                    "value": "smoothness_y[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_182": {
                "input": {
                    "value": "img[:, :, :, :-1] - img[:, :, :, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_183": {
                "input": {
                    "value": "img[:, :, :-1, :] - img[:, :, 1:, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "interpolate_294": {
                "input": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.pad(img, (0, 1, 0, 0), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(img, (0, 0, 0, 1), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[nh, nw]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_318": {
                "input": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.pad(img, (0, 1, 0, 0), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(img, (0, 0, 0, 1), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[nh, nw]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_159": {
                "input": {
                    "value": "torch.abs(g)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_161": {
                "input": {
                    "value": "torch.abs(g)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_159": {
                "input": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_161": {
                "input": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/backbone/fbnet.py": {
        "torch": {
            "Sequential_101": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body)])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "*args": {
                    "value": "rpn_feature",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_197": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('blocks', blocks), ('last', last)])",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/backbone/fbnet_builder.py": {
        "torch": {
            "zeros_245": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(C, 1, kernel_size, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_267": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros((C, 1, kernel_size, kernel_size), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "stage_info[2]",
                            "Subscript"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_406": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_751": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "modules",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_490": {
                "variable": {
                    "value": "self.dw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_227": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_271": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "stage_cfg",
                            "Name"
                        ],
                        [
                            "stage_cfgs",
                            "Name"
                        ],
                        [
                            "arch_def['stages']",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "(self.stride, self.stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.padding, self.padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_306": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_387": {
                "variable": {
                    "value": "bn_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "gn_group",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bn_type[1]",
                            "Subscript"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "output_depth",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_407": {
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_407": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_407": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_514": {
                "variable": {
                    "value": "self.dw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('dw1', dw1), ('dw2', dw2)])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_545": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_763": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_775": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_394": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/backbone/fpn.py": {
        "torch": {
            "Conv2d_93": {
                "variable": {
                    "value": "self.p6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "self.p7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_64": {
                "variable": {
                    "value": "inner_top_down",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_inner",
                    "type": "Name",
                    "possible_values": [
                        [
                            "getattr(self, self.inner_blocks[-1])(x[-1])",
                            "Call"
                        ],
                        [
                            "inner_lateral + inner_top_down",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_84": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p5 if self.use_P5 else c5",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_103": {
                "input": {
                    "value": "p6",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.p6(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/backbone/monodepth2/__init__.py": {
        "torch": {
            "load_9": {
                "variable": {
                    "value": "enc_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.MODEL.DEPTHNET.MONODEPTH2.ENCODER.PRETRAINED_WEIGHT",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_10": {
                "variable": {
                    "value": "dec_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.MODEL.DEPTHNET.MONODEPTH2.DECODER.PRETRAINED_WEIGHT",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "*args": {
                    "value": "depthnet_encoder",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/backbone/monodepth2/depth_decoder.py": {
        "torch": {
            "ModuleList_41": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "list(self.convs.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_42": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_features[-1]",
                            "Subscript"
                        ],
                        [
                            "self.convs['upconv', i, 0](x)",
                            "Call"
                        ],
                        [
                            "[upsample(x)]",
                            "List"
                        ],
                        [
                            "x + [input_features[i - 1]]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.convs['upconv', i, 1](x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/backbone/monodepth2/layers.py": {
        "torch": {
            "zeros_59": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "translation_vector.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_77": {
                "variable": {
                    "value": "angle",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cos_80": {
                "variable": {
                    "value": "ca",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.norm(vec, 2, 2, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_81": {
                "variable": {
                    "value": "sa",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.norm(vec, 2, 2, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "rot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(vec.shape[0], 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_100": {
                "variable": {
                    "value": "rot[:, 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x * xC + ca",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_101": {
                "variable": {
                    "value": "rot[:, 0, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "xyC - zs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_102": {
                "variable": {
                    "value": "rot[:, 0, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "zxC + ys",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_103": {
                "variable": {
                    "value": "rot[:, 1, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "xyC + zs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_104": {
                "variable": {
                    "value": "rot[:, 1, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "y * yC + ca",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_105": {
                "variable": {
                    "value": "rot[:, 1, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "yzC - xs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_106": {
                "variable": {
                    "value": "rot[:, 2, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "zxC - ys",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_107": {
                "variable": {
                    "value": "rot[:, 2, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "yzC + xs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_108": {
                "variable": {
                    "value": "rot[:, 2, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "z * zC + ca",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_214": {
                "variable": {
                    "value": "grad_disp_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "disp[:, :, :, :-1] - disp[:, :, :, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_215": {
                "variable": {
                    "value": "grad_disp_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "disp[:, :, :-1, :] - disp[:, :, 1:, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_217": {
                "variable": {
                    "value": "grad_img_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(img[:, :, :, :-1] - img[:, :, :, 1:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_218": {
                "variable": {
                    "value": "grad_img_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(img[:, :, :-1, :] - img[:, :, 1:, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_262": {
                "variable": {
                    "value": "thresh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt / pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_268": {
                "variable": {
                    "value": "rmse",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rmse.mean()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_271": {
                "variable": {
                    "value": "rmse_log",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rmse_log.mean()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_273": {
                "variable": {
                    "value": "abs_rel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(gt - pred) / gt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_275": {
                "variable": {
                    "value": "sq_rel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gt - pred) ** 2 / gt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_49": {
                "variable": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "Call",
                    "possible_values": [
                        [
                            "rot_from_axisangle(axisangle)",
                            "Call"
                        ],
                        [
                            "R.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "T",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_translation_matrix(t)",
                            "Call"
                        ],
                        [
                            "torch.zeros(translation_vector.shape[0], 4, 4).to(device=translation_vector.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_51": {
                "variable": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_translation_matrix(t)",
                            "Call"
                        ],
                        [
                            "torch.zeros(translation_vector.shape[0], 4, 4).to(device=translation_vector.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "R",
                    "type": "Call",
                    "possible_values": [
                        [
                            "rot_from_axisangle(axisangle)",
                            "Call"
                        ],
                        [
                            "R.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ELU_121": {
                "variable": {
                    "value": "self.nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(in_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(out_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_159": {
                "variable": {
                    "value": "self.id_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(self.id_coords)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_162": {
                "variable": {
                    "value": "self.ones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.batch_size, 1, self.height * self.width)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_165": {
                "variable": {
                    "value": "self.pix_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack([self.id_coords[0].view(-1), self.id_coords[1].view(-1)], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_168": {
                "variable": {
                    "value": "self.pix_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.cat([self.pix_coords, self.ones], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_172": {
                "variable": {
                    "value": "cam_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inv_K[:, :3, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.pix_coords",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "cam_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cam_points, self.ones]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_193": {
                "variable": {
                    "value": "cam_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(K, T)[:, :3, :]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "interpolate_207": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "axis[..., 0].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.refl(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_220": {
                "input": {
                    "value": "-grad_img_x",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_221": {
                "input": {
                    "value": "-grad_img_y",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AvgPool2d_231": {
                "variable": {
                    "value": "self.mu_x_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_232": {
                "variable": {
                    "value": "self.mu_y_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_233": {
                "variable": {
                    "value": "self.sig_x_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_234": {
                "variable": {
                    "value": "self.sig_y_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_235": {
                "variable": {
                    "value": "self.sig_xy_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_237": {
                "variable": {
                    "value": "self.refl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_341": {
                "variable": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_342": {
                "variable": {
                    "value": "self.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_136": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ZeroPad2d_138": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_217": {
                "input": {
                    "value": "img[:, :, :, :-1] - img[:, :, :, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_218": {
                "input": {
                    "value": "img[:, :, :-1, :] - img[:, :, 1:, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_256": {
                "input": {
                    "value": "(1 - SSIM_n / SSIM_d) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_291": {
                "variable": {
                    "value": "disp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "disp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(disp, [height, width], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "sigmoid_to_disp_unity(outputs['disp', s], kitti_fx / s, kitti_baseline, kitti_mindepth, kitti_maxdepth)",
                            "Call"
                        ],
                        [
                            "disps[scale]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_294": {
                "variable": {
                    "value": "x_base",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_296": {
                "variable": {
                    "value": "y_base",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_296": {
                "variable": {
                    "value": "y_base",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_302": {
                "variable": {
                    "value": "flow_field",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_base + x_shifts, y_base)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grid_sample_304": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "images[scale]",
                            "Subscript"
                        ]
                    ]
                },
                "grid": {
                    "value": "2 * flow_field - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "border",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grid_sample_380": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "images[scale]",
                            "Subscript"
                        ]
                    ]
                },
                "grid": {
                    "value": "pix_coords",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cam_points[:, :2, :] / (cam_points[:, 2, :].unsqueeze(1) + self.eps)",
                            "BinOp"
                        ],
                        [
                            "pix_coords.view(self.batch_size, 2, self.height, self.width)",
                            "Call"
                        ],
                        [
                            "pix_coords.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "(pix_coords - 0.5) * 2",
                            "BinOp"
                        ],
                        [
                            "self.project_3d[scale](cam_points, K_scale, T)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_159": {
                "ndarray": {
                    "value": "self.id_coords",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_162": {
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.height * self.width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_165": {
                "tensors": {
                    "value": "[self.id_coords[0].view(-1), self.id_coords[1].view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_168": {
                "tensors": {
                    "value": "[self.pix_coords, self.ones]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_191": {
                "input": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "T",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_translation_matrix(t)",
                            "Call"
                        ],
                        [
                            "torch.zeros(translation_vector.shape[0], 4, 4).to(device=translation_vector.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_270": {
                "input": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.grid_sample(image, 2 * flow_field - 1, mode='bilinear', padding_mode='border')",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_273": {
                "input": {
                    "value": "gt - pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_373": {
                "variable": {
                    "value": "inv_K_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "K.copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_372": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/backbone/monodepth2/resnet_encoder.py": {
        "torch": {
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_input_images * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_28": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_56": {
                "tensors": {
                    "value": "[loaded['conv1.weight']] * num_input_images",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/backbone/resnet.py": {
        "torch": {
            "Sequential_236": {
                "*args": {
                    "value": "*blocks",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu__329": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__333": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__342": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__364": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage_name)(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage)(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_365": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage_name)(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage)(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_257": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels, out_channels, kernel_size=1, stride=down_stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/balanced_positive_negative_sampler.py": {
        "torch": {
            "nonzero_38": {
                "variable": {
                    "value": "positive",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image >= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_38": {
                "variable": {
                    "value": "positive",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_39": {
                "variable": {
                    "value": "negative",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_39": {
                "variable": {
                    "value": "negative",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_56": {
                "variable": {
                    "value": "pos_idx_per_image_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matched_idxs",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_59": {
                "variable": {
                    "value": "neg_idx_per_image_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matched_idxs",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_49": {
                "n": {
                    "value": "positive.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "positive.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_50": {
                "n": {
                    "value": "negative.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "negative.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/box_coder.py": {
        "torch": {
            "stack_49": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_77": {
                "variable": {
                    "value": "dw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rel_codes[:, 2::4] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "self.bbox_xform_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_78": {
                "variable": {
                    "value": "dh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dh",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rel_codes[:, 3::4] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "self.bbox_xform_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_85": {
                "variable": {
                    "value": "pred_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_codes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_46": {
                "input": {
                    "value": "gt_widths / ex_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_47": {
                "input": {
                    "value": "gt_heights / ex_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_82": {
                "input": {
                    "value": "dw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rel_codes[:, 2::4] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_83": {
                "input": {
                    "value": "dh",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rel_codes[:, 3::4] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/detector/generalized_lr_rcnn.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/modeling/detector/generalized_lrgan_rcnn.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/modeling/detector/generalized_rcnn.py": {
        "torch": {
            "no_grad_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_119": {
                "*size": {
                    "value": "len(gt_box)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "targets[0].bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mse_loss_196": {
                "input": {
                    "value": "x[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "mt_x[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mse_loss_164": {
                "input": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "f2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mse_loss_182": {
                "input": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "f2",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/detector/generalized_rcnn_lrmt.py": {
        "torch": {
            "ones_118": {
                "*size": {
                    "value": "len(gt_box)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "targets[0].bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_191": {
                "input": {
                    "value": "x[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "mt_x[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mse_loss_159": {
                "input": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "f2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mse_loss_177": {
                "input": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "f2",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/gan/discriminators.py": {
        "torch": {
            "Sequential_44": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.net",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "LeakyReLU_23": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_40": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_72": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "ndf",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_75": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_32": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/gan/generators.py": {
        "torch": {
            "Conv2d_65": {
                "variable": {
                    "value": "downconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outer_nc",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_67": {
                "variable": {
                    "value": "downrelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "variable": {
                    "value": "uprelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_73": {
                "variable": {
                    "value": "upconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_137": {
                "variable": {
                    "value": "x_base",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_139": {
                "variable": {
                    "value": "y_base",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_139": {
                "variable": {
                    "value": "y_base",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_146": {
                "variable": {
                    "value": "flow_field",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_base + x_shifts, y_base)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grid_sample_148": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "2 * flow_field - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_80": {
                "variable": {
                    "value": "upconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_87": {
                "variable": {
                    "value": "upconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_104": {
                "tensors": {
                    "value": "[x, self.model(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_94": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/gan/loss.py": {
        "torch": {
            "MSELoss_24": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "target_real_label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_21": {
                "data": {
                    "value": "target_fake_label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_26": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/geomnet/geomnet.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/modeling/geomnet/layers.py": {
        "torch": {
            "zeros_25": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, 256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[1, 0, 0], [0, 1, 0], [0, 0, 1]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 0, 0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_12": {
                "variable": {
                    "value": "im2ground",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "K.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "affine_grid_16": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "im2ground",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size([batch_size, 1, output_size[1], output_size[0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_21": {
                "variable": {
                    "value": "transformed_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.affine_grid(im2ground, torch.Size([batch_size, 1, output_size[1], output_size[0]]))",
                            "Call"
                        ],
                        [
                            "self.create_grid(self.output_size, K, T)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.interp_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_14": {
                "input": {
                    "value": "K[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "T[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/make_layers.py": {
        "torch": {
            "Linear_89": {
                "variable": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GroupNorm_36": {
                "num_groups": {
                    "value": "get_group_gn(out_channels, dim_per_gp, num_groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels // divisor",
                            "BinOp"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.GROUP_NORM.EPSILON",
                            "Attribute"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "*args": {
                    "value": "*module",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "*args": {
                    "value": "fc",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "*args": {
                    "value": "*module",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "*args": {
                    "value": "*module",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_146": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/matcher.py": {
        "torch": {
            "nonzero_94": {
                "variable": {
                    "value": "gt_pred_pairs_of_highest_quality",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "match_quality_matrix == highest_quality_foreach_gt[:, None]",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/poolers.py": {
        "torch": {
            "sqrt_37": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cat([boxlist.area() for boxlist in boxlists])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_40": {
                "variable": {
                    "value": "target_lvls",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lvl0 + torch.log2(s / self.s0 + self.eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_41": {
                "variable": {
                    "value": "target_lvls",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_lvls",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.floor(self.lvl0 + torch.log2(s / self.s0 + self.eps))",
                            "Call"
                        ],
                        [
                            "torch.clamp(target_lvls, min=self.k_min, max=self.k_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.k_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.k_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_70": {
                "variable": {
                    "value": "self.poolers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "poolers",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_88": {
                "variable": {
                    "value": "rois",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ids, concat_boxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_rois, num_channels, output_size, output_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_148": {
                "variable": {
                    "value": "self.poolers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "poolers",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_166": {
                "variable": {
                    "value": "rois",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ids, concat_boxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_117": {
                "variable": {
                    "value": "idx_in_level",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "levels == level",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_117": {
                "variable": {
                    "value": "idx_in_level",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log2_74": {
                "input": {
                    "value": "torch.tensor(scales[0], dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log2_75": {
                "input": {
                    "value": "torch.tensor(scales[-1], dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log2_40": {
                "input": {
                    "value": "s / self.s0 + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_83": {
                "size": {
                    "value": "(len(b), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "full_161": {
                "size": {
                    "value": "(len(b), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "data": {
                    "value": "scales[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "scales[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/box3d_head/box3d_head.py": {
        "torch": {
            "cat_72": {
                "tensors": {
                    "value": "positive_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/box3d_head/inference.py": {
        "torch": {
            "cat_50": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[bbox.get_field('labels') for bbox in boxes]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_51": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_batches",
                    "type": "Name",
                    "possible_values": [
                        [
                            "depths.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "atan_16": {
                "input": {
                    "value": "rot[:, 2] / rot[:, 3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_17": {
                "input": {
                    "value": "rot[:, 6] / rot[:, 7]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_67": {
                "tensors": {
                    "value": "(center, center)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_70": {
                "input": {
                    "value": "torch.abs(depth)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_70": {
                "input": {
                    "value": "depth",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "depth / self.cfg.MODEL.ROI_BOX3D_HEAD.REG_AMPLIFIER",
                            "BinOp"
                        ],
                        [
                            "torch.exp(torch.abs(depth)) - 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/box3d_head/loss.py": {
        "torch": {
            "zeros_like_110": {
                "variable": {
                    "value": "loss_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_bin1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.compute_bin_loss(output[:, 0:2], target_bin[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_158": {
                "variable": {
                    "value": "positive_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_158": {
                "variable": {
                    "value": "positive_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_65": {
                "variable": {
                    "value": "positive_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_per_image > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_65": {
                "variable": {
                    "value": "positive_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_89": {
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.view(-1, 8)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target.copy_with_fields(['labels', 'centers', 'depths', 'dims', 'rotbins', 'rotregs'], skip_missing=True)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_95": {
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.view(-1, 8)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target.copy_with_fields(['labels', 'centers', 'depths', 'dims', 'rotbins', 'rotregs'], skip_missing=True)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_113": {
                "variable": {
                    "value": "valid_output1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.view(-1, 8)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx1.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_114": {
                "variable": {
                    "value": "valid_target_res1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_res",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target_res.view(-1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx1.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_122": {
                "variable": {
                    "value": "valid_output2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.view(-1, 8)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx2.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_123": {
                "variable": {
                    "value": "valid_target_res2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_res",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target_res.view(-1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx2.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_154": {
                "variable": {
                    "value": "depth_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(depth_targets) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_116": {
                "input": {
                    "value": "valid_target_res1[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_118": {
                "input": {
                    "value": "valid_target_res1[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_125": {
                "input": {
                    "value": "valid_target_res2[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_127": {
                "input": {
                    "value": "valid_target_res2[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_154": {
                "input": {
                    "value": "depth_targets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cat(depth_targets, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.abs(depth_targets) + 1)",
                            "Call"
                        ],
                        [
                            "depth_targets * self.cfg.MODEL.ROI_BOX3D_HEAD.REG_AMPLIFIER",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/box3d_head/roi_box3d_feature_extractors.py": {
        "torch": {
            "relu_80": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_81": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc7(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_148": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "*args": {
                    "value": "*xconvs",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_113": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_head_dim",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_head_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX3D_HEAD.CONV_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX3D_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX3D_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False if use_gn else True",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ReLU_126": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/box3d_head/roi_box3d_predictors.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.center_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_bbox_reg_classes * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.depth_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_bbox_reg_classes * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.dim_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_bbox_reg_classes * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.ori_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_bbox_reg_classes * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/box_head/box_head.py": {
        "torch": {
            "cat_77": {
                "variable": {
                    "value": "concat_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.bbox for a in proposals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/box_head/box_lr_head.py": {
        "torch": {
            "cat_87": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fl, fr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_74": {
                "variable": {
                    "value": "new_bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.min(bbox_left[:, 0], bbox_right[:, 0]), torch.min(bbox_left[:, 1], bbox_right[:, 1]), torch.max(bbox_left[:, 2], bbox_right[:, 2]), torch.max(bbox_left[:, 3], bbox_right[:, 3])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_75": {
                "input": {
                    "value": "bbox_left[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_76": {
                "input": {
                    "value": "bbox_left[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_77": {
                "input": {
                    "value": "bbox_left[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_78": {
                "input": {
                    "value": "bbox_left[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/box_head/inference.py": {
        "torch": {
            "softmax_59": {
                "variable": {
                    "value": "class_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "concat_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.bbox for a in boxes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_222": {
                "variable": {
                    "value": "class_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_227": {
                "variable": {
                    "value": "concat_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.bbox for a in boxes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kthvalue_145": {
                "variable": {
                    "value": "(image_thresh, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "number_of_detections - self.detections_per_img + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_149": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keep",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "cls_scores >= image_thresh.item()",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(keep).squeeze(1)",
                            "Call"
                        ],
                        [
                            "cls_scores >= image_thresh.item()",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(keep).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_149": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kthvalue_332": {
                "variable": {
                    "value": "(image_thresh, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "number_of_detections - self.detections_per_img + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_336": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keep",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "cls_scores >= image_thresh.item()",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(keep).squeeze(1)",
                            "Call"
                        ],
                        [
                            "cls_scores >= image_thresh.item()",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(keep).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_336": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_135": {
                "size": {
                    "value": "(num_labels,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "j",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(1, num_classes)",
                            "Call"
                        ],
                        [
                            "range(1, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "scores.device",
                            "Attribute"
                        ],
                        [
                            "scores.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "full_317": {
                "size": {
                    "value": "(num_labels,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "j",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(1, num_classes)",
                            "Call"
                        ],
                        [
                            "range(1, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "scores.device",
                            "Attribute"
                        ],
                        [
                            "scores.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "full_320": {
                "size": {
                    "value": "(num_labels,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "j",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(1, num_classes)",
                            "Call"
                        ],
                        [
                            "range(1, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "scores.device",
                            "Attribute"
                        ],
                        [
                            "scores.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/box_head/loss.py": {
        "torch": {
            "cross_entropy_150": {
                "variable": {
                    "value": "classification_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cat(class_logits, dim=0)",
                            "Call"
                        ],
                        [
                            "cat(class_logits, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "cat([proposal.get_field('labels') for proposal in proposals], dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "cat([proposal.get_field('labels') for proposal in proposals_left], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_156": {
                "variable": {
                    "value": "sampled_pos_inds_subset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_156": {
                "variable": {
                    "value": "sampled_pos_inds_subset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_336": {
                "variable": {
                    "value": "classification_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cat(class_logits, dim=0)",
                            "Call"
                        ],
                        [
                            "cat(class_logits, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "cat([proposal.get_field('labels') for proposal in proposals], dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "cat([proposal.get_field('labels') for proposal in proposals_left], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_342": {
                "variable": {
                    "value": "sampled_pos_inds_subset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_342": {
                "variable": {
                    "value": "sampled_pos_inds_subset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_114": {
                "variable": {
                    "value": "img_sampled_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_inds_img | neg_inds_img",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_114": {
                "variable": {
                    "value": "img_sampled_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_159": {
                "variable": {
                    "value": "map_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[4, 5, 6, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "class_logits.device",
                            "Attribute"
                        ],
                        [
                            "class_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "nonzero_292": {
                "variable": {
                    "value": "img_sampled_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_inds_img | neg_inds_img",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_292": {
                "variable": {
                    "value": "img_sampled_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_345": {
                "variable": {
                    "value": "map_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[4, 5, 6, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "class_logits.device",
                            "Attribute"
                        ],
                        [
                            "class_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_161": {
                "data": {
                    "value": "[0, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "class_logits.device",
                            "Attribute"
                        ],
                        [
                            "class_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_347": {
                "data": {
                    "value": "[0, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "class_logits.device",
                            "Attribute"
                        ],
                        [
                            "class_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/box_head/roi_box_feature_extractors.py": {
        "torch": {
            "relu_78": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_79": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc7(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_143": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_168": {
                "variable": {
                    "value": "self.conv3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_head_dim",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_head_dim",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(len(scales), 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f.view(f.size(0), f.size(1), 1, f.size(2), f.size(3)) for f in x]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_185": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_186": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc7(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, F.interpolate(extra_features, [self.resolution, self.resolution], mode='bilinear')]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "*args": {
                    "value": "*xconvs",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_head_dim",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_head_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.CONV_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False if use_gn else True",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_179": {
                "input": {
                    "value": "extra_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "[self.resolution, self.resolution]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/box_head/roi_box_predictors.py": {
        "torch": {
            "AdaptiveAvgPool2d_15": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_bbox_reg_classes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_bbox_reg_classes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.bbox_pred_left",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_bbox_reg_classes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.bbox_pred_right",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_bbox_reg_classes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/depth_head/depth_head.py": {
        "torch": {
            "cat_73": {
                "tensors": {
                    "value": "positive_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/depth_head/depth_lr_head.py": {
        "torch": {
            "cat_167": {
                "variable": {
                    "value": "xl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fl, xu]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_146": {
                "tensors": {
                    "value": "positive_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "xl_mono",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fl, xu_mono]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "xl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fl, xu]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_109": {
                "tensors": {
                    "value": "positive_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "xu",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ful, fur]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/depth_head/inference.py": {
        "torch": {
            "cat_51": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[bbox.get_field('labels') for bbox in boxes]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "[bbox.get_field('labels') for bbox in boxes]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "[bbox.get_field('labels') for bbox in boxes_left]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_52": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_batches",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "depths.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[bbox.get_field('labels') for bbox in boxes]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "[bbox.get_field('labels') for bbox in boxes]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "[bbox.get_field('labels') for bbox in boxes_left]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_104": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_batches",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "depths.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[bbox.get_field('labels') for bbox in boxes]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "[bbox.get_field('labels') for bbox in boxes]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "[bbox.get_field('labels') for bbox in boxes_left]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_166": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_batches",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "depths.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "atan_17": {
                "input": {
                    "value": "rot[:, 2] / rot[:, 3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_18": {
                "input": {
                    "value": "rot[:, 6] / rot[:, 7]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_65": {
                "input": {
                    "value": "torch.abs(depth)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_118": {
                "input": {
                    "value": "depth",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "depth / self.cfg.MODEL.ROI_DEPTH_HEAD.REG_AMPLIFIER",
                            "BinOp"
                        ],
                        [
                            "torch.exp(torch.abs(depth)) - 1",
                            "BinOp"
                        ],
                        [
                            "torch.exp(depth) - 1",
                            "BinOp"
                        ],
                        [
                            "depth / self.cfg.MODEL.ROI_DEPTH_HEAD.REG_AMPLIFIER",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_65": {
                "input": {
                    "value": "depth",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "depth / self.cfg.MODEL.ROI_DEPTH_HEAD.REG_AMPLIFIER",
                            "BinOp"
                        ],
                        [
                            "torch.exp(torch.abs(depth)) - 1",
                            "BinOp"
                        ],
                        [
                            "torch.exp(depth) - 1",
                            "BinOp"
                        ],
                        [
                            "depth / self.cfg.MODEL.ROI_DEPTH_HEAD.REG_AMPLIFIER",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/depth_head/loss.py": {
        "torch": {
            "nonzero_97": {
                "variable": {
                    "value": "positive_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(labels > 0) & (depth_targets > 0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_97": {
                "variable": {
                    "value": "positive_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_200": {
                "variable": {
                    "value": "loss_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_bin1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.compute_bin_loss(output[:, 0:2], target_bin[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_247": {
                "variable": {
                    "value": "positive_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_247": {
                "variable": {
                    "value": "positive_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_388": {
                "variable": {
                    "value": "positive_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_388": {
                "variable": {
                    "value": "positive_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_59": {
                "variable": {
                    "value": "positive_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_per_image > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_59": {
                "variable": {
                    "value": "positive_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_92": {
                "variable": {
                    "value": "depth_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth_targets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cat(depth_targets, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.log(depth_targets)",
                            "Call"
                        ],
                        [
                            "depth_targets * self.cfg.MODEL.ROI_DEPTH_HEAD.REG_AMPLIFIER",
                            "BinOp"
                        ],
                        [
                            "cat(depth_targets, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.log(depth_targets)",
                            "Call"
                        ],
                        [
                            "depth_targets * self.cfg.MODEL.ROI_DEPTH_HEAD.REG_AMPLIFIER",
                            "BinOp"
                        ],
                        [
                            "cat(depth_targets, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_164": {
                "variable": {
                    "value": "positive_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_per_image > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_164": {
                "variable": {
                    "value": "positive_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_179": {
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.view(-1, 8)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "target.copy_with_fields(['labels', 'depths'], skip_missing=True)",
                            "Call"
                        ],
                        [
                            "target.copy_with_fields(['labels', 'masks', 'depths', 'dims', 'rotbins', 'rotregs'], skip_missing=True)",
                            "Call"
                        ],
                        [
                            "target.copy_with_fields(['labels', 'depths'], skip_missing=True)",
                            "Call"
                        ],
                        [
                            "target * baseline_modifier",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_185": {
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.view(-1, 8)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "target.copy_with_fields(['labels', 'depths'], skip_missing=True)",
                            "Call"
                        ],
                        [
                            "target.copy_with_fields(['labels', 'masks', 'depths', 'dims', 'rotbins', 'rotregs'], skip_missing=True)",
                            "Call"
                        ],
                        [
                            "target.copy_with_fields(['labels', 'depths'], skip_missing=True)",
                            "Call"
                        ],
                        [
                            "target * baseline_modifier",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_203": {
                "variable": {
                    "value": "valid_output1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.view(-1, 8)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx1.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_204": {
                "variable": {
                    "value": "valid_target_res1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_res",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target_res.view(-1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx1.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_212": {
                "variable": {
                    "value": "valid_output2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.view(-1, 8)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx2.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_213": {
                "variable": {
                    "value": "valid_target_res2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_res",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target_res.view(-1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx2.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_243": {
                "variable": {
                    "value": "depth_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth_targets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cat(depth_targets, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.log(depth_targets)",
                            "Call"
                        ],
                        [
                            "depth_targets * self.cfg.MODEL.ROI_DEPTH_HEAD.REG_AMPLIFIER",
                            "BinOp"
                        ],
                        [
                            "cat(depth_targets, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.log(depth_targets)",
                            "Call"
                        ],
                        [
                            "depth_targets * self.cfg.MODEL.ROI_DEPTH_HEAD.REG_AMPLIFIER",
                            "BinOp"
                        ],
                        [
                            "cat(depth_targets, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "depths_per_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "labels_per_image.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_206": {
                "input": {
                    "value": "valid_target_res1[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_208": {
                "input": {
                    "value": "valid_target_res1[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_215": {
                "input": {
                    "value": "valid_target_res2[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_217": {
                "input": {
                    "value": "valid_target_res2[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/depth_head/roi_depth_feature_extractors.py": {
        "torch": {
            "relu_82": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc7(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_150": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_239": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_328": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_358": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.pooler(x, proposals)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "self.pooler(x, proposals)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1) * x.size(2) * x.size(3))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc6(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc7(x))",
                            "Call"
                        ],
                        [
                            "self.pooler(x, proposals)",
                            "Call"
                        ],
                        [
                            "self.xconvs(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1) * x.size(2) * x.size(3))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc6(x))",
                            "Call"
                        ],
                        [
                            "self.pooler(x, proposals) + self.pooler(y, proposals)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), x.size(1) * x.size(2) * x.size(3))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc6(x))",
                            "Call"
                        ],
                        [
                            "self.pooler(x, proposals) + self.pooler(y, proposals)",
                            "BinOp"
                        ],
                        [
                            "self.xconvs(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1) * x.size(2) * x.size(3))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc6(x))",
                            "Call"
                        ],
                        [
                            "self.pooler(x, proposals)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1) * x.size(2) * x.size(3))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc6(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc7(x))",
                            "Call"
                        ],
                        [
                            "self.pooler(x, proposals)",
                            "Call"
                        ],
                        [
                            "torch.cat([f.view(f.size(0), f.size(1), 1, f.size(2), f.size(3)) for f in x], dim=2)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.conv3d(x).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, F.interpolate(extra_features, [self.resolution, self.resolution], mode='bilinear')], dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1) * x.size(2) * x.size(3))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc6(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc7(x))",
                            "Call"
                        ],
                        [
                            "cost",
                            "Name"
                        ],
                        [
                            "x.view(x.size(0), x.size(1) * x.size(2) * x.size(3))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc6(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc7(x))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_364": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_365": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc7(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_391": {
                "variable": {
                    "value": "self.conv3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_head_dim",
                            "Name"
                        ],
                        [
                            "conv_head_dim",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_head_dim",
                            "Name"
                        ],
                        [
                            "conv_head_dim",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(len(scales), 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_400": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f.view(f.size(0), f.size(1), 1, f.size(2), f.size(3)) for f in x]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_413": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_414": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc7(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_419": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=dilation if dilation > 1 else pad, dilation=dilation, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_423": {
                "*args": {
                    "value": "nn.Conv3d(in_planes, out_planes, kernel_size=kernel_size, padding=pad, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_446": {
                "variable": {
                    "value": "self.nullvalue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "representation_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.MLP_HEAD_DIM",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.MLP_HEAD_DIM",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.MLP_HEAD_DIM",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.MLP_HEAD_DIM",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.MLP_HEAD_DIM",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.MLP_HEAD_DIM if out_channels is None else out_channels",
                            "IfExp"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.MLP_HEAD_DIM * 2 if out_channels is None else out_channels",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Sequential_449": {
                "variable": {
                    "value": "self.inputconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convbn(in_channels * len(cfg.MODEL.ROI_DEPTH_HEAD.POOLER_SCALES), 256, 3, 1, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_453": {
                "variable": {
                    "value": "self.dres0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convbn_3d(64, 32, 3, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_457": {
                "variable": {
                    "value": "self.dres1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convbn_3d(32, 32, 3, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_460": {
                "variable": {
                    "value": "self.dres2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convbn_3d(32, 32, 3, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_463": {
                "variable": {
                    "value": "self.dres3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convbn_3d(32, 32, 3, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_466": {
                "variable": {
                    "value": "self.dres4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convbn_3d(32, 32, 3, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_469": {
                "variable": {
                    "value": "self.classify",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convbn_3d(32, 32, 3, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_497": {
                "variable": {
                    "value": "x_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_left",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.pooler(x, proposals)",
                            "Call"
                        ],
                        [
                            "torch.cat(x_left, dim=1)",
                            "Call"
                        ],
                        [
                            "self.inputconv(x_left)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_531": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cost",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(x_left.size()[0], x_left.size()[1] * 2, self.resolution, x_left.size()[2], x_left.size()[3]).zero_().cuda()",
                            "Call"
                        ],
                        [
                            "cost.contiguous()",
                            "Call"
                        ],
                        [
                            "self.classify(cost0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(cost, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_539": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_540": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc7(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_178": {
                "variable": {
                    "value": "module",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_channels, conv_head_dim, kernel_size=3, stride=1, padding=dilation, dilation=dilation, bias=False if use_gn else True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_267": {
                "variable": {
                    "value": "module",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_channels, conv_head_dim, kernel_size=3, stride=1, padding=dilation, dilation=dilation, bias=False if use_gn else True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_407": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, F.interpolate(extra_features, [self.resolution, self.resolution], mode='bilinear')]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_419": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation if dilation > 1 else pad",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.DILATION",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.DILATION",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_420": {
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_423": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_424": {
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_503": {
                "variable": {
                    "value": "x_right",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_right",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.pooler(extra_features, proposals)",
                            "Call"
                        ],
                        [
                            "torch.cat(x_right, dim=1)",
                            "Call"
                        ],
                        [
                            "self.inputconv(x_right)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "*args": {
                    "value": "*xconvs",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_307": {
                "*args": {
                    "value": "*xconvs",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_450": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_451": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_454": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_456": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_458": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_461": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_464": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_467": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_470": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_471": {
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_head_dim",
                            "Name"
                        ],
                        [
                            "conv_head_dim",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_head_dim",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.CONV_HEAD_DIM",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.CONV_HEAD_DIM",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.CONV_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.DILATION",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.DILATION",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.DILATION",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.DILATION",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False if use_gn else True",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ReLU_128": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_179": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_head_dim",
                            "Name"
                        ],
                        [
                            "conv_head_dim",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_head_dim",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.CONV_HEAD_DIM",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.CONV_HEAD_DIM",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.CONV_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.DILATION",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.DILATION",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.DILATION",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.DILATION",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False if use_gn else True",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ELU_188": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_268": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_head_dim",
                            "Name"
                        ],
                        [
                            "conv_head_dim",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_head_dim",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.CONV_HEAD_DIM",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.CONV_HEAD_DIM",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.CONV_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.DILATION",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.DILATION",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.DILATION",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.DILATION",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False if use_gn else True",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ELU_277": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_292": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_head_dim",
                            "Name"
                        ],
                        [
                            "conv_head_dim",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_head_dim",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.CONV_HEAD_DIM",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.CONV_HEAD_DIM",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.CONV_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.DILATION",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.DILATION",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.DILATION",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.DILATION",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_DEPTH_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False if use_gn else True",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ReLU_305": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_407": {
                "input": {
                    "value": "extra_features",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "[self.resolution, self.resolution]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/depth_head/roi_depth_predictors.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.depth_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "in_channels * 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_bbox_reg_classes",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "1 if cfg.MODEL.ROI_DEPTH_HEAD.SINGLE_DEPTH_REG else num_classes",
                            "IfExp"
                        ],
                        [
                            "1 if cfg.MODEL.ROI_DEPTH_HEAD.SINGLE_DEPTH_REG else num_classes",
                            "IfExp"
                        ],
                        [
                            "1 if cfg.MODEL.ROI_DEPTH_HEAD.SINGLE_DEPTH_REG else num_classes",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.depth_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "in_channels * 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_bbox_reg_classes",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "1 if cfg.MODEL.ROI_DEPTH_HEAD.SINGLE_DEPTH_REG else num_classes",
                            "IfExp"
                        ],
                        [
                            "1 if cfg.MODEL.ROI_DEPTH_HEAD.SINGLE_DEPTH_REG else num_classes",
                            "IfExp"
                        ],
                        [
                            "1 if cfg.MODEL.ROI_DEPTH_HEAD.SINGLE_DEPTH_REG else num_classes",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.depth_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "in_channels * 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_bbox_reg_classes * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.dim_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "in_channels * 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_bbox_reg_classes * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.ori_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "in_channels * 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_bbox_reg_classes * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_21": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/depthmask_head/depthmask_head.py": {
        "torch": {
            "cat_72": {
                "tensors": {
                    "value": "positive_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/depthmask_head/inference.py": {
        "torch": {
            "zeros_like_75": {
                "variable": {
                    "value": "boxes_exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "boxes.convert('xyxy')",
                            "Call"
                        ],
                        [
                            "[boxes]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_125": {
                "variable": {
                    "value": "im_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(im_h, im_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[bbox.get_field('labels') for bbox in boxes]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_44": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_155": {
                "tensors": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[paste_mask_in_image(mask[0], box, im_h, im_w, self.threshold, self.padding) for (mask, box) in zip(masks, boxes.bbox)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(res, dim=0)[:, None]",
                            "Subscript"
                        ],
                        [
                            "masks.new_empty((0, 1, masks.shape[-2], masks.shape[-1]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/depthmask_head/loss.py": {
        "torch": {
            "stack_42": {
                "tensors": {
                    "value": "masks",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_117": {
                "variable": {
                    "value": "positive_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_117": {
                "variable": {
                    "value": "positive_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_125": {
                "variable": {
                    "value": "mask_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_logits[positive_inds, labels_pos]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "mask_targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cat(mask_targets, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_32": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_41": {
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "proposals.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "nonzero_86": {
                "variable": {
                    "value": "positive_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_per_image > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_86": {
                "variable": {
                    "value": "positive_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/depthmask_head/roi_depthmask_feature_extractors.py": {
        "torch": {
            "relu_63": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(self, layer_name)(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/depthmask_head/roi_depthmask_predictors.py": {
        "torch": {
            "relu_30": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_mask(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/keypoint_head/inference.py": {
        "torch": {
            "from_numpy_122": {
                "ndarray": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_122": {
                "data": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "scores.split(boxes_per_image, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "masks.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/keypoint_head/keypoint_head.py": {
        "torch": {
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/keypoint_head/loss.py": {
        "torch": {
            "nonzero_159": {
                "variable": {
                    "value": "valid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "cat(valid, dim=0).to(dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "torch.nonzero(valid).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_159": {
                "variable": {
                    "value": "valid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_169": {
                "variable": {
                    "value": "keypoint_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keypoint_logits[valid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "keypoint_targets[valid]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_139": {
                "variable": {
                    "value": "img_sampled_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_inds_img",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_139": {
                "variable": {
                    "value": "img_sampled_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/keypoint_head/roi_keypoint_feature_extractors.py": {
        "torch": {
            "relu_42": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(self, layer_name)(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/keypoint_head/roi_keypoint_predictors.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/modeling/roi_heads/mask_head/inference.py": {
        "torch": {
            "zeros_like_100": {
                "variable": {
                    "value": "boxes_exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "boxes.convert('xyxy')",
                            "Call"
                        ],
                        [
                            "[boxes]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_150": {
                "variable": {
                    "value": "im_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(im_h, im_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[bbox.get_field('labels') for bbox in boxes]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_44": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_180": {
                "tensors": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[paste_mask_in_image(mask[0], box, im_h, im_w, self.threshold, self.padding) for (mask, box) in zip(masks, boxes.bbox)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(res, dim=0)[:, None]",
                            "Subscript"
                        ],
                        [
                            "masks.new_empty((0, 1, masks.shape[-2], masks.shape[-1]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/mask_head/loss.py": {
        "torch": {
            "stack_42": {
                "tensors": {
                    "value": "masks",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_120": {
                "variable": {
                    "value": "positive_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_120": {
                "variable": {
                    "value": "positive_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_128": {
                "variable": {
                    "value": "mask_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_logits[positive_inds, labels_pos]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "mask_targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cat(mask_targets, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_32": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_41": {
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "proposals.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "nonzero_88": {
                "variable": {
                    "value": "positive_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_per_image > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_88": {
                "variable": {
                    "value": "positive_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/mask_head/mask_head.py": {
        "torch": {
            "cat_72": {
                "tensors": {
                    "value": "positive_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/mask_head/roi_mask_feature_extractors.py": {
        "torch": {
            "Conv3d_93": {
                "variable": {
                    "value": "self.conv3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(len(scales), 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f.view(f.size(0), f.size(1), 1, f.size(2), f.size(3)) for f in x]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(self, layer_name)(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_118": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(self, layer_name)(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/mask_head/roi_mask_predictors.py": {
        "torch": {
            "relu_30": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_mask(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/roi_heads.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/modeling/roi_heads/roi_lr_heads.py": {
        "torch": {
            "stack_75": {
                "variable": {
                    "value": "new_bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.min(bbox_left[:, 0], bbox_right[:, 0]), torch.min(bbox_left[:, 1], bbox_right[:, 1]), torch.max(bbox_left[:, 2], bbox_right[:, 2]), torch.max(bbox_left[:, 3], bbox_right[:, 3])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_76": {
                "input": {
                    "value": "bbox_left[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_77": {
                "input": {
                    "value": "bbox_left[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_78": {
                "input": {
                    "value": "bbox_left[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_79": {
                "input": {
                    "value": "bbox_left[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/rpn/anchor_generator.py": {
        "torch": {
            "from_numpy_243": {
                "ndarray": {
                    "value": "anchors",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_ratio_enum(anchor, aspect_ratios)",
                            "Call"
                        ],
                        [
                            "np.vstack([_scale_enum(anchors[i, :], scales) for i in range(anchors.shape[0])])",
                            "Call"
                        ],
                        [
                            "np.hstack((x_ctr - 0.5 * (ws - 1), y_ctr - 0.5 * (hs - 1), x_ctr + 0.5 * (ws - 1), y_ctr + 0.5 * (hs - 1)))",
                            "Call"
                        ],
                        [
                            "_mkanchors(ws, hs, x_ctr, y_ctr)",
                            "Call"
                        ],
                        [
                            "_mkanchors(ws, hs, x_ctr, y_ctr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "boxlist.bbox",
                            "Attribute"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "arange_80": {
                "variable": {
                    "value": "shifts_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "grid_width * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_83": {
                "variable": {
                    "value": "shifts_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "grid_height * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "meshgrid_86": {
                "variable": {
                    "value": "(shift_y, shift_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "shifts_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(0, grid_height * stride, step=stride, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "shifts_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(0, grid_width * stride, step=stride, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_89": {
                "variable": {
                    "value": "shifts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shift_x, shift_y, shift_x, shift_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_109": {
                "variable": {
                    "value": "inds_inside",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "anchors.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/rpn/inference.py": {
        "torch": {
            "cat_102": {
                "variable": {
                    "value": "concat_anchors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.bbox for a in anchors]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_276": {
                "variable": {
                    "value": "concat_anchors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.bbox for a in anchors]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "objectness",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxlist.get_field('objectness') for boxlist in boxlists]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_170": {
                "variable": {
                    "value": "(_, inds_sorted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness",
                    "type": "Call",
                    "possible_values": [
                        [
                            "permute_and_flatten(objectness, N, A, 1, H, W).view(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ],
                        [
                            "permute_and_flatten(objectness, N, A, 1, H, W).view(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "post_nms_top_n",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TRAIN",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TEST",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TRAIN",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TEST",
                            "Attribute"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_171": {
                "variable": {
                    "value": "inds_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness",
                    "type": "Call",
                    "possible_values": [
                        [
                            "permute_and_flatten(objectness, N, A, 1, H, W).view(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ],
                        [
                            "permute_and_flatten(objectness, N, A, 1, H, W).view(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_312": {
                "variable": {
                    "value": "keep_idx_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.intersect1d(keep_idx_i_left.cpu().numpy(), keep_idx_i_right.cpu().numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_372": {
                "variable": {
                    "value": "objectness",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxlist.get_field('objectness') for boxlist in boxlists]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_377": {
                "variable": {
                    "value": "(_, inds_sorted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness",
                    "type": "Call",
                    "possible_values": [
                        [
                            "permute_and_flatten(objectness, N, A, 1, H, W).view(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ],
                        [
                            "permute_and_flatten(objectness, N, A, 1, H, W).view(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "post_nms_top_n",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TRAIN",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TEST",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TRAIN",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TEST",
                            "Attribute"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_378": {
                "variable": {
                    "value": "inds_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness",
                    "type": "Call",
                    "possible_values": [
                        [
                            "permute_and_flatten(objectness, N, A, 1, H, W).view(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ],
                        [
                            "permute_and_flatten(objectness, N, A, 1, H, W).view(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_98": {
                "start": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "proposals[0].bbox.device",
                            "Attribute"
                        ],
                        [
                            "objectness.device",
                            "Attribute"
                        ],
                        [
                            "proposals[0].bbox.device",
                            "Attribute"
                        ],
                        [
                            "objectness.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "topk_180": {
                "variable": {
                    "value": "(_, inds_sorted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness",
                    "type": "Call",
                    "possible_values": [
                        [
                            "permute_and_flatten(objectness, N, A, 1, H, W).view(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ],
                        [
                            "permute_and_flatten(objectness, N, A, 1, H, W).view(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "post_nms_top_n",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TRAIN",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TEST",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TRAIN",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TEST",
                            "Attribute"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_271": {
                "start": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "proposals[0].bbox.device",
                            "Attribute"
                        ],
                        [
                            "objectness.device",
                            "Attribute"
                        ],
                        [
                            "proposals[0].bbox.device",
                            "Attribute"
                        ],
                        [
                            "objectness.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "topk_387": {
                "variable": {
                    "value": "(_, inds_sorted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness",
                    "type": "Call",
                    "possible_values": [
                        [
                            "permute_and_flatten(objectness, N, A, 1, H, W).view(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ],
                        [
                            "permute_and_flatten(objectness, N, A, 1, H, W).view(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "post_nms_top_n",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TRAIN",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TEST",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TRAIN",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TEST",
                            "Attribute"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_68": {
                "*size": {
                    "value": "len(gt_box)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "proposals[0].bbox.device",
                            "Attribute"
                        ],
                        [
                            "objectness.device",
                            "Attribute"
                        ],
                        [
                            "proposals[0].bbox.device",
                            "Attribute"
                        ],
                        [
                            "objectness.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_240": {
                "*size": {
                    "value": "len(gt_box)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "proposals[0].bbox.device",
                            "Attribute"
                        ],
                        [
                            "objectness.device",
                            "Attribute"
                        ],
                        [
                            "proposals[0].bbox.device",
                            "Attribute"
                        ],
                        [
                            "objectness.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/rpn/loss.py": {
        "torch": {
            "nonzero_109": {
                "variable": {
                    "value": "sampled_pos_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(sampled_pos_inds, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_109": {
                "variable": {
                    "value": "sampled_pos_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_110": {
                "variable": {
                    "value": "sampled_neg_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(sampled_neg_inds, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_110": {
                "variable": {
                    "value": "sampled_neg_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sampled_pos_inds, sampled_neg_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "regression_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "regression_targets",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(regression_targets, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(regression_targets, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_129": {
                "variable": {
                    "value": "objectness_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness[sampled_inds]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[sampled_inds]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_244": {
                "variable": {
                    "value": "sampled_pos_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(sampled_pos_inds, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_244": {
                "variable": {
                    "value": "sampled_pos_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_245": {
                "variable": {
                    "value": "sampled_neg_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(sampled_neg_inds, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_245": {
                "variable": {
                    "value": "sampled_neg_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sampled_pos_inds, sampled_neg_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_258": {
                "variable": {
                    "value": "regression_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "regression_targets",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(regression_targets, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(regression_targets, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "regression_targets_right",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "regression_targets_right",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(regression_targets_right, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_274": {
                "variable": {
                    "value": "objectness_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness[sampled_inds]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[sampled_inds]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_109": {
                "tensors": {
                    "value": "sampled_pos_inds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nonzero(torch.cat(sampled_pos_inds, dim=0)).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.nonzero(torch.cat(sampled_pos_inds, dim=0)).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_110": {
                "tensors": {
                    "value": "sampled_neg_inds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nonzero(torch.cat(sampled_neg_inds, dim=0)).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.nonzero(torch.cat(sampled_neg_inds, dim=0)).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_244": {
                "tensors": {
                    "value": "sampled_pos_inds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nonzero(torch.cat(sampled_pos_inds, dim=0)).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.nonzero(torch.cat(sampled_pos_inds, dim=0)).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_245": {
                "tensors": {
                    "value": "sampled_neg_inds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nonzero(torch.cat(sampled_neg_inds, dim=0)).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.nonzero(torch.cat(sampled_neg_inds, dim=0)).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/rpn/retinanet/inference.py": {
        "torch": {
            "kthvalue_166": {
                "variable": {
                    "value": "(image_thresh, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "number_of_detections - self.fpn_post_nms_top_n + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_171": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cls_scores >= image_thresh.item()",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(keep).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_171": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_154": {
                "size": {
                    "value": "(num_labels,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "j",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(1, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "scores.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/rpn/retinanet/loss.py": {
        "torch": {
            "cat_62": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "labels.int()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "regression_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "regression_targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(regression_targets, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_64": {
                "variable": {
                    "value": "pos_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "pos_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/rpn/retinanet/retinanet.py": {
        "torch": {
            "Conv2d_56": {
                "variable": {
                    "value": "self.cls_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors * num_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "*args": {
                    "value": "*cls_tower",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "*args": {
                    "value": "*bbox_tower",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/rpn/rpn.py": {
        "torch": {
            "Conv2d_27": {
                "variable": {
                    "value": "self.cls_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "variable": {
                    "value": "self.cls_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_103": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv(feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_68": {
                "input": {
                    "value": "self.conv(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/rpn/rpn_lr.py": {
        "torch": {
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.cls_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.bbox_pred_right",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv(feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_122": {
                "tensors": {
                    "value": "[fl, fr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/rpn/utils.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/modeling/utils.py": {
        "torch": {
            "cat_16": {
                "tensors": {
                    "value": "tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/solver/build.py": {
        "torch": {
            "SGD_21": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': weight_decay}]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.SOLVER.BASE_LR",
                            "Attribute"
                        ],
                        [
                            "cfg.SOLVER.BASE_LR * cfg.SOLVER.BIAS_LR_FACTOR",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.SOLVER.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/solver/lr_scheduler.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/structures/bounding_box.py": {
        "torch": {
            "as_tensor_66": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bbox",
                    "type": "Call",
                    "possible_values": [
                        [
                            "BoxList([[0, 0, 10, 10], [0, 0, 5, 5]], (10, 10))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(bbox, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat((xmin, ymin, xmax, ymax), dim=-1)",
                            "Call"
                        ],
                        [
                            "BoxList(bbox, self.size, mode=mode)",
                            "Call"
                        ],
                        [
                            "torch.cat((xmin, ymin, xmax - xmin + TO_REMOVE, ymax - ymin + TO_REMOVE), dim=-1)",
                            "Call"
                        ],
                        [
                            "BoxList(bbox, self.size, mode=mode)",
                            "Call"
                        ],
                        [
                            "BoxList(scaled_box, size, mode=self.mode)",
                            "Call"
                        ],
                        [
                            "BoxList(scaled_box, size, mode='xyxy')",
                            "Call"
                        ],
                        [
                            "BoxList(transposed_boxes, self.size, mode='xyxy')",
                            "Call"
                        ],
                        [
                            "BoxList(cropped_box, (w, h), mode='xyxy')",
                            "Call"
                        ],
                        [
                            "BoxList(t_box, self.size, mode='xyxy')",
                            "Call"
                        ],
                        [
                            "BoxList(self.bbox.to(device), self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "BoxList(self.bbox[item], self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "BoxList(self.bbox, self.size, self.mode)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bbox.device if isinstance(bbox, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_177": {
                "variable": {
                    "value": "scaled_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(scaled_xmin, scaled_ymin, scaled_xmax, scaled_ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "transposed_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(transposed_xmin, transposed_ymin, transposed_xmax, transposed_ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_245": {
                "variable": {
                    "value": "cropped_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cropped_xmin, cropped_ymin, cropped_xmax, cropped_ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_266": {
                "variable": {
                    "value": "t_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t_xmin, t_ymin, t_xmax, t_ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xmin, ymin, xmax, ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xmin, ymin, xmax - xmin + TO_REMOVE, ymax - ymin + TO_REMOVE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_65": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_271": {
                "input": {
                    "value": "t_ymin - t_ymax",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/structures/boxlist_ops.py": {
        "torch": {
            "max_103": {
                "variable": {
                    "value": "lt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_104": {
                "variable": {
                    "value": "rb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_159": {
                "variable": {
                    "value": "new_bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.min(bbox_left[:, 0], bbox_right[:, 0]), torch.min(bbox_left[:, 1], bbox_right[:, 1]), torch.max(bbox_left[:, 2], bbox_right[:, 2]), torch.max(bbox_left[:, 3], bbox_right[:, 3])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_123": {
                "tensors": {
                    "value": "tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "min_160": {
                "input": {
                    "value": "bbox_left[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_161": {
                "input": {
                    "value": "bbox_left[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_162": {
                "input": {
                    "value": "bbox_left[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_163": {
                "input": {
                    "value": "bbox_left[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/structures/image_list.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/structures/keypoint.py": {
        "torch": {
            "as_tensor_13": {
                "variable": {
                    "value": "keypoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "keypoints",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.as_tensor(keypoints, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "keypoints.view(num_keypoints, -1, 3)",
                            "Call"
                        ],
                        [
                            "type(self)(resized_data, size, self.mode)",
                            "Call"
                        ],
                        [
                            "type(self)(flipped_data, self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "type(self)(t_kp, self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "type(self)(self.keypoints.to(*args, **kwargs), self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "type(self)(self.keypoints[item], self.size, self.mode)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keypoints.device if isinstance(keypoints, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_68": {
                "variable": {
                    "value": "t_kp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t_x, t_y, t_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "data": {
                    "value": "flip_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[names.index(i) for i in flipped_names]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "device_12": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/structures/point_3d.py": {
        "torch": {
            "as_tensor_13": {
                "variable": {
                    "value": "depths",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "depths",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.as_tensor(depths, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "params['min_value'] + self.depths * (params['max_value'] - params['min_value'])",
                            "BinOp"
                        ],
                        [
                            "type(self)(self.depths.to(*args, **kwargs), self.size, focal_length=self.focal_length, baseline=self.baseline, min_value=self.min_value, max_value=self.max_value, mode=self.mode)",
                            "Call"
                        ],
                        [
                            "type(self)(self.depths[item], self.size, focal_length=self.focal_length, baseline=self.baseline, min_value=self.min_value, max_value=self.max_value, mode=self.mode)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "depths.device if isinstance(depths, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "device_12": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/structures/segmentation_mask.py": {
        "torch": {
            "from_numpy_348": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "masks",
                            "Name"
                        ],
                        [
                            "cv2.UMat(mask)",
                            "Call"
                        ],
                        [
                            "mask_utils.decode(rle)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_461": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.convert_to_binarymask() for p in self.polygons]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "empty_466": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, size[1], size[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_227": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "p",
                    "type": "Call",
                    "possible_values": [
                        [
                            "polygons",
                            "Name"
                        ],
                        [
                            "torch.as_tensor(p, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "poly.clone()",
                            "Call"
                        ],
                        [
                            "poly.clone()",
                            "Call"
                        ],
                        [
                            "poly.clone()",
                            "Call"
                        ],
                        [
                            "poly.clone()",
                            "Call"
                        ],
                        [
                            "polygons",
                            "Name"
                        ],
                        [
                            "PolygonInstance(p, size)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_59": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, size[1], size[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_61": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "masks.clone()",
                            "Call"
                        ],
                        [
                            "masks[None]",
                            "Subscript"
                        ],
                        [
                            "torch.empty([0, size[1], size[0]])",
                            "Call"
                        ],
                        [
                            "masks.masks.clone()",
                            "Call"
                        ],
                        [
                            "torch.stack(masks, dim=2).clone()",
                            "Call"
                        ],
                        [
                            "mask_utils.decode(masks)",
                            "Call"
                        ],
                        [
                            "torch.tensor(masks).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "interpolate(input=masks[None].float(), size=(height, width), mode='bilinear', align_corners=False)[0].type_as(masks)",
                            "Call"
                        ],
                        [
                            "self.masks.detach().numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack([p.convert_to_binarymask() for p in self.polygons])",
                            "Call"
                        ],
                        [
                            "torch.empty([0, size[1], size[0]], dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clone_61": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "masks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "masks.clone()",
                            "Call"
                        ],
                        [
                            "masks[None]",
                            "Subscript"
                        ],
                        [
                            "torch.empty([0, size[1], size[0]])",
                            "Call"
                        ],
                        [
                            "masks.masks.clone()",
                            "Call"
                        ],
                        [
                            "torch.stack(masks, dim=2).clone()",
                            "Call"
                        ],
                        [
                            "mask_utils.decode(masks)",
                            "Call"
                        ],
                        [
                            "torch.tensor(masks).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "interpolate(input=masks[None].float(), size=(height, width), mode='bilinear', align_corners=False)[0].type_as(masks)",
                            "Call"
                        ],
                        [
                            "self.masks.detach().numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack([p.convert_to_binarymask() for p in self.polygons])",
                            "Call"
                        ],
                        [
                            "torch.empty([0, size[1], size[0]], dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_67": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/utils/c2_model_loading.py": {
        "torch": {
            "from_numpy_124": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weights[k]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/utils/checkpoint.py": {
        "torch": {
            "save_53": {
                "obj": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, '{}.pth'.format(name))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'last_checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'last_checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'last_checkpoint')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_99": {
                "f": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_checkpoint_file()",
                            "Call"
                        ],
                        [
                            "catalog_f",
                            "Name"
                        ],
                        [
                            "cached_f",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_99": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/utils/collect_env.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/utils/comm.py": {
        "torch": {
            "cat_80": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_110": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(values, dim=0)",
                            "Call"
                        ],
                        [
                            "values / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/utils/imports.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/utils/metric_logger.py": {
        "torch": {
            "tensor_27": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/utils/model_serialization.py": {
        "torch": {
            "as_tensor_32": {
                "variable": {
                    "value": "match_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "match_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[len(j) if i.endswith(j) else 0 for i in current_keys for j in loaded_keys]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(match_matrix).view(len(current_keys), len(loaded_keys))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/utils/model_zoo.py": {
        "torch": {}
    },
    "setup.py": {
        "torch": {
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/checkpoint.py": {
        "torch": {
            "Module_19": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Module_20": {
                "variable": {
                    "value": "m.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "m.block1.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "m.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Module_23": {
                "variable": {
                    "value": "m.res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "m.res.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_27": {
                "variable": {
                    "value": "state_dict[layer1.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_28": {
                "variable": {
                    "value": "state_dict[layer1.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_29": {
                "variable": {
                    "value": "state_dict[layer2.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_30": {
                "variable": {
                    "value": "state_dict[layer2.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_31": {
                "variable": {
                    "value": "state_dict[res.layer2.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_32": {
                "variable": {
                    "value": "state_dict[res.layer2.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "*args": {
                    "value": "nn.Linear(2, 3)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_107": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_40": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_41": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_43": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_44": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_75": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_76": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_78": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_79": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_backbones.py": {
        "torch": {
            "rand_45": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[N, C_in, H, W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_box_coder.py": {
        "torch": {
            "from_numpy_16": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([175.62031555, 20.91103172, 253.352005, 155.0145874, 169.24636841, 4.85241556, 228.8605957, 105.02092743, 181.77426147, 199.82876587, 192.88427734, 214.0255127, 174.36262512, 186.75761414, 296.19091797, 231.27906799, 22.73153877, 92.02596283, 135.5695343, 208.80291748]).astype(np.float32).reshape(-1, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "deltas",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([0.47861834, 0.13992102, 0.14961673, 0.71495209, 0.29915856, -0.35664671, 0.89018666, 0.70815367, -0.03852064, 0.44466892, 0.49492538, 0.71409376, 0.28052918, 0.02184832, 0.65289006, 1.05060139, -0.38172557, -0.08533806, -0.60335309, 0.79052375]).astype(np.float32).reshape(-1, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_data_samplers.py": {
        "torch": {
            "SequentialSampler_31": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "SequentialSampler_44": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "SequentialSampler_64": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "RandomSampler_116": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "SequentialSampler_136": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "BatchSampler_137": {
                "variable": {
                    "value": "batch_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SubsetSampler([0, 3, 5, 6, 7, 8])",
                            "Call"
                        ],
                        [
                            "SubsetSampler([5, 0, 6, 1, 3, 8])",
                            "Call"
                        ],
                        [
                            "SubsetSampler([5, 0, 6, 1, 3, 8])",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "[1, 3, 5, 6]",
                            "List"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "[2, 3, 4]",
                            "List"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[False, True]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_detectors.py": {
        "torch": {
            "is_available_49": {
                "variable": {
                    "value": "TEST_CUDA",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_80": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.INPUT.MIN_SIZE_TRAIN",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int(x * 1.2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_fbnet.py": {
        "torch": {
            "is_available_10": {
                "variable": {
                    "value": "TEST_CUDA",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_15": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[N, C_in, 7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_26": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[10, 20, 7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_31": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[10, 20, 7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_feature_extractors.py": {
        "torch": {
            "rand_52": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[N, C_in, H, W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_nms.py": {
        "torch": {
            "from_numpy_50": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs[:, :4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[350.9821, 161.82, 369.9685, 205.2372], [250.5236, 154.2844, 274.1773, 204.981], [471.492, 160.4118, 496.0094, 213.4244], [352.0421, 164.5933, 366.4458, 205.9624], [166.0765, 169.7707, 183.0102, 232.6606], [252.3, 183.1449, 269.6541, 210.6747], [469.7862, 162.0192, 482.1673, 187.0053], [168.4862, 174.2567, 181.7437, 232.9379], [470.329, 162.3442, 496.4272, 214.6296], [251.045, 155.5911, 272.2693, 203.3675], [252.0326, 154.795, 273.7404, 195.3671], [351.7479, 161.9567, 370.6432, 204.3047], [496.3306, 161.7157, 515.0573, 210.72], [471.0749, 162.6143, 485.3374, 207.3448], [250.9745, 160.7633, 264.1924, 206.835], [470.4792, 169.0351, 487.1934, 220.2984], [474.4227, 161.9546, 513.1018, 215.5193], [251.9428, 184.195, 262.6937, 207.6416], [252.6623, 175.0252, 269.8806, 213.7584], [260.9884, 157.0351, 288.3554, 206.6027], [251.3629, 164.5101, 263.2179, 202.4203], [471.8361, 190.8142, 485.6812, 220.8586], [248.6243, 156.9628, 264.3355, 199.2767], [495.1643, 158.0483, 512.6261, 184.4192], [376.8718, 168.0144, 387.3584, 201.321], [122.9191, 160.7433, 172.5612, 231.3837], [350.3857, 175.8806, 366.25, 205.4329], [115.2958, 162.7822, 161.9776, 229.6147], [168.4375, 177.4041, 180.8028, 232.4551], [169.7939, 184.433, 181.4767, 232.122], [347.7536, 175.9356, 355.8637, 197.5586], [495.5434, 164.6059, 516.4031, 207.7053], [172.1216, 194.6033, 183.1217, 235.2653], [264.2654, 181.554, 288.4626, 214.017], [111.7971, 183.7748, 137.3745, 225.9724], [253.4919, 186.3945, 280.8694, 210.0731], [165.5334, 169.7344, 185.9159, 232.8514], [348.3662, 184.5187, 354.9081, 201.4038], [164.6562, 162.5724, 186.3108, 233.501], [113.2999, 186.841, 135.8841, 219.7642], [117.0282, 179.8009, 142.5375, 221.0736], [462.1312, 161.1004, 495.3576, 217.2208], [462.58, 159.931, 501.2937, 224.1655], [503.5242, 170.0733, 518.3792, 209.0113], [250.3658, 195.5925, 260.6523, 212.4679], [108.8287, 163.6994, 146.3642, 229.7261], [256.7617, 187.3123, 288.8407, 211.2013], [161.2781, 167.4801, 186.3751, 232.7133], [115.376, 177.5859, 163.3512, 236.966], [248.9077, 188.0919, 264.8579, 207.9718], [108.1349, 160.7851, 143.637, 229.6243], [465.09, 156.7555, 490.3561, 213.5704], [107.5338, 173.4323, 141.0704, 235.291]]).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_124": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([0.1919, 0.3293, 0.086, 0.16, 0.1885, 0.4297, 0.0974, 0.2711, 0.1483, 0.1173, 0.1034, 0.2915, 0.1993, 0.0677, 0.3217, 0.0966, 0.0526, 0.5675, 0.313, 0.1592, 0.1353, 0.0634, 0.1557, 0.1512, 0.0699, 0.0545, 0.2692, 0.1143, 0.0572, 0.199, 0.0558, 0.15, 0.2214, 0.1878, 0.2501, 0.1343, 0.0809, 0.1266, 0.0743, 0.0896, 0.0781, 0.0983, 0.0557, 0.0623, 0.5808, 0.309, 0.105, 0.0524, 0.0513, 0.4501, 0.4167, 0.0623, 0.1749]).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_predictors.py": {
        "torch": {
            "rand_47": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[N, C_in, H, W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_rpn_heads.py": {
        "torch": {
            "rand_39": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[N, C_in, H, W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_segmentation_mask.py": {
        "torch": {
            "sum_25": {
                "variable": {
                    "value": "diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(diff.float())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_25": {
                "input": {
                    "value": "diff.float()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tools/cityscapes/convert_coco_model.py": {
        "torch": {
            "load_109": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "cls_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "m[weight_names['cls_score']].size(1)",
                            "Call"
                        ],
                        [
                            "m[weight_names['bbox_pred']].size(1)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "len(cityscapes_cats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "bbox_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "m[weight_names['cls_score']].size(1)",
                            "Call"
                        ],
                        [
                            "m[weight_names['bbox_pred']].size(1)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_bbox_reg_classes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "variable": {
                    "value": "mask_fcn_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_reduced",
                    "type": "Name",
                    "possible_values": [
                        [
                            "m[weight_names['mask_fcn_logits']].size(1)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "len(cityscapes_cats)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_179": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_176": {
                "obj": {
                    "value": "m",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "checkpoint['model']",
                            "Subscript"
                        ],
                        [
                            "checkpoint['model']",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "out_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_191": {
                "obj": {
                    "value": "m",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "checkpoint['model']",
                            "Subscript"
                        ],
                        [
                            "checkpoint['model']",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "out_file",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tools/kitti/convert_coco_model.py": {
        "torch": {
            "load_104": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "variable": {
                    "value": "cls_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "m[weight_names['cls_score']].size(1)",
                            "Call"
                        ],
                        [
                            "m[weight_names['bbox_pred']].size(1)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "len(kitti_cats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "bbox_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "m[weight_names['cls_score']].size(1)",
                            "Call"
                        ],
                        [
                            "m[weight_names['bbox_pred']].size(1)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_bbox_reg_classes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "mask_fcn_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_reduced",
                    "type": "Name",
                    "possible_values": [
                        [
                            "m[weight_names['mask_fcn_logits']].size(1)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "len(kitti_cats)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_171": {
                "obj": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "checkpoint['model']",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "out_file",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tools/test_net.py": {
        "torch": {
            "set_device_54": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train_gan.py": {
        "torch": {
            "device_47": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cfg.MODEL.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_177": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_67": {
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "build_detection_model(cfg)",
                            "Call"
                        ],
                        [
                            "model.module",
                            "Attribute"
                        ],
                        [
                            "train(cfg, args.local_rank, args.distributed)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "local_rank",
                    "type": "Variable",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train_lr_net.py": {
        "torch": {
            "device_39": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cfg.MODEL.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_51": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "build_detection_model(cfg)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[local_rank], output_device=local_rank, broadcast_buffers=False)",
                            "Call"
                        ],
                        [
                            "model.module",
                            "Attribute"
                        ],
                        [
                            "train(cfg, args.local_rank, args.distributed)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "local_rank",
                    "type": "Variable",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_cache_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_161": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train_net.py": {
        "torch": {
            "device_43": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cfg.MODEL.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_55": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "build_detection_model(cfg)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[local_rank], output_device=local_rank, broadcast_buffers=False)",
                            "Call"
                        ],
                        [
                            "model.module",
                            "Attribute"
                        ],
                        [
                            "train(cfg, args.local_rank, args.distributed)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "local_rank",
                    "type": "Variable",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_cache_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_168": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}