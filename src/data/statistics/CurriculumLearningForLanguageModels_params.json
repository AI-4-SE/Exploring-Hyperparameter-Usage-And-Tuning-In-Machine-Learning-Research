{
    "bin/bilm/elmo.py": {
        "tensorflow": {
            "cast_47": {
                "variable": {
                    "value": "mask_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilm_ops['mask']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_48": {
                "variable": {
                    "value": "broadcast_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_102": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_ELMo_gamma'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "control_dependencies_45": {
                "control_inputs": {
                    "value": "[lm_embeddings, mask]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_62": {
                "variable": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "lm_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilm_ops['lm_embeddings']",
                            "Subscript"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "n_lm_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(lm_embeddings.get_shape()[1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "sum_pieces",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "squeeze_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_68": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_ELMo_W'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_lm_layers,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "_l2_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_l2_regularizer",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_77": {
                "variable": {
                    "value": "normed_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.softmax(W + 1.0 / n_lm_layers)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "n_lm_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(lm_embeddings.get_shape()[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "split_81": {
                "variable": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "lm_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilm_ops['lm_embeddings']",
                            "Subscript"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "n_lm_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(lm_embeddings.get_shape()[1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_90": {
                "variable": {
                    "value": "sum_pieces",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pieces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "batch_normalization_57": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(x_masked) / N",
                            "BinOp"
                        ]
                    ]
                },
                "variance": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(((x_masked - mean) * broadcast_mask) ** 2) / N",
                            "BinOp"
                        ]
                    ]
                },
                "offset": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scale": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "variance_epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_34": {
                "input_tensor": {
                    "value": "tf.square(weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_53": {
                "input_tensor": {
                    "value": "mask_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_54": {
                "input_tensor": {
                    "value": "x_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * broadcast_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_55": {
                "input_tensor": {
                    "value": "((x_masked - mean) * broadcast_mask) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_78": {
                "logits": {
                    "value": "W + 1.0 / n_lm_layers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_34": {
                "x": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_collection_94": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_89": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(normed_weights, layers)",
                            "Call"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_87": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(normed_weights, layers)",
                            "Call"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "bin/bilm/model.py": {
        "tensorflow": {
            "placeholder_616": {
                "variable": {
                    "value": "ids_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, max_word_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConfigProto_627": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_652": {
                "variable": {
                    "value": "ids_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, max_word_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConfigProto_658": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_498": {
                "variable": {
                    "value": "sequence_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(mask, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "group_600": {
                "variable": {
                    "value": "self.update_state_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "concat_154": {
                "variable": {
                    "value": "lm_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(t, axis=1) for t in layers_without_bos_eos]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_162": {
                "variable": {
                    "value": "mask_wo_bos_eos",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lm_graph.mask[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reverse_sequence_163": {
                "variable": {
                    "value": "mask_wo_bos_eos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_wo_bos_eos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(lm_graph.mask[:, 1:], 'int32')",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(mask_wo_bos_eos, lm_graph.sequence_lengths - 1, seq_axis=1, batch_axis=0)",
                            "Call"
                        ],
                        [
                            "mask_wo_bos_eos[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.reverse_sequence(mask_wo_bos_eos, sequence_length_wo_bos_eos, seq_axis=1, batch_axis=0)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask_wo_bos_eos, 'bool')",
                            "Call"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "lm_graph.sequence_lengths - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reverse_sequence_170": {
                "variable": {
                    "value": "mask_wo_bos_eos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_wo_bos_eos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(lm_graph.mask[:, 1:], 'int32')",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(mask_wo_bos_eos, lm_graph.sequence_lengths - 1, seq_axis=1, batch_axis=0)",
                            "Call"
                        ],
                        [
                            "mask_wo_bos_eos[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.reverse_sequence(mask_wo_bos_eos, sequence_length_wo_bos_eos, seq_axis=1, batch_axis=0)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask_wo_bos_eos, 'bool')",
                            "Call"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "sequence_length_wo_bos_eos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_graph.sequence_lengths - 2",
                            "BinOp"
                        ]
                    ]
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_176": {
                "variable": {
                    "value": "mask_wo_bos_eos",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_wo_bos_eos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(lm_graph.mask[:, 1:], 'int32')",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(mask_wo_bos_eos, lm_graph.sequence_lengths - 1, seq_axis=1, batch_axis=0)",
                            "Call"
                        ],
                        [
                            "mask_wo_bos_eos[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.reverse_sequence(mask_wo_bos_eos, sequence_length_wo_bos_eos, seq_axis=1, batch_axis=0)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask_wo_bos_eos, 'bool')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_333": {
                "variable": {
                    "value": "self.embedding_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "char_embed",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_chars, char_embed_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "str"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_339": {
                "variable": {
                    "value": "self.char_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.ids_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_400": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_convolutions(self.char_embedding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, n_filters])",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding, W_proj_cnn) + b_proj_cnn",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(embedding, shp)",
                            "Call"
                        ],
                        [
                            "high(embedding, W_carry, b_carry, W_transform, b_transform)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, n_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_418": {
                "variable": {
                    "value": "carry_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, ww_carry) + bb_carry",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_419": {
                "variable": {
                    "value": "transform_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(x, ww_tr) + bb_tr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_456": {
                "variable": {
                    "value": "shp",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size_n_tokens, [projection_dim]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_457": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_convolutions(self.char_embedding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, n_filters])",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding, W_proj_cnn) + b_proj_cnn",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(embedding, shp)",
                            "Call"
                        ],
                        [
                            "high(embedding, W_carry, b_carry, W_transform, b_transform)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([batch_size_n_tokens, [projection_dim]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_468": {
                "variable": {
                    "value": "self.embedding_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._n_tokens_vocab, projection_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "str"
                        ]
                    ]
                }
            },
            "embedding_lookup_472": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.ids_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_any_495": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.ids_placeholder > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_628": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_659": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_116": {
                "control_inputs": {
                    "value": "[lm_graph.update_state_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_sequence_138": {
                "variable": {
                    "value": "layer_wo_bos_eos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer_wo_bos_eos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer[:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reverse_sequence(layer_wo_bos_eos, lm_graph.sequence_lengths - 1, seq_axis=1, batch_axis=0)",
                            "Call"
                        ],
                        [
                            "layer_wo_bos_eos[:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reverse_sequence(layer_wo_bos_eos, sequence_length_wo_bos_eos, seq_axis=1, batch_axis=0)",
                            "Call"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "lm_graph.sequence_lengths - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reverse_sequence_145": {
                "variable": {
                    "value": "layer_wo_bos_eos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer_wo_bos_eos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer[:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reverse_sequence(layer_wo_bos_eos, lm_graph.sequence_lengths - 1, seq_axis=1, batch_axis=0)",
                            "Call"
                        ],
                        [
                            "layer_wo_bos_eos[:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reverse_sequence(layer_wo_bos_eos, sequence_length_wo_bos_eos, seq_axis=1, batch_axis=0)",
                            "Call"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "sequence_length_wo_bos_eos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_graph.sequence_lengths - 2",
                            "BinOp"
                        ]
                    ]
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_276": {
                "name_or_scope": {
                    "value": "bilm",
                    "type": "str",
                    "possible_values": []
                },
                "custom_getter": {
                    "value": "custom_getter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "custom_getter",
                            "Call"
                        ]
                    ]
                }
            },
            "device_332": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_388": {
                "values": {
                    "value": "convolutions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_406": {
                "variable": {
                    "value": "W_proj_cnn",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_proj",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_filters, projection_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(mean=0.0, stddev=np.sqrt(1.0 / n_filters))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "str"
                        ]
                    ]
                }
            },
            "get_variable_411": {
                "variable": {
                    "value": "b_proj_cnn",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_proj",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[projection_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "str"
                        ]
                    ]
                }
            },
            "device_467": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_498": {
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_any(self.ids_placeholder > 0, axis=2)",
                            "Call"
                        ],
                        [
                            "self.ids_placeholder > 0",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_499": {
                "input": {
                    "value": "sequence_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(mask, tf.int32), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reverse_sequence_512": {
                "variable": {
                    "value": "layer_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seq_lengths": {
                    "value": "sequence_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(mask, tf.int32), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_629": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_660": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_120": {
                "values": {
                    "value": "[token_embeddings, token_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_344": {
                "name_or_scope": {
                    "value": "CNN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_364": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W_cnn_%s' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, width, char_embed_dim, num]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(minval=-0.05, maxval=0.05)",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(mean=0.0, stddev=np.sqrt(1.0 / (width * char_embed_dim)))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "str"
                        ]
                    ]
                }
            },
            "get_variable_369": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'b_cnn_%s' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "str"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool_378": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inp, w, strides=[1, 1, 1, 1], padding='VALID') + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool(conv, [1, 1, max_chars - width + 1, 1], [1, 1, 1, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "activation(conv)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(conv, squeeze_dims=[2])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, max_chars - width + 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_384": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inp, w, strides=[1, 1, 1, 1], padding='VALID') + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool(conv, [1, 1, max_chars - width + 1, 1], [1, 1, 1, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "activation(conv)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(conv, squeeze_dims=[2])",
                            "Call"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_399": {
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_convolutions(self.char_embedding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, n_filters])",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding, W_proj_cnn) + b_proj_cnn",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(embedding, shp)",
                            "Call"
                        ],
                        [
                            "high(embedding, W_carry, b_carry, W_transform, b_transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_405": {
                "name_or_scope": {
                    "value": "CNN_proj",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_427": {
                "variable": {
                    "value": "W_carry",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_carry",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[highway_dim, highway_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(mean=0.0, stddev=np.sqrt(1.0 / highway_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "str"
                        ]
                    ]
                }
            },
            "get_variable_433": {
                "variable": {
                    "value": "b_carry",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_carry",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[highway_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(-2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "str"
                        ]
                    ]
                }
            },
            "get_variable_437": {
                "variable": {
                    "value": "W_transform",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_transform",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[highway_dim, highway_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(mean=0.0, stddev=np.sqrt(1.0 / highway_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "str"
                        ]
                    ]
                }
            },
            "get_variable_442": {
                "variable": {
                    "value": "b_transform",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_transform",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[highway_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "str"
                        ]
                    ]
                }
            },
            "matmul_452": {
                "a": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_convolutions(self.char_embedding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, n_filters])",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding, W_proj_cnn) + b_proj_cnn",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(embedding, shp)",
                            "Call"
                        ],
                        [
                            "high(embedding, W_carry, b_carry, W_transform, b_transform)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_proj_cnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_proj', [n_filters, projection_dim], initializer=tf.random_normal_initializer(mean=0.0, stddev=np.sqrt(1.0 / n_filters)), dtype=DTYPE)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMCell_522": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "lstm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.options['lstm']['dim']",
                            "Subscript"
                        ]
                    ]
                },
                "num_proj": {
                    "value": "projection_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.options['lstm']['projection_dim']",
                            "Subscript"
                        ],
                        [
                            "self.options['lstm']['projection_dim']",
                            "Subscript"
                        ],
                        [
                            "self.options['lstm']['projection_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "cell_clip": {
                    "value": "cell_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.options['lstm'].get('cell_clip')",
                            "Call"
                        ]
                    ]
                },
                "proj_clip": {
                    "value": "proj_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.options['lstm'].get('proj_clip')",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMCell_526": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "lstm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.options['lstm']['dim']",
                            "Subscript"
                        ]
                    ]
                },
                "cell_clip": {
                    "value": "cell_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.options['lstm'].get('cell_clip')",
                            "Call"
                        ]
                    ]
                },
                "proj_clip": {
                    "value": "proj_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.options['lstm'].get('proj_clip')",
                            "Call"
                        ]
                    ]
                }
            },
            "dynamic_rnn_564": {
                "variable": {
                    "value": "(layer_output, final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell(lstm_dim, num_proj=projection_dim, cell_clip=cell_clip, proj_clip=proj_clip)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.LSTMCell(lstm_dim, cell_clip=cell_clip, proj_clip=proj_clip)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.ResidualWrapper(lstm_cell)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "layer_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding",
                            "Attribute"
                        ],
                        [
                            "tf.reverse_sequence(self.embedding, sequence_lengths, seq_axis=1, batch_axis=0)",
                            "Call"
                        ],
                        [
                            "layer_output",
                            "variable"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "sequence_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(mask, tf.int32), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "tf.nn.rnn_cell.LSTMStateTuple(*batch_init_states)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_126": {
                "values": {
                    "value": "[lm_graph.lstm_outputs['forward'][i], lm_graph.lstm_outputs['backward'][i]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_155": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_336": {
                "minval": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_356": {
                "variable": {
                    "value": "w_init",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-0.05",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_418": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "ww_carry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ww_carry",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_419": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "ww_tr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ww_tr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_426": {
                "name_or_scope": {
                    "value": "'CNN_high_%s' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ResidualWrapper_538": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell(lstm_dim, num_proj=projection_dim, cell_clip=cell_clip, proj_clip=proj_clip)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.LSTMCell(lstm_dim, cell_clip=cell_clip, proj_clip=proj_clip)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.ResidualWrapper(lstm_cell)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_547": {
                "initial_value": {
                    "value": "tf.zeros([self._max_batch_size, dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_563": {
                "name_or_scope": {
                    "value": "variable_scope_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'RNN_{0}/RNN/MultiRNNCell/Cell{1}'.format(i_direction, i)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_587": {
                "control_inputs": {
                    "value": "[layer_output]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_590": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[final_state[i][:batch_size, :], init_states[i][batch_size:, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_593": {
                "variable": {
                    "value": "state_update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "init_states[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([final_state[i][:batch_size, :], init_states[i][batch_size:, :]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_360": {
                "variable": {
                    "value": "w_init",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "np.sqrt(1.0 / (width * char_embed_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_373": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_cnn_%s' % i, [1, width, char_embed_dim, num], initializer=w_init, dtype=DTYPE)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_normal_initializer_408": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "np.sqrt(1.0 / n_filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_413": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_548": {
                "shape": {
                    "value": "[self._max_batch_size, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_sequence_579": {
                "input": {
                    "value": "layer_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dynamic_rnn(lstm_cell, layer_input, sequence_length=sequence_lengths, initial_state=tf.nn.rnn_cell.LSTMStateTuple(*batch_init_states))",
                            "Call"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "sequence_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(mask, tf.int32), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_371": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_430": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "np.sqrt(1.0 / highway_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_435": {
                "value": {
                    "value": "-2.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_439": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "np.sqrt(1.0 / highway_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_444": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_568": {
                "c": {
                    "value": "*batch_init_states",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "bin/bilm/training.py": {
        "tensorflow": {
            "set_verbosity_21": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_646": {
                "variable": {
                    "value": "(unique_indices, new_index_positions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsorted_segment_sum_647": {
                "variable": {
                    "value": "summed_values",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.gather(v, g.indices)",
                            "Call"
                        ],
                        [
                            "v",
                            "variable"
                        ],
                        [
                            "sess.run([v])[0]",
                            "Subscript"
                        ],
                        [
                            "values",
                            "Method Argument"
                        ]
                    ]
                },
                "segment_ids": {
                    "value": "new_index_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unique(indices)",
                            "Call"
                        ]
                    ]
                },
                "num_segments": {
                    "value": "tf.shape(unique_indices)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_1162": {
                "variable": {
                    "value": "(clipped_t_list, tf_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "t_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t_list",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "clip_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip_norm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConfigProto_1215": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_1300": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "latest_checkpoint_1367": {
                "variable": {
                    "value": "ckpt_file",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "tf_save_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_save_dir",
                            "Method Argument"
                        ],
                        [
                            "tf_save_dir",
                            "Method Argument"
                        ],
                        [
                            "tf_save_dir",
                            "Method Argument"
                        ],
                        [
                            "tf_save_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConfigProto_1406": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "self.token_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE_INT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'int64'",
                            "str"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, unroll_steps)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "token_ids",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_153": {
                "variable": {
                    "value": "self.tokens_characters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE_INT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'int64'",
                            "str"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, unroll_steps, max_chars)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "tokens_characters",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_603": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_629": {
                "variable": {
                    "value": "updates_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(updates * updates)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_695": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_701": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "options.get('learning_rate', 0.2)",
                            "Call"
                        ],
                        [
                            "options.get('learning_rate', 0.2)",
                            "Call"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "initial_accumulator_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_707": {
                "variable": {
                    "value": "train_perplexity",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_perplexity",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_736": {
                "variable": {
                    "value": "train_perplexity",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "train_perplexity / n_gpus",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_737": {
                "variable": {
                    "value": "perplexity_summmary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_perplexity",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_perplexity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('train_perplexity', [], initializer=tf.constant_initializer(0.0), trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.exp(train_perplexity / n_gpus)",
                            "Call"
                        ],
                        [
                            "train_perplexity + loss",
                            "BinOp"
                        ],
                        [
                            "tf.get_variable('train_perplexity', [], initializer=tf.constant_initializer(0.0), trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.exp(train_perplexity / n_gpus)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_746": {
                "variable": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "lstm_output_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_766": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "merge_767": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[perplexity_summmary] + norm_summaries",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "merge_770": {
                "variable": {
                    "value": "hist_summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "histogram_summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.summary.histogram('token_embedding', models[0].embedding)]",
                            "List"
                        ],
                        [
                            "[tf.summary.histogram('token_embedding', models[0].embedding)]",
                            "List"
                        ]
                    ]
                }
            },
            "initialize_all_variables_772": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_785": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "tf_log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_log_dir",
                            "Method Argument"
                        ],
                        [
                            "tf_log_dir",
                            "Method Argument"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_926": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_932": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "options.get('learning_rate', 0.2)",
                            "Call"
                        ],
                        [
                            "options.get('learning_rate', 0.2)",
                            "Call"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "initial_accumulator_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_938": {
                "variable": {
                    "value": "train_perplexity",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_perplexity",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_967": {
                "variable": {
                    "value": "train_perplexity",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "train_perplexity / n_gpus",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_968": {
                "variable": {
                    "value": "perplexity_summmary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_perplexity",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_perplexity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('train_perplexity', [], initializer=tf.constant_initializer(0.0), trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.exp(train_perplexity / n_gpus)",
                            "Call"
                        ],
                        [
                            "train_perplexity + loss",
                            "BinOp"
                        ],
                        [
                            "tf.get_variable('train_perplexity', [], initializer=tf.constant_initializer(0.0), trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.exp(train_perplexity / n_gpus)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_977": {
                "variable": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "lstm_output_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_997": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "merge_998": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[perplexity_summmary] + norm_summaries",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "merge_1001": {
                "variable": {
                    "value": "hist_summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "histogram_summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.summary.histogram('token_embedding', models[0].embedding)]",
                            "List"
                        ],
                        [
                            "[tf.summary.histogram('token_embedding', models[0].embedding)]",
                            "List"
                        ]
                    ]
                }
            },
            "initialize_all_variables_1003": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_1016": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "tf_log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_log_dir",
                            "Method Argument"
                        ],
                        [
                            "tf_log_dir",
                            "Method Argument"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_88": {
                "variable": {
                    "value": "self.embedding_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_tokens_vocab, projection_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "str"
                        ]
                    ]
                }
            },
            "embedding_lookup_92": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.token_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "self.token_ids_reverse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE_INT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'int64'",
                            "str"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, unroll_steps)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "token_ids_reverse",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_158": {
                "variable": {
                    "value": "self.embedding_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "char_embed",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_chars, char_embed_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "str"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_164": {
                "variable": {
                    "value": "self.char_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.tokens_characters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_241": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_convolutions(self.char_embedding, reuse)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, n_filters])",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding, W_proj_cnn) + b_proj_cnn",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(embedding, shp)",
                            "Call"
                        ],
                        [
                            "high(embedding, W_carry, b_carry, W_transform, b_transform)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, n_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_262": {
                "variable": {
                    "value": "carry_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, ww_carry) + bb_carry",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_263": {
                "variable": {
                    "value": "transform_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(x, ww_tr) + bb_tr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_316": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_convolutions(self.char_embedding, reuse)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, n_filters])",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding, W_proj_cnn) + b_proj_cnn",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(embedding, shp)",
                            "Call"
                        ],
                        [
                            "high(embedding, W_carry, b_carry, W_transform, b_transform)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size, unroll_steps, projection_dim]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_419": {
                "variable": {
                    "value": "lstm_output_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack(_lstm_output_unpacked, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, projection_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_448": {
                "variable": {
                    "value": "id_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE_INT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'int64'",
                            "str"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, unroll_steps)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'next_token_id' + suffix",
                            "BinOp"
                        ],
                        [
                            "'ignore' + suffix",
                            "BinOp"
                        ],
                        [
                            "'norm_pre_clip/' + v.name.replace(':', '_')",
                            "BinOp"
                        ],
                        [
                            "'norm_post_clip/' + v.name.replace(':', '_')",
                            "BinOp"
                        ],
                        [
                            "'next_token_id' + suffix",
                            "BinOp"
                        ],
                        [
                            "'ignore' + suffix",
                            "BinOp"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_454": {
                "variable": {
                    "value": "ignore_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "str"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, unroll_steps)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'next_token_id' + suffix",
                            "BinOp"
                        ],
                        [
                            "'ignore' + suffix",
                            "BinOp"
                        ],
                        [
                            "'norm_pre_clip/' + v.name.replace(':', '_')",
                            "BinOp"
                        ],
                        [
                            "'norm_post_clip/' + v.name.replace(':', '_')",
                            "BinOp"
                        ],
                        [
                            "'next_token_id' + suffix",
                            "BinOp"
                        ],
                        [
                            "'ignore' + suffix",
                            "BinOp"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_479": {
                "variable": {
                    "value": "softmax_init",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0 / np.sqrt(softmax_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_487": {
                "variable": {
                    "value": "self.softmax_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_tokens_vocab]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "str"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_505": {
                "variable": {
                    "value": "next_token_id_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "id_placeholder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_id_placeholders",
                            "variable"
                        ],
                        [
                            "zip(next_ids, lstm_outputs, masks)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(DTYPE_INT, shape=(batch_size, unroll_steps), name=name)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_565": {
                "variable": {
                    "value": "all_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "IndexedSlices_569": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "av",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_deduplicate_indexed_slices(avg_values, all_indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "ai",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_deduplicate_indexed_slices(avg_values, all_indices)",
                            "Call"
                        ]
                    ]
                },
                "dense_shape": {
                    "value": "g0.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_581": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "average_gradients(tower_grads, options['batch_size'], options)",
                            "Call"
                        ],
                        [
                            "clip_grads(grads, options, True, global_step)",
                            "Call"
                        ],
                        [
                            "opt.compute_gradients(loss * options['unroll_steps'], aggregation_method=tf.AggregationMethod.EXPERIMENTAL_TREE)",
                            "Call"
                        ],
                        [
                            "average_gradients(tower_grads, options['batch_size'], options)",
                            "Call"
                        ],
                        [
                            "clip_grads(grads, options, True, global_step)",
                            "Call"
                        ],
                        [
                            "opt.compute_gradients(loss * options['unroll_steps'], aggregation_method=tf.AggregationMethod.EXPERIMENTAL_TREE)",
                            "Call"
                        ],
                        [
                            "grads",
                            "Method Argument"
                        ],
                        [
                            "grads",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_582": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.IndexedSlices(av, ai, dense_shape=g0.dense_shape)",
                            "Call"
                        ],
                        [
                            "tf.concat(grads, 0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_618": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_and_vars",
                            "variable"
                        ],
                        [
                            "grad_and_vars",
                            "variable"
                        ],
                        [
                            "grad_and_vars[0][1]",
                            "Subscript"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "grads",
                            "variable"
                        ],
                        [
                            "tf.global_variables()",
                            "Call"
                        ],
                        [
                            "tf.global_variables()",
                            "Call"
                        ],
                        [
                            "zip(norms, variables)",
                            "Call"
                        ],
                        [
                            "zip(norms_post, variables)",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "g.indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_694": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_758": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_776": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_782": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_925": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_989": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1007": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_1013": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_norm_1153": {
                "t_list": {
                    "value": "[t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_norm_1165": {
                "t_list": {
                    "value": "[t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_1170": {
                "name": {
                    "value": "norm_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_name",
                            "Method Argument"
                        ]
                    ]
                },
                "data": {
                    "value": "tf_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_global_norm(t_list, clip_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_1187": {
                "variable": {
                    "value": "(clipped_tensors, g_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grad_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[g for (g, v) in grad_and_vars]",
                            "ListComp"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "scaled_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val",
                            "variable"
                        ]
                    ]
                }
            },
            "Session_1216": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_1225": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1301": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_1307": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1407": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_1411": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_87": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_102": {
                "variable": {
                    "value": "self.embedding_reverse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.token_ids_reverse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_157": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_168": {
                "variable": {
                    "value": "self.tokens_characters_reverse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE_INT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'int64'",
                            "str"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, unroll_steps, max_chars)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "tokens_characters_reverse",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_171": {
                "variable": {
                    "value": "self.char_embedding_reverse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.tokens_characters_reverse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_221": {
                "values": {
                    "value": "convolutions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_243": {
                "variable": {
                    "value": "embedding_reverse",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedding_reverse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_convolutions(self.char_embedding_reverse, True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding_reverse, [-1, n_filters])",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding_reverse, W_proj_cnn) + b_proj_cnn",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(embedding_reverse, shp)",
                            "Call"
                        ],
                        [
                            "high(embedding_reverse, W_carry, b_carry, W_transform, b_transform)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, n_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_250": {
                "variable": {
                    "value": "W_proj_cnn",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_proj",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_filters, projection_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(mean=0.0, stddev=np.sqrt(1.0 / n_filters))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "str"
                        ]
                    ]
                }
            },
            "get_variable_255": {
                "variable": {
                    "value": "b_proj_cnn",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_proj",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[projection_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "str"
                        ]
                    ]
                }
            },
            "reshape_318": {
                "variable": {
                    "value": "embedding_reverse",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedding_reverse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_convolutions(self.char_embedding_reverse, True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding_reverse, [-1, n_filters])",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding_reverse, W_proj_cnn) + b_proj_cnn",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(embedding_reverse, shp)",
                            "Call"
                        ],
                        [
                            "high(embedding_reverse, W_carry, b_carry, W_transform, b_transform)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size, unroll_steps, projection_dim]",
                            "List"
                        ]
                    ]
                }
            },
            "MultiRNNCell_396": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "lstm_cells",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "dropout_423": {
                "variable": {
                    "value": "lstm_output_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lstm_output_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.stack(_lstm_output_unpacked, axis=1), [-1, projection_dim])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(lstm_output_flat, keep_prob)",
                            "Call"
                        ],
                        [
                            "zip(next_ids, lstm_outputs, masks)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - dropout",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_to_collection_425": {
                "name": {
                    "value": "lstm_output_embeddings",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "_lstm_output_unpacked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.static_rnn(lstm_cell, tf.unstack(lstm_input, axis=1), initial_state=self.init_lstm_state[-1])",
                            "Call"
                        ],
                        [
                            "tf.nn.static_rnn(lstm_cell, tf.unstack(lstm_input, axis=1), initial_state=self.init_lstm_state[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_477": {
                "name_or_scope": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_477": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_482": {
                "variable": {
                    "value": "self.softmax_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_tokens_vocab, softmax_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "str"
                        ]
                    ]
                },
                "initializer": {
                    "value": "softmax_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(0.0, 1.0 / np.sqrt(softmax_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_528": {
                "variable": {
                    "value": "mask_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(next_ids, lstm_outputs, masks)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask_flat, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_576": {
                "variable": {
                    "value": "expanded_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_and_vars",
                            "variable"
                        ],
                        [
                            "grad_and_vars",
                            "variable"
                        ],
                        [
                            "grads",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_628": {
                "x": {
                    "value": "tf.reduce_sum(v * v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_629": {
                "input_tensor": {
                    "value": "updates * updates",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_631": {
                "name": {
                    "value": "'UPDATE/' + vname.replace(':', '_')",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "updates_norm / values_norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_649": {
                "input": {
                    "value": "unique_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unique(indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_743": {
                "name": {
                    "value": "token_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "models[0].embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_748": {
                "name": {
                    "value": "lstm_embedding_0",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "lstm_out[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "global_variables_766": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "histogram_974": {
                "name": {
                    "value": "token_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "models[0].embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_979": {
                "name": {
                    "value": "lstm_embedding_0",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "lstm_out[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "global_variables_997": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_1159": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'next_token_id' + suffix",
                            "BinOp"
                        ],
                        [
                            "'ignore' + suffix",
                            "BinOp"
                        ],
                        [
                            "'norm_pre_clip/' + v.name.replace(':', '_')",
                            "BinOp"
                        ],
                        [
                            "'norm_post_clip/' + v.name.replace(':', '_')",
                            "BinOp"
                        ],
                        [
                            "'next_token_id' + suffix",
                            "BinOp"
                        ],
                        [
                            "'ignore' + suffix",
                            "BinOp"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "data": {
                    "value": "ns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(norms, variables)",
                            "Call"
                        ],
                        [
                            "zip(norms_post, variables)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_1168": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'next_token_id' + suffix",
                            "BinOp"
                        ],
                        [
                            "'ignore' + suffix",
                            "BinOp"
                        ],
                        [
                            "'norm_pre_clip/' + v.name.replace(':', '_')",
                            "BinOp"
                        ],
                        [
                            "'norm_post_clip/' + v.name.replace(':', '_')",
                            "BinOp"
                        ],
                        [
                            "'next_token_id' + suffix",
                            "BinOp"
                        ],
                        [
                            "'ignore' + suffix",
                            "BinOp"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "data": {
                    "value": "ns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(norms, variables)",
                            "Call"
                        ],
                        [
                            "zip(norms_post, variables)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_1217": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1217": {
                "name_or_scope": {
                    "value": "lm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_1302": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1302": {
                "name_or_scope": {
                    "value": "lm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1408": {
                "name_or_scope": {
                    "value": "lm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_1415": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_101": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_177": {
                "name_or_scope": {
                    "value": "CNN",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable_scope().reuse",
                            "Attribute"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_197": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W_cnn_%s' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, width, char_embed_dim, num]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(minval=-0.05, maxval=0.05)",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(mean=0.0, stddev=np.sqrt(1.0 / (width * char_embed_dim)))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "str"
                        ]
                    ]
                }
            },
            "get_variable_202": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'b_cnn_%s' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "str"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool_211": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inp, w, strides=[1, 1, 1, 1], padding='VALID') + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool(conv, [1, 1, max_chars - width + 1, 1], [1, 1, 1, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "activation(conv)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(conv, squeeze_dims=[2])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, max_chars - width + 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_217": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inp, w, strides=[1, 1, 1, 1], padding='VALID') + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool(conv, [1, 1, max_chars - width + 1, 1], [1, 1, 1, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "activation(conv)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(conv, squeeze_dims=[2])",
                            "Call"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_249": {
                "name_or_scope": {
                    "value": "CNN_proj",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_271": {
                "variable": {
                    "value": "W_carry",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_carry",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[highway_dim, highway_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(mean=0.0, stddev=np.sqrt(1.0 / highway_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "str"
                        ]
                    ]
                }
            },
            "get_variable_277": {
                "variable": {
                    "value": "b_carry",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_carry",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[highway_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(-2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "str"
                        ]
                    ]
                }
            },
            "get_variable_281": {
                "variable": {
                    "value": "W_transform",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_transform",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[highway_dim, highway_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(mean=0.0, stddev=np.sqrt(1.0 / highway_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "str"
                        ]
                    ]
                }
            },
            "get_variable_286": {
                "variable": {
                    "value": "b_transform",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_transform",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[highway_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "str"
                        ]
                    ]
                }
            },
            "matmul_304": {
                "a": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_convolutions(self.char_embedding, reuse)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, n_filters])",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding, W_proj_cnn) + b_proj_cnn",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(embedding, shp)",
                            "Call"
                        ],
                        [
                            "high(embedding, W_carry, b_carry, W_transform, b_transform)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_proj_cnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_proj', [n_filters, projection_dim], initializer=tf.random_normal_initializer(mean=0.0, stddev=np.sqrt(1.0 / n_filters)), dtype=DTYPE)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_309": {
                "tensor": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_convolutions(self.char_embedding, reuse)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, n_filters])",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding, W_proj_cnn) + b_proj_cnn",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(embedding, shp)",
                            "Call"
                        ],
                        [
                            "high(embedding, W_carry, b_carry, W_transform, b_transform)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, unroll_steps, projection_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTMCell_370": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "lstm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.options['lstm']['dim']",
                            "Subscript"
                        ]
                    ]
                },
                "num_proj": {
                    "value": "projection_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.options['lstm']['projection_dim']",
                            "Subscript"
                        ],
                        [
                            "self.options['lstm']['projection_dim']",
                            "Subscript"
                        ],
                        [
                            "self.options['lstm']['projection_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "cell_clip": {
                    "value": "cell_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.options['lstm'].get('cell_clip')",
                            "Call"
                        ]
                    ]
                },
                "proj_clip": {
                    "value": "proj_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.options['lstm'].get('proj_clip')",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMCell_374": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "lstm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.options['lstm']['dim']",
                            "Subscript"
                        ]
                    ]
                },
                "cell_clip": {
                    "value": "cell_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.options['lstm'].get('cell_clip')",
                            "Call"
                        ]
                    ]
                },
                "proj_clip": {
                    "value": "proj_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.options['lstm'].get('proj_clip')",
                            "Call"
                        ]
                    ]
                }
            },
            "DropoutWrapper_390": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell(lstm_dim, num_proj=projection_dim, cell_clip=cell_clip, proj_clip=proj_clip)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.LSTMCell(lstm_dim, cell_clip=cell_clip, proj_clip=proj_clip)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell(lstm_cells)",
                            "Call"
                        ],
                        [
                            "lstm_cells[0]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.rnn_cell.ResidualWrapper(lstm_cell)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(lstm_cell, input_keep_prob=keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - dropout",
                            "BinOp"
                        ]
                    ]
                }
            },
            "control_dependencies_400": {
                "control_inputs": {
                    "value": "[lstm_input]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "static_rnn_412": {
                "variable": {
                    "value": "(_lstm_output_unpacked, final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell(lstm_dim, num_proj=projection_dim, cell_clip=cell_clip, proj_clip=proj_clip)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.LSTMCell(lstm_dim, cell_clip=cell_clip, proj_clip=proj_clip)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell(lstm_cells)",
                            "Call"
                        ],
                        [
                            "lstm_cells[0]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.rnn_cell.ResidualWrapper(lstm_cell)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(lstm_cell, input_keep_prob=keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "tf.unstack(lstm_input, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "initial_state": {
                    "value": "self.init_lstm_state[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_420": {
                "values": {
                    "value": "_lstm_output_unpacked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.static_rnn(lstm_cell, tf.unstack(lstm_input, axis=1), initial_state=self.init_lstm_state[-1])",
                            "Call"
                        ],
                        [
                            "tf.nn.static_rnn(lstm_cell, tf.unstack(lstm_input, axis=1), initial_state=self.init_lstm_state[-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "control_dependencies_506": {
                "control_inputs": {
                    "value": "[lstm_output_flat]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sampled_softmax_loss_508": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.softmax_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.softmax_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "next_token_id_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(id_placeholder, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "lstm_output_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.stack(_lstm_output_unpacked, axis=1), [-1, projection_dim])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(lstm_output_flat, keep_prob)",
                            "Call"
                        ],
                        [
                            "zip(next_ids, lstm_outputs, masks)",
                            "Call"
                        ]
                    ]
                },
                "num_sampled": {
                    "value": "self.options['n_negative_samples_batch']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.options['n_tokens_vocab']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_true": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_524": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "output_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(lstm_output_flat, tf.transpose(self.softmax_W)) + self.softmax_b",
                            "BinOp"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.squeeze(next_token_id_flat, squeeze_dims=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_531": {
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sampled_softmax_loss(self.softmax_W, self.softmax_b, next_token_id_flat, lstm_output_flat, self.options['n_negative_samples_batch'], self.options['n_tokens_vocab'], num_true=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=output_scores, labels=tf.squeeze(next_token_id_flat, squeeze_dims=[1]))",
                            "Call"
                        ],
                        [
                            "losses * mask_flat",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_566": {
                "values": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.gather(v, g.indices)",
                            "Call"
                        ],
                        [
                            "v",
                            "variable"
                        ],
                        [
                            "sess.run([v])[0]",
                            "Subscript"
                        ],
                        [
                            "values",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_621": {
                "x": {
                    "value": "tf.gather(a, g.indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_626": {
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_628": {
                "input_tensor": {
                    "value": "v * v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_697": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_709": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_712": {
                "device_name": {
                    "value": "'/gpu:%d' % k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histogram_752": {
                "name": {
                    "value": "lstm_embedding_1",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "lstm_out[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_759": {
                "name": {
                    "value": "v.name.replace(':', '_')",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_and_vars",
                            "variable"
                        ],
                        [
                            "grad_and_vars",
                            "variable"
                        ],
                        [
                            "grad_and_vars[0][1]",
                            "Subscript"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "grads",
                            "variable"
                        ],
                        [
                            "tf.global_variables()",
                            "Call"
                        ],
                        [
                            "tf.global_variables()",
                            "Call"
                        ],
                        [
                            "zip(norms, variables)",
                            "Call"
                        ],
                        [
                            "zip(norms_post, variables)",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_776": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_initializer_928": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_940": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_943": {
                "device_name": {
                    "value": "'/gpu:%d' % k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histogram_983": {
                "name": {
                    "value": "lstm_embedding_1",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "lstm_out[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_990": {
                "name": {
                    "value": "v.name.replace(':', '_')",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_and_vars",
                            "variable"
                        ],
                        [
                            "grad_and_vars",
                            "variable"
                        ],
                        [
                            "grad_and_vars[0][1]",
                            "Subscript"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "grads",
                            "variable"
                        ],
                        [
                            "tf.global_variables()",
                            "Call"
                        ],
                        [
                            "tf.global_variables()",
                            "Call"
                        ],
                        [
                            "zip(norms, variables)",
                            "Call"
                        ],
                        [
                            "zip(norms_post, variables)",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_1007": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_161": {
                "minval": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_189": {
                "variable": {
                    "value": "w_init",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-0.05",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_262": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "ww_carry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ww_carry",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_263": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "ww_tr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ww_tr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_270": {
                "name_or_scope": {
                    "value": "'CNN_high_%s' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_298": {
                "tensor": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_convolutions(self.char_embedding, reuse)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, n_filters])",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding, W_proj_cnn) + b_proj_cnn",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(embedding, shp)",
                            "Call"
                        ],
                        [
                            "high(embedding, W_carry, b_carry, W_transform, b_transform)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, unroll_steps, highway_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_306": {
                "a": {
                    "value": "embedding_reverse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_convolutions(self.char_embedding_reverse, True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding_reverse, [-1, n_filters])",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding_reverse, W_proj_cnn) + b_proj_cnn",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(embedding_reverse, shp)",
                            "Call"
                        ],
                        [
                            "high(embedding_reverse, W_carry, b_carry, W_transform, b_transform)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_proj_cnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_proj', [n_filters, projection_dim], initializer=tf.random_normal_initializer(mean=0.0, stddev=np.sqrt(1.0 / n_filters)), dtype=DTYPE)",
                            "Call"
                        ]
                    ]
                }
            },
            "ResidualWrapper_386": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell(lstm_dim, num_proj=projection_dim, cell_clip=cell_clip, proj_clip=proj_clip)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.LSTMCell(lstm_dim, cell_clip=cell_clip, proj_clip=proj_clip)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell(lstm_cells)",
                            "Call"
                        ],
                        [
                            "lstm_cells[0]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.rnn_cell.ResidualWrapper(lstm_cell)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(lstm_cell, input_keep_prob=keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "static_rnn_407": {
                "variable": {
                    "value": "(_lstm_output_unpacked, final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell(lstm_dim, num_proj=projection_dim, cell_clip=cell_clip, proj_clip=proj_clip)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.LSTMCell(lstm_dim, cell_clip=cell_clip, proj_clip=proj_clip)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell(lstm_cells)",
                            "Call"
                        ],
                        [
                            "lstm_cells[0]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.rnn_cell.ResidualWrapper(lstm_cell)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(lstm_cell, input_keep_prob=keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "tf.unstack(lstm_input, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "initial_state": {
                    "value": "self.init_lstm_state[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_initializer_490": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gather_621": {
                "params": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "g.indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_713": {
                "name_or_scope": {
                    "value": "lm",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "k > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "variable_scope_944": {
                "name_or_scope": {
                    "value": "lm",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "k > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reset_default_graph_1120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_normal_initializer_193": {
                "variable": {
                    "value": "w_init",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "np.sqrt(1.0 / (width * char_embed_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_206": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_cnn_%s' % i, [1, width, char_embed_dim, num], initializer=w_init, dtype=DTYPE)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_normal_initializer_252": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "np.sqrt(1.0 / n_filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_257": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_406": {
                "name_or_scope": {
                    "value": "'RNN_%s' % lstm_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_414": {
                "value": {
                    "value": "lstm_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lstm_input in enumerate(lstm_inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_517": {
                "a": {
                    "value": "lstm_output_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.stack(_lstm_output_unpacked, axis=1), [-1, projection_dim])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(lstm_output_flat, keep_prob)",
                            "Call"
                        ],
                        [
                            "zip(next_ids, lstm_outputs, masks)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(self.softmax_W)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_204": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_274": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "np.sqrt(1.0 / highway_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_279": {
                "value": {
                    "value": "-2.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_283": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "np.sqrt(1.0 / highway_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_288": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unstack_409": {
                "value": {
                    "value": "lstm_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lstm_input in enumerate(lstm_inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_519": {
                "a": {
                    "value": "self.softmax_W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_526": {
                "input": {
                    "value": "next_token_id_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(id_placeholder, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}