{
    "datasets.py": {
        "sklearn": {
            "LabelEncoder_20": {
                "variable": {
                    "value": "self.encoding_truth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelEncoder_24": {
                "variable": {
                    "value": "self.encoding_humanid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shuffle_46": {
                "variable": {
                    "value": "(self.list_file_path_truth, self.list_label_truth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "self.list_file_path_truth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "self.list_label_truth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shuffle_48": {
                "variable": {
                    "value": "(self.list_file_path_human_id, self.list_label_human_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "self.list_file_path_human_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "self.list_label_human_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "tensorflow": {
            "VGG16_8": {
                "variable": {
                    "value": "vgg16",
                    "type": "variable",
                    "possible_values": []
                },
                "include_top": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "weights": {
                    "value": "imagenet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_15": {
                "variable": {
                    "value": "share_weight_net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "vgg16.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keras.layers.Flatten()(last_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_19": {
                "variable": {
                    "value": "as_input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(224, 224, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "as_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "as_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[keras.layers.Dense(4096, activation='relu', name='as_fc1'), keras.layers.Dense(4096, activation='relu', name='as_fc2')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Input_31": {
                "variable": {
                    "value": "lpc_input_1",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(224, 224, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "lpc_input_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_35": {
                "variable": {
                    "value": "lpc_input_2",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(224, 224, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "lpc_input_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Lambda_39": {
                "variable": {
                    "value": "lpc_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "function": {
                    "value": "lambda x: tf.math.square(x[0] - x[1])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "lpc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_43": {
                "variable": {
                    "value": "fr_input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(224, 224, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "facerecog_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "fr_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[keras.layers.Dense(4096, activation='relu', name='fr_fc1'), keras.layers.Dense(4096, activation='relu', name='fr_fc2')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Model_54": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[as_input, lpc_input_1, lpc_input_2, fr_input]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[as_output, lpc, fr_output]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_76": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Flatten_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_28": {
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "as_output",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_52": {
                "units": {
                    "value": "numb_faceid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numb_faceid",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "fr_output",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_23": {
                "units": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "as_fc1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_24": {
                "units": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "as_fc2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_39": {
                "x": {
                    "value": "x[0] - x[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_47": {
                "units": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "fr_fc1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_48": {
                "units": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "fr_fc2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "ModelCheckpoint_22": {
                "variable": {
                    "value": "model_checkpoint_callback",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "checkpoint_filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['training']['checkpoint']",
                            "Subscript"
                        ]
                    ]
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "monitor": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}