{
    "con_losses.py": {
        "torch": {
            "randn_111": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_112": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randn(32, 2, 10)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_113": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "[32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "contrast_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.unbind(features, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_73": {
                "variable": {
                    "value": "anchor_dot_contrast",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(anchor_feature, contrast_feature.T)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.temperature",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_77": {
                "variable": {
                    "value": "(logits_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_dot_contrast",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.div(torch.matmul(anchor_feature, contrast_feature.T), self.temperature)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scatter_84": {
                "variable": {
                    "value": "logits_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones_like(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(batch_size * anchor_count).view(-1, 1).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "src": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_110": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_95": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - exp_logits / (exp_logits.sum(1, keepdim=True) + 1e-06) - 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_97": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "exp_logits / (exp_logits.sum(1, keepdim=True) + 1e-06) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_52": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unbind_62": {
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features.view(features.shape[0], features.shape[1], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "input": {
                    "value": "anchor_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features[:, 0]",
                            "Subscript"
                        ],
                        [
                            "contrast_feature",
                            "Name"
                        ]
                    ]
                },
                "other": {
                    "value": "contrast_feature.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_85": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.eye(batch_size, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "mask.float().to(device)",
                            "Call"
                        ],
                        [
                            "torch.eq(labels, labels.T).float().to(device)",
                            "Call"
                        ],
                        [
                            "mask.repeat(anchor_count, contrast_count)",
                            "Call"
                        ],
                        [
                            "mask * logits_mask",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_87": {
                "start": {
                    "value": "batch_size * anchor_count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_92": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "anchor_dot_contrast - logits_max.detach()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_38": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_40": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "eq_57": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels.contiguous().view(-1, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "labels.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data_loader.py": {
        "torch": {
            "TensorDataset_109": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_119": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_131": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_141": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "resize_imgs(x.numpy(), 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_78": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "resize_imgs(x, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(y)",
                            "Call"
                        ],
                        [
                            "y.squeeze()",
                            "Call"
                        ],
                        [
                            "self.y[index]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_116": {
                "data": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(y)",
                            "Call"
                        ],
                        [
                            "y.squeeze()",
                            "Call"
                        ],
                        [
                            "self.y[index]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_128": {
                "data": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(y)",
                            "Call"
                        ],
                        [
                            "y.squeeze()",
                            "Call"
                        ],
                        [
                            "self.y[index]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_138": {
                "data": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(y)",
                            "Call"
                        ],
                        [
                            "y.squeeze()",
                            "Call"
                        ],
                        [
                            "self.y[index]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "main_base.py": {
        "torch": {
            "CrossEntropyLoss_96": {
                "variable": {
                    "value": "cls_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_57": {
                "variable": {
                    "value": "trloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_loader.load_mnist('train', translate=translate, ntr=ntr, autoaug=autoaug)",
                            "Call"
                        ],
                        [
                            "data_loader.load_mnist('train')",
                            "Call"
                        ],
                        [
                            "data_loader.load_mnist_t('train', translate=translate, ntr=ntr)",
                            "Call"
                        ],
                        [
                            "data_loader.load_cifar10(split='train', autoaug=autoaug)",
                            "Call"
                        ],
                        [
                            "data_loader.load_synthia(branch)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "RandomSampler(trset, True, nbatch * batchsize)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_59": {
                "variable": {
                    "value": "teloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "teset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_loader.load_mnist('test')",
                            "Call"
                        ],
                        [
                            "data_loader.load_mnist('test')",
                            "Call"
                        ],
                        [
                            "data_loader.load_cifar10(split='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_61": {
                "variable": {
                    "value": "cls_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cls_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "trloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_loader.load_mnist('train', translate=translate, ntr=ntr, autoaug=autoaug)",
                            "Call"
                        ],
                        [
                            "data_loader.load_mnist('train')",
                            "Call"
                        ],
                        [
                            "data_loader.load_mnist_t('train', translate=translate, ntr=ntr)",
                            "Call"
                        ],
                        [
                            "data_loader.load_cifar10(split='train', autoaug=autoaug)",
                            "Call"
                        ],
                        [
                            "data_loader.load_synthia(branch)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "RandomSampler(trset, True, nbatch * batchsize)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_68": {
                "variable": {
                    "value": "teloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "teset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_loader.load_mnist('test')",
                            "Call"
                        ],
                        [
                            "data_loader.load_mnist('test')",
                            "Call"
                        ],
                        [
                            "data_loader.load_cifar10(split='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_70": {
                "variable": {
                    "value": "cls_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cls_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "trloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_loader.load_mnist('train', translate=translate, ntr=ntr, autoaug=autoaug)",
                            "Call"
                        ],
                        [
                            "data_loader.load_mnist('train')",
                            "Call"
                        ],
                        [
                            "data_loader.load_mnist_t('train', translate=translate, ntr=ntr)",
                            "Call"
                        ],
                        [
                            "data_loader.load_cifar10(split='train', autoaug=autoaug)",
                            "Call"
                        ],
                        [
                            "data_loader.load_synthia(branch)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_77": {
                "variable": {
                    "value": "teloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "teset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_loader.load_mnist('test')",
                            "Call"
                        ],
                        [
                            "data_loader.load_mnist('test')",
                            "Call"
                        ],
                        [
                            "data_loader.load_cifar10(split='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_79": {
                "variable": {
                    "value": "cls_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cls_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_134": {
                "obj": {
                    "value": "{'cls_net': cls_net.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(svroot, 'best.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_58": {
                "data_source": {
                    "value": "trset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_loader.load_mnist('train', translate=translate, ntr=ntr, autoaug=autoaug)",
                            "Call"
                        ],
                        [
                            "data_loader.load_mnist('train')",
                            "Call"
                        ],
                        [
                            "data_loader.load_mnist_t('train', translate=translate, ntr=ntr)",
                            "Call"
                        ],
                        [
                            "data_loader.load_cifar10(split='train', autoaug=autoaug)",
                            "Call"
                        ],
                        [
                            "data_loader.load_synthia(branch)",
                            "Call"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "nbatch * batchsize",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_81": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "cls_opt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(cls_net.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "optim.Adam(cls_net.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "optim.SGD(cls_net.parameters(), lr=lr, momentum=0.9, nesterov=True, weight_decay=0.0005)",
                            "Call"
                        ],
                        [
                            "optim.Adam(cls_net.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "epochs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_86": {
                "variable": {
                    "value": "trloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_loader.load_mnist('train', translate=translate, ntr=ntr, autoaug=autoaug)",
                            "Call"
                        ],
                        [
                            "data_loader.load_mnist('train')",
                            "Call"
                        ],
                        [
                            "data_loader.load_mnist_t('train', translate=translate, ntr=ntr)",
                            "Call"
                        ],
                        [
                            "data_loader.load_cifar10(split='train', autoaug=autoaug)",
                            "Call"
                        ],
                        [
                            "data_loader.load_synthia(branch)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_87": {
                "variable": {
                    "value": "teloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_loader.load_mnist('train', translate=translate, ntr=ntr, autoaug=autoaug)",
                            "Call"
                        ],
                        [
                            "data_loader.load_mnist('train')",
                            "Call"
                        ],
                        [
                            "data_loader.load_mnist_t('train', translate=translate, ntr=ntr)",
                            "Call"
                        ],
                        [
                            "data_loader.load_cifar10(split='train', autoaug=autoaug)",
                            "Call"
                        ],
                        [
                            "data_loader.load_synthia(branch)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_92": {
                "variable": {
                    "value": "cls_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cls_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "RandomSampler_67": {
                "data_source": {
                    "value": "trset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_loader.load_mnist('train', translate=translate, ntr=ntr, autoaug=autoaug)",
                            "Call"
                        ],
                        [
                            "data_loader.load_mnist('train')",
                            "Call"
                        ],
                        [
                            "data_loader.load_mnist_t('train', translate=translate, ntr=ntr)",
                            "Call"
                        ],
                        [
                            "data_loader.load_cifar10(split='train', autoaug=autoaug)",
                            "Call"
                        ],
                        [
                            "data_loader.load_synthia(branch)",
                            "Call"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "nbatch * batchsize",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_94": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "cls_opt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(cls_net.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "optim.Adam(cls_net.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "optim.SGD(cls_net.parameters(), lr=lr, momentum=0.9, nesterov=True, weight_decay=0.0005)",
                            "Call"
                        ],
                        [
                            "optim.Adam(cls_net.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "epochs * len(trloader)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "main_my_iter.py": {
        "torch": {
            "DataLoader_71": {
                "variable": {
                    "value": "trloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_loader.load_mnist('train', ntr=ntr)",
                            "Call"
                        ],
                        [
                            "data_loader.load_mnist_t('train', ntr=ntr)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "RandomSampler(trset, True, nbatch * batchsize)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "teloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "teset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_loader.load_mnist('test')",
                            "Call"
                        ],
                        [
                            "data_loader.load_mnist('test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_108": {
                "variable": {
                    "value": "cls_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_98": {
                "variable": {
                    "value": "saved_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_100": {
                "variable": {
                    "value": "src_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "src_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_80": {
                "variable": {
                    "value": "g1_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "g1_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_81": {
                "variable": {
                    "value": "g2_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "g2_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_104": {
                "variable": {
                    "value": "saved_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_106": {
                "variable": {
                    "value": "src_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "src_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_118": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "src_opt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(src_net.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "optim.Adam(src_net.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "tgt_epochs * len(trloader)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_276": {
                "obj": {
                    "value": "{'g1': g1_net.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(g1root, f'{i_tgt}.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RandomSampler_72": {
                "data_source": {
                    "value": "trset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_loader.load_mnist('train', ntr=ntr)",
                            "Call"
                        ],
                        [
                            "data_loader.load_mnist_t('train', ntr=ntr)",
                            "Call"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "nbatch * batchsize",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_86": {
                "variable": {
                    "value": "g1_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "g1_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_87": {
                "variable": {
                    "value": "g2_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "g2_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "zall",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_tgt.unsqueeze(1), zsrc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_91": {
                "variable": {
                    "value": "g1_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "g1_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "zsrc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z1_src.unsqueeze(1), z2_src.unsqueeze(1), z3_mix.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_195": {
                "variable": {
                    "value": "con_loss_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_196": {
                "variable": {
                    "value": "div_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_197": {
                "variable": {
                    "value": "cyc_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "zall",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_tgt.unsqueeze(1), zsrc[:, idx:idx + 1].detach()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_231": {
                "obj": {
                    "value": "{'cls_net': src_net.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(svroot, f'{i_tgt}-best.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_205": {
                "variable": {
                    "value": "cyc_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_tgt_rec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "g2_net(x_tgt)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x[0:10]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_260": {
                "tensors": {
                    "value": "l_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[l1]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_272": {
                "tensors": {
                    "value": "[l1, l3, l2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_145": {
                "variable": {
                    "value": "rand",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_208": {
                "variable": {
                    "value": "cyc_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_152": {
                "variable": {
                    "value": "rand",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "variable": {
                    "value": "std_H",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 0, 0], [0, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "affine_grid_155": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand * std_H + (1 - rand) * H",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_156": {
                "variable": {
                    "value": "x3_mix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x[0:10]",
                            "Subscript"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.affine_grid(H, x.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main_test_digit.py": {
        "torch": {
            "load_33": {
                "variable": {
                    "value": "saved_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "modelpath",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "teloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "teset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "str2fun[data]('test', channels=channels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "network/generator.py": {
        "torch": {
            "ones_99": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_100": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_10": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "style_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "chunk_15": {
                "variable": {
                    "value": "(gamma, beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(s)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), h.size(1), 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "imdim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernelsize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(kernelsize - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernelsize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(kernelsize - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2 * n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernelsize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(kernelsize - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4 * n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "imdim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernelsize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(kernelsize - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_44": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_50": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.mapz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "zdim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "imsize[0] * imsize[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "affine_grid_91": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_loc(loc)",
                            "Call"
                        ],
                        [
                            "H.view(len(H), 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_92": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(4, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.adain2(x, z)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.grid_sample(x, grid)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.affine_grid(H, x.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_47": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.zdim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(4, 16, 5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.fc_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(32 * 5 * 5, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_80": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.zdim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "data": {
                    "value": "[1, 0, 0, 0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_82": {
                "tensors": {
                    "value": "[x, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_70": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_71": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_73": {
                "in_features": {
                    "value": "32 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_74": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "network/mnist_net.py": {
        "torch": {
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "imdim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_12": {
                "variable": {
                    "value": "self.mp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "variable": {
                    "value": "self.relu4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.cls_head_src",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.cls_head_tgt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.pro_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "imdim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_58": {
                "variable": {
                    "value": "self.mp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "variable": {
                    "value": "self.relu4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.cls_head_src",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.cls_head_tgt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.pro_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_40": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pro_head(out4)",
                            "Call"
                        ],
                        [
                            "F.normalize(z)",
                            "Call"
                        ],
                        [
                            "self.pro_head(out4)",
                            "Call"
                        ],
                        [
                            "F.normalize(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_86": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pro_head(out4)",
                            "Call"
                        ],
                        [
                            "F.normalize(z)",
                            "Call"
                        ],
                        [
                            "self.pro_head(out4)",
                            "Call"
                        ],
                        [
                            "F.normalize(z)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tools/label2color.py": {
        "torch": {
            "zeros_like_17": {
                "variable": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_18": {
                "variable": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_19": {
                "variable": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[R, G, B]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_35": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tools/randaugment.py": {
        "torch": {
            "Tensor_211": {
                "variable": {
                    "value": "self.eigval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_212": {
                "variable": {
                    "value": "self.eigvec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_246": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones((h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.expand_as(img)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}