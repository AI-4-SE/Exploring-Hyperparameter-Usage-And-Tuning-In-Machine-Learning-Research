{
    "datasets/siam_cycle_dataset.py": {
        "torch": {}
    },
    "experiments/siammask_base/custom.py": {
        "torch": {
            "Sequential_14": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplane, outplane, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "inplane",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplane",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "outplane",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/siammask_base/resnet.py": {
        "torch": {
            "Conv2d_25": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 - stride",
                            "BinOp"
                        ],
                        [
                            "dilation",
                            "Name"
                        ],
                        [
                            "dd",
                            "Name"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_75": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_113": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_114": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_117": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_119": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_120": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_155": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_157": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_158": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_159": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_264": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(plances * block.expansion, out, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_216": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_270": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_190": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_202": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=3, stride=stride, bias=False, padding=padding, dilation=dd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_265": {
                "in_channels": {
                    "value": "plances * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_266": {
                "num_features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_191": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_193": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_203": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 - stride",
                            "BinOp"
                        ],
                        [
                            "dilation",
                            "Name"
                        ],
                        [
                            "dd",
                            "Name"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Name"
                        ],
                        [
                            "dilation // 2",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "BatchNorm2d_206": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/siammask_sharp/custom.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplane, outplane, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.v0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 16, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.v1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256, 64, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.v2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.h2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 32, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.h1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(16, 16, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(4, 4, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_120": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "variable": {
                    "value": "self.post0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "variable": {
                    "value": "self.post1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "variable": {
                    "value": "self.post2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unfold_137": {
                "variable": {
                    "value": "p0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(61, 61)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_137": {
                "variable": {
                    "value": "p0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unfold_139": {
                "variable": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(31, 31)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_139": {
                "variable": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unfold_141": {
                "variable": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(15, 15)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_141": {
                "variable": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "inplane",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplane",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "outplane",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "index_select_138": {
                "variable": {
                    "value": "p0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(f[0], [16, 16, 16, 16])[:, :, 4 * pos[0]:4 * pos[0] + 61, 4 * pos[1]:4 * pos[1] + 61]",
                            "Subscript"
                        ],
                        [
                            "F.unfold(f[0], (61, 61), padding=0, stride=4).permute(0, 2, 1).contiguous().view(-1, 64, 61, 61)",
                            "Call"
                        ],
                        [
                            "torch.index_select(p0, 0, pos)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "index_select_140": {
                "variable": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(f[1], [8, 8, 8, 8])[:, :, 2 * pos[0]:2 * pos[0] + 31, 2 * pos[1]:2 * pos[1] + 31]",
                            "Subscript"
                        ],
                        [
                            "F.unfold(f[1], (31, 31), padding=0, stride=2).permute(0, 2, 1).contiguous().view(-1, 256, 31, 31)",
                            "Call"
                        ],
                        [
                            "torch.index_select(p1, 0, pos)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "index_select_142": {
                "variable": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(f[2], [4, 4, 4, 4])[:, :, pos[0]:pos[0] + 15, pos[1]:pos[1] + 15]",
                            "Subscript"
                        ],
                        [
                            "F.unfold(f[2], (15, 15), padding=0, stride=1).permute(0, 2, 1).contiguous().view(-1, 512, 15, 15)",
                            "Call"
                        ],
                        [
                            "torch.index_select(p2, 0, pos)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "upsample_150": {
                "input": {
                    "value": "self.h2(out) + self.v2(p2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(31, 31)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "upsample_151": {
                "input": {
                    "value": "self.h1(out) + self.v1(p1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(61, 61)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "upsample_152": {
                "input": {
                    "value": "self.h0(out) + self.v0(p0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(127, 127)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_133": {
                "input": {
                    "value": "f[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "[16, 16, 16, 16]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_134": {
                "input": {
                    "value": "f[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "[8, 8, 8, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_135": {
                "input": {
                    "value": "f[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "[4, 4, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/siammask_sharp/resnet.py": {
        "torch": {
            "Conv2d_23": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 - stride",
                            "BinOp"
                        ],
                        [
                            "dilation",
                            "Name"
                        ],
                        [
                            "dd",
                            "Name"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_73": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_113": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_116": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_118": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_119": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_154": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_156": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_157": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_158": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_257": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(plances * block.expansion, out, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_215": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_263": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_189": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_201": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=3, stride=stride, bias=False, padding=padding, dilation=dd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_258": {
                "in_channels": {
                    "value": "plances * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_259": {
                "num_features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_190": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_192": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_202": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 - stride",
                            "BinOp"
                        ],
                        [
                            "dilation",
                            "Name"
                        ],
                        [
                            "dd",
                            "Name"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Name"
                        ],
                        [
                            "dilation // 2",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "BatchNorm2d_205": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/features.py": {
        "torch": {}
    },
    "models/mask.py": {
        "torch": {}
    },
    "models/rpn.py": {
        "torch": {
            "conv2d_31": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(1, batch * channel, x.size(2), x.size(3))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.view(batch * channel, 1, kernel.size(2), kernel.size(3))",
                            "Call"
                        ],
                        [
                            "self.conv_kernel(kernel)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "batch * channel",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.conv_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, hidden, kernel_size=kernel_size, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.conv_search",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, hidden, kernel_size=kernel_size, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(hidden, hidden, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "num_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "num_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "num_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/siammask.py": {
        "torch": {
            "index_select_121": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(pred, 0, select)",
                            "Call"
                        ],
                        [
                            "pred.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "pred.ge(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "select",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_122": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(label, 0, select)",
                            "Call"
                        ],
                        [
                            "label.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "select",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_159": {
                "variable": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(4, 63 * 63, 25, 25)",
                            "Call"
                        ],
                        [
                            "p_m.permute(0, 2, 3, 1).contiguous().view(-1, 1, o_sz, o_sz)",
                            "Call"
                        ],
                        [
                            "torch.index_select(p_m, 0, pos)",
                            "Call"
                        ],
                        [
                            "nn.UpsamplingBilinear2d(size=[g_sz, g_sz])(p_m)",
                            "Call"
                        ],
                        [
                            "p_m.view(-1, g_sz * g_sz)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(label.data.eq(1).nonzero().squeeze()).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(weight.data.eq(1).nonzero().squeeze())",
                            "Call"
                        ]
                    ]
                }
            },
            "unfold_163": {
                "variable": {
                    "value": "mask_uf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(4, 1, 255, 255) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(g_sz, g_sz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_164": {
                "variable": {
                    "value": "mask_uf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_uf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.unfold(mask, (g_sz, g_sz), padding=32, stride=8)",
                            "Call"
                        ],
                        [
                            "torch.transpose(mask_uf, 1, 2).contiguous().view(-1, g_sz * g_sz)",
                            "Call"
                        ],
                        [
                            "torch.index_select(mask_uf, 0, pos)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_166": {
                "variable": {
                    "value": "mask_uf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_uf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.unfold(mask, (g_sz, g_sz), padding=32, stride=8)",
                            "Call"
                        ],
                        [
                            "torch.transpose(mask_uf, 1, 2).contiguous().view(-1, g_sz * g_sz)",
                            "Call"
                        ],
                        [
                            "torch.index_select(mask_uf, 0, pos)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(label.data.eq(1).nonzero().squeeze()).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(weight.data.eq(1).nonzero().squeeze())",
                            "Call"
                        ]
                    ]
                }
            },
            "soft_margin_loss_167": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(4, 63 * 63, 25, 25)",
                            "Call"
                        ],
                        [
                            "p_m.permute(0, 2, 3, 1).contiguous().view(-1, 1, o_sz, o_sz)",
                            "Call"
                        ],
                        [
                            "torch.index_select(p_m, 0, pos)",
                            "Call"
                        ],
                        [
                            "nn.UpsamplingBilinear2d(size=[g_sz, g_sz])(p_m)",
                            "Call"
                        ],
                        [
                            "p_m.view(-1, g_sz * g_sz)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "mask_uf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.unfold(mask, (g_sz, g_sz), padding=32, stride=8)",
                            "Call"
                        ],
                        [
                            "torch.transpose(mask_uf, 1, 2).contiguous().view(-1, g_sz * g_sz)",
                            "Call"
                        ],
                        [
                            "torch.index_select(mask_uf, 0, pos)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_175": {
                "variable": {
                    "value": "intxn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_sum == 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_176": {
                "variable": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_sum > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_182": {
                "variable": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "63 * 63",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_19": {
                "variable": {
                    "value": "self.upSample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "[g_sz, g_sz]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_28": {
                "variable": {
                    "value": "self.all_anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "all_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.anchor.all_anchors[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_softmax_69": {
                "variable": {
                    "value": "cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(4, 1, 25, 25) > 0.9",
                            "Compare"
                        ],
                        [
                            "cls.view(b, 2, a2 // 2, h, w)",
                            "Call"
                        ],
                        [
                            "cls.permute(0, 2, 3, 4, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.log_softmax(cls, dim=4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_124": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(pred, 0, select)",
                            "Call"
                        ],
                        [
                            "pred.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "pred.ge(0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(label, 0, select)",
                            "Call"
                        ],
                        [
                            "label.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "UpsamplingBilinear2d_160": {
                "size": {
                    "value": "[g_sz, g_sz]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_178": {
                "input": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intxn / union",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_183": {
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_178": {
                "input": {
                    "value": "iou > 0.7",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "randn_184": {
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/siammask_sharp.py": {
        "torch": {
            "index_select_122": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(pred, 0, select)",
                            "Call"
                        ],
                        [
                            "pred.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "pred.ge(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "select",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_123": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(label, 0, select)",
                            "Call"
                        ],
                        [
                            "label.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "select",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unfold_167": {
                "variable": {
                    "value": "mask_uf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(4, 1, 255, 255) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(g_sz, g_sz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_168": {
                "variable": {
                    "value": "mask_uf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_uf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.unfold(mask, (g_sz, g_sz), padding=0, stride=8)",
                            "Call"
                        ],
                        [
                            "torch.transpose(mask_uf, 1, 2).contiguous().view(-1, g_sz * g_sz)",
                            "Call"
                        ],
                        [
                            "torch.index_select(mask_uf, 0, pos)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_170": {
                "variable": {
                    "value": "mask_uf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_uf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.unfold(mask, (g_sz, g_sz), padding=0, stride=8)",
                            "Call"
                        ],
                        [
                            "torch.transpose(mask_uf, 1, 2).contiguous().view(-1, g_sz * g_sz)",
                            "Call"
                        ],
                        [
                            "torch.index_select(mask_uf, 0, pos)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(label.data.eq(1).nonzero().squeeze()).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(weight.data.eq(1).nonzero().squeeze())",
                            "Call"
                        ]
                    ]
                }
            },
            "soft_margin_loss_171": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(4, 63 * 63, 25, 25)",
                            "Call"
                        ],
                        [
                            "p_m.permute(0, 2, 3, 1).contiguous().view(-1, 1, o_sz, o_sz)",
                            "Call"
                        ],
                        [
                            "torch.index_select(p_m, 0, pos)",
                            "Call"
                        ],
                        [
                            "nn.UpsamplingBilinear2d(size=[g_sz, g_sz])(p_m)",
                            "Call"
                        ],
                        [
                            "p_m.view(-1, g_sz * g_sz)",
                            "Call"
                        ],
                        [
                            "torch.index_select(p_m, 0, pos)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "mask_uf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.unfold(mask, (g_sz, g_sz), padding=0, stride=8)",
                            "Call"
                        ],
                        [
                            "torch.transpose(mask_uf, 1, 2).contiguous().view(-1, g_sz * g_sz)",
                            "Call"
                        ],
                        [
                            "torch.index_select(mask_uf, 0, pos)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_179": {
                "variable": {
                    "value": "intxn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_sum == 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_180": {
                "variable": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_sum > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_186": {
                "variable": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "63 * 63",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_19": {
                "variable": {
                    "value": "self.upSample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "[g_sz, g_sz]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_28": {
                "variable": {
                    "value": "self.all_anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "all_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.anchor.all_anchors[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_softmax_70": {
                "variable": {
                    "value": "cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(4, 1, 25, 25) > 0.9",
                            "Compare"
                        ],
                        [
                            "cls.view(b, 2, a2 // 2, h, w)",
                            "Call"
                        ],
                        [
                            "cls.permute(0, 2, 3, 4, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.log_softmax(cls, dim=4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_125": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(pred, 0, select)",
                            "Call"
                        ],
                        [
                            "pred.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "pred.ge(0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(label, 0, select)",
                            "Call"
                        ],
                        [
                            "label.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_161": {
                "variable": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(4, 63 * 63, 25, 25)",
                            "Call"
                        ],
                        [
                            "p_m.permute(0, 2, 3, 1).contiguous().view(-1, 1, o_sz, o_sz)",
                            "Call"
                        ],
                        [
                            "torch.index_select(p_m, 0, pos)",
                            "Call"
                        ],
                        [
                            "nn.UpsamplingBilinear2d(size=[g_sz, g_sz])(p_m)",
                            "Call"
                        ],
                        [
                            "p_m.view(-1, g_sz * g_sz)",
                            "Call"
                        ],
                        [
                            "torch.index_select(p_m, 0, pos)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(label.data.eq(1).nonzero().squeeze()).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(weight.data.eq(1).nonzero().squeeze())",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_165": {
                "variable": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(4, 63 * 63, 25, 25)",
                            "Call"
                        ],
                        [
                            "p_m.permute(0, 2, 3, 1).contiguous().view(-1, 1, o_sz, o_sz)",
                            "Call"
                        ],
                        [
                            "torch.index_select(p_m, 0, pos)",
                            "Call"
                        ],
                        [
                            "nn.UpsamplingBilinear2d(size=[g_sz, g_sz])(p_m)",
                            "Call"
                        ],
                        [
                            "p_m.view(-1, g_sz * g_sz)",
                            "Call"
                        ],
                        [
                            "torch.index_select(p_m, 0, pos)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(label.data.eq(1).nonzero().squeeze()).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(weight.data.eq(1).nonzero().squeeze())",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_182": {
                "input": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intxn / union",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_187": {
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_162": {
                "size": {
                    "value": "[g_sz, g_sz]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_182": {
                "input": {
                    "value": "iou > 0.7",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "randn_188": {
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tools/test.py": {
        "torch": {
            "device_695": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.cpu) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_165": {
                "ndarray": {
                    "value": "ndarray",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_166": {
                "obj": {
                    "value": "ndarray",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_695": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_317": {
                "input": {
                    "value": "score.permute(1, 2, 3, 0).contiguous().view(2, -1).permute(1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train_cyclesiam.py": {
        "torch": {
            "DataLoader_108": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataSets(cfg['train_datasets'], cfg['anchors'], args.epochs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "DataLoader_110": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataSets(cfg['val_datasets'], cfg['anchors'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "SGD_126": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "trainable_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.rpn_model.param_groups(cfg['lr']['start_lr'], cfg['lr']['rpn_lr_mult'], 'mask')",
                            "Call"
                        ],
                        [
                            "backbone_feature + model.rpn_model.param_groups(cfg['lr']['start_lr'], cfg['lr']['rpn_lr_mult']) + model.mask_model.param_groups(cfg['lr']['start_lr'], cfg['lr']['mask_lr_mult'])",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_176": {
                "variable": {
                    "value": "dist_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Custom(pretrain=True, anchors=cfg['anchors'])",
                            "Call"
                        ],
                        [
                            "load_pretrain(model, args.pretrained)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "list(range(torch.cuda.device_count()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_141": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_142": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_186": {
                "variable": {
                    "value": "dist_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Custom(pretrain=True, anchors=cfg['anchors'])",
                            "Call"
                        ],
                        [
                            "load_pretrain(model, args.pretrained)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "list(range(torch.cuda.device_count()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_370": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_312": {
                "input": {
                    "value": "outputs['losses'][2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_313": {
                "input": {
                    "value": "outputs['accuracy'][2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__326": {
                "parameters": {
                    "value": "model.module.features.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "cfg['clip']['feature']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__327": {
                "parameters": {
                    "value": "model.module.rpn_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "cfg['clip']['rpn']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__328": {
                "parameters": {
                    "value": "model.module.mask_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "cfg['clip']['mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__330": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_297": {
                "ndarray": {
                    "value": "out_patch12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trackres(cfg, outputs12, track12)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_302": {
                "ndarray": {
                    "value": "out_patch23",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trackres(cfg, outputs23, track23)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_307": {
                "ndarray": {
                    "value": "out_patch32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trackres(cfg, outputs32, track32)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_379": {
                "input": {
                    "value": "score.contiguous().view(score.shape[0], 2, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train_cyclesiam_refine.py": {
        "torch": {
            "DataLoader_110": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataSets(cfg['train_datasets'], cfg['anchors'], args.epochs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "DataLoader_112": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataSets(cfg['val_datasets'], cfg['anchors'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "SGD_123": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "trainable_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.mask_model.param_groups(cfg['lr']['start_lr'], cfg['lr']['mask_lr_mult']) + model.refine_model.param_groups(cfg['lr']['start_lr'], cfg['lr']['mask_lr_mult'])",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_170": {
                "variable": {
                    "value": "dist_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Custom(anchors=cfg['anchors'])",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch](anchors=cfg['anchors'])",
                            "Call"
                        ],
                        [
                            "load_pretrain(model, args.pretrained)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "list(range(torch.cuda.device_count()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_180": {
                "variable": {
                    "value": "dist_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Custom(anchors=cfg['anchors'])",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch](anchors=cfg['anchors'])",
                            "Call"
                        ],
                        [
                            "load_pretrain(model, args.pretrained)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "list(range(torch.cuda.device_count()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_340": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_284": {
                "input": {
                    "value": "outputs['losses'][2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_285": {
                "input": {
                    "value": "outputs['accuracy'][2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__295": {
                "parameters": {
                    "value": "model.module.features.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "cfg['clip']['feature']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__296": {
                "parameters": {
                    "value": "model.module.rpn_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "cfg['clip']['rpn']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__297": {
                "parameters": {
                    "value": "model.module.mask_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "cfg['clip']['mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__298": {
                "parameters": {
                    "value": "model.module.refine_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "cfg['clip']['mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__300": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_280": {
                "ndarray": {
                    "value": "out_patch12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trackres(cfg, outputs12, track12)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_349": {
                "input": {
                    "value": "score.contiguous().view(score.shape[0], 2, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tools/tune_vot.py": {
        "torch": {
            "device_52": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/load_helper.py": {
        "torch": {
            "current_device_59": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_60": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage.cuda(device)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_33": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "current_device_35": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_36": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage.cuda(device)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/lr_helper.py": {
        "torch": {
            "SGD_148": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Net().parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}