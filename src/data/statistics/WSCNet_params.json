{
    "utils/logger.py": {
        "tensorflow": {
            "FileWriter_14": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Summary_18": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, simple_value=value)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_41": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img_summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "HistogramProto_51": {
                "variable": {
                    "value": "hist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_68": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, histo=hist)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/dataset.py": {
        "torch": {}
    },
    "models/WSCNet.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(model.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.downconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2048, num_classes * num_maps, kernel_size=1, stride=1, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool2d_16": {
                "variable": {
                    "value": "self.GAP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_17": {
                "variable": {
                    "value": "self.GMP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(4096, 2048)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_24": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_43": {
                "variable": {
                    "value": "x_conv_copy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_conv_copy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_conv",
                            "variable"
                        ],
                        [
                            "torch.cat((x_conv_copy, x_conv), 1)",
                            "Call"
                        ],
                        [
                            "torch.mul(x_conv_copy, x_ori)",
                            "Call"
                        ],
                        [
                            "torch.cat((x_ori, x_conv_copy), 1)",
                            "Call"
                        ],
                        [
                            "self.GAP(x_conv_copy)",
                            "Call"
                        ],
                        [
                            "x_conv_copy.view(x_conv_copy.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x_conv_copy)",
                            "Call"
                        ],
                        [
                            "self.softmax(x_conv_copy)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_ori",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_44": {
                "variable": {
                    "value": "x_conv_copy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_ori, x_conv_copy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_66": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.downconv(x)",
                            "Call"
                        ],
                        [
                            "self.GMP(x)",
                            "Call"
                        ],
                        [
                            "self.spatial_pooling(x)",
                            "Call"
                        ],
                        [
                            "self.softmax(x.view(x.size(0), -1))",
                            "Call"
                        ],
                        [
                            "input.view(batch_size, num_outputs, self.num_maps, h, w)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "x_conv_copy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_conv_copy, x_conv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes * num_maps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/inference.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "pooling",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_12": {
                "variable": {
                    "value": "pooling2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_16": {
                "f": {
                    "value": "Model_Path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "str"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/main.py": {
        "torch": {
            "device_77": {
                "variable": {
                    "value": "conf.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_110": {
                "variable": {
                    "value": "optimizer_ft",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params_to_update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_ft.parameters()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "conf.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_111": {
                "variable": {
                    "value": "scheduler_ft",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_ft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(params_to_update, lr=conf.lr, weight_decay=0.0005, momentum=0.9)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_114": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_232": {
                "variable": {
                    "value": "spatial_pooling",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_236": {
                "variable": {
                    "value": "spatial_pooling_2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_269": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(conf.DATA_ROOT, train=True, split=1, transform=data_transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "conf.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_271": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(conf.DATA_ROOT, train=False, split=1, transform=data_transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "conf.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_205": {
                "variable": {
                    "value": "(_, senti_preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sentimap_output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_206": {
                "variable": {
                    "value": "(_, cls_preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_208": {
                "input": {
                    "value": "senti_preds == labels.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_209": {
                "input": {
                    "value": "cls_preds == labels.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "save_219": {
                "obj": {
                    "value": "model_ft.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s/video_sentiment_%s.pkl' % (conf.model_directory, 'best')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_156": {
                "variable": {
                    "value": "(_, senti_preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sentimap_output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_157": {
                "variable": {
                    "value": "(_, cls_preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_grad_enabled_146": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_160": {
                "input": {
                    "value": "senti_preds == labels.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_161": {
                "input": {
                    "value": "cls_preds == labels.data",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    }
}