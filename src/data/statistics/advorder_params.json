{
    "Attack.py": {
        "torch": {
            "load_47": {
                "f": {
                    "value": "Mpath",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_59": {
                "f": {
                    "value": "Tpath",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "BlackOA.py": {
        "torch": {
            "randperm_89": {
                "variable": {
                    "value": "rperm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "ag.topk",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_126": {
                "start": {
                    "value": "ag.topk",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "PracticalOA.py": {
        "torch": {
            "from_numpy_86": {
                "variable": {
                    "value": "rperm",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rperm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.LongTensor([1, 5, 4, 3, 2]) - 1",
                            "BinOp"
                        ],
                        [
                            "np.arange(ag.topk)",
                            "Call"
                        ],
                        [
                            "th.from_numpy(rperm)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Train.py": {
        "torch": {
            "Adam_48": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config[ag.model]['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "yaml.load(open('config.yml', 'r').read(), Loader=yaml.SafeLoader)",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_93": {
                "obj": {
                    "value": "model.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "trained/ + ag.model + .sdth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_90": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "trained/ + ag.model + +snapshot.sdth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_38": {
                "f": {
                    "value": "sdpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'trained/' + ag.model + '.sdth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/bing.py": {
        "torch": {
            "tensor_112": {
                "variable": {
                    "value": "self.xcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_142": {
                "variable": {
                    "value": "idlists",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "idlists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.stack(idlists)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_125": {
                "*size": {
                    "value": "self.canseek",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "*size": {
                    "value": "query.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.canseek",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/common.py": {
        "torch": {}
    },
    "lib/datasets/fashion.py": {
        "torch": {
            "from_numpy_25": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.frombuffer(lbpath.read(), dtype=np.uint8, offset=8).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.frombuffer(lbpath.read(), dtype=np.uint8, offset=8).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.frombuffer(lbpath.read(), dtype=np.uint8, offset=8).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.frombuffer(lbpath.read(), dtype=np.uint8, offset=8).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.frombuffer(lbpath.read(), dtype=np.uint8, offset=8).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.frombuffer(lbpath.read(), dtype=np.uint8, offset=8).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_120": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.frombuffer(lbpath.read(), dtype=np.uint8, offset=8).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.frombuffer(lbpath.read(), dtype=np.uint8, offset=8).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.frombuffer(lbpath.read(), dtype=np.uint8, offset=8).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_45": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FashionTriplet(path, kind)",
                            "Call"
                        ],
                        [
                            "FashionMNISTTriplet(path, kind)",
                            "Call"
                        ],
                        [
                            "FashionQuadrilateral(path, kind)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_48": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FashionTriplet(path, kind)",
                            "Call"
                        ],
                        [
                            "FashionMNISTTriplet(path, kind)",
                            "Call"
                        ],
                        [
                            "FashionQuadrilateral(path, kind)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_102": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FashionTriplet(path, kind)",
                            "Call"
                        ],
                        [
                            "FashionMNISTTriplet(path, kind)",
                            "Call"
                        ],
                        [
                            "FashionQuadrilateral(path, kind)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_105": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FashionTriplet(path, kind)",
                            "Call"
                        ],
                        [
                            "FashionMNISTTriplet(path, kind)",
                            "Call"
                        ],
                        [
                            "FashionQuadrilateral(path, kind)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_152": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FashionTriplet(path, kind)",
                            "Call"
                        ],
                        [
                            "FashionMNISTTriplet(path, kind)",
                            "Call"
                        ],
                        [
                            "FashionQuadrilateral(path, kind)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_155": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FashionTriplet(path, kind)",
                            "Call"
                        ],
                        [
                            "FashionMNISTTriplet(path, kind)",
                            "Call"
                        ],
                        [
                            "FashionQuadrilateral(path, kind)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_26": {
                "ndarray": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.frombuffer(imgpath.read(), dtype=np.uint8, offset=16).reshape(len(labels), 784)",
                            "Call"
                        ],
                        [
                            "np.frombuffer(imgpath.read(), dtype=np.uint8, offset=16).reshape(len(labels), 784)",
                            "Call"
                        ],
                        [
                            "np.frombuffer(imgpath.read(), dtype=np.uint8, offset=16).reshape(len(labels), 784)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_75": {
                "ndarray": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.frombuffer(imgpath.read(), dtype=np.uint8, offset=16).reshape(len(labels), 784)",
                            "Call"
                        ],
                        [
                            "np.frombuffer(imgpath.read(), dtype=np.uint8, offset=16).reshape(len(labels), 784)",
                            "Call"
                        ],
                        [
                            "np.frombuffer(imgpath.read(), dtype=np.uint8, offset=16).reshape(len(labels), 784)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_122": {
                "ndarray": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.frombuffer(imgpath.read(), dtype=np.uint8, offset=16).reshape(len(labels), 784)",
                            "Call"
                        ],
                        [
                            "np.frombuffer(imgpath.read(), dtype=np.uint8, offset=16).reshape(len(labels), 784)",
                            "Call"
                        ],
                        [
                            "np.frombuffer(imgpath.read(), dtype=np.uint8, offset=16).reshape(len(labels), 784)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_35": {
                "condition": {
                    "value": "self.labels == label",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "stack_37": {
                "tensors": {
                    "value": "[anchor, positive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_94": {
                "tensors": {
                    "value": "[anchor, posimg, negimg]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_143": {
                "tensors": {
                    "value": "[anchor, posimg, negimg, neganc]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "lib/datasets/sop.py": {
        "torch": {
            "tensor_69": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "int(self.ImageId2FineClass[index + idx_offset])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_100": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[anchor_im, another_im]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_125": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[anchor_im, positive_im, negative_im]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_148": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[anchor_im, positive_im, negative_im, conjugate_im]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_179": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(path, ntuple, split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_184": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(path, ntuple, split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/faC_c2f2.py": {
        "torch": {
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.nn.functional.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "th.nn.functional.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "th.nn.functional.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64 * 7 * 7)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, 28, 28).to(self.fc1.weight.device)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.nn.functional.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "th.nn.functional.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "th.nn.functional.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64 * 7 * 7)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, 28, 28).to(self.fc1.weight.device)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_110": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_111": {
                "variable": {
                    "value": "optimx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[images]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.nn.functional.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "th.nn.functional.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "th.nn.functional.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64 * 7 * 7)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, 28, 28).to(self.fc1.weight.device)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_79": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, 1, 28, 28).to(self.fc1.weight.device)",
                            "Call"
                        ],
                        [
                            "images + eps * 2 * (0.5 - th.rand(images.shape)).to(images.device)",
                            "BinOp"
                        ],
                        [
                            "th.clamp(images, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "images.detach()",
                            "Call"
                        ],
                        [
                            "th.min(images, images_orig + eps)",
                            "Call"
                        ],
                        [
                            "th.max(images, images_orig - eps)",
                            "Call"
                        ],
                        [
                            "th.clamp(images, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "images.clone().detach()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_85": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_86": {
                "variable": {
                    "value": "optimx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[images]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_104": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, 1, 28, 28).to(self.fc1.weight.device)",
                            "Call"
                        ],
                        [
                            "images + eps * 2 * (0.5 - th.rand(images.shape)).to(images.device)",
                            "BinOp"
                        ],
                        [
                            "th.clamp(images, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "images.detach()",
                            "Call"
                        ],
                        [
                            "th.min(images, images_orig + eps)",
                            "Call"
                        ],
                        [
                            "th.max(images, images_orig - eps)",
                            "Call"
                        ],
                        [
                            "th.clamp(images, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "images.clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_105": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, 1, 28, 28).to(self.fc1.weight.device)",
                            "Call"
                        ],
                        [
                            "images + eps * 2 * (0.5 - th.rand(images.shape)).to(images.device)",
                            "BinOp"
                        ],
                        [
                            "th.clamp(images, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "images.detach()",
                            "Call"
                        ],
                        [
                            "th.min(images, images_orig + eps)",
                            "Call"
                        ],
                        [
                            "th.max(images, images_orig - eps)",
                            "Call"
                        ],
                        [
                            "th.clamp(images, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "images.clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_106": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, 1, 28, 28).to(self.fc1.weight.device)",
                            "Call"
                        ],
                        [
                            "images + eps * 2 * (0.5 - th.rand(images.shape)).to(images.device)",
                            "BinOp"
                        ],
                        [
                            "th.clamp(images, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "images.detach()",
                            "Call"
                        ],
                        [
                            "th.min(images, images_orig + eps)",
                            "Call"
                        ],
                        [
                            "th.max(images, images_orig - eps)",
                            "Call"
                        ],
                        [
                            "th.clamp(images, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "images.clone().detach()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_68": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.nn.functional.normalize(output)",
                            "Call"
                        ],
                        [
                            "self.forward(images, l2norm=True)",
                            "Call"
                        ],
                        [
                            "self.forward(images, l2norm=False)",
                            "Call"
                        ],
                        [
                            "self.forward(x, l2norm=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_137": {
                "input": {
                    "value": "allFeat",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "allFeat.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cosine_similarity_171": {
                "x1": {
                    "value": "output[0::3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "output[1::3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cosine_similarity_173": {
                "x1": {
                    "value": "output[0::3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "output[2::3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pairwise_distance_95": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.nn.functional.normalize(output)",
                            "Call"
                        ],
                        [
                            "self.forward(images, l2norm=True)",
                            "Call"
                        ],
                        [
                            "self.forward(images, l2norm=False)",
                            "Call"
                        ],
                        [
                            "self.forward(x, l2norm=True)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "output_orig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.clone().detach()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_139": {
                "n": {
                    "value": "allFeat.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_91": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.nn.functional.normalize(output)",
                            "Call"
                        ],
                        [
                            "self.forward(images, l2norm=True)",
                            "Call"
                        ],
                        [
                            "self.forward(images, l2norm=False)",
                            "Call"
                        ],
                        [
                            "self.forward(x, l2norm=True)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "output_orig.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_102": {
                "input": {
                    "value": "images.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_140": {
                "input": {
                    "value": "offdiagdist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist + math.e * th.eye(allFeat.shape[0]).to(allFeat.device)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_78": {
                "*size": {
                    "value": "images.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/faC_lenet.py": {
        "torch": {
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "800",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "x / x.norm(2, dim=1, keepdim=True).expand(*x.shape)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "x / x.norm(2, dim=1, keepdim=True).expand(*x.shape)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/faC_res18.py": {
        "torch": {
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inchan",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outchan",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outchan",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "outchan",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outchan",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outchan",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "out + x",
                            "BinOp"
                        ],
                        [
                            "out + self.downsample(x)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_46": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_36": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "out + x",
                            "BinOp"
                        ],
                        [
                            "out + self.downsample(x)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "th.nn.Conv2d(self.inchan, outchan, 1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "self.inchan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outchan",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "num_features": {
                    "value": "outchan",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/faE_c2f2.py": {
        "torch": {
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.nn.functional.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "th.nn.functional.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "th.nn.functional.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64 * 7 * 7)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, 28, 28).to(self.fc1.weight.device)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.nn.functional.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "th.nn.functional.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "th.nn.functional.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64 * 7 * 7)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, 28, 28).to(self.fc1.weight.device)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_112": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_113": {
                "variable": {
                    "value": "optimx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[images]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "triplet_margin_loss_191": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "anchor": {
                    "value": "output[0::3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "positive": {
                    "value": "output[1::3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "negative": {
                    "value": "output[2::3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "margin": {
                    "value": "marginE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normalize_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.nn.functional.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "th.nn.functional.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "th.nn.functional.max_pool2d(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64 * 7 * 7)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, 28, 28).to(self.fc1.weight.device)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_81": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_87": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_88": {
                "variable": {
                    "value": "optimx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[images]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_106": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_107": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clamp_108": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pairwise_distance_97": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x, l2norm=False)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "output_orig",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pairwise_distance_127": {
                "variable": {
                    "value": "loss_es",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x, l2norm=False)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "output_orig_nodetach",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_127": {
                "variable": {
                    "value": "loss_es",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_93": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x, l2norm=False)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "output_orig.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_104": {
                "input": {
                    "value": "images.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_80": {
                "*size": {
                    "value": "images.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_123": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x, l2norm=False)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "output_orig_nodetach.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/rankingmodel.py": {
        "torch": {
            "load_67": {
                "variable": {
                    "value": "(allEmb, allLab)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.cachepath",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_80": {
                "tensors": {
                    "value": "allLab",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_83": {
                "obj": {
                    "value": "[allEmb.detach().cpu(), allLab.detach().cpu()]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "self.cachepath",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_77": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(images)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.normalize(output, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/reorder.py": {
        "torch": {
            "zeros_like_96": {
                "variable": {
                    "value": "argrank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "argsort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.LongTensor([int(can['skuId']) for can in sims])",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_363": {
                "variable": {
                    "value": "argrank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "argsort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.LongTensor([int(can['skuId']) for can in sims])",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_485": {
                "variable": {
                    "value": "argrank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "argsort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.LongTensor([int(can['skuId']) for can in sims])",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_596": {
                "variable": {
                    "value": "argrank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "argsort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.LongTensor([int(can['skuId']) for can in sims])",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_701": {
                "variable": {
                    "value": "argrank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "argsort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.LongTensor([int(can['skuId']) for can in sims])",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_768": {
                "variable": {
                    "value": "argrank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "argsort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.LongTensor([int(can['skuId']) for can in sims])",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_1090": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_1091": {
                "variable": {
                    "value": "candidates",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_1097": {
                "variable": {
                    "value": "rtopk",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randint_1114": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(50,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_1115": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(50,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randperm_1116": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_1121": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(50, 50)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_212": {
                "variable": {
                    "value": "argrank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "argsort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.LongTensor([int(can['skuId']) for can in sims])",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "min_222": {
                "variable": {
                    "value": "particles",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qr.expand(Npop, C, H, W) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_711": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmp",
                            "variable"
                        ],
                        [
                            "tmp[scoretmp.argmax()].view(1, qr.shape[1], qr.shape[2], qr.shape[3])",
                            "Call"
                        ],
                        [
                            "qx[scoretmp.argmax()].view(1, *qr.shape[1:]).clone().detach()",
                            "Call"
                        ],
                        [
                            "qx[scoretmp.argmax()].view(1, *qr.shape[1:]).clone().detach()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_712": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmp",
                            "variable"
                        ],
                        [
                            "tmp[scoretmp.argmax()].view(1, qr.shape[1], qr.shape[2], qr.shape[3])",
                            "Call"
                        ],
                        [
                            "qx[scoretmp.argmax()].view(1, *qr.shape[1:]).clone().detach()",
                            "Call"
                        ],
                        [
                            "qx[scoretmp.argmax()].view(1, *qr.shape[1:]).clone().detach()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "atanh_779": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qr.clone().detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_1064": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_229": {
                "variable": {
                    "value": "argrank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "argsort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.LongTensor([int(can['skuId']) for can in sims])",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_380": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_384": {
                "variable": {
                    "value": "pgrad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pgd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qr.clone().detach()",
                            "Call"
                        ],
                        [
                            "pgd + (lr * th.sign(pgrad)).clamp(min=-eps, max=+eps)",
                            "BinOp"
                        ],
                        [
                            "th.max(qr - eps, th.min(qr + eps, pgd.float())).detach()",
                            "Call"
                        ],
                        [
                            "pgd.clamp(min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "qr.clone().detach()",
                            "Call"
                        ],
                        [
                            "th.max(qr - eps, th.min(qr + eps, pgd.float())).detach()",
                            "Call"
                        ],
                        [
                            "pgd.clamp(min=0.0, max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_404": {
                "variable": {
                    "value": "perts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[perts, -perts]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_404": {
                "variable": {
                    "value": "perts",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "+1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_406": {
                "variable": {
                    "value": "qx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qr.expand(Npop, *qr.shape[1:]) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_407": {
                "variable": {
                    "value": "qx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qr.expand(Npop, *qr.shape[1:]) - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_428": {
                "variable": {
                    "value": "pgd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qr - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_499": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_504": {
                "variable": {
                    "value": "pgrad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pgd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qr.clone().detach()",
                            "Call"
                        ],
                        [
                            "pgd + (lr * th.sign(pgrad)).clamp(min=-eps, max=+eps)",
                            "BinOp"
                        ],
                        [
                            "th.max(qr - eps, th.min(qr + eps, pgd.float())).detach()",
                            "Call"
                        ],
                        [
                            "pgd.clamp(min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "qr.clone().detach()",
                            "Call"
                        ],
                        [
                            "th.max(qr - eps, th.min(qr + eps, pgd.float())).detach()",
                            "Call"
                        ],
                        [
                            "pgd.clamp(min=0.0, max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_519": {
                "variable": {
                    "value": "perts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[perts, -perts]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_519": {
                "variable": {
                    "value": "perts",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "-eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "+eps",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_521": {
                "variable": {
                    "value": "qx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qr.expand(Npop, *qr.shape[1:]) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_522": {
                "variable": {
                    "value": "qx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qr.expand(Npop, *qr.shape[1:]) - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_546": {
                "variable": {
                    "value": "pgd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qr - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_611": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_614": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmp",
                            "variable"
                        ],
                        [
                            "tmp[scoretmp.argmax()].view(1, qr.shape[1], qr.shape[2], qr.shape[3])",
                            "Call"
                        ],
                        [
                            "qx[scoretmp.argmax()].view(1, *qr.shape[1:]).clone().detach()",
                            "Call"
                        ],
                        [
                            "qx[scoretmp.argmax()].view(1, *qr.shape[1:]).clone().detach()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_615": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmp",
                            "variable"
                        ],
                        [
                            "tmp[scoretmp.argmax()].view(1, qr.shape[1], qr.shape[2], qr.shape[3])",
                            "Call"
                        ],
                        [
                            "qx[scoretmp.argmax()].view(1, *qr.shape[1:]).clone().detach()",
                            "Call"
                        ],
                        [
                            "qx[scoretmp.argmax()].view(1, *qr.shape[1:]).clone().detach()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_617": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(qr.shape[0], 3, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_618": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(qr.shape[0], 3, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_625": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.beta(xA, xB)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_642": {
                "variable": {
                    "value": "zscore",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scoretmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "NearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "NearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_710": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_725": {
                "variable": {
                    "value": "zscore",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scoretmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "NearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "NearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_778": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_794": {
                "variable": {
                    "value": "zscore",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "(scoretmp - scoretmp.mean()) / (10000000.0 + scoretmp.std())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cosine_similarity_1075": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "xq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "xq.view(N, 1, D).expand(N, NX, D)",
                            "Call"
                        ],
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(query)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "self.xcs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_1075": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_115": {
                "variable": {
                    "value": "_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2 * th.rand(1, 3, 32, 32, device=qr.device) - 1) * eps",
                            "BinOp"
                        ],
                        [
                            "th.nn.functional.interpolate(_tmp, scale_factor=[7, 7])",
                            "Call"
                        ],
                        [
                            "eps * (2 * th.rand(parallel, 3, 32, 32, device=qr.device) - 1)",
                            "BinOp"
                        ],
                        [
                            "th.nn.functional.interpolate(_tmp, scale_factor=[7, 7])",
                            "Call"
                        ],
                        [
                            "th.sign(th.randn((Npop // 2, 3, 32, 32), device=qr.device))",
                            "Call"
                        ],
                        [
                            "sigma * th.randn((Npop // 2, 3, 32, 32), device=qr.device)",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "[7, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_124": {
                "variable": {
                    "value": "argrank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "argsort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.LongTensor([int(can['skuId']) for can in sims])",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_153": {
                "variable": {
                    "value": "_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2 * th.rand(1, 3, 32, 32, device=qr.device) - 1) * eps",
                            "BinOp"
                        ],
                        [
                            "th.nn.functional.interpolate(_tmp, scale_factor=[7, 7])",
                            "Call"
                        ],
                        [
                            "eps * (2 * th.rand(parallel, 3, 32, 32, device=qr.device) - 1)",
                            "BinOp"
                        ],
                        [
                            "th.nn.functional.interpolate(_tmp, scale_factor=[7, 7])",
                            "Call"
                        ],
                        [
                            "th.sign(th.randn((Npop // 2, 3, 32, 32), device=qr.device))",
                            "Call"
                        ],
                        [
                            "sigma * th.randn((Npop // 2, 3, 32, 32), device=qr.device)",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "[7, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_161": {
                "variable": {
                    "value": "argrank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "argsort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.LongTensor([int(can['skuId']) for can in sims])",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_222": {
                "input": {
                    "value": "qr.expand(Npop, C, H, W) - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_389": {
                "variable": {
                    "value": "adam_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pgd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qr.clone().detach()",
                            "Call"
                        ],
                        [
                            "pgd + (lr * th.sign(pgrad)).clamp(min=-eps, max=+eps)",
                            "BinOp"
                        ],
                        [
                            "th.max(qr - eps, th.min(qr + eps, pgd.float())).detach()",
                            "Call"
                        ],
                        [
                            "pgd.clamp(min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "qr.clone().detach()",
                            "Call"
                        ],
                        [
                            "th.max(qr - eps, th.min(qr + eps, pgd.float())).detach()",
                            "Call"
                        ],
                        [
                            "pgd.clamp(min=0.0, max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_390": {
                "variable": {
                    "value": "adam_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pgd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qr.clone().detach()",
                            "Call"
                        ],
                        [
                            "pgd + (lr * th.sign(pgrad)).clamp(min=-eps, max=+eps)",
                            "BinOp"
                        ],
                        [
                            "th.max(qr - eps, th.min(qr + eps, pgd.float())).detach()",
                            "Call"
                        ],
                        [
                            "pgd.clamp(min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "qr.clone().detach()",
                            "Call"
                        ],
                        [
                            "th.max(qr - eps, th.min(qr + eps, pgd.float())).detach()",
                            "Call"
                        ],
                        [
                            "pgd.clamp(min=0.0, max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_400": {
                "variable": {
                    "value": "perts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "th.randn((Npop // 2, *qr.shape[1:]), device=qr.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_402": {
                "variable": {
                    "value": "_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "th.randn((Npop // 2, 3, 32, 32), device=qr.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_403": {
                "variable": {
                    "value": "perts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2 * th.rand(1, 3, 32, 32, device=qr.device) - 1) * eps",
                            "BinOp"
                        ],
                        [
                            "th.nn.functional.interpolate(_tmp, scale_factor=[7, 7])",
                            "Call"
                        ],
                        [
                            "eps * (2 * th.rand(parallel, 3, 32, 32, device=qr.device) - 1)",
                            "BinOp"
                        ],
                        [
                            "th.nn.functional.interpolate(_tmp, scale_factor=[7, 7])",
                            "Call"
                        ],
                        [
                            "th.sign(th.randn((Npop // 2, 3, 32, 32), device=qr.device))",
                            "Call"
                        ],
                        [
                            "sigma * th.randn((Npop // 2, 3, 32, 32), device=qr.device)",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "[7, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_413": {
                "variable": {
                    "value": "argrank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "argsort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.LongTensor([int(can['skuId']) for can in sims])",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_507": {
                "variable": {
                    "value": "adam_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pgd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qr.clone().detach()",
                            "Call"
                        ],
                        [
                            "pgd + (lr * th.sign(pgrad)).clamp(min=-eps, max=+eps)",
                            "BinOp"
                        ],
                        [
                            "th.max(qr - eps, th.min(qr + eps, pgd.float())).detach()",
                            "Call"
                        ],
                        [
                            "pgd.clamp(min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "qr.clone().detach()",
                            "Call"
                        ],
                        [
                            "th.max(qr - eps, th.min(qr + eps, pgd.float())).detach()",
                            "Call"
                        ],
                        [
                            "pgd.clamp(min=0.0, max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_508": {
                "variable": {
                    "value": "adam_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pgd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qr.clone().detach()",
                            "Call"
                        ],
                        [
                            "pgd + (lr * th.sign(pgrad)).clamp(min=-eps, max=+eps)",
                            "BinOp"
                        ],
                        [
                            "th.max(qr - eps, th.min(qr + eps, pgd.float())).detach()",
                            "Call"
                        ],
                        [
                            "pgd.clamp(min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "qr.clone().detach()",
                            "Call"
                        ],
                        [
                            "th.max(qr - eps, th.min(qr + eps, pgd.float())).detach()",
                            "Call"
                        ],
                        [
                            "pgd.clamp(min=0.0, max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_518": {
                "variable": {
                    "value": "perts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2 * th.rand(1, 3, 32, 32, device=qr.device) - 1) * eps",
                            "BinOp"
                        ],
                        [
                            "th.nn.functional.interpolate(_tmp, scale_factor=[7, 7])",
                            "Call"
                        ],
                        [
                            "eps * (2 * th.rand(parallel, 3, 32, 32, device=qr.device) - 1)",
                            "BinOp"
                        ],
                        [
                            "th.nn.functional.interpolate(_tmp, scale_factor=[7, 7])",
                            "Call"
                        ],
                        [
                            "th.sign(th.randn((Npop // 2, 3, 32, 32), device=qr.device))",
                            "Call"
                        ],
                        [
                            "sigma * th.randn((Npop // 2, 3, 32, 32), device=qr.device)",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "[7, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_528": {
                "variable": {
                    "value": "argrank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "argsort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.LongTensor([int(can['skuId']) for can in sims])",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_627": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples.view(-1, 3, 32, 32)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "[7, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_639": {
                "variable": {
                    "value": "argrank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "argsort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.LongTensor([int(can['skuId']) for can in sims])",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_834": {
                "*size": {
                    "value": "self.canseek",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_845": {
                "f": {
                    "value": "f'trained/faC_c2f2.sdth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "cat_854": {
                "variable": {
                    "value": "self.xcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.xcs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_860": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cosine_similarity_863": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "xq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "xq.view(N, 1, D).expand(N, NX, D)",
                            "Call"
                        ],
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(query)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "self.xcs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_863": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_871": {
                "variable": {
                    "value": "nxq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "xq.view(N, 1, D).expand(N, NX, D)",
                            "Call"
                        ],
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(query)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_872": {
                "variable": {
                    "value": "nxcs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.xcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_873": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nxq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.nn.functional.normalize(xq, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "nxcs.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_897": {
                "f": {
                    "value": "f'trained/faC_lenet.sdth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "cat_906": {
                "variable": {
                    "value": "self.xcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.xcs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_918": {
                "f": {
                    "value": "f'trained/faC_res18.sdth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "cat_928": {
                "variable": {
                    "value": "self.xcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.xcs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_940": {
                "f": {
                    "value": "f'trained/faE_c2f2.sdth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "cat_948": {
                "variable": {
                    "value": "self.xcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.xcs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_954": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pairwise_distance_957": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "xq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "xq.view(N, 1, D).expand(N, NX, D)",
                            "Call"
                        ],
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(query)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "self.xcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_957": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_992": {
                "f": {
                    "value": "f'trained/sopE_res18.sdth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_998": {
                "variable": {
                    "value": "self.xcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "f'trained/sopE_res18.xcs.cache'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "cat_1005": {
                "variable": {
                    "value": "self.xcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.xcs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_1013": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pairwise_distance_1016": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "xq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "xq.view(N, 1, D).expand(N, NX, D)",
                            "Call"
                        ],
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(query.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(query)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "self.xcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_1016": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1039": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scores1, scores2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_1073": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_265": {
                "variable": {
                    "value": "particles",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qr.expand(Npop, C, H, W) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_314": {
                "variable": {
                    "value": "particles",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qr.expand(Npop, C, H, W) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_732": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.ones_like(qr, device=qr.device).view(1, qr.nelement())",
                            "Call"
                        ],
                        [
                            "th.ones((qr.shape[0], 3, 32, 32), device=qr.device).view(1, -1)",
                            "Call"
                        ],
                        [
                            "(alpha + lr * grada).clamp(min=BETA_MIN, max=BETA_MAX).clone()",
                            "Call"
                        ],
                        [
                            "(alpha + lr * th.nn.functional.avg_pool1d(grada.view(1, 1, -1), 49, 49, 0).view(-1)).clamp(min=BETA_MIN, max=BETA_MAX).clone()",
                            "Call"
                        ],
                        [
                            "th.zeros_like(qr, device=qr.device)",
                            "Call"
                        ],
                        [
                            "alpha + lr * grada",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_732": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.ones_like(qr, device=qr.device).view(1, qr.nelement())",
                            "Call"
                        ],
                        [
                            "th.ones((qr.shape[0], 3, 32, 32), device=qr.device).view(1, -1)",
                            "Call"
                        ],
                        [
                            "(alpha + lr * grada).clamp(min=BETA_MIN, max=BETA_MAX).clone()",
                            "Call"
                        ],
                        [
                            "(alpha + lr * th.nn.functional.avg_pool1d(grada.view(1, 1, -1), 49, 49, 0).view(-1)).clamp(min=BETA_MIN, max=BETA_MAX).clone()",
                            "Call"
                        ],
                        [
                            "th.zeros_like(qr, device=qr.device)",
                            "Call"
                        ],
                        [
                            "alpha + lr * grada",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_849": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_852": {
                "variable": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.forward(images.to(device))",
                            "Call"
                        ],
                        [
                            "th.nn.functional.normalize(embs, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "self.model.forward(images.to(device))",
                            "Call"
                        ],
                        [
                            "th.nn.functional.normalize(embs, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "self.model.forward(images.to(device))",
                            "Call"
                        ],
                        [
                            "th.nn.functional.normalize(embs, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "self.model.forward(images.to(device))",
                            "Call"
                        ],
                        [
                            "self.model.forward(images.to(device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_901": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_904": {
                "variable": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.forward(images.to(device))",
                            "Call"
                        ],
                        [
                            "th.nn.functional.normalize(embs, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "self.model.forward(images.to(device))",
                            "Call"
                        ],
                        [
                            "th.nn.functional.normalize(embs, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "self.model.forward(images.to(device))",
                            "Call"
                        ],
                        [
                            "th.nn.functional.normalize(embs, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "self.model.forward(images.to(device))",
                            "Call"
                        ],
                        [
                            "self.model.forward(images.to(device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_923": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_926": {
                "variable": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.forward(images.to(device))",
                            "Call"
                        ],
                        [
                            "th.nn.functional.normalize(embs, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "self.model.forward(images.to(device))",
                            "Call"
                        ],
                        [
                            "th.nn.functional.normalize(embs, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "self.model.forward(images.to(device))",
                            "Call"
                        ],
                        [
                            "th.nn.functional.normalize(embs, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "self.model.forward(images.to(device))",
                            "Call"
                        ],
                        [
                            "self.model.forward(images.to(device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_944": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_1007": {
                "obj": {
                    "value": "self.xcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "f'trained/sopE_res18.xcs.cache'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "no_grad_1069": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1081": {
                "tensors": {
                    "value": "[x[argsort[i]][:self.canseek] for (i, x) in enumerate(scores)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "rand_like_252": {
                "variable": {
                    "value": "rp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmp",
                            "variable"
                        ],
                        [
                            "tmp[scoretmp.argmax()].view(1, qr.shape[1], qr.shape[2], qr.shape[3])",
                            "Call"
                        ],
                        [
                            "qx[scoretmp.argmax()].view(1, *qr.shape[1:]).clone().detach()",
                            "Call"
                        ],
                        [
                            "qx[scoretmp.argmax()].view(1, *qr.shape[1:]).clone().detach()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_253": {
                "variable": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmp",
                            "variable"
                        ],
                        [
                            "tmp[scoretmp.argmax()].view(1, qr.shape[1], qr.shape[2], qr.shape[3])",
                            "Call"
                        ],
                        [
                            "qx[scoretmp.argmax()].view(1, *qr.shape[1:]).clone().detach()",
                            "Call"
                        ],
                        [
                            "qx[scoretmp.argmax()].view(1, *qr.shape[1:]).clone().detach()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_255": {
                "variable": {
                    "value": "rp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(qr.shape[0], 3, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_256": {
                "variable": {
                    "value": "rp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.rand_like(qr, device=qr.device)",
                            "Call"
                        ],
                        [
                            "th.rand((qr.shape[0], 3, 32, 32), device=qr.device)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.interpolate(rp, scale_factor=[7, 7])",
                            "Call"
                        ],
                        [
                            "th.rand((Npop, *qr.shape[1:]), device=qr.device)",
                            "Call"
                        ],
                        [
                            "th.rand((Npop, 3, 32, 32), device=qr.device)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.interpolate(rp, scale_factor=[7, 7])",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "[7, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_257": {
                "variable": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(qr.shape[0], 3, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_258": {
                "variable": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.rand_like(qr, device=qr.device)",
                            "Call"
                        ],
                        [
                            "th.rand((qr.shape[0], 3, 32, 32), device=qr.device)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.interpolate(rg, scale_factor=[7, 7])",
                            "Call"
                        ],
                        [
                            "th.rand((Npop, *qr.shape[1:]), device=qr.device)",
                            "Call"
                        ],
                        [
                            "th.rand((Npop, 3, 32, 32), device=qr.device)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.interpolate(rg, scale_factor=[7, 7])",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "[7, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_271": {
                "variable": {
                    "value": "argrank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "argsort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.LongTensor([int(can['skuId']) for can in sims])",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_301": {
                "variable": {
                    "value": "rp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(Npop, *qr.shape[1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_302": {
                "variable": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(Npop, *qr.shape[1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_304": {
                "variable": {
                    "value": "rp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(Npop, 3, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_305": {
                "variable": {
                    "value": "rp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.rand_like(qr, device=qr.device)",
                            "Call"
                        ],
                        [
                            "th.rand((qr.shape[0], 3, 32, 32), device=qr.device)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.interpolate(rp, scale_factor=[7, 7])",
                            "Call"
                        ],
                        [
                            "th.rand((Npop, *qr.shape[1:]), device=qr.device)",
                            "Call"
                        ],
                        [
                            "th.rand((Npop, 3, 32, 32), device=qr.device)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.interpolate(rp, scale_factor=[7, 7])",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "[7, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_306": {
                "variable": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(Npop, 3, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_307": {
                "variable": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.rand_like(qr, device=qr.device)",
                            "Call"
                        ],
                        [
                            "th.rand((qr.shape[0], 3, 32, 32), device=qr.device)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.interpolate(rg, scale_factor=[7, 7])",
                            "Call"
                        ],
                        [
                            "th.rand((Npop, *qr.shape[1:]), device=qr.device)",
                            "Call"
                        ],
                        [
                            "th.rand((Npop, 3, 32, 32), device=qr.device)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.interpolate(rg, scale_factor=[7, 7])",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "[7, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_321": {
                "variable": {
                    "value": "argrank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "argsort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.LongTensor([int(can['skuId']) for can in sims])",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=True)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(descending=False)",
                            "Call"
                        ],
                        [
                            "scores.argsort(dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_400": {
                "*size": {
                    "value": "(Npop // 2, *qr.shape[1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_402": {
                "*size": {
                    "value": "(Npop // 2, 3, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_515": {
                "*size": {
                    "value": "(Npop // 2, *qr.shape[1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_517": {
                "*size": {
                    "value": "(Npop // 2, 3, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_645": {
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.from_numpy(np.random.beta(xA, xB)).to(qr.device)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.interpolate(samples.view(-1, 3, 32, 32), scale_factor=[7, 7])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_648": {
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.from_numpy(np.random.beta(xA, xB)).to(qr.device)",
                            "Call"
                        ],
                        [
                            "th.nn.functional.interpolate(samples.view(-1, 3, 32, 32), scale_factor=[7, 7])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_653": {
                "input": {
                    "value": "1 - samples",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_656": {
                "input": {
                    "value": "1 - samples",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_782": {
                "*size": {
                    "value": "(Npop, *qr.shape[1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_783": {
                "input": {
                    "value": "aadvs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu + th.randn((Npop, *qr.shape[1:]), device=qr.device) * sigma",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_1001": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_like_245": {
                "input": {
                    "value": "particles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((th.rand(Npop, C, H, W, device=qr.device) * 2 - 1) * eps + qr.view(-1, C, H, W)).clamp(min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "th.min(qr.expand(Npop, C, H, W) + eps, th.max(qr.expand(Npop, C, H, W) - eps, particles))",
                            "Call"
                        ],
                        [
                            "th.min(qr.expand(Npop, C, H, W) + eps, th.max(qr.expand(Npop, C, H, W) - eps, particles))",
                            "Call"
                        ],
                        [
                            "(particles + partivelo).clamp(min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "th.min(qr.expand(Npop, C, H, W) + eps, th.max(qr.expand(Npop, C, H, W) - eps, particles))",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "particles.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_265": {
                "input": {
                    "value": "qr.expand(Npop, C, H, W) - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_314": {
                "input": {
                    "value": "qr.expand(Npop, C, H, W) - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_427": {
                "input": {
                    "value": "pgrad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.zeros_like(pgd, device=qr.device)",
                            "Call"
                        ],
                        [
                            "grad + mom * pgrad",
                            "BinOp"
                        ],
                        [
                            "adam_mhat / (adam_vhat.sqrt() + adam_eps)",
                            "BinOp"
                        ],
                        [
                            "grad.clone().detach()",
                            "Call"
                        ],
                        [
                            "th.zeros_like(pgd, device=qr.device)",
                            "Call"
                        ],
                        [
                            "grad + mom * pgrad",
                            "BinOp"
                        ],
                        [
                            "adam_mhat / (adam_vhat.sqrt() + adam_eps)",
                            "BinOp"
                        ],
                        [
                            "grad.clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "min_428": {
                "input": {
                    "value": "qr + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_545": {
                "input": {
                    "value": "pgrad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.zeros_like(pgd, device=qr.device)",
                            "Call"
                        ],
                        [
                            "grad + mom * pgrad",
                            "BinOp"
                        ],
                        [
                            "adam_mhat / (adam_vhat.sqrt() + adam_eps)",
                            "BinOp"
                        ],
                        [
                            "grad.clone().detach()",
                            "Call"
                        ],
                        [
                            "th.zeros_like(pgd, device=qr.device)",
                            "Call"
                        ],
                        [
                            "grad + mom * pgrad",
                            "BinOp"
                        ],
                        [
                            "adam_mhat / (adam_vhat.sqrt() + adam_eps)",
                            "BinOp"
                        ],
                        [
                            "grad.clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "min_546": {
                "input": {
                    "value": "qr + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "digamma_644": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.ones_like(qr, device=qr.device).view(1, qr.nelement())",
                            "Call"
                        ],
                        [
                            "th.ones((qr.shape[0], 3, 32, 32), device=qr.device).view(1, -1)",
                            "Call"
                        ],
                        [
                            "(alpha + lr * grada).clamp(min=BETA_MIN, max=BETA_MAX).clone()",
                            "Call"
                        ],
                        [
                            "(alpha + lr * th.nn.functional.avg_pool1d(grada.view(1, 1, -1), 49, 49, 0).view(-1)).clamp(min=BETA_MIN, max=BETA_MAX).clone()",
                            "Call"
                        ],
                        [
                            "th.zeros_like(qr, device=qr.device)",
                            "Call"
                        ],
                        [
                            "alpha + lr * grada",
                            "BinOp"
                        ]
                    ]
                }
            },
            "digamma_647": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.ones_like(qr, device=qr.device).view(1, qr.nelement())",
                            "Call"
                        ],
                        [
                            "th.ones((qr.shape[0], 3, 32, 32), device=qr.device).view(1, -1)",
                            "Call"
                        ],
                        [
                            "(alpha + lr * grada).clamp(min=BETA_MIN, max=BETA_MAX).clone()",
                            "Call"
                        ],
                        [
                            "(alpha + lr * th.nn.functional.avg_pool1d(grada.view(1, 1, -1), 49, 49, 0).view(-1)).clamp(min=BETA_MIN, max=BETA_MAX).clone()",
                            "Call"
                        ],
                        [
                            "th.zeros_like(qr, device=qr.device)",
                            "Call"
                        ],
                        [
                            "alpha + lr * grada",
                            "BinOp"
                        ]
                    ]
                }
            },
            "repeat_interleave_647": {
                "input": {
                    "value": "7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "digamma_652": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.ones_like(qr, device=qr.device).view(1, qr.nelement())",
                            "Call"
                        ],
                        [
                            "th.ones((qr.shape[0], 3, 32, 32), device=qr.device).view(1, -1)",
                            "Call"
                        ],
                        [
                            "(beta + lr * gradb).clamp(min=BETA_MIN, max=BETA_MAX).clone()",
                            "Call"
                        ],
                        [
                            "(beta + lr * th.nn.functional.avg_pool1d(gradb.view(1, 1, -1), 49, 49, 0).view(-1)).clamp(min=BETA_MIN, max=BETA_MAX).clone()",
                            "Call"
                        ],
                        [
                            "th.ones_like(qr, device=qr.device)",
                            "Call"
                        ],
                        [
                            "beta + lr * gradb",
                            "BinOp"
                        ]
                    ]
                }
            },
            "digamma_655": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.ones_like(qr, device=qr.device).view(1, qr.nelement())",
                            "Call"
                        ],
                        [
                            "th.ones((qr.shape[0], 3, 32, 32), device=qr.device).view(1, -1)",
                            "Call"
                        ],
                        [
                            "(beta + lr * gradb).clamp(min=BETA_MIN, max=BETA_MAX).clone()",
                            "Call"
                        ],
                        [
                            "(beta + lr * th.nn.functional.avg_pool1d(gradb.view(1, 1, -1), 49, 49, 0).view(-1)).clamp(min=BETA_MIN, max=BETA_MAX).clone()",
                            "Call"
                        ],
                        [
                            "th.ones_like(qr, device=qr.device)",
                            "Call"
                        ],
                        [
                            "beta + lr * gradb",
                            "BinOp"
                        ]
                    ]
                }
            },
            "repeat_interleave_655": {
                "input": {
                    "value": "7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_876": {
                "tensors": {
                    "value": "[x[argsort[i]] for (i, x) in enumerate(scores)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_878": {
                "tensors": {
                    "value": "[x[argsort[i]][:self.canseek] for (i, x) in enumerate(scores)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_971": {
                "tensors": {
                    "value": "[x[argsort[i]] for (i, x) in enumerate(scores)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_973": {
                "tensors": {
                    "value": "[x[argsort[i]][:self.canseek] for (i, x) in enumerate(scores)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_1043": {
                "tensors": {
                    "value": "[x[argsort[i]] for (i, x) in enumerate(scores)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_1045": {
                "tensors": {
                    "value": "[x[argsort[i]][:self.canseek] for (i, x) in enumerate(scores)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "rand_114": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_152": {
                "*size": {
                    "value": "parallel",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_416": {
                "ndarray": {
                    "value": "scoretmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "NearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "NearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_531": {
                "ndarray": {
                    "value": "scoretmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "NearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "NearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ],
                        [
                            "BatchNearsightRankCorr(argsort, otopk, rperm)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_111": {
                "input": {
                    "value": "qr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmp",
                            "variable"
                        ],
                        [
                            "tmp[scoretmp.argmax()].view(1, qr.shape[1], qr.shape[2], qr.shape[3])",
                            "Call"
                        ],
                        [
                            "qx[scoretmp.argmax()].view(1, *qr.shape[1:]).clone().detach()",
                            "Call"
                        ],
                        [
                            "qx[scoretmp.argmax()].view(1, *qr.shape[1:]).clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_149": {
                "*size": {
                    "value": "parallel",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "*qr.shape[1:]",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_220": {
                "*size": {
                    "value": "Npop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(os.getenv('PSO_NPOP', 40))",
                            "Call"
                        ],
                        [
                            "int(os.getenv('SS_NPOP', 50))",
                            "Call"
                        ],
                        [
                            "int(os.getenv('NES_NPOP', 50))",
                            "Call"
                        ],
                        [
                            "int(os.getenv('BA_NPOP', 50))",
                            "Call"
                        ],
                        [
                            "int(os.getenv('NA_NPOP', 100))",
                            "Call"
                        ],
                        [
                            "int(os.getenv('NA_NPOP', 100))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_715": {
                "*size": {
                    "value": "(Npop, *qr.shape[1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "qr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool1d_665": {
                "input": {
                    "value": "grada.view(1, 1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "49",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "49",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool1d_666": {
                "input": {
                    "value": "gradb.view(1, 1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "49",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "49",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/snapshop.py": {
        "torch": {
            "tensor_309": {
                "variable": {
                    "value": "self.xcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_310": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_337": {
                "variable": {
                    "value": "idlists",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "idlists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.stack(idlists)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_324": {
                "*size": {
                    "value": "self.canseek",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_338": {
                "*size": {
                    "value": "query.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.canseek",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/sopE_dense121.py": {
        "torch": {
            "DataParallel_34": {
                "variable": {
                    "value": "self.densenet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "densenet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vision.models.densenet121(pretrained=True if finetune else False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_35": {
                "variable": {
                    "value": "self.densenet.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "triplet_margin_loss_61": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "anchor": {
                    "value": "output[0::3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "positive": {
                    "value": "output[1::3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "negative": {
                    "value": "output[2::3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "margin": {
                    "value": "marginE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pairwise_distance_74": {
                "variable": {
                    "value": "pdistAP",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "output[0::3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "output[1::3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pairwise_distance_75": {
                "variable": {
                    "value": "pdistAN",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "output[0::3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "output[2::3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/sopE_mnas.py": {
        "torch": {
            "DataParallel_34": {
                "variable": {
                    "value": "self.mnas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "mnas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vision.models.mnasnet1_0(pretrained=True if finetune else False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_35": {
                "variable": {
                    "value": "self.mnas.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "triplet_margin_loss_61": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "anchor": {
                    "value": "output[0::3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "positive": {
                    "value": "output[1::3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "negative": {
                    "value": "output[2::3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "margin": {
                    "value": "marginE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pairwise_distance_74": {
                "variable": {
                    "value": "pdistAP",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "output[0::3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "output[1::3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pairwise_distance_75": {
                "variable": {
                    "value": "pdistAN",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "output[0::3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "output[2::3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/sopE_res18.py": {
        "torch": {
            "Identity_35": {
                "variable": {
                    "value": "self.resnet.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "triplet_margin_loss_61": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "anchor": {
                    "value": "output[0::3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "positive": {
                    "value": "output[1::3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "negative": {
                    "value": "output[2::3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "margin": {
                    "value": "marginE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_149": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_150": {
                "variable": {
                    "value": "optimx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[images]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pairwise_distance_162": {
                "variable": {
                    "value": "pdistAP",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "output[0::3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "output[1::3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pairwise_distance_163": {
                "variable": {
                    "value": "pdistAN",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "output[0::3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "output[2::3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_107": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.clone().detach().to(self.device).view(-1, 3, 224, 224)",
                            "Call"
                        ],
                        [
                            "images + eps * 2 * (0.5 - th.rand(images.shape)).to(images.device)",
                            "BinOp"
                        ],
                        [
                            "th.clamp(images, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "images.detach()",
                            "Call"
                        ],
                        [
                            "th.min(images, images_orig + eps)",
                            "Call"
                        ],
                        [
                            "th.max(images, images_orig - eps)",
                            "Call"
                        ],
                        [
                            "th.clamp(images, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "images.clone().detach()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_113": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_114": {
                "variable": {
                    "value": "optimx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[images]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_143": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.clone().detach().to(self.device).view(-1, 3, 224, 224)",
                            "Call"
                        ],
                        [
                            "images + eps * 2 * (0.5 - th.rand(images.shape)).to(images.device)",
                            "BinOp"
                        ],
                        [
                            "th.clamp(images, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "images.detach()",
                            "Call"
                        ],
                        [
                            "th.min(images, images_orig + eps)",
                            "Call"
                        ],
                        [
                            "th.max(images, images_orig - eps)",
                            "Call"
                        ],
                        [
                            "th.clamp(images, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "images.clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_144": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.clone().detach().to(self.device).view(-1, 3, 224, 224)",
                            "Call"
                        ],
                        [
                            "images + eps * 2 * (0.5 - th.rand(images.shape)).to(images.device)",
                            "BinOp"
                        ],
                        [
                            "th.clamp(images, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "images.detach()",
                            "Call"
                        ],
                        [
                            "th.min(images, images_orig + eps)",
                            "Call"
                        ],
                        [
                            "th.max(images, images_orig - eps)",
                            "Call"
                        ],
                        [
                            "th.clamp(images, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "images.clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_145": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.clone().detach().to(self.device).view(-1, 3, 224, 224)",
                            "Call"
                        ],
                        [
                            "images + eps * 2 * (0.5 - th.rand(images.shape)).to(images.device)",
                            "BinOp"
                        ],
                        [
                            "th.clamp(images, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "images.detach()",
                            "Call"
                        ],
                        [
                            "th.min(images, images_orig + eps)",
                            "Call"
                        ],
                        [
                            "th.max(images, images_orig - eps)",
                            "Call"
                        ],
                        [
                            "th.clamp(images, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "images.clone().detach()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_122": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(images[::stripe], l2norm=True)",
                            "Call"
                        ],
                        [
                            "self.forward(images, l2norm=True)",
                            "Call"
                        ],
                        [
                            "self.forward(images[::stripe], l2norm=False)",
                            "Call"
                        ],
                        [
                            "self.forward(images, l2norm=False)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "output_orig[::stripe].t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pairwise_distance_130": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(images[::stripe], l2norm=True)",
                            "Call"
                        ],
                        [
                            "self.forward(images, l2norm=True)",
                            "Call"
                        ],
                        [
                            "self.forward(images[::stripe], l2norm=False)",
                            "Call"
                        ],
                        [
                            "self.forward(images, l2norm=False)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "output_orig[::stripe]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sign_141": {
                "input": {
                    "value": "images.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_126": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(images[::stripe], l2norm=True)",
                            "Call"
                        ],
                        [
                            "self.forward(images, l2norm=True)",
                            "Call"
                        ],
                        [
                            "self.forward(images[::stripe], l2norm=False)",
                            "Call"
                        ],
                        [
                            "self.forward(images, l2norm=False)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "output_orig.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pairwise_distance_135": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(images[::stripe], l2norm=True)",
                            "Call"
                        ],
                        [
                            "self.forward(images, l2norm=True)",
                            "Call"
                        ],
                        [
                            "self.forward(images[::stripe], l2norm=False)",
                            "Call"
                        ],
                        [
                            "self.forward(images, l2norm=False)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "output_orig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.clone().detach()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_106": {
                "*size": {
                    "value": "images.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/sopE_res50.py": {
        "torch": {
            "DataParallel_34": {
                "variable": {
                    "value": "self.resnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "resnet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vision.models.resnet50(pretrained=True if finetune else False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_35": {
                "variable": {
                    "value": "self.resnet.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "triplet_margin_loss_61": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "anchor": {
                    "value": "output[0::3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "positive": {
                    "value": "output[1::3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "negative": {
                    "value": "output[2::3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "margin": {
                    "value": "marginE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "variable": {
                    "value": "IMmean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "IMstd",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_147": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_148": {
                "variable": {
                    "value": "optimx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[images]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pairwise_distance_174": {
                "variable": {
                    "value": "pdistAP",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "output[0::3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "output[1::3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pairwise_distance_175": {
                "variable": {
                    "value": "pdistAN",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "output[0::3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "output[2::3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_102": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_103": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SGD_109": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_110": {
                "variable": {
                    "value": "optimx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[images]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_139": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_140": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_142": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_143": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pairwise_distance_161": {
                "variable": {
                    "value": "loss_es",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "output_orig_nodetach",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_161": {
                "variable": {
                    "value": "loss_es",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_102": {
                "*size": {
                    "value": "images.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_103": {
                "*size": {
                    "value": "images.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_118": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "output_orig[::stripe].t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pairwise_distance_126": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "output_orig[::stripe]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sign_137": {
                "input": {
                    "value": "images.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "*size": {
                    "value": "images.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_143": {
                "*size": {
                    "value": "images.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_122": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "output_orig.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pairwise_distance_131": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "output_orig",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_101": {
                "*size": {
                    "value": "images.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/srckernel_cc.py": {
        "torch": {}
    },
    "lib/srckernel_py.py": {
        "torch": {
            "zeros_68": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(rperm)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "len(rperm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_71": {
                "input": {
                    "value": "argsort == otopk[i]",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_72": {
                "input": {
                    "value": "argsort == otopk[j]",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_73": {
                "input": {
                    "value": "rtopk == otopk[i]",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_74": {
                "input": {
                    "value": "rtopk == otopk[j]",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/srckernel_rs.py": {
        "torch": {
            "randperm_83": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(5, 10, 25)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "randperm_106": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(5, 10, 25)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "from_numpy_112": {
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_114": {
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/test_srckernel_cc.py": {
        "torch": {
            "randint_58": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(50,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_60": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(50,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randperm_62": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_71": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(50, 50)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "random.sample(range(1000), cansee)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "random.sample(range(1000), k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_49": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(5, 10, 25)",
                            "Tuple"
                        ]
                    ]
                }
            }
        }
    },
    "lib/utils.py": {
        "torch": {
            "tensor_7": {
                "variable": {
                    "value": "IMmean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_8": {
                "variable": {
                    "value": "IMstd",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "poc/taumap.py": {
        "torch": {
            "pairwise_distance_22": {
                "variable": {
                    "value": "qcx",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.rand(1, 2) * AX",
                            "BinOp"
                        ]
                    ]
                },
                "x2": {
                    "value": "candidates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.rand(NC, 2) * AX",
                            "BinOp"
                        ],
                        [
                            "th.rand(NC, 2) * AX",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "variable": {
                    "value": "taumap",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "AX",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "AX",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randperm_38": {
                "variable": {
                    "value": "rperm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "NC",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "taumap",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "AX",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "AX",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_20": {
                "*size": {
                    "value": "NC",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_21": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "qtmp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[i, j]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pairwise_distance_29": {
                "variable": {
                    "value": "qct",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "qtmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.tensor([i, j])",
                            "Call"
                        ],
                        [
                            "th.tensor([i, j])",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "candidates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.rand(NC, 2) * AX",
                            "BinOp"
                        ],
                        [
                            "th.rand(NC, 2) * AX",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_37": {
                "*size": {
                    "value": "NC",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "variable": {
                    "value": "qtmp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[i, j]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pairwise_distance_44": {
                "variable": {
                    "value": "qct",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "qtmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.tensor([i, j])",
                            "Call"
                        ],
                        [
                            "th.tensor([i, j])",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "candidates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.rand(NC, 2) * AX",
                            "BinOp"
                        ],
                        [
                            "th.rand(NC, 2) * AX",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}