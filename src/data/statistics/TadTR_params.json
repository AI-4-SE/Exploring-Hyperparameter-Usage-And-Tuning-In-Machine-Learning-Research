{
    "datasets/data_utils.py": {
        "torch": {
            "load_169": {
                "variable": {
                    "value": "video_df",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ft_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/tad_dataset.py": {
        "torch": {
            "Tensor_116": {},
            "from_numpy_198": {
                "variable": {
                    "value": "target[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(target[k], dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "demo.py": {
        "torch": {
            "device_17": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[bs, cfg.feature_dim, t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_22": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[bs, t]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "engine.py": {
        "torch": {
            "no_grad_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__73": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "max_norm",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_75": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_161": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.__dict__[cfg.optimizer](param_dicts, lr=cfg.lr, weight_decay=cfg.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "cfg.lr_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "checkpoint['epoch']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_186": {
                "variable": {
                    "value": "data_loader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(subset=cfg.test_set, args=cfg, mode='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(dataset_val, shuffle=False)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(dataset_val)",
                            "Call"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_79": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed + utils.get_rank()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_83": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed + utils.get_rank()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_all_84": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed + utils.get_rank()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_96": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu], find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_158": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DistributedSampler_171": {
                "variable": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(subset=cfg.test_set, args=cfg, mode='val')",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SequentialSampler_176": {
                "variable": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(subset=cfg.test_set, args=cfg, mode='val')",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchSampler_179": {
                "variable": {
                    "value": "batch_sampler_train",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(dataset_train)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.RandomSampler(dataset_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_182": {
                "variable": {
                    "value": "data_loader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(subset='train', args=cfg, mode='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.BatchSampler(sampler_train, cfg.batch_size, drop_last=True)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "utils.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SummaryWriter_192": {
                "variable": {
                    "value": "smry_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "output_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(cfg.output_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_100": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu], find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_170": {
                "variable": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(subset='train', args=cfg, mode='train')",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_175": {
                "variable": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(subset='train', args=cfg, mode='train')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_210": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "models/custom_loss.py": {
        "torch": {
            "binary_cross_entropy_with_logits_28": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.random([8, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.random(8) > 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "models/matcher.py": {
        "torch": {
            "cat_69": {
                "variable": {
                    "value": "tgt_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v['labels'] for v in targets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "tgt_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v['segments'] for v in targets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cdist_80": {
                "variable": {
                    "value": "cost_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "out_seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['pred_segments'].flatten(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "tgt_seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([v['segments'] for v in targets])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_tensor_91": {
                "data": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/ops/roi_align/roi_align.py": {
        "torch": {
            "tensor_74": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[1.0, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "proposal",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, -0.5, 9.5], [0, 0.1, 0.9]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_78": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer(input, proposal)",
                            "Call"
                        ],
                        [
                            "_align_1d.forward(input, roi, feature_dim, ratio)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/ops/setup.py": {
        "torch": {
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/ops/temporal_deform_attn/temporal_deform_attn.py": {
        "torch": {
            "Linear_67": {
                "variable": {
                    "value": "self.sampling_offsets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_heads * n_levels * n_points",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.attention_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_heads * n_levels * n_points",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.value_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.output_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_124": {
                "variable": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_weights.transpose(1, 2).reshape(N_ * M_, 1, Lq_, L_ * P_)",
                            "Call"
                        ],
                        [
                            "self.attention_weights(query).view(N, Len_q, self.n_heads, self.n_levels * self.n_points)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention_weights, -1).view(N, Len_q, self.n_heads, self.n_levels, self.n_points)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grid_sample_173": {
                "variable": {
                    "value": "sampling_value_l_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value_l_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value_list[lid_].flatten(2).transpose(1, 2).reshape(N_ * M_, D_, H_, W_)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "sampling_grid_l_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampling_grids[:, :, :, lid_].transpose(1, 2).flatten(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_90": {
                "variable": {
                    "value": "self.sampling_offsets.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "grid_init.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "sampling_locations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sampling_locations, torch.ones_like(sampling_locations) * 0.5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_149": {
                "variable": {
                    "value": "input_spatial_shapes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones_like(input_temporal_lens), input_temporal_lens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_80": {
                "start": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_149": {
                "input": {
                    "value": "input_temporal_lens",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_148": {
                "input": {
                    "value": "sampling_locations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reference_points[:, :, None, :, None, :] + sampling_offsets / offset_normalizer[None, None, None, :, None, :]",
                            "BinOp"
                        ],
                        [
                            "reference_points[:, :, None, :, None, :1] + sampling_offsets / self.n_points * reference_points[:, :, None, :, None, 1:] * 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.cat((sampling_locations, torch.ones_like(sampling_locations) * 0.5), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_178": {
                "tensors": {
                    "value": "sampling_value_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_178": {
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/position_encoding.py": {
        "torch": {
            "arange_46": {
                "variable": {
                    "value": "dim_t",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_pos_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_51": {
                "variable": {
                    "value": "pos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_x[:, :, 0::2].sin(), pos_x[:, :, 1::2].cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_51": {
                "variable": {
                    "value": "pos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/tadtr.py": {
        "torch": {
            "ModuleList_38": {
                "modules": {
                    "value": "[copy.deepcopy(module) for i in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.class_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.d_model",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "20",
                            "Constant"
                        ],
                        [
                            "25",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ]
                    ]
                }
            },
            "Embedding_71": {
                "variable": {
                    "value": "self.query_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_queries",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_73": {
                "variable": {
                    "value": "self.input_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.Conv1d(2048, hidden_dim, kernel_size=1), nn.GroupNorm(32, hidden_dim))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clamp_137": {
                "variable": {
                    "value": "rois_abs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_abs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((rois_center - rois_size / 2, rois_center + rois_size / 2), dim=2) * T",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(rois_abs, min=0, max=T)",
                            "Call"
                        ],
                        [
                            "torch.cat((batch_ind, rois_abs), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_139": {
                "variable": {
                    "value": "batch_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "rois_abs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch_ind, rois_abs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_198": {
                "variable": {
                    "value": "outputs_class",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_199": {
                "variable": {
                    "value": "outputs_coord",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_267": {
                "variable": {
                    "value": "target_classes_o",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t['labels'][J] for (t, (_, J)) in zip(targets, indices)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "full_268": {
                "variable": {
                    "value": "target_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "src_logits.shape[:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "src_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_272": {
                "variable": {
                    "value": "target_classes_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[src_logits.shape[0], src_logits.shape[1], src_logits.shape[2] + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "src_logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "src_logits.layout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "src_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_294": {
                "variable": {
                    "value": "target_segments",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t['segments'][i] for (t, (_, i)) in zip(targets, indices)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l1_loss_296": {
                "variable": {
                    "value": "loss_segment",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_segments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['pred_segments'][idx]",
                            "Subscript"
                        ],
                        [
                            "outputs['pred_segments'].view((-1, 2))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_segments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([t['segments'][i] for (t, (_, i)) in zip(targets, indices)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat([t['segments'] for t in targets], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_315": {
                "variable": {
                    "value": "target_segments",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t['segments'] for t in targets]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l1_loss_325": {
                "variable": {
                    "value": "loss_actionness",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_actionness.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "gt_iou.view(-1).detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_332": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.full_like(src, i) for (i, (src, _)) in enumerate(indices)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_333": {
                "variable": {
                    "value": "src_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src for (src, _) in indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_338": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.full_like(tgt, i) for (i, (_, tgt)) in enumerate(indices)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_339": {
                "variable": {
                    "value": "tgt_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tgt for (_, tgt) in indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "as_tensor_366": {
                "variable": {
                    "value": "num_segments",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[num_segments]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "next(iter(outputs.values())).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_369": {
                "variable": {
                    "value": "num_segments",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num_segments / get_world_size()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_444": {
                "variable": {
                    "value": "scale_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vid_length, vid_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_401": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_460": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(nn.Linear(n, k) for (n, k) in zip([input_dim] + h, h + [output_dim]))",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "GroupNorm_44": {
                "num_groups": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_104": {
                "variable": {
                    "value": "self.class_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.class_embed for _ in range(num_pred)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_106": {
                "variable": {
                    "value": "self.segment_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.segment_embed for _ in range(num_pred)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "variable": {
                    "value": "self.actionness_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.roi_size * hidden_dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_421": {
                "variable": {
                    "value": "(topk_values, topk_indexes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob.view(out_logits.shape[0], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "min(cfg.postproc_ins_topk, prob.shape[1] * prob.shape[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_428": {
                "variable": {
                    "value": "segments",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "segment_ops.segment_cw_to_t1t2(out_segments)",
                            "Call"
                        ],
                        [
                            "torch.gather(segments, 1, topk_segments.unsqueeze(-1).repeat(1, 1, 2))",
                            "Call"
                        ],
                        [
                            "segments[:, [i // cfg.postproc_cls_topk for i in range(cfg.postproc_cls_topk * segments.shape[1])], :]",
                            "Subscript"
                        ],
                        [
                            "segments * scale_fct[:, None, :]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "topk_segments.unsqueeze(-1).repeat(1, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_434": {
                "variable": {
                    "value": "(scores, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_logits.sigmoid()",
                            "Call"
                        ],
                        [
                            "prob * outputs['pred_actionness']",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "cfg.postproc_cls_topk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_46": {
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_86": {
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "20",
                            "Constant"
                        ],
                        [
                            "25",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ]
                    ]
                }
            },
            "cat_134": {
                "tensors": {
                    "value": "(rois_center - rois_size / 2, rois_center + rois_size / 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_301": {
                "input": {
                    "value": "segment_ops.segment_iou(segment_ops.segment_cw_to_t1t2(src_segments), segment_ops.segment_cw_to_t1t2(target_segments))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "*args": {
                    "value": "nn.Conv1d(2048, hidden_dim, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "in_features": {
                    "value": "self.roi_size * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.d_model",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_117": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.d_model",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.d_model",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_119": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.d_model",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_like_332": {
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(args.dec_layers - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "full_like_338": {
                "input": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(args.dec_layers - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_460": {
                "in_features": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_465": {
                "input": {
                    "value": "layer(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_75": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.d_model",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_76": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.d_model",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_439": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "cfg.postproc_cls_topk * segments.shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "labels.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/transformer.py": {
        "torch": {
            "Parameter_45": {
                "variable": {
                    "value": "self.level_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_feature_levels, d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.reference_points",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_65": {
                "variable": {
                    "value": "valid_T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "~mask",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "src_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "src_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(src_flatten, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "mask_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mask_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mask_flatten, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "lvl_pos_embed_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lvl_pos_embed_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(lvl_pos_embed_flatten, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_102": {
                "variable": {
                    "value": "temporal_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "temporal_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.as_tensor(temporal_lens, dtype=torch.long, device=src_flatten.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "src_flatten.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "level_start_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(temporal_lens.new_zeros((1,)), temporal_lens.cumsum(0)[:-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_104": {
                "variable": {
                    "value": "valid_ratios",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.get_valid_ratio(m) for m in masks]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_113": {
                "variable": {
                    "value": "(query_embed, tgt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "query_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_embed.unsqueeze(0).expand(bs, -1, -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_135": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_136": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_ffn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_141": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_142": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ffn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_143": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_144": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_181": {
                "variable": {
                    "value": "reference_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reference_points_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_208": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_209": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MultiheadAttention_212": {
                "variable": {
                    "value": "self.self_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_heads": {
                    "value": "n_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_213": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_214": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_217": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_ffn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_219": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_220": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ffn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_221": {
                "variable": {
                    "value": "self.dropout4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_222": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_311": {
                "modules": {
                    "value": "[copy.deepcopy(module) for i in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "linspace_178": {
                "variable": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "T_ - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "T_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_305": {
                "tensors": {
                    "value": "intermediate_reference_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "util/misc.py": {
        "torch": {
            "tensor_117": {
                "variable": {
                    "value": "local_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[tensor.numel()]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_372": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[b, t]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_404": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "padded_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_405": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "padded_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "no_grad_479": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.count, self.total]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_131": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(max_size - local_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_163": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(values, dim=0)",
                            "Call"
                        ],
                        [
                            "values / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_341": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(tensor_list)] + max_size",
                            "BinOp"
                        ],
                        [
                            "[len(tensor_list), tensor_list[0].shape[0], max_size]",
                            "List"
                        ],
                        [
                            "[len(tensor_list), tensor_list[0].shape[0], max_size, tensor_list[0].shape[2], tensor_list[0].shape[3]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list[0].dtype",
                            "Attribute"
                        ],
                        [
                            "tensor_list[0].dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list[0].device",
                            "Attribute"
                        ],
                        [
                            "tensor_list[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_342": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list[0].device",
                            "Attribute"
                        ],
                        [
                            "tensor_list[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "max_382": {
                "variable": {
                    "value": "max_size_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack([img.shape[i] for img in tensor_list]).to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_395": {
                "variable": {
                    "value": "padded_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list",
                            "Name"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, padding[2], 0, padding[1], 0, padding[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_399": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_400": {
                "variable": {
                    "value": "padded_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(img[0], dtype=torch.int, device=img.device)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, padding[2], 0, padding[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_469": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_502": {
                "input": {
                    "value": "x1 / x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_358": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(tensor_list)] + max_size",
                            "BinOp"
                        ],
                        [
                            "[len(tensor_list), tensor_list[0].shape[0], max_size]",
                            "List"
                        ],
                        [
                            "[len(tensor_list), tensor_list[0].shape[0], max_size, tensor_list[0].shape[2], tensor_list[0].shape[3]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list[0].dtype",
                            "Attribute"
                        ],
                        [
                            "tensor_list[0].dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list[0].device",
                            "Attribute"
                        ],
                        [
                            "tensor_list[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_359": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list[0].device",
                            "Attribute"
                        ],
                        [
                            "tensor_list[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "is_available_426": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_428": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_451": {
                "obj": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "empty_128": {
                "*size": {
                    "value": "(max_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_483": {
                "*size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "output.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_461": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_382": {
                "tensors": {
                    "value": "[img.shape[i] for img in tensor_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "max_memory_allocated_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "util/segment_ops.py": {
        "torch": {
            "max_60": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segments1[:, None, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_61": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segments1[:, None, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_86": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segments1[:, None, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_87": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segments1[:, None, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_27": {
                "tensors": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_c - 0.5 * w, x_c + 0.5 * w]",
                            "List"
                        ],
                        [
                            "[(x_c - 0.5 * w)[..., None], (x_c + 0.5 * w)[..., None]]",
                            "List"
                        ],
                        [
                            "[(x1 + x2) / 2, x2 - x1]",
                            "List"
                        ],
                        [
                            "[((x1 + x2) / 2)[..., None], (x2 - x1)[..., None]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_44": {
                "tensors": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_c - 0.5 * w, x_c + 0.5 * w]",
                            "List"
                        ],
                        [
                            "[(x_c - 0.5 * w)[..., None], (x_c + 0.5 * w)[..., None]]",
                            "List"
                        ],
                        [
                            "[(x1 + x2) / 2, x2 - x1]",
                            "List"
                        ],
                        [
                            "[((x1 + x2) / 2)[..., None], (x2 - x1)[..., None]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}