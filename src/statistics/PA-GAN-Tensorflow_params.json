{
    "data.py": {
        "tensorflow": {
            "resize_45": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "images": {
                    "value": "img",
                    "possible_values": [
                        [
                            "tf.image.resize(img, [load_size, load_size])",
                            "Call"
                        ],
                        [
                            "tl.center_crop(img, size=crop_size)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(img, 0, 255) / 127.5 - 1",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(img, [load_size, load_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(img, [crop_size, crop_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(img, 0, 255) / 127.5 - 1",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "[load_size, load_size]",
                    "possible_values": []
                }
            },
            "random_flip_left_right_47": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "possible_values": [
                        [
                            "tf.image.resize(img, [load_size, load_size])",
                            "Call"
                        ],
                        [
                            "tl.center_crop(img, size=crop_size)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(img, 0, 255) / 127.5 - 1",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(img, [load_size, load_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(img, [crop_size, crop_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(img, 0, 255) / 127.5 - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "random_crop_48": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "value": {
                    "value": "img",
                    "possible_values": [
                        [
                            "tf.image.resize(img, [load_size, load_size])",
                            "Call"
                        ],
                        [
                            "tl.center_crop(img, size=crop_size)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(img, 0, 255) / 127.5 - 1",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(img, [load_size, load_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(img, [crop_size, crop_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(img, 0, 255) / 127.5 - 1",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "[crop_size, crop_size, 3]",
                    "possible_values": []
                }
            },
            "resize_56": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "images": {
                    "value": "img",
                    "possible_values": [
                        [
                            "tf.image.resize(img, [load_size, load_size])",
                            "Call"
                        ],
                        [
                            "tl.center_crop(img, size=crop_size)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(img, 0, 255) / 127.5 - 1",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(img, [load_size, load_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(img, [crop_size, crop_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(img, 0, 255) / 127.5 - 1",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "[load_size, load_size]",
                    "possible_values": []
                }
            },
            "clip_by_value_51": {
                "t": {
                    "value": "img",
                    "possible_values": [
                        [
                            "tf.image.resize(img, [load_size, load_size])",
                            "Call"
                        ],
                        [
                            "tl.center_crop(img, size=crop_size)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(img, 0, 255) / 127.5 - 1",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(img, [load_size, load_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(img, [crop_size, crop_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(img, 0, 255) / 127.5 - 1",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255",
                    "possible_values": []
                }
            },
            "clip_by_value_58": {
                "t": {
                    "value": "img",
                    "possible_values": [
                        [
                            "tf.image.resize(img, [load_size, load_size])",
                            "Call"
                        ],
                        [
                            "tl.center_crop(img, size=crop_size)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(img, 0, 255) / 127.5 - 1",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(img, [load_size, load_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(img, [crop_size, crop_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(img, 0, 255) / 127.5 - 1",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255",
                    "possible_values": []
                }
            }
        }
    },
    "module.py": {
        "tensorflow": {
            "reshape_38": {
                "variable": {
                    "value": "b",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.abs(tf.sign(b))",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, 1, n_att]",
                    "possible_values": []
                }
            },
            "clip_by_value_39": {
                "variable": {
                    "value": "m",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.reduce_sum(b * tf.nn.sigmoid(m_multi), axis=-1, keep_dims=True)",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "constant_227": {
                "variable": {
                    "value": "full_overlap_pair_loss",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "constant_236": {
                "variable": {
                    "value": "non_overlap_pair_loss",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "global_variables_139": {
                "variable": {
                    "value": "self.variables",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'PAGANG'",
                            "MethodArgument"
                        ],
                        [
                            "'PAGAND'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "trainable_variables_140": {
                "variable": {
                    "value": "self.trainable_variables",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'PAGANG'",
                            "MethodArgument"
                        ],
                        [
                            "'PAGAND'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_regularization_losses_141": {
                "variable": {
                    "value": "self.reg_losses",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'PAGANG'",
                            "MethodArgument"
                        ],
                        [
                            "'PAGAND'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "global_variables_172": {
                "variable": {
                    "value": "self.variables",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'PAGANG'",
                            "MethodArgument"
                        ],
                        [
                            "'PAGAND'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "trainable_variables_173": {
                "variable": {
                    "value": "self.trainable_variables",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'PAGANG'",
                            "MethodArgument"
                        ],
                        [
                            "'PAGAND'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_regularization_losses_174": {
                "variable": {
                    "value": "self.reg_losses",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'PAGANG'",
                            "MethodArgument"
                        ],
                        [
                            "'PAGAND'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_38": {
                "x": {
                    "value": "tf.sign(b)",
                    "possible_values": []
                }
            },
            "reduce_sum_39": {
                "input_tensor": {
                    "value": "b * tf.nn.sigmoid(m_multi)",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "concat_76": {
                "variable": {
                    "value": "m",
                    "possible_values": []
                },
                "values": {
                    "value": "[m0, m1, m2, m3]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "tanh_93": {
                "variable": {
                    "value": "e",
                    "possible_values": []
                },
                "x": {
                    "value": "e",
                    "possible_values": [
                        [
                            "Ge(e_ipt)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "dconv_norm_relu(e, num_outputs=dim, kernel_size=3, stride=1)",
                            "Call"
                        ],
                        [
                            "dconv_norm_relu(e, num_outputs=dim, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "dconv_norm_relu(e, num_outputs=dim, kernel_size=3, stride=1)",
                            "Call"
                        ],
                        [
                            "dconv_(e, num_outputs=3, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(e)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_101": {
                "variable": {
                    "value": "b",
                    "possible_values": []
                },
                "x": {
                    "value": "b",
                    "possible_values": [
                        [
                            "tf.reshape(tf.abs(tf.sign(b)), [-1, 1, 1, n_att])",
                            "Call"
                        ],
                        [
                            "tf.to_float(b)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_163": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "structure": {
                    "value": "z",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "conv_norm_lrelu(z, d, 4, 2)",
                            "Call"
                        ],
                        [
                            "slim.flatten(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_165": {
                "variable": {
                    "value": "logit_gan",
                    "possible_values": []
                },
                "features": {
                    "value": "fc_(z, fc_dim)",
                    "possible_values": []
                }
            },
            "leaky_relu_168": {
                "variable": {
                    "value": "logit_att",
                    "possible_values": []
                },
                "features": {
                    "value": "fc_(z, fc_dim)",
                    "possible_values": []
                }
            },
            "sign_38": {
                "x": {
                    "value": "b",
                    "possible_values": [
                        [
                            "tf.reshape(tf.abs(tf.sign(b)), [-1, 1, 1, n_att])",
                            "Call"
                        ],
                        [
                            "tf.to_float(b)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_100": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'PAGANG'",
                            "MethodArgument"
                        ],
                        [
                            "'PAGAND'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "possible_values": []
                }
            },
            "variable_scope_158": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'PAGANG'",
                            "MethodArgument"
                        ],
                        [
                            "'PAGAND'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "possible_values": []
                }
            },
            "absolute_difference_234": {
                "labels": {
                    "value": "m1",
                    "possible_values": [
                        [
                            "m[..., id1]",
                            "Subscript"
                        ],
                        [
                            "m[..., id1]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "conv_norm_relu(m1, dim, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "m2",
                    "possible_values": [
                        [
                            "m[..., id2]",
                            "Subscript"
                        ],
                        [
                            "m[..., id2]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "conv_norm_relu(m2, dim, 3, 1)",
                            "Call"
                        ],
                        [
                            "conv_norm_relu(m2, dim, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_243": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid(m1) * tf.nn.sigmoid(m2)",
                    "possible_values": []
                }
            },
            "sigmoid_39": {
                "x": {
                    "value": "m_multi",
                    "possible_values": [
                        [
                            "m_multi_pre + dm_multi",
                            "BinOp"
                        ],
                        [
                            "dm_multi",
                            "Name"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "sigmoid_243": {
                "x": {
                    "value": "m2",
                    "possible_values": [
                        [
                            "m[..., id2]",
                            "Subscript"
                        ],
                        [
                            "m[..., id2]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "conv_norm_relu(m2, dim, 3, 1)",
                            "Call"
                        ],
                        [
                            "conv_norm_relu(m2, dim, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test.py": {
        "tensorflow": {
            "placeholder_67": {
                "variable": {
                    "value": "xa",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, args.crop_size, args.crop_size, 3]",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "a_",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_atts]",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "b_",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_atts]",
                    "possible_values": []
                }
            },
            "GraphDef_76": {
                "variable": {
                    "value": "graph_def",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "GFile_75": {
                "name": {
                    "value": "py.join(output_dir, 'generator.pb')",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "possible_values": []
                }
            },
            "import_graph_def_78": {
                "graph_def": {
                    "value": "graph_def",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "generator",
                    "possible_values": []
                }
            },
            "global_variables_157": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "test_multi.py": {
        "tensorflow": {
            "placeholder_71": {
                "variable": {
                    "value": "xa",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, args.crop_size, args.crop_size, 3]",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "a_",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_atts]",
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "b_",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_atts]",
                    "possible_values": []
                }
            },
            "GraphDef_80": {
                "variable": {
                    "value": "graph_def",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "GFile_79": {
                "name": {
                    "value": "py.join(output_dir, 'generator.pb')",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "possible_values": []
                }
            },
            "import_graph_def_82": {
                "graph_def": {
                    "value": "graph_def",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "generator",
                    "possible_values": []
                }
            },
            "global_variables_165": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tflib/data/dataset.py": {
        "tensorflow": {
            "read_file_107": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "filename": {
                    "value": "path",
                    "possible_values": []
                }
            },
            "decode_png_108": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "contents": {
                    "value": "img",
                    "possible_values": [
                        [
                            "tf.io.read_file(path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(img, 3)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "possible_values": []
                }
            }
        }
    },
    "tflib/image/filter.py": {
        "tensorflow": {
            "Normal_5": {
                "variable": {
                    "value": "d",
                    "possible_values": []
                },
                "loc": {
                    "value": "0.0",
                    "possible_values": []
                },
                "scale": {
                    "value": "float(std)",
                    "possible_values": []
                }
            },
            "reduce_sum_8": {
                "input_tensor": {
                    "value": "kernel",
                    "possible_values": [
                        [
                            "vals[:, None] * vals[None, :]",
                            "BinOp"
                        ],
                        [
                            "kernel / tf.reduce_sum(kernel)",
                            "BinOp"
                        ],
                        [
                            "kernel[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(kernel, [1, 1, image.shape[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel, [1, 1, image.shape[1], 1])",
                            "Call"
                        ],
                        [
                            "gaussian_kernel2d(kernel_radias, std)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_15": {
                "variable": {
                    "value": "kernel",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "possible_values": [
                        [
                            "vals[:, None] * vals[None, :]",
                            "BinOp"
                        ],
                        [
                            "kernel / tf.reduce_sum(kernel)",
                            "BinOp"
                        ],
                        [
                            "kernel[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(kernel, [1, 1, image.shape[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel, [1, 1, image.shape[1], 1])",
                            "Call"
                        ],
                        [
                            "gaussian_kernel2d(kernel_radias, std)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, image.shape[3], 1]",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_18": {
                "input": {
                    "value": "image",
                    "possible_values": []
                },
                "filter": {
                    "value": "kernel",
                    "possible_values": [
                        [
                            "vals[:, None] * vals[None, :]",
                            "BinOp"
                        ],
                        [
                            "kernel / tf.reduce_sum(kernel)",
                            "BinOp"
                        ],
                        [
                            "kernel[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(kernel, [1, 1, image.shape[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel, [1, 1, image.shape[1], 1])",
                            "Call"
                        ],
                        [
                            "gaussian_kernel2d(kernel_radias, std)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "range_6": {
                "start": {
                    "value": "-kernel_radias",
                    "possible_values": []
                },
                "limit": {
                    "value": "kernel_radias + 1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "tile_17": {
                "variable": {
                    "value": "kernel",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "possible_values": [
                        [
                            "vals[:, None] * vals[None, :]",
                            "BinOp"
                        ],
                        [
                            "kernel / tf.reduce_sum(kernel)",
                            "BinOp"
                        ],
                        [
                            "kernel[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(kernel, [1, 1, image.shape[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(kernel, [1, 1, image.shape[1], 1])",
                            "Call"
                        ],
                        [
                            "gaussian_kernel2d(kernel_radias, std)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, image.shape[1], 1]",
                    "possible_values": []
                }
            }
        }
    },
    "tflib/image/image.py": {
        "tensorflow": {
            "convert_to_tensor_50": {
                "variable": {
                    "value": "max_degrees",
                    "possible_values": []
                },
                "value": {
                    "value": "max_degrees",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(max_degrees, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "crop_to_bounding_box_14": {
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tform(image)",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "offset_height",
                    "possible_values": [
                        [
                            "(tf.shape(image)[-3] - size[0]) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "offset_width": {
                    "value": "offset_width",
                    "possible_values": [
                        [
                            "(tf.shape(image)[-2] - size[1]) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "target_height": {
                    "value": "size[0]",
                    "possible_values": []
                },
                "target_width": {
                    "value": "size[1]",
                    "possible_values": []
                }
            },
            "cond_43": {
                "pred": {
                    "value": "tf.random.uniform(()) < p",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.image.adjust_saturation(image, 0)",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : image",
                    "possible_values": []
                }
            },
            "shape_12": {
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tform(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_13": {
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tform(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "uniform_43": {
                "shape": {
                    "value": "()",
                    "possible_values": []
                }
            },
            "adjust_saturation_44": {
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tform(image)",
                            "Call"
                        ]
                    ]
                },
                "saturation_factor": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "uniform_51": {
                "shape": {
                    "value": "tf.shape(max_degrees)",
                    "possible_values": []
                },
                "minval": {
                    "value": "-1.0",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "shape_51": {
                "input": {
                    "value": "max_degrees",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(max_degrees, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tflib/layers/layers.py": {
        "tensorflow": {
            "moments_8": {
                "variable": {
                    "value": "(c_mean, c_var)",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "possible_values": []
                },
                "axes": {
                    "value": "[1, 2]",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sqrt_9": {
                "variable": {
                    "value": "c_std",
                    "possible_values": []
                },
                "x": {
                    "value": "c_var + epsilon",
                    "possible_values": []
                }
            }
        }
    },
    "tflib/layers/layers_slim.py": {
        "tensorflow": {
            "zeros_initializer_30": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "convert_to_tensor_88": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, [-1, num_input_units])",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "unpack_96": {
                "variable": {
                    "value": "out_shape",
                    "possible_values": []
                }
            },
            "matmul_115": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, [-1, num_input_units])",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "variables.model_variable('weights', shape=weights_shape, dtype=dtype, initializer=weights_initializer, regularizer=weights_regularizer, collections=weights_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "weights_normalizer_fn(weights, **weights_normalizer_params)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('weights', shape=weights_shape, dtype=dtype, initializer=weights_initializer, regularizer=weights_regularizer, collections=weights_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "weights_normalizer_fn(weights, **weights_normalizer_params)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_156": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "convert_to_tensor_239": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, [-1, num_input_units])",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "convolution_276": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, [-1, num_input_units])",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "variables.model_variable('weights', shape=weights_shape, dtype=dtype, initializer=weights_initializer, regularizer=weights_regularizer, collections=weights_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "weights_normalizer_fn(weights, **weights_normalizer_params)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('weights', shape=weights_shape, dtype=dtype, initializer=weights_initializer, regularizer=weights_regularizer, collections=weights_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "weights_normalizer_fn(weights, **weights_normalizer_params)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(weights)",
                            "Call"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "rate",
                    "possible_values": [
                        [
                            "utils.n_positive_integers(conv_dims, rate)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "utils.n_positive_integers(conv_dims, stride)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_311": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "convert_to_tensor_319": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "value": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "variables.model_variable('weights', shape=weights_shape, dtype=dtype, initializer=weights_initializer, regularizer=weights_regularizer, collections=weights_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "weights_normalizer_fn(weights, **weights_normalizer_params)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('weights', shape=weights_shape, dtype=dtype, initializer=weights_initializer, regularizer=weights_regularizer, collections=weights_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "weights_normalizer_fn(weights, **weights_normalizer_params)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_323": {
                "variable": {
                    "value": "w_t",
                    "possible_values": []
                },
                "tensor": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "variables.model_variable('weights', shape=weights_shape, dtype=dtype, initializer=weights_initializer, regularizer=weights_regularizer, collections=weights_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "weights_normalizer_fn(weights, **weights_normalizer_params)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('weights', shape=weights_shape, dtype=dtype, initializer=weights_initializer, regularizer=weights_regularizer, collections=weights_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "weights_normalizer_fn(weights, **weights_normalizer_params)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(weights)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, weights.shape.as_list()[-1]]",
                    "possible_values": []
                }
            },
            "transpose_324": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "a": {
                    "value": "w_t",
                    "possible_values": [
                        [
                            "tf.reshape(weights, [-1, weights.shape.as_list()[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_328": {
                "variable": {
                    "value": "u",
                    "possible_values": []
                },
                "name": {
                    "value": "u",
                    "possible_values": []
                },
                "shape": {
                    "value": "[m, 1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "inputs.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "weights.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                },
                "initializer": {
                    "value": "u_initializer",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer()",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                },
                "collections": {
                    "value": "u_collections",
                    "possible_values": [
                        [
                            "utils.get_variable_collections(variables_collections, 'u')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_335": {
                "variable": {
                    "value": "sigma",
                    "possible_values": []
                },
                "name": {
                    "value": "sigma",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "inputs.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "weights.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                },
                "collections": {
                    "value": "sigma_collections",
                    "possible_values": [
                        [
                            "utils.get_variable_collections(variables_collections, 'sigma')",
                            "Call"
                        ]
                    ]
                }
            },
            "while_loop_347": {
                "variable": {
                    "value": "(_, u_, v_)",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2: i < num_iterations",
                    "possible_values": []
                },
                "body": {
                    "value": "_power_iteration",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.constant(0), u, tf.zeros(shape=[n, 1], dtype=tf.float32)]",
                    "possible_values": []
                }
            },
            "stop_gradient_352": {
                "variable": {
                    "value": "u_",
                    "possible_values": []
                },
                "input": {
                    "value": "u_",
                    "possible_values": [
                        [
                            "tf.stop_gradient(u_)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.matmul(w, v_), epsilon=epsilon)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_353": {
                "variable": {
                    "value": "v_",
                    "possible_values": []
                },
                "input": {
                    "value": "v_",
                    "possible_values": [
                        [
                            "tf.stop_gradient(v_)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.matmul(w_t, u), epsilon=epsilon)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "fully_connected",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_114": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, [-1, num_input_units])",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_input_units]",
                    "possible_values": []
                }
            },
            "reshape_135": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "standard_ops.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, array_ops.pack(out_shape))",
                            "Call"
                        ],
                        [
                            "nn.convolution(input=inputs, filter=weights, dilation_rate=rate, strides=stride, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "array_ops.pack(out_shape)",
                    "possible_values": []
                }
            },
            "variable_scope_237": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Conv",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_318": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "SpectralNorm",
                    "possible_values": []
                },
                "values": {
                    "value": "[weights]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "l2_normalize_343": {
                "variable": {
                    "value": "v_",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(w_t, u)",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "epsilon",
                    "possible_values": [
                        [
                            "1e-12",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "l2_normalize_344": {
                "variable": {
                    "value": "u_",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(w, v_)",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "epsilon",
                    "possible_values": [
                        [
                            "1e-12",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_96": {
                "input": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, [-1, num_input_units])",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_130": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "standard_ops.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, array_ops.pack(out_shape))",
                            "Call"
                        ],
                        [
                            "nn.convolution(input=inputs, filter=weights, dilation_rate=rate, strides=stride, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "possible_values": [
                        [
                            "variables.model_variable('biases', shape=[num_outputs], dtype=dtype, initializer=biases_initializer, regularizer=biases_regularizer, collections=biases_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('biases', shape=[num_outputs], dtype=dtype, initializer=biases_initializer, regularizer=biases_regularizer, collections=biases_collections, trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_296": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "standard_ops.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, array_ops.pack(out_shape))",
                            "Call"
                        ],
                        [
                            "nn.convolution(input=inputs, filter=weights, dilation_rate=rate, strides=stride, padding=padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "possible_values": [
                        [
                            "variables.model_variable('biases', shape=[num_outputs], dtype=dtype, initializer=biases_initializer, regularizer=biases_regularizer, collections=biases_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('biases', shape=[num_outputs], dtype=dtype, initializer=biases_initializer, regularizer=biases_regularizer, collections=biases_collections, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_354": {
                "a": {
                    "value": "w",
                    "possible_values": [
                        [
                            "tf.transpose(w_t)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v_",
                    "possible_values": [
                        [
                            "tf.stop_gradient(v_)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.matmul(w_t, u), epsilon=epsilon)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collections_368": {
                "names": {
                    "value": "updates_collections",
                    "possible_values": [
                        [
                            "tf.GraphKeys.UPDATE_OPS",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "update_u",
                    "possible_values": [
                        [
                            "u.assign(u_)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collections_369": {
                "names": {
                    "value": "updates_collections",
                    "possible_values": [
                        [
                            "tf.GraphKeys.UPDATE_OPS",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "update_sigma",
                    "possible_values": [
                        [
                            "sigma.assign(sigma_)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_338": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "matmul_343": {
                "a": {
                    "value": "w_t",
                    "possible_values": [
                        [
                            "tf.reshape(weights, [-1, weights.shape.as_list()[-1]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "u",
                    "possible_values": [
                        [
                            "tf.get_variable('u', shape=[m, 1], dtype=dtype, initializer=u_initializer, trainable=False, collections=u_collections)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_344": {
                "a": {
                    "value": "w",
                    "possible_values": [
                        [
                            "tf.transpose(w_t)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v_",
                    "possible_values": [
                        [
                            "tf.stop_gradient(v_)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.matmul(w_t, u), epsilon=epsilon)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_354": {
                "a": {
                    "value": "u_",
                    "possible_values": [
                        [
                            "tf.stop_gradient(u_)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.matmul(w, v_), epsilon=epsilon)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_350": {
                "value": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_350": {
                "shape": {
                    "value": "[n, 1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "control_dependencies_360": {
                "control_inputs": {
                    "value": "[update_u, update_sigma]",
                    "possible_values": []
                }
            },
            "identity_361": {
                "input": {
                    "value": "sigma_",
                    "possible_values": [
                        [
                            "tf.matmul(tf.transpose(u_), tf.matmul(w, v_))[0, 0]",
                            "Subscript"
                        ],
                        [
                            "utils.smart_cond(is_training, _force_update, lambda : sigma)",
                            "Call"
                        ],
                        [
                            "utils.smart_cond(is_training, lambda : sigma_, lambda : sigma)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tflib/losses/losses.py": {
        "tensorflow": {
            "cast_36": {
                "variable": {
                    "value": "multi_class_labels",
                    "possible_values": []
                },
                "x": {
                    "value": "multi_class_labels",
                    "possible_values": [
                        [
                            "tf.cast(multi_class_labels, logits.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "logits.dtype",
                    "possible_values": []
                }
            },
            "sigmoid_38": {
                "variable": {
                    "value": "p",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "possible_values": []
                }
            },
            "reduce_mean_40": {
                "variable": {
                    "value": "focal_loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-(1 - pt) ** gamma * tf.log(tf.maximum(pt, epsilon))",
                    "possible_values": []
                }
            },
            "get_variable_11": {
                "variable": {
                    "value": "centers",
                    "possible_values": []
                },
                "name": {
                    "value": "centers",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_classes, features.get_shape()[-1]]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "gather_14": {
                "variable": {
                    "value": "centers_batch",
                    "possible_values": []
                },
                "params": {
                    "value": "centers",
                    "possible_values": [
                        [
                            "tf.get_variable('centers', shape=[num_classes, features.get_shape()[-1]], dtype=tf.float32, initializer=tf.constant_initializer(0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "labels",
                    "possible_values": []
                }
            },
            "unique_with_counts_16": {
                "variable": {
                    "value": "(_, unique_idx, unique_count)",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "possible_values": []
                }
            },
            "gather_17": {
                "variable": {
                    "value": "appear_times",
                    "possible_values": []
                },
                "params": {
                    "value": "unique_count",
                    "possible_values": []
                },
                "indices": {
                    "value": "unique_idx",
                    "possible_values": []
                }
            },
            "reshape_18": {
                "variable": {
                    "value": "appear_times",
                    "possible_values": []
                },
                "tensor": {
                    "value": "appear_times",
                    "possible_values": [
                        [
                            "tf.gather(unique_count, unique_idx)",
                            "Call"
                        ],
                        [
                            "tf.reshape(appear_times, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "possible_values": []
                }
            },
            "scatter_sub_21": {
                "variable": {
                    "value": "update_centers",
                    "possible_values": []
                },
                "ref": {
                    "value": "centers",
                    "possible_values": [
                        [
                            "tf.get_variable('centers', shape=[num_classes, features.get_shape()[-1]], dtype=tf.float32, initializer=tf.constant_initializer(0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "labels",
                    "possible_values": []
                },
                "updates": {
                    "value": "diff",
                    "possible_values": [
                        [
                            "centers_batch - features",
                            "BinOp"
                        ],
                        [
                            "diff / tf.cast(1 + appear_times, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "alpha * diff",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_10": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "center_loss",
                    "possible_values": []
                },
                "values": {
                    "value": "[features, labels]",
                    "possible_values": []
                }
            },
            "cast_19": {
                "x": {
                    "value": "1 + appear_times",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "reduce_mean_23": {
                "input_tensor": {
                    "value": "tf.reduce_sum((centers_batch - features) ** 2, axis=-1)",
                    "possible_values": []
                }
            },
            "identity_27": {
                "variable": {
                    "value": "center_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "center_loss",
                    "possible_values": [
                        [
                            "0.5 * tf.reduce_mean(tf.reduce_sum((centers_batch - features) ** 2, axis=-1))",
                            "BinOp"
                        ],
                        [
                            "tf.identity(center_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collections_29": {
                "names": {
                    "value": "updates_collections",
                    "possible_values": [
                        [
                            "tf.GraphKeys.UPDATE_OPS",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "update_centers",
                    "possible_values": [
                        [
                            "tf.scatter_sub(centers, labels, diff)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_40": {
                "x": {
                    "value": "tf.maximum(pt, epsilon)",
                    "possible_values": []
                }
            },
            "constant_initializer_12": {
                "value": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "reduce_sum_23": {
                "input_tensor": {
                    "value": "(centers_batch - features) ** 2",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "control_dependencies_26": {
                "control_inputs": {
                    "value": "[update_centers]",
                    "possible_values": []
                }
            },
            "maximum_40": {
                "x": {
                    "value": "pt",
                    "possible_values": [
                        [
                            "p * multi_class_labels + (1 - p) * (1 - multi_class_labels)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "epsilon",
                    "possible_values": [
                        [
                            "1e-08",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "tflib/metrics/metrics.py": {
        "tensorflow": {
            "variables_initializer_7": {
                "variable": {
                    "value": "reset_op",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.local_variables(sc.name)",
                    "possible_values": []
                }
            },
            "variable_scope_5": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "resettable_metric",
                    "possible_values": []
                }
            },
            "variables_initializer_15": {
                "variable": {
                    "value": "reset_op",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.local_variables(sc.name)",
                    "possible_values": []
                }
            },
            "local_variables_7": {
                "scope": {
                    "value": "sc.name",
                    "possible_values": []
                }
            },
            "variable_scope_13": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "resettable_metric",
                    "possible_values": []
                }
            },
            "local_variables_15": {
                "scope": {
                    "value": "sc.name",
                    "possible_values": []
                }
            }
        }
    },
    "tflib/ops/ops.py": {
        "tensorflow": {
            "to_float_5": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_6": {
                "variable": {
                    "value": "min_val",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_7": {
                "variable": {
                    "value": "max_val",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_13": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_16": {
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "possible_values": [
                        [
                            "[x.shape[i] if shape[i] == 0 else shape[i] for i in range(len(shape))]",
                            "ListComp"
                        ],
                        [
                            "[tf.shape(x)[i] if shape[i] is None else shape[i] for i in range(len(shape))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "maximum_8": {
                "x": {
                    "value": "max_val - min_val",
                    "possible_values": []
                },
                "y": {
                    "value": "epsilon",
                    "possible_values": [
                        [
                            "1e-12",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_15": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.to_float(x)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tflib/utils/collection.py": {
        "tensorflow": {
            "get_collection_56": {
                "variable": {
                    "value": "tensors",
                    "possible_values": []
                },
                "key": {
                    "value": "key",
                    "possible_values": []
                }
            }
        }
    },
    "tflib/utils/distribute.py": {
        "tensorflow": {
            "concat_35": {
                "variable": {
                    "value": "grad",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_36": {
                "variable": {
                    "value": "grad",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "expand_dims_29": {
                "variable": {
                    "value": "expanded_g",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "tflib/utils/utils.py": {
        "tensorflow": {
            "ConfigProto_10": {
                "variable": {
                    "value": "config",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "allow_soft_placement",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "log_device_placement": {
                    "value": "log_device_placement",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Graph_131": {
                "variable": {
                    "value": "g",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_13": {
                "graph": {
                    "value": "graph",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=allow_soft_placement, log_device_placement=log_device_placement)",
                            "Call"
                        ]
                    ]
                }
            },
            "Checkpoint_24": {
                "variable": {
                    "value": "self.checkpoint",
                    "possible_values": []
                }
            },
            "CheckpointManager_25": {
                "variable": {
                    "value": "self.manager",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "self.checkpoint",
                    "possible_values": []
                },
                "directory": {
                    "value": "directory",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "max_to_keep",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "keep_checkpoint_every_n_hours": {
                    "value": "keep_checkpoint_every_n_hours",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_121": {
                "variable": {
                    "value": "counter",
                    "possible_values": []
                },
                "name": {
                    "value": "counter",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(start)",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "assign_125": {
                "variable": {
                    "value": "update_cnt",
                    "possible_values": []
                },
                "ref": {
                    "value": "counter",
                    "possible_values": [
                        [
                            "tf.get_variable(name='counter', initializer=tf.constant_initializer(start), shape=(), dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.add(counter, 1)",
                    "possible_values": []
                }
            },
            "placeholder_133": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, None, None, 3)",
                    "possible_values": []
                },
                "name": {
                    "value": "img",
                    "possible_values": []
                }
            },
            "merge_73": {
                "inputs": {
                    "value": "summaries",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "name_scope_75": {
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'summary'",
                            "MethodArgument"
                        ],
                        [
                            "'summary'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "merge_79": {
                "inputs": {
                    "value": "summaries",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "name_scope_112": {
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'summary'",
                            "MethodArgument"
                        ],
                        [
                            "'summary'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "counter",
                    "possible_values": []
                }
            },
            "add_125": {
                "x": {
                    "value": "counter",
                    "possible_values": [
                        [
                            "tf.get_variable(name='counter', initializer=tf.constant_initializer(start), shape=(), dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "scalar_59": {
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'summary'",
                            "MethodArgument"
                        ],
                        [
                            "'summary'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data": {
                    "value": "data",
                    "possible_values": []
                }
            },
            "scalar_96": {
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'summary'",
                            "MethodArgument"
                        ],
                        [
                            "'summary'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data": {
                    "value": "data",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "possible_values": []
                }
            },
            "constant_initializer_122": {
                "value": {
                    "value": "start",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "scalar_62": {
                "name": {
                    "value": "name + '-mean'",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.reduce_mean(data)",
                    "possible_values": []
                }
            },
            "scalar_64": {
                "name": {
                    "value": "name + '-std'",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.reduce_std(data)",
                    "possible_values": []
                }
            },
            "scalar_66": {
                "name": {
                    "value": "name + '-max'",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.reduce_max(data)",
                    "possible_values": []
                }
            },
            "scalar_68": {
                "name": {
                    "value": "name + '-min'",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.reduce_min(data)",
                    "possible_values": []
                }
            },
            "scalar_70": {
                "name": {
                    "value": "name + '-sparsity'",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.zero_fraction(data)",
                    "possible_values": []
                }
            },
            "histogram_72": {
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'summary'",
                            "MethodArgument"
                        ],
                        [
                            "'summary'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data": {
                    "value": "data",
                    "possible_values": []
                }
            },
            "scalar_99": {
                "name": {
                    "value": "name + '-mean'",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.reduce_mean(data)",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "possible_values": []
                }
            },
            "scalar_101": {
                "name": {
                    "value": "name + '-std'",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.reduce_std(data)",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "possible_values": []
                }
            },
            "scalar_103": {
                "name": {
                    "value": "name + '-max'",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.reduce_max(data)",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "possible_values": []
                }
            },
            "scalar_105": {
                "name": {
                    "value": "name + '-min'",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.reduce_min(data)",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "possible_values": []
                }
            },
            "scalar_107": {
                "name": {
                    "value": "name + '-sparsity'",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.zero_fraction(data)",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "possible_values": []
                }
            },
            "histogram_109": {
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'summary'",
                            "MethodArgument"
                        ],
                        [
                            "'summary'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data": {
                    "value": "data",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "possible_values": []
                }
            },
            "reduce_mean_62": {
                "input_tensor": {
                    "value": "data",
                    "possible_values": []
                }
            },
            "reduce_std_64": {
                "input_tensor": {
                    "value": "data",
                    "possible_values": []
                }
            },
            "reduce_max_66": {
                "input_tensor": {
                    "value": "data",
                    "possible_values": []
                }
            },
            "reduce_min_68": {
                "input_tensor": {
                    "value": "data",
                    "possible_values": []
                }
            },
            "zero_fraction_70": {
                "value": {
                    "value": "data",
                    "possible_values": []
                }
            },
            "reduce_mean_99": {
                "input_tensor": {
                    "value": "data",
                    "possible_values": []
                }
            },
            "reduce_std_101": {
                "input_tensor": {
                    "value": "data",
                    "possible_values": []
                }
            },
            "reduce_max_103": {
                "input_tensor": {
                    "value": "data",
                    "possible_values": []
                }
            },
            "reduce_min_105": {
                "input_tensor": {
                    "value": "data",
                    "possible_values": []
                }
            },
            "zero_fraction_107": {
                "value": {
                    "value": "data",
                    "possible_values": []
                }
            }
        }
    },
    "tfprob/gan/gradient_penalty.py": {
        "tensorflow": {
            "uniform_10": {
                "variable": {
                    "value": "alpha",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "possible_values": [
                        [
                            "[tf.shape(real)[0]] + [1] * (real.shape.ndims - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "minval": {
                    "value": "0",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "uniform_17": {
                "variable": {
                    "value": "beta",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(real)",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "norm_28": {
                "variable": {
                    "value": "norm",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(x, [tf.shape(x)[0], -1])",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_mean_34": {
                "variable": {
                    "value": "gp",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(norm - 1) ** 2",
                    "possible_values": []
                }
            },
            "reduce_mean_40": {
                "variable": {
                    "value": "gp",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "norm ** 2",
                    "possible_values": []
                }
            },
            "reduce_mean_46": {
                "variable": {
                    "value": "gp",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.maximum(norm - 1, 0) ** 2",
                    "possible_values": []
                }
            },
            "constant_65": {
                "variable": {
                    "value": "gp",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "real.dtype",
                    "possible_values": []
                }
            },
            "reshape_28": {
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "sample_fns[sample_mode](real, fake)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(x)[0], -1]",
                    "possible_values": []
                }
            },
            "shape_17": {
                "input": {
                    "value": "real",
                    "possible_values": []
                }
            },
            "maximum_46": {
                "x": {
                    "value": "norm - 1",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "gradients_68": {
                "ys": {
                    "value": "f(x)",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "possible_values": [
                        [
                            "sample_fns[sample_mode](real, fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_9": {
                "input": {
                    "value": "real",
                    "possible_values": []
                }
            },
            "reduce_std_18": {
                "input_tensor": {
                    "value": "real",
                    "possible_values": []
                }
            },
            "shape_28": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "sample_fns[sample_mode](real, fake)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tfprob/gan/loss.py": {
        "tensorflow": {
            "BinaryCrossentropy_5": {
                "variable": {
                    "value": "bce",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MeanSquaredError_46": {
                "variable": {
                    "value": "mse",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reduce_mean_21": {
                "variable": {
                    "value": "r_loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.maximum(1 - r_logit, 0)",
                    "possible_values": []
                }
            },
            "reduce_mean_22": {
                "variable": {
                    "value": "f_loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.maximum(1 + f_logit, 0)",
                    "possible_values": []
                }
            },
            "reduce_mean_26": {
                "variable": {
                    "value": "f_loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.maximum(1 - f_logit, 0)",
                    "possible_values": []
                }
            },
            "reduce_mean_34": {
                "variable": {
                    "value": "r_loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.maximum(1 - r_logit, 0)",
                    "possible_values": []
                }
            },
            "reduce_mean_35": {
                "variable": {
                    "value": "f_loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.maximum(1 + f_logit, 0)",
                    "possible_values": []
                }
            },
            "reduce_mean_39": {
                "variable": {
                    "value": "f_loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-f_logit",
                    "possible_values": []
                }
            },
            "reduce_mean_63": {
                "variable": {
                    "value": "f_loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "f_logit",
                    "possible_values": []
                }
            },
            "ones_like_8": {
                "input": {
                    "value": "r_logit",
                    "possible_values": []
                }
            },
            "zeros_like_9": {
                "input": {
                    "value": "f_logit",
                    "possible_values": []
                }
            },
            "ones_like_13": {
                "input": {
                    "value": "f_logit",
                    "possible_values": []
                }
            },
            "maximum_21": {
                "x": {
                    "value": "1 - r_logit",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "maximum_22": {
                "x": {
                    "value": "1 + f_logit",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "maximum_26": {
                "x": {
                    "value": "1 - f_logit",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "maximum_34": {
                "x": {
                    "value": "1 - r_logit",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "maximum_35": {
                "x": {
                    "value": "1 + f_logit",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "ones_like_49": {
                "input": {
                    "value": "r_logit",
                    "possible_values": []
                }
            },
            "zeros_like_50": {
                "input": {
                    "value": "f_logit",
                    "possible_values": []
                }
            },
            "ones_like_54": {
                "input": {
                    "value": "f_logit",
                    "possible_values": []
                }
            },
            "reduce_mean_62": {
                "input_tensor": {
                    "value": "r_logit",
                    "possible_values": []
                }
            },
            "reduce_mean_67": {
                "input_tensor": {
                    "value": "f_logit",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "placeholder_102": {
                "variable": {
                    "value": "lr",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_119": {
                "variable": {
                    "value": "xa_loss_att",
                    "possible_values": []
                },
                "multi_class_labels": {
                    "value": "a",
                    "possible_values": []
                },
                "logits": {
                    "value": "xa_logit_att",
                    "possible_values": []
                }
            },
            "reduce_sum_120": {
                "variable": {
                    "value": "reg_loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "D.func.reg_losses",
                    "possible_values": []
                }
            },
            "AdamOptimizer_129": {
                "variable": {
                    "value": "step",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[])",
                            "Call"
                        ]
                    ]
                },
                "beta1": {
                    "value": "args.beta_1",
                    "possible_values": []
                }
            },
            "placeholder_160": {
                "variable": {
                    "value": "lr",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_175": {
                "variable": {
                    "value": "xb_loss_att",
                    "possible_values": []
                },
                "multi_class_labels": {
                    "value": "b",
                    "possible_values": [
                        [
                            "tf.random_shuffle(a)",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(a)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "xb_logit_att",
                    "possible_values": []
                }
            },
            "reduce_sum_176": {
                "variable": {
                    "value": "spasity_loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[tf.reduce_mean(m) * w for (m, w) in zip(ms, [1.0, 1.0, 1.0, 1.0, 1.0, 1.0])]",
                    "possible_values": []
                }
            },
            "reduce_sum_178": {
                "variable": {
                    "value": "reg_loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "G.func.reg_losses",
                    "possible_values": []
                }
            },
            "AdamOptimizer_189": {
                "variable": {
                    "value": "step",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[])",
                            "Call"
                        ]
                    ]
                },
                "beta1": {
                    "value": "args.beta_1",
                    "possible_values": []
                }
            },
            "placeholder_226": {
                "variable": {
                    "value": "xa",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, args.crop_size, args.crop_size, 3]",
                    "possible_values": []
                }
            },
            "placeholder_227": {
                "variable": {
                    "value": "a_",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_atts]",
                    "possible_values": []
                }
            },
            "placeholder_228": {
                "variable": {
                    "value": "b_",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_atts]",
                    "possible_values": []
                }
            },
            "create_file_writer_132": {
                "logdir": {
                    "value": "'./output/%s/summaries/D' % args.experiment_name",
                    "possible_values": []
                }
            },
            "create_file_writer_192": {
                "logdir": {
                    "value": "'./output/%s/summaries/G' % args.experiment_name",
                    "possible_values": []
                }
            },
            "global_variables_297": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reduce_mean_176": {
                "input_tensor": {
                    "value": "m",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {
            "reshape_18": {
                "variable": {
                    "value": "b",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "possible_values": [
                        [
                            "tf.reshape(b, [-1, 1, 1, b.shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.tile(b, [1, a_list[0].shape[1], a_list[0].shape[2], 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, b.shape[-1]]",
                    "possible_values": []
                }
            },
            "tile_19": {
                "variable": {
                    "value": "b",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "possible_values": [
                        [
                            "tf.reshape(b, [-1, 1, 1, b.shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.tile(b, [1, a_list[0].shape[1], a_list[0].shape[2], 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, a_list[0].shape[1], a_list[0].shape[2], 1]",
                    "possible_values": []
                }
            },
            "concat_21": {
                "values": {
                    "value": "a_list + b_list",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            }
        }
    }
}