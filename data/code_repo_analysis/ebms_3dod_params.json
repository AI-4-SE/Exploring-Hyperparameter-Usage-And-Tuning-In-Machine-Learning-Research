{
    "3dod/eval.py": {
        "torch": {}
    },
    "3dod/iou3d/iou3d_utils.py": {
        "torch": {
            "max_39": {
                "variable": {
                    "value": "max_of_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_a_height_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(boxes_a[:, 1] - boxes_a[:, 3]).view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_40": {
                "variable": {
                    "value": "min_of_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_a_height_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes_a[:, 1].view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_41": {
                "variable": {
                    "value": "overlaps_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_of_max - max_of_min",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_49": {
                "input": {
                    "value": "vol_a + vol_b - overlaps_3d",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/iou3d/setup.py": {
        "torch": {}
    },
    "3dod/mmdet/core/anchor/anchor_generator.py": {
        "torch": {
            "Tensor_8": {
                "variable": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_9": {
                "variable": {
                    "value": "self.ratios",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_18": {
                "variable": {
                    "value": "base_anchor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_26": {
                "variable": {
                    "value": "h_ratios",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ratios",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_35": {
                "variable": {
                    "value": "base_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_ctr - 0.5 * (ws - 1), y_ctr - 0.5 * (hs - 1), x_ctr + 0.5 * (ws - 1), y_ctr + 0.5 * (hs - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "round_35": {
                "variable": {
                    "value": "base_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_59": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shift_xx, shift_yy, shift_xx, shift_yy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "variable": {
                    "value": "valid_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "feat_w",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "valid_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "feat_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_56": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "feat_w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_57": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "feat_h",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "3dod/mmdet/core/anchor/anchor_target.py": {
        "torch": {
            "zeros_like_33": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_anchors[inside_flags]",
                            "Subscript"
                        ],
                        [
                            "anchors.view(-1, 7)",
                            "Call"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_34": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_anchors[inside_flags]",
                            "Subscript"
                        ],
                        [
                            "anchors.view(-1, 7)",
                            "Call"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "nonzero_79": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels >= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_79": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_24": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_24": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unique_24": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_26": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_26": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unique_26": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/core/bbox/assignment.py": {
        "torch": {
            "arange_149": {
                "variable": {
                    "value": "self_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(gt_labels) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "gt_labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "self.gt_inds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self_inds, self.gt_inds]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "self.max_overlaps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.max_overlaps.new_ones(self.num_gts), self.max_overlaps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "nonzero_73": {
                "variable": {
                    "value": "ignore_bboxes_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ignore_max_overlaps > self.ignore_iof_thr",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_73": {
                "variable": {
                    "value": "ignore_bboxes_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_129": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assigned_gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_129": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_labels, self.labels]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/core/bbox/bbox_target.py": {
        "torch": {
            "cat_28": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_apply(bbox_target_single, pos_bboxes_list, neg_bboxes_list, pos_gt_bboxes_list, pos_gt_labels_list, cfg=cfg, reg_classes=reg_classes, target_means=target_means, target_stds=target_stds)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels, 0)",
                            "Call"
                        ],
                        [
                            "pos_bboxes.new_zeros(num_samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_apply(bbox_target_single, pos_bboxes_list, neg_bboxes_list, pos_gt_bboxes_list, pos_gt_labels_list, cfg=cfg, reg_classes=reg_classes, target_means=target_means, target_stds=target_stds)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_weights, 0)",
                            "Call"
                        ],
                        [
                            "pos_bboxes.new_zeros(num_samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_30": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_apply(bbox_target_single, pos_bboxes_list, neg_bboxes_list, pos_gt_bboxes_list, pos_gt_labels_list, cfg=cfg, reg_classes=reg_classes, target_means=target_means, target_stds=target_stds)",
                            "Call"
                        ],
                        [
                            "torch.cat(bbox_targets, 0)",
                            "Call"
                        ],
                        [
                            "pos_bboxes.new_zeros(num_samples, 7)",
                            "Call"
                        ],
                        [
                            "expand_target(bbox_targets, bbox_weights, labels, reg_classes)",
                            "Call"
                        ],
                        [
                            "bbox_targets",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_apply(bbox_target_single, pos_bboxes_list, neg_bboxes_list, pos_gt_bboxes_list, pos_gt_labels_list, cfg=cfg, reg_classes=reg_classes, target_means=target_means, target_stds=target_stds)",
                            "Call"
                        ],
                        [
                            "torch.cat(bbox_weights, 0)",
                            "Call"
                        ],
                        [
                            "pos_bboxes.new_zeros(num_samples, 7)",
                            "Call"
                        ],
                        [
                            "expand_target(bbox_targets, bbox_weights, labels, reg_classes)",
                            "Call"
                        ],
                        [
                            "bbox_weights",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_73": {
                "input": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_73": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/core/bbox/geometry.py": {
        "torch": {
            "max_33": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[:, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_34": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_48": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_49": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/core/bbox/sampling.py": {
        "torch": {
            "from_numpy_20": {
                "variable": {
                    "value": "rand_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cands[:num]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(rand_inds).long().to(gallery.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_26": {
                "variable": {
                    "value": "gt_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(gt_bboxes).to(bboxes.device)",
                            "Call"
                        ],
                        [
                            "gt_bboxes",
                            "Method Argument"
                        ],
                        [
                            "gt_bboxes",
                            "Method Argument"
                        ],
                        [
                            "gt_bboxes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_28": {
                "variable": {
                    "value": "gt_bboxes_ignore",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_bboxes_ignore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(gt_bboxes_ignore).to(bboxes.device)",
                            "Call"
                        ],
                        [
                            "gt_bboxes_ignore",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_30": {
                "variable": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(gt_labels).to(bboxes.device)",
                            "Call"
                        ],
                        [
                            "gt_labels",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "nonzero_81": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_124": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_bboxes, bboxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "gt_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bboxes.new_ones((gt_bboxes.shape[0],), dtype=torch.uint8), gt_flags]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_238": {
                "tensors": {
                    "value": "[self.pos_bboxes, self.neg_bboxes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_242": {
                "tensors": {
                    "value": "[self.pos_overs, self.neg_overs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_89": {
                "variable": {
                    "value": "unique_gt_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds[pos_inds].cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(sampled_inds)",
                            "Call"
                        ],
                        [
                            "torch.cat([sampled_inds, extra_inds])",
                            "Call"
                        ],
                        [
                            "random_choice(sampled_inds, num_expected)",
                            "Call"
                        ],
                        [
                            "np.concatenate((sampled_easy_inds, sampled_hard_inds))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sampled_inds).long().to(assign_result.gt_inds.device)",
                            "Call"
                        ],
                        [
                            "np.concatenate((sampled_inds, extra_inds))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_164": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(sampled_inds)",
                            "Call"
                        ],
                        [
                            "torch.cat([sampled_inds, extra_inds])",
                            "Call"
                        ],
                        [
                            "random_choice(sampled_inds, num_expected)",
                            "Call"
                        ],
                        [
                            "np.concatenate((sampled_easy_inds, sampled_hard_inds))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sampled_inds).long().to(assign_result.gt_inds.device)",
                            "Call"
                        ],
                        [
                            "np.concatenate((sampled_inds, extra_inds))",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_95": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == i.item()",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_110": {
                "variable": {
                    "value": "extra_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "extra_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(list(set(pos_inds.cpu()) - set(sampled_inds.cpu())))",
                            "Call"
                        ],
                        [
                            "random_choice(extra_inds, num_extra)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(extra_inds).to(assign_result.gt_inds.device).long()",
                            "Call"
                        ],
                        [
                            "np.array(list(neg_set - set(sampled_inds)))",
                            "Call"
                        ],
                        [
                            "random_choice(extra_inds, num_extra)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_112": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sampled_inds, extra_inds]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/core/bbox/transforms.py": {
        "torch": {
            "split_8": {
                "variable": {
                    "value": "(xa, ya, za, wa, la, ha, ra)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_9": {
                "variable": {
                    "value": "(xg, yg, zg, wg, lg, hg, rg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_10": {
                "variable": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "la ** 2 + wa ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_14": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lg / la",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_15": {
                "variable": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wg / wa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_16": {
                "variable": {
                    "value": "ht",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hg / ha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_18": {
                "variable": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xt, yt, zt, wt, lt, ht, rt]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_22": {
                "variable": {
                    "value": "(xa, ya, za, wa, la, ha, ra)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_23": {
                "variable": {
                    "value": "(xt, yt, zt, wt, lt, ht, rt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([xt, yt, zt, wt, lt, ht, rt], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack([dx, dy, dw, dh], dim=-1)",
                            "Call"
                        ],
                        [
                            "deltas.sub_(means).div_(stds)",
                            "Call"
                        ],
                        [
                            "deltas",
                            "Method Argument"
                        ],
                        [
                            "deltas",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_25": {
                "variable": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "la ** 2 + wa ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(boxes1[..., :-1], rad_pred_encoding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "boxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(boxes2[..., :-1], rad_tg_encoding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_61": {
                "variable": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gw / pw",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_62": {
                "variable": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gh / ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_63": {
                "variable": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dx, dy, dw, dh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "addcmul_94": {
                "variable": {
                    "value": "gx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "px",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(proposals[..., 0] + proposals[..., 2]) * 0.5",
                            "BinOp"
                        ],
                        [
                            "((rois[:, 0] + rois[:, 2]) * 0.5).unsqueeze(1).expand_as(dx)",
                            "Call"
                        ]
                    ]
                },
                "tensor1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals[..., 2] - proposals[..., 0] + 1.0",
                            "BinOp"
                        ],
                        [
                            "(rois[:, 2] - rois[:, 0] + 1.0).unsqueeze(1).expand_as(dw)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(gx - px) / pw",
                            "BinOp"
                        ],
                        [
                            "denorm_deltas[:, 0::4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "addcmul_95": {
                "variable": {
                    "value": "gy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "py",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(proposals[..., 1] + proposals[..., 3]) * 0.5",
                            "BinOp"
                        ],
                        [
                            "((rois[:, 1] + rois[:, 3]) * 0.5).unsqueeze(1).expand_as(dy)",
                            "Call"
                        ]
                    ]
                },
                "tensor1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals[..., 3] - proposals[..., 1] + 1.0",
                            "BinOp"
                        ],
                        [
                            "(rois[:, 3] - rois[:, 1] + 1.0).unsqueeze(1).expand_as(dh)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "dy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(gy - py) / ph",
                            "BinOp"
                        ],
                        [
                            "denorm_deltas[:, 1::4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_105": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rois_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_168": {
                "variable": {
                    "value": "img_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois[:, 0].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rois_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_220": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_221": {
                "variable": {
                    "value": "voxel_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_34": {
                "tensors": {
                    "value": "[xg, yg, zg, wg, lg, hg, rg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_29": {
                "input": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(lg / la)",
                            "Call"
                        ],
                        [
                            "torch.split(deltas, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_30": {
                "input": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(wg / wa)",
                            "Call"
                        ],
                        [
                            "torch.split(deltas, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_31": {
                "input": {
                    "value": "ht",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(hg / ha)",
                            "Call"
                        ],
                        [
                            "torch.split(deltas, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_37": {
                "input": {
                    "value": "boxes1[..., -1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_37": {
                "input": {
                    "value": "boxes2[..., -1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_39": {
                "input": {
                    "value": "boxes1[..., -1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_39": {
                "input": {
                    "value": "boxes2[..., -1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_inds, bboxes[:, :4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_inds, rois3d]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/core/bbox3d/box_coders.py": {
        "torch": {
            "split_51": {
                "variable": {
                    "value": "(xa, ya, za, wa, la, ha, ra)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors[..., [0, 1, 3, 4, 6]]",
                            "Subscript"
                        ],
                        [
                            "anchors[..., [0, 1, 3, 4, 6]]",
                            "Subscript"
                        ],
                        [
                            "center_to_corner_box3d(anchors)",
                            "Call"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_61": {
                "variable": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "la ** 2 + wa ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_53": {
                "variable": {
                    "value": "(xt, yt, zt, wt, lt, ht, rtx, rty)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_57": {
                "variable": {
                    "value": "(xt, yt, zt, wt, lt, ht, rt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_75": {
                "variable": {
                    "value": "rax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.split(anchors, 7, axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "np.split(anchors, 5, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.split(anchors, 5, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_76": {
                "variable": {
                    "value": "ray",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.split(anchors, 7, axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "np.split(anchors, 5, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.split(anchors, 5, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "atan2_79": {
                "variable": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sin(rg)",
                            "Call"
                        ],
                        [
                            "rty + ray",
                            "BinOp"
                        ],
                        [
                            "np.sin(rg)",
                            "Call"
                        ],
                        [
                            "rty + ray",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "rgx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.cos(rg)",
                            "Call"
                        ],
                        [
                            "rtx + rax",
                            "BinOp"
                        ],
                        [
                            "np.cos(rg)",
                            "Call"
                        ],
                        [
                            "rtx + rax",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_83": {
                "tensors": {
                    "value": "[xg, yg, zg, wg, lg, hg, rg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_71": {
                "input": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lg / la - 1",
                            "BinOp"
                        ],
                        [
                            "np.log(lg / la)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "lg / la - 1",
                            "BinOp"
                        ],
                        [
                            "np.log(lg / la)",
                            "Call"
                        ],
                        [
                            "np.split(box_encodings, 6, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.split(box_encodings, 5, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_72": {
                "input": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wg / wa - 1",
                            "BinOp"
                        ],
                        [
                            "np.log(wg / wa)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "wg / wa - 1",
                            "BinOp"
                        ],
                        [
                            "np.log(wg / wa)",
                            "Call"
                        ],
                        [
                            "np.split(box_encodings, 6, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.split(box_encodings, 5, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_73": {
                "input": {
                    "value": "ht",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hg / ha - 1",
                            "BinOp"
                        ],
                        [
                            "np.log(hg / ha)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "3dod/mmdet/core/bbox3d/target_ops.py": {
        "torch": {
            "empty_180": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_inside,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "gt_boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_181": {
                "variable": {
                    "value": "gt_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_inside,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "gt_boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_249": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_inside, box_code_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "all_anchors.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "gt_boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_256": {
                "variable": {
                    "value": "bbox_outside_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_inside,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "all_anchors.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "gt_boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_177": {
                "variable": {
                    "value": "gt_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[gt_boxes.shape[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "gt_boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_218": {
                "variable": {
                    "value": "bg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_inside",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(inds_inside) if inds_inside is not None else total_anchors",
                            "IfExp"
                        ],
                        [
                            "len(torch.nonzero(anchor_mask)) if anchor_mask is not None else total_anchors",
                            "IfExp"
                        ]
                    ]
                }
            },
            "sum_260": {
                "variable": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_221": {
                "input": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_174": {
                "input": {
                    "value": "anchor_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchor_mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "nonzero_203": {
                "input": {
                    "value": "anchor_by_gt_overlap == gt_to_anchor_max",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_216": {
                "input": {
                    "value": "anchor_to_gt_max < unmatched_threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "arange_189": {
                "start": {
                    "value": "num_inside",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(inds_inside) if inds_inside is not None else total_anchors",
                            "IfExp"
                        ],
                        [
                            "len(torch.nonzero(anchor_mask)) if anchor_mask is not None else total_anchors",
                            "IfExp"
                        ]
                    ]
                }
            },
            "arange_196": {
                "start": {
                    "value": "anchor_by_gt_overlap.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_231": {
                "condition": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/core/evaluation/eval_hooks.py": {
        "torch": {
            "DataLoader_201": {
                "variable": {
                    "value": "self.dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.merge_second_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/core/evaluation/loss/losses.py": {
        "torch": {
            "nll_loss_9": {
                "variable": {
                    "value": "raw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_16": {
                "variable": {
                    "value": "raw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_70": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_79": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_80": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "diff < beta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * diff * diff / beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "diff - 0.5 * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_100": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_42": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.type_as(pred)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_72": {
                "input": {
                    "value": "pred_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred[inds, label].squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.type_as(pred)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_8": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_10": {
                "input": {
                    "value": "raw * weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_15": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_25": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_26": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "label.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_96": {
                "input": {
                    "value": "loss * weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_114": {
                "input": {
                    "value": "loss * weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_18": {
                "input": {
                    "value": "raw * weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_62": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_94": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_112": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/core/loss/losses.py": {
        "torch": {
            "nll_loss_9": {
                "variable": {
                    "value": "raw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_16": {
                "variable": {
                    "value": "raw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_70": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_79": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_80": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "diff < beta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * diff * diff / beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "diff - 0.5 * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_100": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_42": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.type_as(pred)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_72": {
                "input": {
                    "value": "pred_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred[inds, label].squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.type_as(pred)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_8": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_10": {
                "input": {
                    "value": "raw * weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_15": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_25": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_26": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "label.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_96": {
                "input": {
                    "value": "loss * weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_114": {
                "input": {
                    "value": "loss * weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_18": {
                "input": {
                    "value": "raw * weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_62": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_94": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_112": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/core/mask/mask_target.py": {
        "torch": {
            "cat_11": {
                "variable": {
                    "value": "mask_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(mask_targets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "variable": {
                    "value": "mask_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(mask_targets)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/core/post_processing/bbox_nms.py": {
        "torch": {
            "topk_12": {
                "variable": {
                    "value": "(scores, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(scores, k=pre_max_size)",
                            "Call"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "pre_max_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(num_keeped_scores, pre_max_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_16": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/core/post_processing/merge_augs.py": {
        "torch": {
            "cat_29": {
                "variable": {
                    "value": "aug_proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "recovered_proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_58": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "recovered_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_58": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_62": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "aug_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aug_scores",
                            "Method Argument"
                        ],
                        [
                            "aug_scores",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_62": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_69": {
                "input": {
                    "value": "torch.stack(aug_scores)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_69": {
                "tensors": {
                    "value": "aug_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aug_scores",
                            "Method Argument"
                        ],
                        [
                            "aug_scores",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "3dod/mmdet/core/utils/dist_utils.py": {
        "torch": {}
    },
    "3dod/mmdet/core/utils/misc.py": {
        "torch": {
            "synchronize_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/datasets/concat_dataset.py": {
        "torch": {}
    },
    "3dod/mmdet/datasets/custom.py": {
        "torch": {}
    },
    "3dod/mmdet/datasets/kitti.py": {
        "torch": {}
    },
    "3dod/mmdet/datasets/loader/build_loader.py": {
        "torch": {
            "DataLoader_34": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imgs_per_gpu",
                            "variable"
                        ],
                        [
                            "num_gpus * imgs_per_gpu",
                            "BinOp"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedGroupSampler(dataset, imgs_per_gpu, world_size, rank)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "GroupSampler(dataset, imgs_per_gpu)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "workers_per_gpu",
                            "variable"
                        ],
                        [
                            "num_gpus * workers_per_gpu",
                            "BinOp"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "partial(collate, samples_per_gpu=imgs_per_gpu)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/datasets/loader/sampler.py": {
        "torch": {
            "from_numpy_43": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(indices)",
                            "Call"
                        ],
                        [
                            "[indices[i * self.samples_per_gpu:(i + 1) * self.samples_per_gpu] for i in np.random.permutation(range(len(indices) // self.samples_per_gpu))]",
                            "ListComp"
                        ],
                        [
                            "np.concatenate(indices)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indices).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[indices[j] for i in list(torch.randperm(len(indices) // self.samples_per_gpu, generator=g)) for j in range(i * self.samples_per_gpu, (i + 1) * self.samples_per_gpu)]",
                            "ListComp"
                        ],
                        [
                            "indices[offset:offset + self.num_samples]",
                            "Subscript"
                        ],
                        [
                            "indices + indice",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Generator_94": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_115": {
                "n": {
                    "value": "len(indices) // self.samples_per_gpu",
                    "type": "BinOp",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_102": {
                "n": {
                    "value": "int(size)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "3dod/mmdet/datasets/transforms.py": {
        "torch": {
            "from_numpy_113": {
                "ndarray": {
                    "value": "args[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_115": {
                "ndarray": {
                    "value": "np.array(array)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/datasets/utils.py": {
        "torch": {
            "from_numpy_25": {
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "3dod/mmdet/models/backbones/pillar.py": {
        "torch": {
            "relu_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear(inputs)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1).contiguous()).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_73": {
                "variable": {
                    "value": "self.pfn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "pfn_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_like_92": {
                "variable": {
                    "value": "f_center",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features[:, :, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features_ls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[features, f_cluster, f_center]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_107": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_paddings_indicator(num_voxels, voxel_count, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, -1).type_as(features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_157": {
                "variable": {
                    "value": "batch_canvas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_canvas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(batch_canvas, 0)",
                            "Call"
                        ],
                        [
                            "batch_canvas.view(batch_size, self.nchannels, self.ny, self.nx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "x_concatenated",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_repeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_99": {
                "variable": {
                    "value": "points_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features[:, :, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "canvas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.nchannels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nx * self.ny",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "voxel_features.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "voxel_features.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_35": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear(inputs)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1).contiguous()).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/models/backbones/resnet.py": {
        "torch": {
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilations[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilations[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64 * 2 ** i",
                            "BinOp"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_36": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64 * 2 ** i",
                            "BinOp"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_86": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64 * 2 ** i",
                            "BinOp"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv1_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "stride",
                            "variable"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64 * 2 ** i",
                            "BinOp"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64 * 2 ** i",
                            "BinOp"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv2_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilations[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilations[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64 * 2 ** i",
                            "BinOp"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_98": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64 * 2 ** i",
                            "BinOp"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64 * 2 ** i",
                            "BinOp"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_101": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_102": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_151": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_236": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_238": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_239": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_240": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_158": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/models/backbones/vxnet.py": {
        "torch": {
            "relu_28": {
                "variable": {
                    "value": "pointwise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear(inputs)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1).contiguous()).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.vfe1(features)",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.vfe2(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1).contiguous()).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_35": {
                "variable": {
                    "value": "concatenated",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pointwise, repeated]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_84": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_paddings_indicator(num_voxels, voxel_count, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, -1).type_as(features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear(inputs)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1).contiguous()).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.vfe1(features)",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.vfe2(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1).contiguous()).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_77": {
                "variable": {
                    "value": "points_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features[:, :, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features, features_relative, points_dist]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features, features_relative]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_31": {
                "input": {
                    "value": "pointwise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_96": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear(inputs)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1).contiguous()).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.vfe1(features)",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.vfe2(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1).contiguous()).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/models/bbox_heads/bbox_head.py": {
        "torch": {
            "cat_79": {
                "variable": {
                    "value": "iou_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.overs for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "clamp_84": {
                "variable": {
                    "value": "soft_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * iou_targets - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_38": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "roi_feat_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.fc_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels * (self.roi_feat_size * self.roi_feat_size)",
                            "BinOp"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "81",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.fc_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels * (self.roi_feat_size * self.roi_feat_size)",
                            "BinOp"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7 if reg_class_agnostic else 7 * num_classes",
                            "IfExp"
                        ]
                    ]
                }
            },
            "nonzero_113": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois[:, 0] == i",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_113": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_122": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores[inds, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(scores).view(-1)",
                            "Call"
                        ],
                        [
                            "scores[select]",
                            "Subscript"
                        ],
                        [
                            "scores[keep]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "nonzero_167": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois[:, 0] == i",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_167": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/models/bbox_heads/convfc_bbox_head.py": {
        "torch": {
            "ReLU_70": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_90": {
                "variable": {
                    "value": "branch_convs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_105": {
                "variable": {
                    "value": "branch_fcs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_185": {
                "variable": {
                    "value": "self.shared_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_layer_dim if i == 0 else self.fc_out_channels",
                            "IfExp"
                        ],
                        [
                            "in_channels * roi_feat_size[0] * roi_feat_size[1]",
                            "BinOp"
                        ],
                        [
                            "in_channels * roi_feat_size * roi_feat_size",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "fc_out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_186": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.fc_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.cls_last_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.fc_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.reg_last_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7 if self.reg_class_agnostic else 7 * self.num_classes",
                            "IfExp"
                        ],
                        [
                            "reg_dim if self.reg_class_agnostic else reg_dim * self.num_classes",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_189": {
                "variable": {
                    "value": "self.fc_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_193": {
                "variable": {
                    "value": "self.fc_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7 if self.reg_class_agnostic else 7 * self.num_classes",
                            "IfExp"
                        ],
                        [
                            "reg_dim if self.reg_class_agnostic else reg_dim * self.num_classes",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_116": {
                "in_features": {
                    "value": "fc_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_layer_dim if i == 0 else self.fc_out_channels",
                            "IfExp"
                        ],
                        [
                            "in_channels * roi_feat_size[0] * roi_feat_size[1]",
                            "BinOp"
                        ],
                        [
                            "in_channels * roi_feat_size * roi_feat_size",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.fc_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/models/builder.py": {
        "torch": {
            "Sequential_21": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/models/detectors/base.py": {
        "torch": {}
    },
    "3dod/mmdet/models/detectors/pointpillars.py": {
        "torch": {
            "cat_53": {
                "variable": {
                    "value": "ret[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "elems",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_args.items()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "ret[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "coors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_57": {
                "variable": {
                    "value": "coor_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coor in enumerate(elems)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[1, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in enumerate(elems)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_68": {
                "variable": {
                    "value": "ret[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "elems",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_args.items()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/models/detectors/single_stage.py": {
        "torch": {
            "zeros_68": {
                "variable": {
                    "value": "stds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(7, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "stds4",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(7, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_39": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "num_components",
                    "type": "variable",
                    "possible_values": [
                        [
                            "std.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "std.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "high": {
                    "value": "(num_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_57": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "num_components",
                    "type": "variable",
                    "possible_values": [
                        [
                            "std.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "std.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "high": {
                    "value": "(num_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_130": {
                "variable": {
                    "value": "(xg, yg, wg, lg, rg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_136": {
                "variable": {
                    "value": "cosTheta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(box, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "rg.unsqueeze_(-1).expand(N, *window_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_137": {
                "variable": {
                    "value": "sinTheta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(box, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "rg.unsqueeze_(-1).expand(N, *window_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_167": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grid_sample_164": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "grid",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_20": {
                "input": {
                    "value": "-0.5 * (x / std) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_43": {
                "*size": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "std.numel() // num_components",
                            "BinOp"
                        ],
                        [
                            "std.numel() // num_components",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_46": {
                "input": {
                    "value": "x_centered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "std_samp * torch.randn(num_samples, num_dims)",
                            "BinOp"
                        ],
                        [
                            "beta * std_samp * torch.randn(num_samples, num_dims)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_61": {
                "*size": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "std.numel() // num_components",
                            "BinOp"
                        ],
                        [
                            "std.numel() // num_components",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_64": {
                "input": {
                    "value": "x_centered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "std_samp * torch.randn(num_samples, num_dims)",
                            "BinOp"
                        ],
                        [
                            "beta * std_samp * torch.randn(num_samples, num_dims)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linspace_139": {
                "start": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "window_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_140": {
                "start": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "window_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_238": {
                "variable": {
                    "value": "self.ebm_fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_258": {
                "variable": {
                    "value": "ret[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "elems",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_args.items()",
                            "Call"
                        ],
                        [
                            "batch_args.items()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_457": {
                "variable": {
                    "value": "ys_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ys_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_463": {
                "variable": {
                    "value": "y_samples_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_samples_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_467": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys_features, y_samples_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_471": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ebm_fc1(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_473": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ebm_fc2(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_493": {
                "variable": {
                    "value": "q_ys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_ys_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_497": {
                "variable": {
                    "value": "q_y_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_y_samples_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_530": {
                "variable": {
                    "value": "exp_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[exp_vals_0.unsqueeze(1), exp_vals_samples]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_539": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_955": {
                "variable": {
                    "value": "self.ebm_fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_960": {
                "variable": {
                    "value": "self.z_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_961": {
                "variable": {
                    "value": "self.z_fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_963": {
                "variable": {
                    "value": "self.h_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_964": {
                "variable": {
                    "value": "self.h_fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_981": {
                "variable": {
                    "value": "ret[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "elems",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_args.items()",
                            "Call"
                        ],
                        [
                            "batch_args.items()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1197": {
                "variable": {
                    "value": "ys_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ys_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1201": {
                "variable": {
                    "value": "y_samples_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_samples_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1205": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys_features, y_samples_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_1209": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ebm_fc1(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_1211": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ebm_fc2(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1231": {
                "variable": {
                    "value": "q_ys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_ys_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1235": {
                "variable": {
                    "value": "q_y_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_y_samples_list_long",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1268": {
                "variable": {
                    "value": "exp_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[exp_vals_0.unsqueeze(1), exp_vals_samples]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_1277": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "ret[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "coors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_415": {
                "variable": {
                    "value": "ys_pixel_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys_pixel_xs.unsqueeze(3), ys_pixel_ys.unsqueeze(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_427": {
                "variable": {
                    "value": "y_samples_pixel_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_samples_pixel_xs.unsqueeze(3), y_samples_pixel_ys.unsqueeze(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_741": {
                "variable": {
                    "value": "ys_pixel_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys_pixel_xs.unsqueeze(3), ys_pixel_ys.unsqueeze(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_768": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ebm_fc1(ys_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_770": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ebm_fc2(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_990": {
                "variable": {
                    "value": "ret[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "coors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1136": {
                "variable": {
                    "value": "ys_pixel_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys_pixel_xs.unsqueeze(3), ys_pixel_ys.unsqueeze(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_1151": {
                "variable": {
                    "value": "z_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.z_fc1(ys_list[i][:, 2].unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_1152": {
                "variable": {
                    "value": "z_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.z_fc2(z_feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_1154": {
                "variable": {
                    "value": "h_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h_fc1(ys_list[i][:, 5].unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_1155": {
                "variable": {
                    "value": "h_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h_fc2(h_feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1157": {
                "variable": {
                    "value": "ys_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys_features, z_feature, h_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1502": {
                "variable": {
                    "value": "ys_pixel_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys_pixel_xs.unsqueeze(3), ys_pixel_ys.unsqueeze(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_1528": {
                "variable": {
                    "value": "z_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.z_fc1(bboxes_init[:, 2].unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_1529": {
                "variable": {
                    "value": "z_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.z_fc2(z_feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_1531": {
                "variable": {
                    "value": "h_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h_fc1(bboxes_init[:, 5].unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_1532": {
                "variable": {
                    "value": "h_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h_fc2(h_feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1534": {
                "variable": {
                    "value": "ys_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys_features, z_feature, h_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_1537": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ebm_fc1(ys_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_1539": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ebm_fc2(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_262": {
                "variable": {
                    "value": "coor_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coor in enumerate(elems)",
                            "Call"
                        ],
                        [
                            "coor in enumerate(elems)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[1, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in enumerate(elems)",
                            "Call"
                        ],
                        [
                            "i in range(batch_size)",
                            "Call"
                        ],
                        [
                            "i in range(batch_size)",
                            "Call"
                        ],
                        [
                            "i in range(batch_size)",
                            "Call"
                        ],
                        [
                            "i in range(batch_size)",
                            "Call"
                        ],
                        [
                            "i in range(len(det_bboxes))",
                            "Call"
                        ],
                        [
                            "i in range(len(bboxes))",
                            "Call"
                        ],
                        [
                            "i in enumerate(elems)",
                            "Call"
                        ],
                        [
                            "i in range(batch_size)",
                            "Call"
                        ],
                        [
                            "i in range(batch_size)",
                            "Call"
                        ],
                        [
                            "i in range(len(det_bboxes))",
                            "Call"
                        ],
                        [
                            "i in range(len(bboxes))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_273": {
                "variable": {
                    "value": "ret[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "elems",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_args.items()",
                            "Call"
                        ],
                        [
                            "batch_args.items()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_528": {
                "input": {
                    "value": "p_N_0 + 0.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_529": {
                "input": {
                    "value": "p_N_samples + 0.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_531": {
                "input": {
                    "value": "exp_vals_0 - torch.logsumexp(exp_vals, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_614": {
                "variable": {
                    "value": "ys_pixel_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys_pixel_xs.unsqueeze(3), ys_pixel_ys.unsqueeze(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_644": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ebm_fc1(ys_features_list[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_646": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ebm_fc2(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_696": {
                "ndarray": {
                    "value": "det_bboxes[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_716": {
                "*size": {
                    "value": "bboxes_i.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_761": {
                "variable": {
                    "value": "ys_feature_maps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ys_feature_maps_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_808": {
                "variable": {
                    "value": "ys_pixel_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys_pixel_xs.unsqueeze(3), ys_pixel_ys.unsqueeze(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_835": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ebm_fc1(ys_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_837": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ebm_fc2(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_985": {
                "variable": {
                    "value": "coor_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coor in enumerate(elems)",
                            "Call"
                        ],
                        [
                            "coor in enumerate(elems)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[1, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in enumerate(elems)",
                            "Call"
                        ],
                        [
                            "i in range(batch_size)",
                            "Call"
                        ],
                        [
                            "i in range(batch_size)",
                            "Call"
                        ],
                        [
                            "i in range(batch_size)",
                            "Call"
                        ],
                        [
                            "i in range(batch_size)",
                            "Call"
                        ],
                        [
                            "i in range(len(det_bboxes))",
                            "Call"
                        ],
                        [
                            "i in range(len(bboxes))",
                            "Call"
                        ],
                        [
                            "i in enumerate(elems)",
                            "Call"
                        ],
                        [
                            "i in range(batch_size)",
                            "Call"
                        ],
                        [
                            "i in range(batch_size)",
                            "Call"
                        ],
                        [
                            "i in range(len(det_bboxes))",
                            "Call"
                        ],
                        [
                            "i in range(len(bboxes))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_996": {
                "variable": {
                    "value": "ret[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "elems",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_args.items()",
                            "Call"
                        ],
                        [
                            "batch_args.items()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1170": {
                "variable": {
                    "value": "y_samples_pixel_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_samples_pixel_xs.unsqueeze(3), y_samples_pixel_ys.unsqueeze(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_1183": {
                "variable": {
                    "value": "z_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.z_fc1(y_samples_list[i][k, :, 2].unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_1184": {
                "variable": {
                    "value": "z_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.z_fc2(z_feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_1186": {
                "variable": {
                    "value": "h_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h_fc1(y_samples_list[i][k, :, 5].unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_1187": {
                "variable": {
                    "value": "h_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h_fc2(h_feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1189": {
                "variable": {
                    "value": "y_samples_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_samples_features, z_feature, h_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_1266": {
                "input": {
                    "value": "p_N_0 + 0.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_1267": {
                "input": {
                    "value": "p_N_samples + 0.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_1269": {
                "input": {
                    "value": "exp_vals_0 - torch.logsumexp(exp_vals, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_1456": {
                "ndarray": {
                    "value": "det_bboxes[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_1476": {
                "*size": {
                    "value": "bboxes_i.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1522": {
                "variable": {
                    "value": "ys_feature_maps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ys_feature_maps_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1573": {
                "variable": {
                    "value": "ys_pixel_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys_pixel_xs.unsqueeze(3), ys_pixel_ys.unsqueeze(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_1599": {
                "variable": {
                    "value": "z_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.z_fc1(bboxes_refined[:, 2].unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_1600": {
                "variable": {
                    "value": "z_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.z_fc2(z_feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_1602": {
                "variable": {
                    "value": "h_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h_fc1(bboxes_refined[:, 5].unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_1603": {
                "variable": {
                    "value": "h_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h_fc2(h_feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1605": {
                "variable": {
                    "value": "ys_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys_features, z_feature, h_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_1608": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ebm_fc1(ys_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_1610": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ebm_fc2(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_377": {
                "input": {
                    "value": "y_samples[:, :, 3:6] - min_hwl",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_379": {
                "*size": {
                    "value": "y_samples.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "y_samples.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_380": {
                "*size": {
                    "value": "ys_list[i].size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_634": {
                "variable": {
                    "value": "ys_feature_maps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ys_feature_maps_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_786": {
                "outputs": {
                    "value": "fs.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bboxes_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bboxes_i.clone().detach()",
                            "Call"
                        ],
                        [
                            "bboxes_i.clone().detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_794": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_828": {
                "variable": {
                    "value": "ys_feature_maps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ys_feature_maps_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_1100": {
                "input": {
                    "value": "y_samples[:, :, 3:6] - min_hwl",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_1102": {
                "*size": {
                    "value": "y_samples.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "y_samples.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_1103": {
                "*size": {
                    "value": "ys_list[i].size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_1553": {
                "outputs": {
                    "value": "fs.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bboxes_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bboxes_i.clone().detach()",
                            "Call"
                        ],
                        [
                            "bboxes_i.clone().detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_1559": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1593": {
                "variable": {
                    "value": "ys_feature_maps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ys_feature_maps_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_521": {
                "input": {
                    "value": "ys_fs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fs[0:ys_features.size(0)]",
                            "Subscript"
                        ],
                        [
                            "fs[0:ys_features.size(0)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_521": {
                "input": {
                    "value": "ys_fs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fs[0:ys_features.size(0)]",
                            "Subscript"
                        ],
                        [
                            "fs[0:ys_features.size(0)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_521": {
                "input": {
                    "value": "ys_fs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fs[0:ys_features.size(0)]",
                            "Subscript"
                        ],
                        [
                            "fs[0:ys_features.size(0)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_522": {
                "input": {
                    "value": "y_samples_fs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fs[ys_features.size(0):]",
                            "Subscript"
                        ],
                        [
                            "y_samples_fs.view(-1, self.num_samples)",
                            "Call"
                        ],
                        [
                            "fs[ys_features.size(0):]",
                            "Subscript"
                        ],
                        [
                            "y_samples_fs.view(-1, self.num_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_522": {
                "input": {
                    "value": "y_samples_fs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fs[ys_features.size(0):]",
                            "Subscript"
                        ],
                        [
                            "y_samples_fs.view(-1, self.num_samples)",
                            "Call"
                        ],
                        [
                            "fs[ys_features.size(0):]",
                            "Subscript"
                        ],
                        [
                            "y_samples_fs.view(-1, self.num_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_522": {
                "input": {
                    "value": "y_samples_fs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fs[ys_features.size(0):]",
                            "Subscript"
                        ],
                        [
                            "y_samples_fs.view(-1, self.num_samples)",
                            "Call"
                        ],
                        [
                            "fs[ys_features.size(0):]",
                            "Subscript"
                        ],
                        [
                            "y_samples_fs.view(-1, self.num_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "logsumexp_531": {
                "input": {
                    "value": "exp_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([exp_vals_0.unsqueeze(1), exp_vals_samples], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([exp_vals_0.unsqueeze(1), exp_vals_samples], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1259": {
                "input": {
                    "value": "ys_fs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fs[0:ys_features.size(0)]",
                            "Subscript"
                        ],
                        [
                            "fs[0:ys_features.size(0)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_1259": {
                "input": {
                    "value": "ys_fs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fs[0:ys_features.size(0)]",
                            "Subscript"
                        ],
                        [
                            "fs[0:ys_features.size(0)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_1259": {
                "input": {
                    "value": "ys_fs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fs[0:ys_features.size(0)]",
                            "Subscript"
                        ],
                        [
                            "fs[0:ys_features.size(0)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_1260": {
                "input": {
                    "value": "y_samples_fs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fs[ys_features.size(0):]",
                            "Subscript"
                        ],
                        [
                            "y_samples_fs.view(-1, self.num_samples)",
                            "Call"
                        ],
                        [
                            "fs[ys_features.size(0):]",
                            "Subscript"
                        ],
                        [
                            "y_samples_fs.view(-1, self.num_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_1260": {
                "input": {
                    "value": "y_samples_fs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fs[ys_features.size(0):]",
                            "Subscript"
                        ],
                        [
                            "y_samples_fs.view(-1, self.num_samples)",
                            "Call"
                        ],
                        [
                            "fs[ys_features.size(0):]",
                            "Subscript"
                        ],
                        [
                            "y_samples_fs.view(-1, self.num_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_1260": {
                "input": {
                    "value": "y_samples_fs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fs[ys_features.size(0):]",
                            "Subscript"
                        ],
                        [
                            "y_samples_fs.view(-1, self.num_samples)",
                            "Call"
                        ],
                        [
                            "fs[ys_features.size(0):]",
                            "Subscript"
                        ],
                        [
                            "y_samples_fs.view(-1, self.num_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "logsumexp_1269": {
                "input": {
                    "value": "exp_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([exp_vals_0.unsqueeze(1), exp_vals_samples], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([exp_vals_0.unsqueeze(1), exp_vals_samples], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/models/mask_heads/fcn_mask_head.py": {
        "torch": {
            "ModuleList_41": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if self.class_agnostic else self.num_classes",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_57": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.upsample_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.upsample_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Upsample_63": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.upsample_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.upsample_method",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/models/necks/cmn.py": {
        "torch": {
            "sum_168": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_recip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (dist + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "center_offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "center_offsets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(center_offsets).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_65": {
                "variable": {
                    "value": "pts_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pts_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(pts_labels).cuda()",
                            "Call"
                        ],
                        [
                            "self.build_aux_target(points, gt_bboxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_80": {
                "variable": {
                    "value": "pos_normalizer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos.sum()",
                            "Call"
                        ],
                        [
                            "torch.clamp(pos_normalizer, min=1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_101": {
                "variable": {
                    "value": "points_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "voxel_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "voxel_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_196": {
                "variable": {
                    "value": "self.point_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_197": {
                "variable": {
                    "value": "self.point_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_198": {
                "variable": {
                    "value": "self.point_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_268": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn0(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_270": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_272": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_274": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_276": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_278": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_280": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn6(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_283": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn7(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_46": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nxyz[:, 0] == i",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "BatchNorm1d_124": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_131": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_134": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_141": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_144": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_147": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_154": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPad2d_30": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_193": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_230": {
                "tensors": {
                    "value": "[p1, p2, p3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/models/necks/fpn.py": {
        "torch": {
            "ModuleList_39": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_40": {
                "variable": {
                    "value": "self.fpn_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_104": {
                "input": {
                    "value": "laterals[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_118": {
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/models/necks/rpn.py": {
        "torch": {
            "ModuleList_91": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "blocks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_92": {
                "variable": {
                    "value": "self.deblocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "deblocks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_114": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ZeroPad2d_133": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "deblock",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvTranspose2d(num_out_filters, num_upsample_filters[i - self._upsample_start_idx], stride, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "deblock",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(num_out_filters, num_upsample_filters[i - self._upsample_start_idx], stride, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/models/roi_extractors/single_level.py": {
        "torch": {
            "ModuleList_45": {
                "variable": {
                    "value": "roi_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[layer_cls(spatial_scale=1 / s, **cfg) for s in featmap_strides]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sqrt_64": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(rois[:, 3] - rois[:, 1] + 1) * (rois[:, 4] - rois[:, 2] + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_66": {
                "variable": {
                    "value": "target_lvls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(scale / self.finest_scale + 1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log2_66": {
                "input": {
                    "value": "scale / self.finest_scale + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/models/rpn_heads/rpn_head.py": {
        "torch": {
            "Conv2d_49": {
                "variable": {
                    "value": "self.rpn_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feat_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.rpn_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feat_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_anchors if self.use_sigmoid_cls else self.num_anchors * 2",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.rpn_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feat_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_anchors * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.rpn_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feat_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_anchors * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_127": {
                "tensors": {
                    "value": "labels_list",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_128": {
                "tensors": {
                    "value": "label_weights_list",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_129": {
                "tensors": {
                    "value": "bbox_targets_list",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_130": {
                "tensors": {
                    "value": "bbox_weights_list",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_131": {
                "tensors": {
                    "value": "dir_labels_list",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_132": {
                "tensors": {
                    "value": "dir_weights_list",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_169": {
                "input": {
                    "value": "rpn_dir_pred.view(-1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_165": {
                "input": {
                    "value": "rpn_cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rpn_cls(rpn_feat)",
                            "Call"
                        ],
                        [
                            "rpn_cls_score.permute(0, 2, 3, 1).contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "rpn_cls_score.permute(0, 2, 3, 1).contiguous().view(-1, 2)",
                            "Call"
                        ],
                        [
                            "rpn_cls_scores[img_id].detach()",
                            "Call"
                        ],
                        [
                            "rpn_cls_score.permute(1, 2, 0).contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "rpn_cls_score.permute(1, 2, 0).contiguous().view(-1, 2)",
                            "Call"
                        ],
                        [
                            "rpn_cls_score",
                            "Method Argument"
                        ],
                        [
                            "rpn_cls_score",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/models/single_stage_heads/retina_head.py": {
        "torch": {
            "ReLU_67": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_74": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_75": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "variable": {
                    "value": "self.retina_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feat_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "variable": {
                    "value": "self.retina_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feat_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_anchors * self.bbox_pred_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_278": {
                "variable": {
                    "value": "mlvl_proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_proposals)",
                            "Call"
                        ],
                        [
                            "mlvl_proposals / scale_factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_281": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_scores)",
                            "Call"
                        ],
                        [
                            "torch.cat([padding, mlvl_scores], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_283": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[padding, mlvl_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "chn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels if i == 0 else feat_channels",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feat_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "chn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels if i == 0 else feat_channels",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feat_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/models/single_stage_heads/ssd_rotate_head.py": {
        "torch": {
            "split_24": {
                "variable": {
                    "value": "(xa, ya, za, wa, la, ha, ra)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.view(batch_size, -1, 7)",
                            "Call"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_25": {
                "variable": {
                    "value": "(xg, yg, zg, wg, lg, hg, rg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_28": {
                "variable": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "la ** 2 + wa ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_59": {
                "variable": {
                    "value": "(xa, ya, za, wa, la, ha, ra)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.view(batch_size, -1, 7)",
                            "Call"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_68": {
                "variable": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "la ** 2 + wa ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_337": {
                "variable": {
                    "value": "(xg, yg, wg, lg, rg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_343": {
                "variable": {
                    "value": "cosTheta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(boxes, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.atan2(rgy, rgx)",
                            "Call"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ],
                        [
                            "torch.split(box, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "rg.unsqueeze_(-1).expand(N, *window_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_344": {
                "variable": {
                    "value": "sinTheta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(boxes, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.atan2(rgy, rgx)",
                            "Call"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ],
                        [
                            "torch.split(box, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "rg.unsqueeze_(-1).expand(N, *window_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_369": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[samples_x, samples_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_38": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lg / la",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_39": {
                "variable": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wg / wa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_40": {
                "variable": {
                    "value": "ht",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hg / ha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_42": {
                "variable": {
                    "value": "rgx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(boxes, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.atan2(rgy, rgx)",
                            "Call"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ],
                        [
                            "torch.split(box, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "rg.unsqueeze_(-1).expand(N, *window_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_43": {
                "variable": {
                    "value": "rgy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(boxes, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.atan2(rgy, rgx)",
                            "Call"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ],
                        [
                            "torch.split(box, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "rg.unsqueeze_(-1).expand(N, *window_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_44": {
                "variable": {
                    "value": "rax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_45": {
                "variable": {
                    "value": "ray",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_61": {
                "variable": {
                    "value": "(xt, yt, zt, wt, lt, ht, rtx, rty)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_encodings",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_64": {
                "variable": {
                    "value": "(xt, yt, zt, wt, lt, ht, rt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_encodings",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_83": {
                "variable": {
                    "value": "rax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_84": {
                "variable": {
                    "value": "ray",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "atan2_87": {
                "variable": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sin(rg)",
                            "Call"
                        ],
                        [
                            "rty + ray",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "rgx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cos(rg)",
                            "Call"
                        ],
                        [
                            "rtx + rax",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_91": {
                "tensors": {
                    "value": "[xg, yg, zg, wg, lg, hg, rg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_121": {
                "variable": {
                    "value": "self.conv_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_output_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_anchor_per_loc * num_class",
                            "BinOp"
                        ],
                        [
                            "num_anchor_per_loc * (num_class + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "variable": {
                    "value": "self.conv_box",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_output_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_anchor_per_loc * box_code_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(boxes1[..., :-1], rad_pred_encoding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "boxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(boxes2[..., :-1], rad_tg_encoding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_241": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_apply(create_target_torch, anchors, gt_bboxes, anchors_mask, gt_labels, similarity_fn=getattr(iou3d_utils, cfg.assigner.similarity_fn)(), box_encoding_fn=second_box_encode, matched_threshold=cfg.assigner.pos_iou_thr, unmatched_threshold=cfg.assigner.neg_iou_thr, box_code_size=self._box_code_size)",
                            "Call"
                        ],
                        [
                            "torch.stack(labels)",
                            "Call"
                        ],
                        [
                            "multi_apply(create_target_torch, anchors, gt_bboxes, (None,) * batch_size, gt_labels, similarity_fn=getattr(iou3d_utils, cfg.assigner.similarity_fn)(), box_encoding_fn=second_box_encode, matched_threshold=cfg.assigner.pos_iou_thr, unmatched_threshold=cfg.assigner.neg_iou_thr)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels).unsqueeze_(1)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_242": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_apply(create_target_torch, anchors, gt_bboxes, anchors_mask, gt_labels, similarity_fn=getattr(iou3d_utils, cfg.assigner.similarity_fn)(), box_encoding_fn=second_box_encode, matched_threshold=cfg.assigner.pos_iou_thr, unmatched_threshold=cfg.assigner.neg_iou_thr, box_code_size=self._box_code_size)",
                            "Call"
                        ],
                        [
                            "torch.stack(targets)",
                            "Call"
                        ],
                        [
                            "multi_apply(create_target_torch, anchors, gt_bboxes, (None,) * batch_size, gt_labels, similarity_fn=getattr(iou3d_utils, cfg.assigner.similarity_fn)(), box_encoding_fn=second_box_encode, matched_threshold=cfg.assigner.pos_iou_thr, unmatched_threshold=cfg.assigner.neg_iou_thr)",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_379": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "grid": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([samples_x, samples_y], 3)",
                            "Call"
                        ],
                        [
                            "samples * 2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_389": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 3, 1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_469": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_apply(create_target_torch, anchors, gt_bboxes, anchors_mask, gt_labels, similarity_fn=getattr(iou3d_utils, cfg.assigner.similarity_fn)(), box_encoding_fn=second_box_encode, matched_threshold=cfg.assigner.pos_iou_thr, unmatched_threshold=cfg.assigner.neg_iou_thr, box_code_size=self._box_code_size)",
                            "Call"
                        ],
                        [
                            "torch.stack(labels)",
                            "Call"
                        ],
                        [
                            "multi_apply(create_target_torch, anchors, gt_bboxes, (None,) * batch_size, gt_labels, similarity_fn=getattr(iou3d_utils, cfg.assigner.similarity_fn)(), box_encoding_fn=second_box_encode, matched_threshold=cfg.assigner.pos_iou_thr, unmatched_threshold=cfg.assigner.neg_iou_thr)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels).unsqueeze_(1)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_48": {
                "tensors": {
                    "value": "[xt, yt, zt, wt, lt, ht, rtx, rty]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_51": {
                "tensors": {
                    "value": "[xt, yt, zt, wt, lt, ht, rt]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "variable": {
                    "value": "self.conv_dir_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_output_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_anchor_per_loc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_162": {
                "variable": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cared.type(dtype).sum(1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.clamp(num_examples, min=1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "squeeze_314": {
                "variable": {
                    "value": "top_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(cls_preds)",
                            "Call"
                        ],
                        [
                            "F.softmax(cls_preds, dim=-1)[..., 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linspace_346": {
                "start": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "window_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_347": {
                "start": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "window_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_443": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_interpolate_torch_gridsample(im, xs, ys)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_481": {
                "input": {
                    "value": "pos_normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).type(dtype)",
                            "Call"
                        ],
                        [
                            "positives.sum().type(torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_506": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores[i]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(scores).view(-1)",
                            "Call"
                        ],
                        [
                            "scores[select]",
                            "Subscript"
                        ],
                        [
                            "scores[keep]",
                            "Subscript"
                        ],
                        [
                            "cls_scores[i]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(scores).view(-1)",
                            "Call"
                        ],
                        [
                            "scores[select]",
                            "Subscript"
                        ],
                        [
                            "scores[keep]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_549": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores[i]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(scores).view(-1)",
                            "Call"
                        ],
                        [
                            "scores[select]",
                            "Subscript"
                        ],
                        [
                            "scores[keep]",
                            "Subscript"
                        ],
                        [
                            "cls_scores[i]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(scores).view(-1)",
                            "Call"
                        ],
                        [
                            "scores[select]",
                            "Subscript"
                        ],
                        [
                            "scores[keep]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_79": {
                "input": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lg / la - 1",
                            "BinOp"
                        ],
                        [
                            "torch.log(lg / la)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_80": {
                "input": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wg / wa - 1",
                            "BinOp"
                        ],
                        [
                            "torch.log(wg / wa)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_81": {
                "input": {
                    "value": "ht",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hg / ha - 1",
                            "BinOp"
                        ],
                        [
                            "torch.log(hg / ha)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_129": {
                "input": {
                    "value": "boxes1[..., -1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_129": {
                "input": {
                    "value": "boxes2[..., -1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_131": {
                "input": {
                    "value": "boxes1[..., -1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_131": {
                "input": {
                    "value": "boxes2[..., -1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_165": {
                "input": {
                    "value": "bbox_normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).type(dtype)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_273": {
                "input": {
                    "value": "weights.sum(-1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_310": {
                "variable": {
                    "value": "total_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_preds.view(batch_size, -1, num_class)",
                            "Call"
                        ],
                        [
                            "cls_preds.view(batch_size, -1, num_class + 1)",
                            "Call"
                        ],
                        [
                            "self.conv_cls(x)",
                            "Call"
                        ],
                        [
                            "cls_preds.permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "zip(batch_box_preds, batch_cls_preds, batch_dir_preds, batch_anchors_mask, gt_bboxes)",
                            "Call"
                        ],
                        [
                            "cls_preds[a_mask]",
                            "Subscript"
                        ],
                        [
                            "cls_preds.view(-1, self._num_class)",
                            "Call"
                        ],
                        [
                            "cls_preds",
                            "Method Argument"
                        ],
                        [
                            "cls_preds",
                            "Method Argument"
                        ],
                        [
                            "cls_preds",
                            "Method Argument"
                        ],
                        [
                            "cls_preds",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_327": {
                "variable": {
                    "value": "box_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_boxes, box_preds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_390": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_class * num_parts",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_391": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_class * num_parts",
                            "BinOp"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_392": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_393": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_class * num_parts",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_class * num_parts",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_454": {
                "tensors": {
                    "value": "bbox_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_168": {
                "input": {
                    "value": "pos_normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).type(dtype)",
                            "Call"
                        ],
                        [
                            "positives.sum().type(torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_169": {
                "input": {
                    "value": "pos_normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).type(dtype)",
                            "Call"
                        ],
                        [
                            "positives.sum().type(torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_171": {
                "variable": {
                    "value": "pos_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(positives, negatives)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_174": {
                "variable": {
                    "value": "cls_normalizer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pos_neg * normalizer).sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(cls_normalizer, min=1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_176": {
                "variable": {
                    "value": "normalizer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_neg.sum(1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.clamp(normalizer, min=1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_307": {
                "input": {
                    "value": "dir_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(batch_box_preds, batch_cls_preds, batch_dir_preds, batch_anchors_mask, gt_bboxes)",
                            "Call"
                        ],
                        [
                            "dir_preds[a_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_312": {
                "input": {
                    "value": "cls_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_preds.view(batch_size, -1, num_class)",
                            "Call"
                        ],
                        [
                            "cls_preds.view(batch_size, -1, num_class + 1)",
                            "Call"
                        ],
                        [
                            "self.conv_cls(x)",
                            "Call"
                        ],
                        [
                            "cls_preds.permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "zip(batch_box_preds, batch_cls_preds, batch_dir_preds, batch_anchors_mask, gt_bboxes)",
                            "Call"
                        ],
                        [
                            "cls_preds[a_mask]",
                            "Subscript"
                        ],
                        [
                            "cls_preds.view(-1, self._num_class)",
                            "Call"
                        ],
                        [
                            "cls_preds",
                            "Method Argument"
                        ],
                        [
                            "cls_preds",
                            "Method Argument"
                        ],
                        [
                            "cls_preds",
                            "Method Argument"
                        ],
                        [
                            "cls_preds",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_422": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/models/utils/__init__.py": {
        "torch": {
            "unsqueeze_19": {
                "variable": {
                    "value": "actual_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "actual_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(actual_num, axis + 1)",
                            "Call"
                        ],
                        [
                            "actual_num",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_23": {
                "variable": {
                    "value": "max_num",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(max_num, dtype=torch.int, device=actual_num.device).view(max_num_shape)",
                            "Call"
                        ],
                        [
                            "max_num",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "actual_num.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "tensor_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*list(tensor.shape)",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/models/utils/conv_module.py": {
        "torch": {
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_60": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "3dod/mmdet/models/utils/empty.py": {
        "torch": {}
    },
    "3dod/mmdet/models/utils/norm.py": {
        "torch": {}
    },
    "3dod/mmdet/models/utils/sequential.py": {
        "torch": {}
    },
    "3dod/mmdet/models/utils/weight_init.py": {
        "torch": {}
    },
    "3dod/mmdet/ops/iou3d/iou3d_utils.py": {
        "torch": {
            "abs_17": {
                "variable": {
                    "value": "rots_0_pi_div_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "limit_period(rots, 0.5, math.pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_19": {
                "variable": {
                    "value": "boxes_center",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(rots_0_pi_div_2 > math.pi / 4)[..., None]",
                            "Subscript"
                        ]
                    ]
                },
                "x": {
                    "value": "rboxes[:, [0, 1, 3, 2]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "rboxes[:, :4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_20": {
                "variable": {
                    "value": "boxes_near",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxes_center[:, :2] - boxes_center[:, 2:] / 2, boxes_center[:, :2] + boxes_center[:, 2:] / 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_33": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_34": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_99": {
                "variable": {
                    "value": "max_of_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_a_height_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes_a[:, 2].view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_100": {
                "variable": {
                    "value": "min_of_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_a_height_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(boxes_a[:, 2] + boxes_a[:, 5]).view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_101": {
                "variable": {
                    "value": "overlaps_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_of_max - max_of_min",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_109": {
                "input": {
                    "value": "vol_a + vol_b - overlaps_3d",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                }
            },
            "floor_6": {
                "input": {
                    "value": "val / period + offset",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/mmdet/ops/iou3d/setup.py": {
        "torch": {}
    },
    "3dod/mmdet/ops/pointnet2/pointnet2_utils.py": {
        "torch": {
            "sqrt_31": {
                "input": {
                    "value": "dist2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor(N, 3)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "3dod/mmdet/ops/pointnet2/setup.py": {
        "torch": {}
    },
    "3dod/mmdet/ops/points_op/__init__.py": {
        "torch": {}
    },
    "3dod/mmdet/ops/points_op/setup.py": {
        "torch": {}
    },
    "3dod/test.py": {
        "torch": {
            "no_grad_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3dod/tools/env.py": {
        "torch": {
            "device_count_28": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_29": {
                "device": {
                    "value": "rank % num_gpus",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_44": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_45": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "3dod/tools/train_utils/__init__.py": {
        "torch": {
            "load_156": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}.pth'.format(filename)",
                            "Call"
                        ],
                        [
                            "'checkpoint'",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "loc_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if to_cpu else None",
                            "IfExp"
                        ],
                        [
                            "torch.device('cpu') if to_cpu else None",
                            "IfExp"
                        ],
                        [
                            "torch.device('cpu') if to_cpu else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_192": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}.pth'.format(filename)",
                            "Call"
                        ],
                        [
                            "'checkpoint'",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "loc_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if to_cpu else None",
                            "IfExp"
                        ],
                        [
                            "torch.device('cpu') if to_cpu else None",
                            "IfExp"
                        ],
                        [
                            "torch.device('cpu') if to_cpu else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_228": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}.pth'.format(filename)",
                            "Call"
                        ],
                        [
                            "'checkpoint'",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "loc_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if to_cpu else None",
                            "IfExp"
                        ],
                        [
                            "torch.device('cpu') if to_cpu else None",
                            "IfExp"
                        ],
                        [
                            "torch.device('cpu') if to_cpu else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "save_148": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}.pth'.format(filename)",
                            "Call"
                        ],
                        [
                            "'checkpoint'",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_grad_norm__60": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_145": {
                "obj": {
                    "value": "{'optimizer_state': optimizer_state}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "optimizer_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}_optim.pth'.format(filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_155": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_191": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_227": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/tools/train_utils/optimization/__init__.py": {
        "torch": {
            "Adam_11": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "optim_cfg.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "optim_cfg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_13": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "optim_cfg.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "optim_cfg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "optim_cfg.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_48": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=optim_cfg.lr, weight_decay=optim_cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(model.parameters(), lr=optim_cfg.lr, weight_decay=optim_cfg.weight_decay, momentum=optim_cfg.momentum)",
                            "Call"
                        ],
                        [
                            "OptimWrapper.create(optimizer_func, optim_cfg.lr, get_layer_groups(model), wd=optim_cfg.weight_decay, true_wd=True, bn_wd=True)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "T_max": {
                    "value": "total_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "total_iters_each_epoch * total_epochs",
                            "BinOp"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_epoch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MultiStepLR_52": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=optim_cfg.lr, weight_decay=optim_cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(model.parameters(), lr=optim_cfg.lr, weight_decay=optim_cfg.weight_decay, momentum=optim_cfg.momentum)",
                            "Call"
                        ],
                        [
                            "OptimWrapper.create(optimizer_func, optim_cfg.lr, get_layer_groups(model), wd=optim_cfg.weight_decay, true_wd=True, bn_wd=True)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "lr_cfg.step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_epoch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_25": {
                "*args": {
                    "value": "*flatten_model(m)",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/tools/train_utils/optimization/fastai_optim.py": {
        "torch": {
            "Sequential_23": {
                "*args": {
                    "value": "*l2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "parameters_to_vector_35": {
                "variable": {
                    "value": "mp",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[param.data.float() for param in lg]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "mp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "master_params",
                            "variable"
                        ],
                        [
                            "parameters_to_vector([param.data.float() for param in lg])",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(mp, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "parameters_to_vector_54": {
                "parameters": {
                    "value": "[p.grad.data.float() for p in model_group]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "3dod/tools/train_utils/optimization/learning_schedules_fastai.py": {
        "torch": {}
    },
    "3dod/viz_video.py": {
        "torch": {}
    }
}