{
    "dataset.py": {
        "torch": {
            "unsqueeze_101": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(self.partition['Masks'][idx])",
                            "Call"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(augmented['mask'])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(mask)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "mask.type(torch.IntTensor)",
                            "Call"
                        ],
                        [
                            "self.mask_partition[idx].unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "augmented_mask.data",
                            "Attribute"
                        ],
                        [
                            "mask.type(torch.IntTensor)",
                            "Call"
                        ],
                        [
                            "mask.permute(0, 3, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_96": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "augmented['mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_tensor_99": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(self.partition['Masks'][idx])",
                            "Call"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(augmented['mask'])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(mask)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "mask.type(torch.IntTensor)",
                            "Call"
                        ],
                        [
                            "self.mask_partition[idx].unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "augmented_mask.data",
                            "Attribute"
                        ],
                        [
                            "mask.type(torch.IntTensor)",
                            "Call"
                        ],
                        [
                            "mask.permute(0, 3, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "inference.py": {
        "torch": {
            "DataLoader_191": {
                "variable": {
                    "value": "loaders_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test[patient]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_320": {
                "variable": {
                    "value": "loaders_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Pancreas_3D_dataset(CT_patches, mask_patches, augment=False)",
                            "Call"
                        ],
                        [
                            "Pancreas_3D_dataset(CT_patches, mask_patches, augment=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_35": {
                "variable": {
                    "value": "loaders",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test[p]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_123": {
                "variable": {
                    "value": "loaders_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Pancreas_3D_dataset(CT_patches, mask_patches, augment=False)",
                            "Call"
                        ],
                        [
                            "Pancreas_3D_dataset(CT_patches, mask_patches, augment=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_151": {
                "variable": {
                    "value": "output_b",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "output_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(output > threshold) * 1",
                            "BinOp"
                        ],
                        [
                            "np.squeeze(output_b)",
                            "Call"
                        ],
                        [
                            "t1(output_b)",
                            "Call"
                        ],
                        [
                            "output_b.cuda()",
                            "Call"
                        ],
                        [
                            "(output > threshold) * 1",
                            "BinOp"
                        ],
                        [
                            "np.squeeze(output_b)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(output_b)",
                            "Call"
                        ],
                        [
                            "output_b.cuda()",
                            "Call"
                        ],
                        [
                            "(output > threshold) * 1",
                            "BinOp"
                        ],
                        [
                            "np.squeeze(output_b)",
                            "Call"
                        ],
                        [
                            "(output > threshold) * 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "loss.py": {
        "torch": {
            "flatten_37": {
                "variable": {
                    "value": "y_pred_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "flatten_38": {
                "variable": {
                    "value": "y_true_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "metrics.py": {
        "torch": {
            "flatten_33": {
                "variable": {
                    "value": "y_pred_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "flatten_34": {
                "variable": {
                    "value": "y_true_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "net.py": {
        "torch": {
            "MaxPool2d_53": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_55": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_57": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_63": {
                "variable": {
                    "value": "self.upconv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "features * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "features * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_65": {
                "variable": {
                    "value": "self.upconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "features * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "features * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_67": {
                "variable": {
                    "value": "self.upconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "features * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "features * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_69": {
                "variable": {
                    "value": "self.upconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "features * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_features",
                            "variable"
                        ],
                        [
                            "init_features",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_features",
                            "variable"
                        ],
                        [
                            "init_features",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_76": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_79": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_139": {
                "variable": {
                    "value": "dec4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dec4, enc4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "dec4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dec4, enc4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "dec3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dec3, enc3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "dec2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dec2, enc2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "dec1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dec1, enc1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_233": {
                "variable": {
                    "value": "self.upconv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "features * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "features * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_235": {
                "variable": {
                    "value": "self.upconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "features * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "features * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_237": {
                "variable": {
                    "value": "self.upconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "features * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "features * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_239": {
                "variable": {
                    "value": "self.upconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "features * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_features",
                            "variable"
                        ],
                        [
                            "init_features",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_243": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_features",
                            "variable"
                        ],
                        [
                            "init_features",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3d_246": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_249": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_311": {
                "variable": {
                    "value": "dec4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dec4, enc4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_314": {
                "variable": {
                    "value": "dec4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dec4, enc4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_317": {
                "variable": {
                    "value": "dec3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dec3, enc3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_320": {
                "variable": {
                    "value": "dec2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dec2, enc2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_323": {
                "variable": {
                    "value": "dec1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dec1, enc1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_155": {
                "input": {
                    "value": "self.conv(dec1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_159": {
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(in_channels=in_features, out_channels=out_features, kernel_size=3, padding=1, bias=False)), ('norm1', nn.BatchNorm2d(num_features=out_features)), ('swish1', nn.SiLU(inplace=True)), ('conv2', nn.Conv2d(in_channels=out_features, out_channels=out_features, kernel_size=3, padding=1, bias=False)), ('norm2', nn.BatchNorm2d(num_features=out_features)), ('swish2', nn.SiLU(inplace=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_327": {
                "input": {
                    "value": "self.conv(dec1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_331": {
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv3d(in_channels=in_features, out_channels=out_features, kernel_size=3, padding=1, bias=False)), ('norm1', nn.BatchNorm3d(num_features=out_features)), ('relu1', nn.ReLU(inplace=True)), ('conv2', nn.Conv3d(in_channels=out_features, out_channels=out_features, kernel_size=3, padding=1, bias=False)), ('norm2', nn.BatchNorm3d(num_features=out_features)), ('relu2', nn.ReLU(inplace=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_160": {
                "in_channels": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_166": {
                "num_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SiLU_168": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "in_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_175": {
                "num_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SiLU_177": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_332": {
                "in_channels": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_338": {
                "num_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_339": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_341": {
                "in_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_347": {
                "num_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_348": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "save_130": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "/content/drive/MyDrive/checkpoint.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_247": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "/content/drive/MyDrive/checkpoint.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_119": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_120": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "/content/drive/MyDrive/checkpoint.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_tensor_207": {
                "variable": {
                    "value": "output_b",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "output_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(output > threshold) * 1",
                            "BinOp"
                        ],
                        [
                            "np.squeeze(output_b)",
                            "Call"
                        ],
                        [
                            "t1(output_b)",
                            "Call"
                        ],
                        [
                            "output_b.cuda()",
                            "Call"
                        ],
                        [
                            "(output > threshold) * 1",
                            "BinOp"
                        ],
                        [
                            "np.squeeze(output_b)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(output_b)",
                            "Call"
                        ],
                        [
                            "output_b.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_237": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_238": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "/content/drive/MyDrive/checkpoint.pt",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "volume_patch_composer.py": {
        "torch": {
            "as_tensor_48": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.vstack(CT_3D_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_56": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.vstack(masks_3D_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_62": {
                "variable": {
                    "value": "CT_3D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(patient_path_list['CT'][p][s])",
                            "Call"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "image[np.newaxis, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(np.vstack(CT_3D_list))",
                            "Call"
                        ],
                        [
                            "image.unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "image.type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_63": {
                "variable": {
                    "value": "mask_3D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(patient_path_list['Masks'][p][s])",
                            "Call"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "mask[np.newaxis, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(np.vstack(masks_3D_list))",
                            "Call"
                        ],
                        [
                            "mask.unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "mask.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.load(mask_pth)",
                            "Call"
                        ],
                        [
                            "mask.squeeze(0).squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_66": {
                "obj": {
                    "value": "CT_3D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(image, grid, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "/content/data3D/ + p + _CT.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_67": {
                "obj": {
                    "value": "mask_3D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(mask, grid, mode='nearest', align_corners=True)",
                            "Call"
                        ],
                        [
                            "mask_3D.type(torch.IntTensor)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "/content/data3D/ + p + _Mask.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_96": {
                "variable": {
                    "value": "ct",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "CT_pth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('/content', 'data3D', p + '_CT.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_97": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "mask_pth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('/content', 'data3D', p + '_Mask.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}