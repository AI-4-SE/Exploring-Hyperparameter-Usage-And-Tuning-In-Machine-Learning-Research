{
    "covidprognosis/data/base_dataset.py": {
        "torch": {}
    },
    "covidprognosis/data/collate_fn.py": {
        "torch": {}
    },
    "covidprognosis/data/transforms.py": {
        "torch": {
            "tensor_108": {
                "variable": {
                    "value": "sample[image]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "image_equalized.reshape(image.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_132": {
                "variable": {
                    "value": "sample[image]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "gaussian_filter(sample['image'].numpy(), sigma)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "sample['image'].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_161": {
                "data": {
                    "value": "np.random.normal(size=tuple(sample['image'].shape))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "sample['image'].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "covidprognosis/models/moco_model.py": {
        "torch": {
            "cat_210": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensors_gather",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.ones_like(tensor) for _ in range(torch.distributed.get_world_size())]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_116": {
                "variable": {
                    "value": "idx_shuffle",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_gather.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x_gather.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argsort_122": {
                "variable": {
                    "value": "idx_unshuffle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randperm(batch_size_all).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_161": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_q(im_q)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(q, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_179": {
                "variable": {
                    "value": "l_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nc,nc->n",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[q, k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_179": {
                "variable": {
                    "value": "l_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_181": {
                "variable": {
                    "value": "l_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nc,ck->nk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[q, self.queue.clone().detach()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[l_pos, l_neg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_190": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "logits.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_119": {
                "tensor": {
                    "value": "idx_shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randperm(batch_size_all).cuda()",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_171": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_k(im_k)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(k, dim=1)",
                            "Call"
                        ],
                        [
                            "self._batch_unshuffle_ddp(k, idx_unshuffle)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_206": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.encoder_q.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_mlp, dim_mlp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.encoder_k.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_mlp, dim_mlp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_69": {
                "input": {
                    "value": "torch.randn(dim, K)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.encoder_q.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_mlp, dim_mlp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.encoder_k.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_mlp, dim_mlp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_69": {
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "dim_mlp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.encoder_q.classifier.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_mlp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.encoder_q.classifier.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "dim_mlp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.encoder_q.classifier.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_mlp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.encoder_q.classifier.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_55": {
                "in_features": {
                    "value": "dim_mlp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.encoder_q.classifier.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_mlp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.encoder_q.classifier.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "dim_mlp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.encoder_q.classifier.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_mlp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_q.fc.weight.shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.encoder_q.classifier.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "covidprognosis/plmodules/xray_datamodule.py": {
        "torch": {
            "DataLoader_190": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cp.data.NIHChestDataset(directory=dataset_dir, split=split, transform=transform, label_list=label_list, resplit=True)",
                            "Call"
                        ],
                        [
                            "cp.data.MimicCxrJpgDataset(directory=dataset_dir, split=split, transform=transform, label_list=label_list)",
                            "Call"
                        ],
                        [
                            "cp.data.CheXpertDataset(directory=dataset_dir, split=split, transform=transform, label_list=label_list)",
                            "Call"
                        ],
                        [
                            "TwoImageDataset(dataset)",
                            "Call"
                        ],
                        [
                            "cp.data.CombinedXrayDataset(dataset_list=['chexpert_v1', 'mimic-cxr'], directory_list=dataset_dir, transform_list=[transform, transform], label_list=[label_list, label_list], split_list=[split, split])",
                            "Call"
                        ],
                        [
                            "self.train_dataset",
                            "Attribute"
                        ],
                        [
                            "self.val_dataset",
                            "Attribute"
                        ],
                        [
                            "self.test_dataset",
                            "Attribute"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "cp_examples/mip_finetune/mip_model.py": {
        "torch": {
            "Dropout_53": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_54": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "maxtime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "360",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_54": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_55": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, dim, 2).float() * (-math.log(10000.0) / dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "maxtime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "360",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sin_59": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_60": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GroupNorm_90": {
                "variable": {
                    "value": "self.group_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_dict['model.encoder_q.classifier.weight'].shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_91": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_dict['model.encoder_q.classifier.weight'].shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "projection_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TransformerEncoderLayer_95": {
                "variable": {
                    "value": "self.transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "d_model": {
                    "value": "transformer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "projection_dim * image_shape[0] * image_shape[1]",
                            "BinOp"
                        ]
                    ]
                },
                "dim_feedforward": {
                    "value": "feedforward_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "nhead": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "drop_transformer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feature_dim + projection_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_dict['model.encoder_q.classifier.weight'].shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_124": {
                "variable": {
                    "value": "pooled_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pooled_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pooled_feats)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(pooled_feats, (1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_125": {
                "variable": {
                    "value": "pooled_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pooled_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pooled_feats)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(pooled_feats, (1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_133": {
                "variable": {
                    "value": "image_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group_norm(image_feats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "image_feats_combined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image_feats, image_feats_trans]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_163": {
                "variable": {
                    "value": "self.train_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[pl.metrics.Accuracy() for _ in args.val_pathology_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_166": {
                "variable": {
                    "value": "self.val_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[pl.metrics.Accuracy() for _ in args.val_pathology_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Adam_271": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_272": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(self.model.parameters(), self.learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "self.epochs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_21": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_31": {
                "f": {
                    "value": "pretrained_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_194": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "pos_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_weights or torch.ones(args.num_classes)",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_249": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[~torch.isnan(labels)]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_250": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_25": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[~torch.isnan(labels)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "isnan_26": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[~torch.isnan(labels)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_159": {
                "*size": {
                    "value": "args.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_56": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_255": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[~torch.isnan(labels)]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(logits)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cp_examples/mip_finetune/train_mip.py": {
        "torch": {
            "tensor_89": {
                "variable": {
                    "value": "pos_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(neg / np.maximum(pos, 1)).values.astype(np.float)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cp_examples/moco_pretrain/moco_module.py": {
        "torch": {
            "CrossEntropyLoss_43": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_64": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_70": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(self.model.parameters(), self.learning_rate, momentum=self.momentum, weight_decay=self.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "self.epochs",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cp_examples/sip_finetune/sip_finetune.py": {
        "torch": {
            "ModuleList_135": {
                "variable": {
                    "value": "self.train_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[pl.metrics.Accuracy() for _ in val_pathology_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_138": {
                "variable": {
                    "value": "self.val_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[pl.metrics.Accuracy() for _ in val_pathology_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Adam_257": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_258": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), self.learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "self.epochs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_26": {
                "f": {
                    "value": "pretrained_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(pretrained_file)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_130": {
                "variable": {
                    "value": "pos_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_154": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "pos_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(num_classes)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[~torch.isnan(labels)]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_224": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_18": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[~torch.isnan(labels)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "isnan_19": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[~torch.isnan(labels)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_94": {
                "f": {
                    "value": "self.pretrained_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_dict['model.encoder_q.classifier.weight'].shape[1]",
                            "Subscript"
                        ],
                        [
                            "pretrained_dict['model.encoder_q.fc.weight'].shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_229": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[~torch.isnan(labels)]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_122": {
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_dict['model.encoder_q.classifier.weight'].shape[1]",
                            "Subscript"
                        ],
                        [
                            "pretrained_dict['model.encoder_q.fc.weight'].shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "cp_examples/sip_finetune/train_sip.py": {
        "torch": {
            "tensor_122": {
                "variable": {
                    "value": "pos_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(neg / np.maximum(pos, 1)).astype(np.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "variable": {
                    "value": "pos_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(neg / np.maximum(pos, 1)).values.astype(np.float)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_transforms.py": {
        "torch": {
            "tensor_76": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "image_equalized.reshape(image.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gaussian_filter(image.numpy(), sigma)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "allclose_80": {
                "input": {
                    "value": "sample['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.transpose(torch.tensor(np.array(sample['image']), dtype=torch.float).numpy(), (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.tensor(image_equalized.reshape(image.shape)).to(torch.float)",
                            "Call"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(gaussian_filter(image.numpy(), sigma), dtype=image.dtype)",
                            "Call"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "image + signal_level / snr_level * torch.tensor(np.random.normal(size=tuple(image.shape)), dtype=image.dtype)",
                            "BinOp"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "image.expand(*expands)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_106": {
                "input": {
                    "value": "sample['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.transpose(torch.tensor(np.array(sample['image']), dtype=torch.float).numpy(), (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.tensor(image_equalized.reshape(image.shape)).to(torch.float)",
                            "Call"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(gaussian_filter(image.numpy(), sigma), dtype=image.dtype)",
                            "Call"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "image + signal_level / snr_level * torch.tensor(np.random.normal(size=tuple(image.shape)), dtype=image.dtype)",
                            "BinOp"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "image.expand(*expands)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_118": {
                "input": {
                    "value": "sample['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.transpose(torch.tensor(np.array(sample['image']), dtype=torch.float).numpy(), (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.tensor(image_equalized.reshape(image.shape)).to(torch.float)",
                            "Call"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(gaussian_filter(image.numpy(), sigma), dtype=image.dtype)",
                            "Call"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "image + signal_level / snr_level * torch.tensor(np.random.normal(size=tuple(image.shape)), dtype=image.dtype)",
                            "BinOp"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "image.expand(*expands)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_147": {
                "input": {
                    "value": "sample['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.transpose(torch.tensor(np.array(sample['image']), dtype=torch.float).numpy(), (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.tensor(image_equalized.reshape(image.shape)).to(torch.float)",
                            "Call"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(gaussian_filter(image.numpy(), sigma), dtype=image.dtype)",
                            "Call"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "image + signal_level / snr_level * torch.tensor(np.random.normal(size=tuple(image.shape)), dtype=image.dtype)",
                            "BinOp"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "image.expand(*expands)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_159": {
                "input": {
                    "value": "sample['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.transpose(torch.tensor(np.array(sample['image']), dtype=torch.float).numpy(), (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.tensor(image_equalized.reshape(image.shape)).to(torch.float)",
                            "Call"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(gaussian_filter(image.numpy(), sigma), dtype=image.dtype)",
                            "Call"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "image + signal_level / snr_level * torch.tensor(np.random.normal(size=tuple(image.shape)), dtype=image.dtype)",
                            "BinOp"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "image.expand(*expands)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_179": {
                "input": {
                    "value": "sample['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.transpose(torch.tensor(np.array(sample['image']), dtype=torch.float).numpy(), (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.tensor(image_equalized.reshape(image.shape)).to(torch.float)",
                            "Call"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(gaussian_filter(image.numpy(), sigma), dtype=image.dtype)",
                            "Call"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "image + signal_level / snr_level * torch.tensor(np.random.normal(size=tuple(image.shape)), dtype=image.dtype)",
                            "BinOp"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "tvt.functional.to_tensor(sample['image']) * 1",
                            "BinOp"
                        ],
                        [
                            "image.expand(*expands)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_63": {
                "data": {
                    "value": "np.array(sample['image'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "data": {
                    "value": "np.random.normal(size=tuple(image.shape))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}