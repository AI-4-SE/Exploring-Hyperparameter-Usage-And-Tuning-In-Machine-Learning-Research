{
    "data/dataset.py": {
        "torch": {}
    },
    "instance_segmentation.py": {
        "torch": {
            "tensor_51": {
                "variable": {
                    "value": "img_patch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.expand_dims(extract(img, x, y, z, 128), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "ins_patch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.expand_dims(extract(ins, x, y, z, 128), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "input_patch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img_patch, ins_patch)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_55": {
                "variable": {
                    "value": "input_patch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_patch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((img_patch, ins_patch))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(input_patch, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_60": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S.round().to('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_193": {
                "f": {
                    "value": "args.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "iterativeFCN.py": {
        "torch": {
            "MaxPool3d_32": {
                "variable": {
                    "value": "self.contract",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_34": {
                "variable": {
                    "value": "self.expand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_78": {
                "variable": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_128",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.expand(u_64)",
                            "Call"
                        ],
                        [
                            "self.conv_up(torch.cat((x_128, u_128), 1))",
                            "Call"
                        ],
                        [
                            "self.conv_final(u_128)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_79": {
                "variable": {
                    "value": "cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dense(torch.flatten(x_1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "*args": {
                    "value": "nn.Conv3d(in_channels, out_channels, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_14": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_16": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv3d_17": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_19": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_59": {
                "tensors": {
                    "value": "(x_32, u_32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "tensors": {
                    "value": "(x_64, u_64)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_65": {
                "tensors": {
                    "value": "(x_128, u_128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_79": {
                "input": {
                    "value": "x_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.contract(x_2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test/test_dataset.py": {
        "torch": {
            "DataLoader_11": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CSIDataset(crop_img)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_15": {
                "variable": {
                    "value": "img_patch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_patch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(iter(train_dataloader))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(img_patch)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_16": {
                "variable": {
                    "value": "ins_patch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ins_patch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(iter(train_dataloader))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(ins_patch)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_17": {
                "variable": {
                    "value": "gt_patch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_patch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(iter(train_dataloader))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(gt_patch)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_18": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(iter(train_dataloader))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(weight)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test/test_iterativeFCN_summary.py": {
        "torch": {
            "is_available_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "cat_41": {
                "variable": {
                    "value": "input_patch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img_patch, ins_patch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_48": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_patch.float())",
                            "Call"
                        ],
                        [
                            "model(input_patch.float())",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_55": {
                "variable": {
                    "value": "c_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.unsqueeze(C, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "c_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(iter(train_loader))",
                            "Call"
                        ],
                        [
                            "next(iter(test_loader))",
                            "Call"
                        ],
                        [
                            "c_label.float()",
                            "Call"
                        ],
                        [
                            "c_label.to(device)",
                            "Call"
                        ],
                        [
                            "c_label.float()",
                            "Call"
                        ],
                        [
                            "c_label.to(device)",
                            "Call"
                        ],
                        [
                            "c_label",
                            "Method Argument"
                        ],
                        [
                            "c_label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_82": {
                "variable": {
                    "value": "input_patch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img_patch, ins_patch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_90": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_patch.float())",
                            "Call"
                        ],
                        [
                            "model(input_patch.float())",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_97": {
                "variable": {
                    "value": "c_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.unsqueeze(C, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "c_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(iter(train_loader))",
                            "Call"
                        ],
                        [
                            "next(iter(test_loader))",
                            "Call"
                        ],
                        [
                            "c_label.float()",
                            "Call"
                        ],
                        [
                            "c_label.to(device)",
                            "Call"
                        ],
                        [
                            "c_label.float()",
                            "Call"
                        ],
                        [
                            "c_label.to(device)",
                            "Call"
                        ],
                        [
                            "c_label",
                            "Method Argument"
                        ],
                        [
                            "c_label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_146": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_157": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CSIDataset(args.dataset, subset='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_158": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CSIDataset(args.dataset, subset='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_161": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_142": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_176": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.checkpoints, 'latest_checkpoints.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_55": {
                "input": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_patch.float())",
                            "Call"
                        ],
                        [
                            "model(input_patch.float())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_97": {
                "input": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_patch.float())",
                            "Call"
                        ],
                        [
                            "model(input_patch.float())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_251": {
                "obj": {
                    "value": "{'iteration': iteration, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'train_loss': train_loss, 'test_loss': test_loss, 'train_acc': train_acc, 'test_acc': test_acc, 'train_dice': train_dice, 'test_dice': test_dice, 'best_train_loss': best_train_loss, 'best_test_dice': best_test_dice}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.checkpoints, 'latest_checkpoints.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_218": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.weight, '.IterativeFCN_best_train.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_242": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.weight, './IterativeFCN_best_valid.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/metrics.py": {
        "torch": {
            "sum_7": {
                "variable": {
                    "value": "FP",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight * (1 - target) * pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_8": {
                "variable": {
                    "value": "FN",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight * (1 - pred) * target",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}