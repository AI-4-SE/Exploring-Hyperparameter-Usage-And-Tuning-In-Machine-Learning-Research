{
    "captioning_code/dataloader.py": {
        "torch": {
            "from_numpy_109": {
                "variable": {
                    "value": "data[fc_feats]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "fc_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(fc_feat, axis=1)",
                            "Call"
                        ],
                        [
                            "np.concatenate((fc_feat, np.tile(c3d_feat, (fc_feat.shape[0], 1))), axis=1)",
                            "Call"
                        ],
                        [
                            "np.concatenate((fc_feat, pop_visual_feat), axis=1)",
                            "Call"
                        ],
                        [
                            "np.concatenate((fc_feat, selected_tool_feat), axis=1)",
                            "Call"
                        ],
                        [
                            "np.concatenate((pop_visual_feat, selected_tool_feat), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_110": {
                "variable": {
                    "value": "data[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(self.max_len)",
                            "Call"
                        ],
                        [
                            "gts[cap_ix]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_111": {
                "variable": {
                    "value": "data[masks]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(self.max_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_112": {
                "variable": {
                    "value": "data[gts]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((len(captions), self.max_len))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "captioning_code/eval.py": {
        "torch": {
            "DataLoader_31": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VideoDataset(opt, 'val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(open(args['recover_opt']))",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_137": {
                "f": {
                    "value": "opt['saved_model']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "captioning_code/misc/rewards.py": {
        "torch": {}
    },
    "captioning_code/misc/utils.py": {
        "torch": {
            "cat_34": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask.new(mask.size(0), 1).fill_(1).cuda(), mask[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_46": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_37": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(seq > 0).float()",
                            "Call"
                        ],
                        [
                            "torch.cat([mask.new(mask.size(0), 1).fill_(1).cuda(), mask[:, :-1]], 1).contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "mask[:, :logits.shape[1]]",
                            "Subscript"
                        ],
                        [
                            "mask.contiguous().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_62": {
                "input": {
                    "value": "loss * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "captioning_code/models/Attention.py": {
        "torch": {
            "Linear_14": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_33": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(encoder_outputs, hidden_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_37": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "o.view(batch_size, seq_len)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_38": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "encoder_outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_38": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_35": {
                "input": {
                    "value": "self.linear1(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "captioning_code/models/DecoderRNN.py": {
        "torch": {
            "Dropout_45": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_46": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.dim_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "dim_word",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "seq_logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seq_logprobs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(seq_logprobs, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(seq_logprobs, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h[0:h.size(0):2], h[1:h.size(0):2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[current_words, context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_101": {
                "variable": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out(decoder_output.squeeze(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "seq_logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seq_logprobs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(seq_logprobs, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(seq_logprobs, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "seq_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seq_preds[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xt, context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_141": {
                "variable": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out(decoder_output.squeeze(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_118": {
                "variable": {
                    "value": "(sampleLogprobs, it)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(self.out(decoder_output.squeeze(1)), dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(self.out(decoder_output.squeeze(1)), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multinomial_129": {
                "variable": {
                    "value": "it",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(logprobs)",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(logprobs, temperature))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_125": {
                "variable": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(self.out(decoder_output.squeeze(1)), dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(self.out(decoder_output.squeeze(1)), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_128": {
                "variable": {
                    "value": "prob_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(logprobs, temperature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_128": {
                "input": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(self.out(decoder_output.squeeze(1)), dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(self.out(decoder_output.squeeze(1)), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "temperature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opt.get('temperature', 1.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "captioning_code/models/EncoderRNN.py": {
        "torch": {
            "Linear_25": {
                "variable": {
                    "value": "self.vid2hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_vid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "captioning_code/models/Res_GCN.py": {
        "torch": {
            "matmul_71": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.theta(f).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_f.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "phi_f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.phi(f).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_72": {
                "variable": {
                    "value": "A_div_C",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(theta_f, phi_f)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A_div_C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(A, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "g_f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.g(f).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "g_f.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_nd(in_channels=self.inter_channels, out_channels=self.in_channels, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "captioning_code/models/S2VT_GCN_Sub.py": {
        "torch": {
            "pow_9": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.div(X, norm)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_9": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_9": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "div_10": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.div(X, norm)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.pow(X, 2).sum(dim=1, keepdim=True).sqrt()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc_visual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc_popup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.fc_tool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "39",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool1d_41": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.feat_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(3, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_50": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(attn, 2)",
                            "Call"
                        ],
                        [
                            "self.feat_attn(feature_view)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_106": {
                "variable": {
                    "value": "features_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "visual_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_visual(vid_feats[:, :, :2048])",
                            "Call"
                        ],
                        [
                            "visual_feat.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.GCN_visual(visual_feat)",
                            "Call"
                        ],
                        [
                            "visual_feat.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(visual_feat, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_107": {
                "variable": {
                    "value": "features_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(visual_feat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(features_v, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_114": {
                "variable": {
                    "value": "features_popup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "popup_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_popup(vid_feats[:, :, 2048:4096])",
                            "Call"
                        ],
                        [
                            "popup_feat.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.GCN_popup(popup_feat)",
                            "Call"
                        ],
                        [
                            "popup_feat.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(popup_feat, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_115": {
                "variable": {
                    "value": "features_popup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_popup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(popup_feat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(features_popup, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_118": {
                "variable": {
                    "value": "features_tool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tool_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_tool(vid_feats[:, :, 4096:4135])",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(tool_feat, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_119": {
                "variable": {
                    "value": "features_tool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_tool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(tool_feat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(features_tool, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features_v, features_popup, features_tool)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_137": {
                "variable": {
                    "value": "visual_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "visual_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_visual(vid_feats[:, :, :2048])",
                            "Call"
                        ],
                        [
                            "visual_feat.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.GCN_visual(visual_feat)",
                            "Call"
                        ],
                        [
                            "visual_feat.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(visual_feat, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_138": {
                "variable": {
                    "value": "popup_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "popup_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_popup(vid_feats[:, :, 2048:4096])",
                            "Call"
                        ],
                        [
                            "popup_feat.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.GCN_popup(popup_feat)",
                            "Call"
                        ],
                        [
                            "popup_feat.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(popup_feat, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_139": {
                "variable": {
                    "value": "tool_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tool_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_tool(vid_feats[:, :, 4096:4135])",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(tool_feat, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "squ_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(visual_feat, popup_feat, tool_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "variable": {
                    "value": "cur_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(attn, 2)",
                            "Call"
                        ],
                        [
                            "self.feat_attn(feature_view)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_56": {
                "variable": {
                    "value": "cur_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(feat[:, i, :, :], attn)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(cur_feat)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "captioning_code/prepro_feats.py": {
        "torch": {
            "DataParallel_104": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pretrainedmodels.inceptionv3(pretrained='imagenet')",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "pretrainedmodels.resnet152(pretrained='imagenet')",
                            "Call"
                        ],
                        [
                            "pretrainedmodels.inceptionv4(num_classes=1000, pretrained='imagenet')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(image_list), C, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "captioning_code/train.py": {
        "torch": {
            "DataLoader_78": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VideoDataset(opt, 'train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "opts.parse_opt()",
                            "Call"
                        ],
                        [
                            "vars(opt)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_220": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "opts.parse_opt()",
                            "Call"
                        ],
                        [
                            "vars(opt)",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "opt['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "opts.parse_opt()",
                            "Call"
                        ],
                        [
                            "vars(opt)",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_224": {
                "variable": {
                    "value": "exp_lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=opt['learning_rate'], weight_decay=opt['weight_decay'])",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "opt['learning_rate_decay_every']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "opts.parse_opt()",
                            "Call"
                        ],
                        [
                            "vars(opt)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "opt['learning_rate_decay_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "opts.parse_opt()",
                            "Call"
                        ],
                        [
                            "vars(opt)",
                            "Call"
                        ]
                    ]
                }
            },
            "synchronize_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_value__52": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "opt['grad_clip']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "synchronize_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_70": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(opt['checkpoint_path'], 'model_%d.pth' % epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_49": {
                "ndarray": {
                    "value": "reward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_self_critical_reward(model, fc_feats, data, seq_preds)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "matching_code/GCN_lib/Res_GCN.py": {
        "torch": {
            "matmul_71": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.theta(f).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_f.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "phi_f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.phi(f).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_72": {
                "variable": {
                    "value": "A_div_C",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(theta_f, phi_f)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A_div_C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(A, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "g_f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.g(f).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "g_f.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_nd(in_channels=self.inter_channels, out_channels=self.in_channels, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "matching_code/data.py": {
        "torch": {
            "stack_80": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(images, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(captions)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PrecompDataset(data_path, data_split, vocab)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_45": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_56": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sort_76": {
                "key": {
                    "value": "lambda x: len(x[1])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "matching_code/evaluate.py": {
        "torch": {}
    },
    "matching_code/evaluation.py": {
        "torch": {
            "load_130": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_202": {
                "obj": {
                    "value": "{'rt': rt, 'rti': rti}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "ranks.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "matching_code/evaluation_models.py": {
        "torch": {
            "load_123": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_126": {
                "variable": {
                    "value": "checkpoint2",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_205": {
                "obj": {
                    "value": "{'rt': rt, 'rti': rti}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "ranks.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "matching_code/model.py": {
        "torch": {
            "pow_19": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.div(X, norm)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_19": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_19": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "div_20": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.div(X, norm)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.pow(X, 2).sum(dim=1, keepdim=True).sqrt()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.fc_visual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.fc_popup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.fc_tool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "39",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.feat_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_62": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(attn, 2)",
                            "Call"
                        ],
                        [
                            "self.feat_attn(feature_view)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_63": {
                "variable": {
                    "value": "attn_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feat.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(attn, 2)",
                            "Call"
                        ],
                        [
                            "self.feat_attn(feature_view)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "attn_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(feat, attn)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(attn_feat)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_104": {
                "variable": {
                    "value": "features_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "visual_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_visual(videos[:, :, :2048])",
                            "Call"
                        ],
                        [
                            "visual_feat.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.GCN_visual(visual_feat)",
                            "Call"
                        ],
                        [
                            "visual_feat.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_105": {
                "variable": {
                    "value": "features_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(visual_feat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(features_v, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_112": {
                "variable": {
                    "value": "features_popup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "popup_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_popup(videos[:, :, 2048:4096])",
                            "Call"
                        ],
                        [
                            "popup_feat.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.GCN_popup(popup_feat)",
                            "Call"
                        ],
                        [
                            "popup_feat.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_113": {
                "variable": {
                    "value": "features_popup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_popup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(popup_feat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(features_popup, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_116": {
                "variable": {
                    "value": "features_tool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tool_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc_tool(videos[:, :, 4096:4135])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_117": {
                "variable": {
                    "value": "features_tool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_tool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(tool_feat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(features_tool, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features_v, features_popup, features_tool)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_167": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "word_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRU_170": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "word_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_182": {
                "variable": {
                    "value": "packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed(x)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_188": {
                "variable": {
                    "value": "padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequence": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.gather(padded[0], 1, I).squeeze(1)",
                            "Call"
                        ],
                        [
                            "l2norm(out)",
                            "Call"
                        ],
                        [
                            "torch.abs(out)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_191": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(lengths).view(-1, 1, 1)",
                            "Call"
                        ],
                        [
                            "Variable(I.expand(x.size(0), 1, self.embed_size) - 1).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(mask)",
                            "Call"
                        ],
                        [
                            "I.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_191": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_293": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(self.txt_enc.parameters())",
                            "Call"
                        ],
                        [
                            "params + list(self.img_enc.cnn.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_140": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((features_v, features_popup, features_tool), 1)",
                            "Call"
                        ],
                        [
                            "features.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.GCN_feat(features)",
                            "Call"
                        ],
                        [
                            "features.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.weighted_feature(features, attn)",
                            "Call"
                        ],
                        [
                            "l2norm(features)",
                            "Call"
                        ],
                        [
                            "torch.abs(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_198": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.gather(padded[0], 1, I).squeeze(1)",
                            "Call"
                        ],
                        [
                            "l2norm(out)",
                            "Call"
                        ],
                        [
                            "torch.abs(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_248": {
                "n": {
                    "value": "scores.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "matching_code/train.py": {
        "torch": {
            "save_221": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "prefix + filename",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_100": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}