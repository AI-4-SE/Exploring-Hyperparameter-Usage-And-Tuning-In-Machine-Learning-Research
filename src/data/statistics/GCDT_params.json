{
    "thumt/bin/trainer.py": {
        "tensorflow": {
            "OptimizerOptions_267": {
                "variable": {
                    "value": "optimizer_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "opt_level": {
                    "value": "tf.OptimizerOptions.L1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "do_function_inlining": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GraphOptions_269": {
                "variable": {
                    "value": "graph_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer_options": {
                    "value": "optimizer_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.OptimizerOptions(opt_level=tf.OptimizerOptions.L1, do_function_inlining=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_270": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "graph_options": {
                    "value": "graph_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GraphOptions(optimizer_options=optimizer_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_234": {
                "variable": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_235": {
                "variable": {
                    "value": "warmup_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params.warmup_steps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_302": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_346": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_362": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_learning_rate_decay(params.learning_rate, global_step, params)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(learning_rate, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_366": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_learning_rate_decay(params.learning_rate, global_step, params)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(learning_rate, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "beta1": {
                    "value": "params.adam_beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta2": {
                    "value": "params.adam_beta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "params.adam_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_115": {
                "msg": {
                    "value": "'Restoring hyper parameters from %s' % p_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_120": {
                "msg": {
                    "value": "'Restoring model parameters from %s' % m_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Exists_128": {
                "filename": {
                    "value": "output_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MkDir_129": {
                "dirname": {
                    "value": "output_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "to_float_242": {
                "variable": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_243": {
                "variable": {
                    "value": "warmup_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params.warmup_steps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_358": {
                "msg": {
                    "value": "Total trainable variables size: %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "total_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "total_size + v_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_363": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_learning_rate_decay(params.learning_rate, global_step, params)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(learning_rate, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_op_381": {
                "variable": {
                    "value": "zero_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "zero_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_op_382": {
                "variable": {
                    "value": "collect_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "collect_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Exists_111": {
                "filename": {
                    "value": "m_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, model_name + '.json')",
                            "Call"
                        ]
                    ]
                }
            },
            "random_uniform_initializer_217": {
                "minval": {
                    "value": "-max_val",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "max_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params.initializer_gain",
                            "Attribute"
                        ]
                    ]
                }
            },
            "minimum_237": {
                "x": {
                    "value": "(step + 1) * warmup_steps ** (-1.5)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "(step + 1) ** (-0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_250": {
                "variable": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_252": {
                "variable": {
                    "value": "warmup_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params.warmup_steps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_253": {
                "x": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "float(len(params.device_list))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "n * (2 * n) ** ((params.s - n * step) / (params.e - params.s))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_343": {
                "inputs": {
                    "value": "sharded_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parallel.parallel_model(model.get_training_func(initializer), features, params.device_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_354": {
                "msg": {
                    "value": "%s\\tshape    %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "v.name[:-2].ljust(80)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "str(v.shape).ljust(20)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_397": {
                "variable": {
                    "value": "(gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[item[0] for item in grads_and_vars]",
                            "ListComp"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "params.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StopAtStepHook_417": {
                "last_step": {
                    "value": "params.train_steps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NanTensorHook_418": {
                "loss_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add_n(sharded_losses) / len(sharded_losses)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "LoggingTensorHook_419": {
                "tensors": {
                    "value": "{'step': global_step, 'loss': loss, 'chars': tf.shape(features['chars']), 'source': tf.shape(features['source']), 'lr': learning_rate}",
                    "type": "Dict",
                    "possible_values": []
                },
                "every_n_iter": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CheckpointSaverHook_430": {
                "checkpoint_dir": {
                    "value": "params.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_secs": {
                    "value": "params.save_checkpoint_secs or None",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "save_steps": {
                    "value": "params.save_checkpoint_steps or None",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "saver": {
                    "value": "tf.train.Saver(max_to_keep=params.keep_checkpoint_max, sharded=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MonitoredTrainingSession_460": {
                "checkpoint_dir": {
                    "value": "params.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hooks": {
                    "value": "train_hooks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.train.StopAtStepHook(last_step=params.train_steps), tf.train.NanTensorHook(loss), tf.train.LoggingTensorHook({'step': global_step, 'loss': loss, 'chars': tf.shape(features['chars']), 'source': tf.shape(features['source']), 'lr': learning_rate}, every_n_iter=1), tf.train.CheckpointSaverHook(checkpoint_dir=params.output, save_secs=params.save_checkpoint_secs or None, save_steps=params.save_checkpoint_steps or None, saver=tf.train.Saver(max_to_keep=params.keep_checkpoint_max, sharded=False))]",
                            "List"
                        ]
                    ]
                },
                "save_checkpoint_secs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, graph_options=graph_options)",
                            "Call"
                        ],
                        [
                            "session_config(params)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_219": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "params.initializer_gain",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_245": {
                "x": {
                    "value": "(step + 1) * warmup_steps ** (-1.0) * warmup_steps ** (-0.5)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "(step + 1) ** (-0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_255": {
                "x": {
                    "value": "learning_rate * decay",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "5e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "trainable_variables_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_402": {
                "control_inputs": {
                    "value": "[collect_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "piecewise_constant_257": {
                "x": {
                    "value": "tf.to_int32(global_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "boundaries": {
                    "value": "params.learning_rate_boundaries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "params.learning_rate_values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_423": {
                "input": {
                    "value": "features['chars']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_424": {
                "input": {
                    "value": "features['source']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Saver_434": {
                "max_to_keep": {
                    "value": "params.keep_checkpoint_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sharded": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_int32_257": {
                "x": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "thumt/bin/translator.py": {
        "tensorflow": {
            "OptimizerOptions_155": {
                "variable": {
                    "value": "optimizer_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "opt_level": {
                    "value": "tf.OptimizerOptions.L1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "do_function_inlining": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GraphOptions_157": {
                "variable": {
                    "value": "graph_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer_options": {
                    "value": "optimizer_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.OptimizerOptions(opt_level=tf.OptimizerOptions.L1, do_function_inlining=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_158": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "graph_options": {
                    "value": "graph_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GraphOptions(optimizer_options=optimizer_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_verbosity_185": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_247": {
                "variable": {
                    "value": "all_var_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_261": {
                "variable": {
                    "value": "assign_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*assign_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ChiefSessionCreator_263": {
                "variable": {
                    "value": "sess_creator",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "session_config(params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Exists_101": {
                "filename": {
                    "value": "m_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, model_name + '.json')",
                            "Call"
                        ]
                    ]
                }
            },
            "info_105": {
                "msg": {
                    "value": "'Restoring model parameters from %s' % m_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Graph_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "list_variables_209": {
                "variable": {
                    "value": "var_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_checkpoint_211": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MonitoredSession_270": {
                "session_creator": {
                    "value": "sess_creator",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.ChiefSessionCreator(config=session_config(params))",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_177": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var_list",
                            "Name"
                        ]
                    ]
                },
                "value": {
                    "value": "value_dict[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_277": {
                "x": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "message",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Finished batch %d' % len(results)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_176": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "thumt/data/dataset.py": {
        "tensorflow": {
            "bucket_by_sequence_length_71": {
                "variable": {
                    "value": "(_, outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "element_length_func": {
                    "value": "max_example_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "tf.maximum(max_example_length, seq_length)",
                            "Call"
                        ]
                    ]
                },
                "bucket_boundaries": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "bucket_batch_sizes": {
                    "value": "batch_sizes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[max(1, batch_size // length) for length in boundaries + [max_length]]",
                            "ListComp"
                        ],
                        [
                            "[b * shard_multiplier for b in batch_sizes]",
                            "ListComp"
                        ],
                        [
                            "batch_size * shard_multiplier",
                            "BinOp"
                        ]
                    ]
                },
                "padded_shapes": {
                    "value": "[b + 1 for b in boundaries]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_threads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "capacity": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bucket_capacities": {
                    "value": "bucket_capacities",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[2 * b for b in batch_sizes]",
                            "ListComp"
                        ],
                        [
                            "[2 * n for n in boundaries + [max_length]]",
                            "ListComp"
                        ]
                    ]
                },
                "dynamic_pad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "keep_input": {
                    "value": "max_example_length <= max_length",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "to_int32_183": {
                "variable": {
                    "value": "features[source]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "features['source']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_184": {
                "variable": {
                    "value": "features[target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "features['target']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_185": {
                "variable": {
                    "value": "features[source_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "features['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_186": {
                "variable": {
                    "value": "features[target_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "features['target_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_187": {
                "variable": {
                    "value": "features[char_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "features['char_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_189": {
                "variable": {
                    "value": "features[source_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_190": {
                "variable": {
                    "value": "features[target_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['target_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_298": {
                "variable": {
                    "value": "features[source]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "features['source']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_299": {
                "variable": {
                    "value": "features[target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "features['target']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_300": {
                "variable": {
                    "value": "features[source_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "features['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_301": {
                "variable": {
                    "value": "features[target_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "features['target_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_302": {
                "variable": {
                    "value": "features[char_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "features['char_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_304": {
                "variable": {
                    "value": "features[source_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_305": {
                "variable": {
                    "value": "features[target_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['target_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_33": {
                "name": {
                    "value": "batch_examples",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_97": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_204": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_335": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_434": {
                "value": {
                    "value": "params.vocabulary['source']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_438": {
                "value": {
                    "value": "params.vocabulary['char']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_519": {
                "value": {
                    "value": "params.vocabulary['source']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_523": {
                "value": {
                    "value": "params.vocabulary['char']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "maximum_69": {
                "variable": {
                    "value": "max_example_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "max_example_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "tf.maximum(max_example_length, seq_length)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(v)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_157": {
                "value": {
                    "value": "params.vocabulary['source']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_161": {
                "value": {
                    "value": "params.vocabulary['target']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_165": {
                "value": {
                    "value": "params.vocabulary['char']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_272": {
                "value": {
                    "value": "params.vocabulary['source']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_276": {
                "value": {
                    "value": "params.vocabulary['target']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_280": {
                "value": {
                    "value": "params.vocabulary['char']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_68": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(example.values())",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_144": {
                "input": {
                    "value": "src[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_145": {
                "input": {
                    "value": "tgt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_259": {
                "input": {
                    "value": "src[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_260": {
                "input": {
                    "value": "tgt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_406": {
                "input": {
                    "value": "words",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[w.encode() for w in line_words.strip().split()] + ['<eos>'.encode()]",
                            "BinOp"
                        ],
                        [
                            "[w.encode() for w in line_words.strip().split()] + ['<eos>'.encode()]",
                            "BinOp"
                        ],
                        [
                            "[w.encode() for w in line.strip().split()] + ['<eos>'.encode()]",
                            "BinOp"
                        ],
                        [
                            "[w.encode() for w in line_words.strip().split()] + ['<eos>'.encode()]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_488": {
                "input": {
                    "value": "words",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[w.encode() for w in line_words.strip().split()] + ['<eos>'.encode()]",
                            "BinOp"
                        ],
                        [
                            "[w.encode() for w in line_words.strip().split()] + ['<eos>'.encode()]",
                            "BinOp"
                        ],
                        [
                            "[w.encode() for w in line.strip().split()] + ['<eos>'.encode()]",
                            "BinOp"
                        ],
                        [
                            "[w.encode() for w in line_words.strip().split()] + ['<eos>'.encode()]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "thumt/data/record.py": {
        "tensorflow": {
            "bucket_by_sequence_length_95": {
                "variable": {
                    "value": "(_, outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "element_length_func": {
                    "value": "max_example_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "tf.maximum(max_example_length, seq_length)",
                            "Call"
                        ]
                    ]
                },
                "bucket_boundaries": {
                    "value": "examples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "input_pipeline(file_patterns, mode, capacity)",
                            "Call"
                        ]
                    ]
                },
                "bucket_batch_sizes": {
                    "value": "batch_sizes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[max(1, batch_size // length) for length in boundaries + [max_length]]",
                            "ListComp"
                        ],
                        [
                            "[b * shard_multiplier for b in batch_sizes]",
                            "ListComp"
                        ],
                        [
                            "batch_size * shard_multiplier",
                            "BinOp"
                        ]
                    ]
                },
                "padded_shapes": {
                    "value": "[b + 1 for b in boundaries]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "capacity": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bucket_capacities": {
                    "value": "bucket_capacities",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[2 * b for b in batch_sizes]",
                            "ListComp"
                        ],
                        [
                            "[2 * n for n in boundaries + [max_length]]",
                            "ListComp"
                        ]
                    ]
                },
                "dynamic_pad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "keep_input": {
                    "value": "max_example_length <= max_length",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "VarLenFeature_19": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_20": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_21": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_22": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_26": {
                "op": {
                    "value": "source",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_27": {
                "op": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_28": {
                "op": {
                    "value": "source_length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_29": {
                "op": {
                    "value": "target_length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_33": {
                "name": {
                    "value": "examples_queue",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_63": {
                "name": {
                    "value": "batch_examples",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_93": {
                "variable": {
                    "value": "max_example_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "max_example_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "tf.maximum(max_example_length, seq_length)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(v)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "name_scope_110": {
                "name": {
                    "value": "input_queues",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_int32_57": {
                "x": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(examples.values())",
                            "Call"
                        ]
                    ]
                }
            },
            "device_111": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_138": {
                "input": {
                    "value": "feature_map['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_139": {
                "input": {
                    "value": "feature_map['target_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_92": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(examples.values())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "thumt/data/vocab.py": {
        "tensorflow": {
            "GFile_13": {
                "name": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "thumt/layers/attention.py": {
        "tensorflow": {
            "to_float_30": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_43": {
                "variable": {
                    "value": "signal",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(scaled_time), tf.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_44": {
                "variable": {
                    "value": "signal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, length, channels])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, tf.mod(channels, 2)]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_45": {
                "variable": {
                    "value": "signal",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, length, channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, length, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x)[:-2], [-1]], 0))",
                            "Call"
                        ],
                        [
                            "combine_heads(alpha[:, :, :, None] * memories_split)",
                            "Call"
                        ],
                        [
                            "combine_heads(results['outputs'])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([tf.shape(x)[:-1], [n, -1]], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_79": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x)[:-2], [-1]], 0))",
                            "Call"
                        ],
                        [
                            "combine_heads(alpha[:, :, :, None] * memories_split)",
                            "Call"
                        ],
                        [
                            "combine_heads(results['outputs'])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x)[:-2], [-1]], 0))",
                            "Call"
                        ],
                        [
                            "combine_heads(alpha[:, :, :, None] * memories_split)",
                            "Call"
                        ],
                        [
                            "combine_heads(results['outputs'])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([tf.shape(x)[:-2], [-1]], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_150": {
                "variable": {
                    "value": "mem_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "memories",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_163": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(memories, [-1, key_size])",
                            "Call"
                        ],
                        [
                            "linear(k, hidden_size, False, False, scope='k_transform')",
                            "Call"
                        ],
                        [
                            "cache['key']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(k, [mem_shape[0], mem_shape[1], hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(memories, [-1, key_size])",
                            "Call"
                        ],
                        [
                            "linear(k, hidden_size, False, False, scope='k_transform')",
                            "Call"
                        ],
                        [
                            "cache['key']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(k, [mem_shape[0], mem_shape[1], hidden_size])",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(keys, 2), [1, 1, length_q, 1, 1])",
                            "Call"
                        ],
                        [
                            "linear(keys, hidden_size, True, True, name='key_transform')",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[mem_shape[0], mem_shape[1], hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_165": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "q[:, None, :] + k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_166": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tanh(q[:, None, :] + k)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden, [-1, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(q + k)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_170": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "linear(hidden, 1, False, False, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1, mem_shape[1]])",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "linear(hidden, 1, False, False, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [mem_shape[0], num_heads, mem_shape[1]])",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(linear(combined, 1, True, True, name='logits'), axis=-1)",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(queries, keys, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, mem_shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_175": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "linear(hidden, 1, False, False, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1, mem_shape[1]])",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "linear(hidden, 1, False, False, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [mem_shape[0], num_heads, mem_shape[1]])",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(linear(combined, 1, True, True, name='logits'), axis=-1)",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(queries, keys, transpose_b=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_203": {
                "variable": {
                    "value": "mem_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "memories",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_216": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(memories, [-1, key_size])",
                            "Call"
                        ],
                        [
                            "linear(k, hidden_size, False, False, scope='k_transform')",
                            "Call"
                        ],
                        [
                            "cache['key']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(k, [mem_shape[0], mem_shape[1], hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(memories, [-1, key_size])",
                            "Call"
                        ],
                        [
                            "linear(k, hidden_size, False, False, scope='k_transform')",
                            "Call"
                        ],
                        [
                            "cache['key']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(k, [mem_shape[0], mem_shape[1], hidden_size])",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(keys, 2), [1, 1, length_q, 1, 1])",
                            "Call"
                        ],
                        [
                            "linear(keys, hidden_size, True, True, name='key_transform')",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[mem_shape[0], mem_shape[1], hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_226": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "q + k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_231": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "linear(hidden, 1, False, False, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1, mem_shape[1]])",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "linear(hidden, 1, False, False, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [mem_shape[0], num_heads, mem_shape[1]])",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(linear(combined, 1, True, True, name='logits'), axis=-1)",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(queries, keys, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[mem_shape[0], num_heads, mem_shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_236": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "linear(hidden, 1, False, False, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1, mem_shape[1]])",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "linear(hidden, 1, False, False, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [mem_shape[0], num_heads, mem_shape[1]])",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(linear(combined, 1, True, True, name='logits'), axis=-1)",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(queries, keys, transpose_b=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_278": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(queries, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, length_kv, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_279": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(keys, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, length_q, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_290": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "linear(combined, 1, True, True, name='logits')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_296": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "linear(hidden, 1, False, False, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1, mem_shape[1]])",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "linear(hidden, 1, False, False, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [mem_shape[0], num_heads, mem_shape[1]])",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(linear(combined, 1, True, True, name='logits'), axis=-1)",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(queries, keys, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "attention_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_301": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, keep_prob)",
                            "Call"
                        ],
                        [
                            "results['weights']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_326": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "keys",
                    "type": "Variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_331": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "linear(hidden, 1, False, False, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1, mem_shape[1]])",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "linear(hidden, 1, False, False, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [mem_shape[0], num_heads, mem_shape[1]])",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(linear(combined, 1, True, True, name='logits'), axis=-1)",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(queries, keys, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "attention_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_336": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, keep_prob)",
                            "Call"
                        ],
                        [
                            "results['weights']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "name_scope_27": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "add_timing_signal",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_58": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "split_heads",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_67": {
                "a": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x)[:-1], [n, -1]], 0))",
                            "Call"
                        ],
                        [
                            "inf * (1.0 - lower_triangle)",
                            "BinOp"
                        ],
                        [
                            "(1.0 - mask) * inf",
                            "BinOp"
                        ],
                        [
                            "inf * (1.0 - lower_triangle + mask_triangle)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_77": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "combine_heads",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_98": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "attention_bias",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_148": {
                "name_or_scope": {
                    "value": "scope or 'attention'",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "values": {
                    "value": "[query, memories, bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_154": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "memories",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, key_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_201": {
                "name_or_scope": {
                    "value": "scope or 'attention_mhead'",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "values": {
                    "value": "[query, memories, bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_207": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "memories",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, key_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_274": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "additive_attention",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[queries, keys, values, bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_282": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear(tf.concat([q, k], axis=-1), hidden_size, True, True, name='qk_transform')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_287": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "q + k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_299": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, keep_prob)",
                            "Call"
                        ],
                        [
                            "results['weights']",
                            "Subscript"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_323": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "multiplicative_attention",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[queries, keys, values, bias]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_334": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, keep_prob)",
                            "Call"
                        ],
                        [
                            "results['weights']",
                            "Subscript"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_372": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "multihead_attention",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[queries, memories]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "split_378": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tanh(linear(tf.concat([q, k], axis=-1), hidden_size, True, True, name='qk_transform'))",
                            "Call"
                        ],
                        [
                            "tf.tanh(q + k)",
                            "Call"
                        ],
                        [
                            "linear(queries, size, True, True, scope='qkv_transform')",
                            "Call"
                        ],
                        [
                            "linear(memories, key_size + value_size, True, scope='kv_transform')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[key_size, key_size, value_size]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_384": {
                "variable": {
                    "value": "(k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tanh(linear(tf.concat([q, k], axis=-1), hidden_size, True, True, name='qk_transform'))",
                            "Call"
                        ],
                        [
                            "tf.tanh(q + k)",
                            "Call"
                        ],
                        [
                            "linear(queries, size, True, True, scope='qkv_transform')",
                            "Call"
                        ],
                        [
                            "linear(memories, key_size + value_size, True, scope='kv_transform')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[key_size, value_size]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_28": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x)[:-2], [-1]], 0))",
                            "Call"
                        ],
                        [
                            "combine_heads(alpha[:, :, :, None] * memories_split)",
                            "Call"
                        ],
                        [
                            "combine_heads(results['outputs'])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_29": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x)[:-2], [-1]], 0))",
                            "Call"
                        ],
                        [
                            "combine_heads(alpha[:, :, :, None] * memories_split)",
                            "Call"
                        ],
                        [
                            "combine_heads(results['outputs'])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_37": {
                "x": {
                    "value": "tf.to_float(tf.range(num_timescales)) * -log_timescale_increment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_41": {
                "input": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.range(length))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_42": {
                "input": {
                    "value": "inv_timescales",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_65": {
                "values": {
                    "value": "[tf.shape(x)[:-1], [n, -1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_83": {
                "values": {
                    "value": "[tf.shape(x)[:-2], [-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_105": {
                "tensor": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x)[:-1], [n, -1]], 0))",
                            "Call"
                        ],
                        [
                            "inf * (1.0 - lower_triangle)",
                            "BinOp"
                        ],
                        [
                            "(1.0 - mask) * inf",
                            "BinOp"
                        ],
                        [
                            "inf * (1.0 - lower_triangle + mask_triangle)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, length, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_178": {
                "input_tensor": {
                    "value": "alpha[:, :, None] * memories",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_241": {
                "input_tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x)[:-2], [-1]], 0))",
                            "Call"
                        ],
                        [
                            "combine_heads(alpha[:, :, :, None] * memories_split)",
                            "Call"
                        ],
                        [
                            "combine_heads(results['outputs'])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_276": {
                "input": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_277": {
                "input": {
                    "value": "keys",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_278": {
                "input": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_279": {
                "input": {
                    "value": "keys",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_35": {
                "x": {
                    "value": "num_timescales",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_43": {
                "x": {
                    "value": "scaled_time",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_43": {
                "x": {
                    "value": "scaled_time",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_102": {
                "shape": {
                    "value": "[length, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_109": {
                "input": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x)[:-1], [n, -1]], 0))",
                            "Call"
                        ],
                        [
                            "inf * (1.0 - lower_triangle)",
                            "BinOp"
                        ],
                        [
                            "(1.0 - mask) * inf",
                            "BinOp"
                        ],
                        [
                            "inf * (1.0 - lower_triangle + mask_triangle)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_112": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_114": {
                "input": {
                    "value": "-tf.log(1 + tf.abs(diff))",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_38": {
                "x": {
                    "value": "tf.range(num_timescales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mod_44": {
                "x1": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(x)[2]",
                            "Subscript"
                        ]
                    ]
                },
                "x2": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_47": {
                "x": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(x)[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "where_118": {
                "variable": {
                    "value": "distance",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "distance > length",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "distance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(distance > length, 0, distance)",
                            "Call"
                        ],
                        [
                            "tf.cast(distance, tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_119": {
                "variable": {
                    "value": "distance",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "distance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(distance > length, 0, distance)",
                            "Call"
                        ],
                        [
                            "tf.cast(distance, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_282": {
                "values": {
                    "value": "[q, k]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_65": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x)[:-2], [-1]], 0))",
                            "Call"
                        ],
                        [
                            "combine_heads(alpha[:, :, :, None] * memories_split)",
                            "Call"
                        ],
                        [
                            "combine_heads(results['outputs'])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_83": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x)[:-2], [-1]], 0))",
                            "Call"
                        ],
                        [
                            "combine_heads(alpha[:, :, :, None] * memories_split)",
                            "Call"
                        ],
                        [
                            "combine_heads(results['outputs'])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_113": {
                "input": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.range(length))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_127": {
                "tensor": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.concat([tf.shape(x)[:-1], [n, -1]], 0))",
                            "Call"
                        ],
                        [
                            "inf * (1.0 - lower_triangle)",
                            "BinOp"
                        ],
                        [
                            "(1.0 - mask) * inf",
                            "BinOp"
                        ],
                        [
                            "inf * (1.0 - lower_triangle + mask_triangle)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, length, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_121": {
                "shape": {
                    "value": "[length, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_114": {
                "x": {
                    "value": "1 + tf.abs(diff)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_124": {
                "shape": {
                    "value": "[length, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_114": {
                "x": {
                    "value": "diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(r, 0) - tf.expand_dims(r, 1)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "thumt/layers/cnn.py": {
        "tensorflow": {
            "get_variable_5": {
                "variable": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "filters",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(input_tensor)",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_36": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_tensor, shape=flat_shape)",
                            "Call"
                        ],
                        [
                            "input_tensor * weights",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_44": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(weights, shape=[dim1, dim2, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(weights)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[dim1, dim2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_45": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(weights, shape=[dim1, dim2, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_49": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_tensor, shape=flat_shape)",
                            "Call"
                        ],
                        [
                            "input_tensor * weights",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "flat_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[dim1, dim2, dim3]",
                            "List"
                        ]
                    ]
                }
            },
            "conv1d_58": {
                "variable": {
                    "value": "t_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_tensor, shape=flat_shape)",
                            "Call"
                        ],
                        [
                            "input_tensor * weights",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('filters', shape=shape, initializer=tf.truncated_normal_initializer(stddev=0.1))",
                            "Call"
                        ],
                        [
                            "get_filter(filter_shape)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_66": {
                "variable": {
                    "value": "t_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "t_conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(input_tensor, filters, stride=1, padding='SAME', name='conv')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "variable": {
                    "value": "t_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(t_conv, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(t_max, shape=final_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "final_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[shape[i] for i in range(ndims - 2)] + [filter_num]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_7": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "thumt/layers/nn.py": {
        "tensorflow": {
            "concat_84": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.shape(candidate)[:-1], [output_size, maxpart]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "candidate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "linear(inputs, output_size * maxpart, use_bias, concat, dtype=dtype, scope=scope or 'maxout')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[input_size, output_size]",
                            "List"
                        ],
                        [
                            "[input_size[i], output_size]",
                            "List"
                        ],
                        [
                            "[output_size]",
                            "List"
                        ],
                        [
                            "tf.concat([tf.shape(candidate)[:-1], [output_size, maxpart]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_87": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(candidate, shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_34": {
                "variable": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.shape(inputs[0])[:-1], [output_size]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_55": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "results",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add_n(results)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, output_shape)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(value, -1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.shape(inputs[0])[:-1], [output_size]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_105": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scale",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[channel_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_108": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "offset",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[channel_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_111": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[inputs]",
                            "List"
                        ],
                        [
                            "[tf.reshape(inp, [-1, inp.shape[-1].value]) for inp in inputs]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(inputs, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_112": {
                "variable": {
                    "value": "variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(inputs - mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_132": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs.get('labels')",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_144": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_148": {
                "variable": {
                    "value": "soft_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(labels, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(logits)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "on_value": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 - smoothing",
                            "BinOp"
                        ]
                    ]
                },
                "off_value": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "smoothing / n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_150": {
                "variable": {
                    "value": "xentropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs.get('logits')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "soft_targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(labels, tf.int32), depth=vocab_size, on_value=p, off_value=q)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_25": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs.get('scope')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_43": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[inputs]",
                            "List"
                        ],
                        [
                            "[tf.reshape(inp, [-1, inp.shape[-1].value]) for inp in inputs]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(inputs, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_46": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[input_size, output_size]",
                            "List"
                        ],
                        [
                            "[input_size[i], output_size]",
                            "List"
                        ],
                        [
                            "[output_size]",
                            "List"
                        ],
                        [
                            "tf.concat([tf.shape(candidate)[:-1], [output_size, maxpart]], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_59": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[input_size, output_size]",
                            "List"
                        ],
                        [
                            "[input_size[i], output_size]",
                            "List"
                        ],
                        [
                            "[output_size]",
                            "List"
                        ],
                        [
                            "tf.concat([tf.shape(candidate)[:-1], [output_size, maxpart]], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_60": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add_n(results)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, output_shape)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(value, -1)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias', shape, dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs.get('scope')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "layer_norm",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_129": {
                "name": {
                    "value": "scope or 'smoothed_softmax_cross_entropy_with_logits'",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[logits, labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_135": {
                "variable": {
                    "value": "ce",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs.get('logits')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs.get('labels')",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_37": {
                "tensor": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, inp.shape[-1].value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_52": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'matrix_%d' % i",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[input_size, output_size]",
                            "List"
                        ],
                        [
                            "[input_size[i], output_size]",
                            "List"
                        ],
                        [
                            "[output_size]",
                            "List"
                        ],
                        [
                            "tf.concat([tf.shape(candidate)[:-1], [output_size, maxpart]], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "square_112": {
                "x": {
                    "value": "inputs - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_114": {
                "x": {
                    "value": "variance + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_142": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs.get('logits')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_148": {
                "x": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kwargs.get('labels')",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[inputs]",
                            "List"
                        ],
                        [
                            "[tf.reshape(inp, [-1, inp.shape[-1].value]) for inp in inputs]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(inputs, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('matrix', shape, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape, dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_84": {
                "input": {
                    "value": "candidate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "linear(inputs, output_size * maxpart, use_bias, concat, dtype=dtype, scope=scope or 'maxout')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_initializer_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_34": {
                "input": {
                    "value": "inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_53": {
                "a": {
                    "value": "inputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('matrix', shape, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape, dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_159": {
                "x": {
                    "value": "q + 1e-20",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "thumt/layers/rnn_cell.py": {
        "tensorflow": {
            "sigmoid_32": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear(all_inputs, self._num_units, False, False, scope='reset_gate')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_34": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear(all_inputs, self._num_units, False, False, scope='update_gate')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_73": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear(all_inputs, self._num_units, False, False, scope='reset_gate')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_75": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear(all_inputs, self._num_units, False, False, scope='update_gate')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_211": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "layer_norm(linear(all_inputs, self._num_units, False, False, scope='reset_gate'), scope='reset_gate_ln')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_214": {
                "variable": {
                    "value": "r2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "layer_norm(linear(all_inputs, self._num_units, False, False, scope='reset_gate2'), scope='reset_gate2_ln')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_217": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "layer_norm(linear(all_inputs, self._num_units, False, False, scope='update_gate'), scope='update_gate_ln')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_230": {
                "variable": {
                    "value": "rh",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "layer_norm(linear(new_state, self._num_units, False, False, scope='trans_reset_gate_l%d' % i), scope='trans_reset_gate_ln_l%d' % i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_233": {
                "variable": {
                    "value": "uh",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "layer_norm(linear(new_state, self._num_units, False, False, scope='trans_update_gate_l%d' % i), scope='trans_update_gate_ln_l%d' % i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_236": {
                "variable": {
                    "value": "ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rh * linear(new_state, self._num_units, True, False, scope='trans_candidate_l%d' % i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "gru_cell",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, state]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "gru_cell",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, state]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_205": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "gru_cell",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, state]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_225": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "linear(all_inputs, self._num_units, True, False, scope='candidate')",
                            "Call"
                        ],
                        [
                            "linear(all_inputs, self._num_units, True, False, scope='candidate')",
                            "Call"
                        ],
                        [
                            "tf.tanh(linear_inputs + r * linear_state) + r2 * linear_inputs_transform",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(c, self._keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_239": {
                "variable": {
                    "value": "ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tanh(rh * linear(new_state, self._num_units, True, False, scope='trans_candidate_l%d' % i))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(ch, self._keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_223": {
                "x": {
                    "value": "linear_inputs + r * linear_state",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_40": {
                "x": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "linear(all_inputs, self._num_units, True, False, scope='candidate')",
                            "Call"
                        ],
                        [
                            "linear(all_inputs, self._num_units, True, False, scope='candidate')",
                            "Call"
                        ],
                        [
                            "tf.tanh(linear_inputs + r * linear_state) + r2 * linear_inputs_transform",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(c, self._keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_81": {
                "x": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "linear(all_inputs, self._num_units, True, False, scope='candidate')",
                            "Call"
                        ],
                        [
                            "linear(all_inputs, self._num_units, True, False, scope='candidate')",
                            "Call"
                        ],
                        [
                            "tf.tanh(linear_inputs + r * linear_state) + r2 * linear_inputs_transform",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(c, self._keep_prob)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "thumt/models/rnnsearch.py": {
        "tensorflow": {
            "zeros_57": {
                "variable": {
                    "value": "zero_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch, output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dtype or inputs.dtype",
                            "BoolOp"
                        ],
                        [
                            "dtype or inputs.dtype",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TensorArray_62": {
                "variable": {
                    "value": "input_ta",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dtype or inputs.dtype",
                            "BoolOp"
                        ],
                        [
                            "dtype or inputs.dtype",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "time_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(inputs)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(inputs)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "tensor_array_name": {
                    "value": "input_array",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TensorArray_64": {
                "variable": {
                    "value": "output_ta",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dtype or inputs.dtype",
                            "BoolOp"
                        ],
                        [
                            "dtype or inputs.dtype",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "time_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(inputs)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(inputs)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "tensor_array_name": {
                    "value": "output_array",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_77": {
                "variable": {
                    "value": "time",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "time",
                    "type": "str",
                    "possible_values": []
                }
            },
            "while_loop_80": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda t, *_: t < time_steps",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "loop_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "loop_vars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(time, output_ta, initial_state)",
                            "Tuple"
                        ],
                        [
                            "(time, output_ta, initial_state)",
                            "Tuple"
                        ]
                    ]
                },
                "parallel_iterations": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_89": {
                "variable": {
                    "value": "all_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "all_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_final_ta.stack()",
                            "Call"
                        ],
                        [
                            "tf.transpose(all_output, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_162": {
                "variable": {
                    "value": "zero_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch, output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dtype or inputs.dtype",
                            "BoolOp"
                        ],
                        [
                            "dtype or inputs.dtype",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_163": {
                "variable": {
                    "value": "zero_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch, memory.shape[-1].value]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dtype or inputs.dtype",
                            "BoolOp"
                        ],
                        [
                            "dtype or inputs.dtype",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sequence_mask_338": {
                "variable": {
                    "value": "src_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "features['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.shape(encoder_output)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_341": {
                "variable": {
                    "value": "src_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(features['source_length'], maxlen=tf.shape(encoder_output)[1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(src_mask, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_345": {
                "variable": {
                    "value": "shifted_tgt_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tgt_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(tgt_emb, features['target'])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tgt_inputs, tgt_bias)",
                            "Call"
                        ],
                        [
                            "layers.attention.add_timing_signal(tgt_inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tgt_inputs, 1.0 - params.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(tgt_emb, features['target'])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tgt_inputs, tgt_bias)",
                            "Call"
                        ],
                        [
                            "layers.attention.add_timing_signal(tgt_inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tgt_inputs, 1.0 - params.dropout)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_380": {
                "variable": {
                    "value": "readout",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "readout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.nn.maxout(maxout_features, maxout_size, params.maxnum, concat=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(readout)",
                            "Call"
                        ],
                        [
                            "layers.nn.maxout(maxout_features, maxout_size, params.maxnum, concat=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(readout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(readout, 1.0 - params.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(readout, 1.0 - params.dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_388": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.nn.linear(readout, tgt_vocab_size, True, False, scope='softmax')",
                            "Call"
                        ],
                        [
                            "layers.nn.linear(readout, tgt_vocab_size, True, False, scope='softmax')",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1, tgt_vocab_size])",
                            "Call"
                        ],
                        [
                            "model_graph(features, None, params)",
                            "Call"
                        ],
                        [
                            "model_graph(features, None, params)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tgt_vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_397": {
                "variable": {
                    "value": "ce",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ce",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.nn.smoothed_softmax_cross_entropy_with_logits(logits=logits, labels=labels, smoothing=params.label_smoothing, normalize=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(ce, tf.shape(labels))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_398": {
                "variable": {
                    "value": "tgt_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sequence_mask(features['target_length'], maxlen=tf.shape(features['target'])[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_46": {
                "condition": {
                    "value": "copy_cond",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "time >= length",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "new_output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reverse_sequence_99": {
                "variable": {
                    "value": "inputs_bw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reverse_sequence_126": {
                "variable": {
                    "value": "inputs_bw0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_fw0",
                    "type": "Variable",
                    "possible_values": []
                },
                "seq_lengths": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reverse_sequence_137": {
                "variable": {
                    "value": "inputs_bw1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reverse_sequence_144": {
                "variable": {
                    "value": "inputs_fw1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_bw1",
                    "type": "Variable",
                    "possible_values": []
                },
                "seq_lengths": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_166": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_167": {
                "variable": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(memory, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_169": {
                "variable": {
                    "value": "input_ta",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "time_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(inputs)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(inputs)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "tensor_array_name": {
                    "value": "input_array",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TensorArray_171": {
                "variable": {
                    "value": "memory_ta",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "tf.shape(memory)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor_array_name": {
                    "value": "memory_array",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TensorArray_173": {
                "variable": {
                    "value": "output_ta",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "time_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(inputs)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(inputs)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "tensor_array_name": {
                    "value": "output_array",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_180": {
                "variable": {
                    "value": "initial_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "initial_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cell.zero_state(batch, dtype)",
                            "Call"
                        ],
                        [
                            "layers.nn.linear(initial_state, output_size, True, False, scope='s_transform')",
                            "Call"
                        ],
                        [
                            "tf.tanh(initial_state)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(encoder_output * src_mask, axis=1) / tf.reduce_sum(src_mask, axis=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_197": {
                "variable": {
                    "value": "time",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "time",
                    "type": "str",
                    "possible_values": []
                }
            },
            "while_loop_200": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda t, *_: t < time_steps",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "loop_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "loop_vars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(time, output_ta, initial_state)",
                            "Tuple"
                        ],
                        [
                            "(time, output_ta, initial_state)",
                            "Tuple"
                        ]
                    ]
                },
                "parallel_iterations": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_208": {
                "variable": {
                    "value": "final_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "final_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_final_ta.stack()",
                            "Call"
                        ],
                        [
                            "tf.transpose(final_output, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_246": {
                "variable": {
                    "value": "src_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[src_inputs, char_cnn_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_282": {
                "variable": {
                    "value": "global_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(global_hidden, axis=-2) / mask_weight",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(global_emb, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tile(global_emb, [1, sent_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.reduce_max(x[:tf.cast(x[-1][-1], tf.int32)], axis=-2), concat_hidden)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(global_hidden * softmax_weight, axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_283": {
                "variable": {
                    "value": "global_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(global_hidden, axis=-2) / mask_weight",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(global_emb, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tile(global_emb, [1, sent_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.reduce_max(x[:tf.cast(x[-1][-1], tf.int32)], axis=-2), concat_hidden)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(global_hidden * softmax_weight, axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, sent_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_322": {
                "variable": {
                    "value": "src_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[concat_inputs, global_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_367": {
                "variable": {
                    "value": "readout",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "readout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.nn.maxout(maxout_features, maxout_size, params.maxnum, concat=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(readout)",
                            "Call"
                        ],
                        [
                            "layers.nn.maxout(maxout_features, maxout_size, params.maxnum, concat=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(readout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(readout, 1.0 - params.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(readout, 1.0 - params.dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_383": {
                "variable": {
                    "value": "readout",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "readout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.nn.maxout(maxout_features, maxout_size, params.maxnum, concat=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(readout)",
                            "Call"
                        ],
                        [
                            "layers.nn.maxout(maxout_features, maxout_size, params.maxnum, concat=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(readout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(readout, 1.0 - params.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(readout, 1.0 - params.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - params.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_54": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_55": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_66": {
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "scope or 'encoder'",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_sequence_110": {
                "variable": {
                    "value": "output_bw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_bw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reverse_sequence(output_bw, sequence_length, batch_axis=0, seq_axis=1)",
                            "Call"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_113": {
                "values": {
                    "value": "[output_fw, output_bw]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_117": {
                "name_or_scope": {
                    "value": "scope or 'encoder'",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, sequence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_sequence_134": {
                "variable": {
                    "value": "output_bw0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_bw0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reverse_sequence(output_bw0, sequence_length, batch_axis=0, seq_axis=1)",
                            "Call"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "sequence_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_152": {
                "values": {
                    "value": "[output_fw1, output_bw0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_158": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_159": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_165": {
                "name_or_scope": {
                    "value": "scope or 'decoder'",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dtype or inputs.dtype",
                            "BoolOp"
                        ],
                        [
                            "dtype or inputs.dtype",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_222": {
                "name_or_scope": {
                    "value": "global_emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_230": {
                "variable": {
                    "value": "src_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "src_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(load_glove(params.glove_emb_path), name='embedding', trainable=params.fine_tuning)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embedding', [src_vocab_size, params.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.Variable(load_glove(params.glove_emb_path), name='embedding', trainable=params.fine_tuning)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embedding', [src_vocab_size, params.embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "features['source']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_231": {
                "variable": {
                    "value": "src_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[params.embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_232": {
                "variable": {
                    "value": "src_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "src_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(src_emb, features['source'])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(src_inputs, src_bias)",
                            "Call"
                        ],
                        [
                            "tf.concat([src_inputs, char_cnn_emb], -1)",
                            "Call"
                        ],
                        [
                            "layers.attention.add_timing_signal(src_inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(src_inputs, 1.0 - params.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(src_emb, features['source'])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(src_inputs, src_bias)",
                            "Call"
                        ],
                        [
                            "tf.concat([concat_inputs, global_emb], -1)",
                            "Call"
                        ],
                        [
                            "layers.attention.add_timing_signal(src_inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(src_inputs, 1.0 - params.dropout)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "src_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias', [params.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('bias', [params.embedding_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_235": {
                "variable": {
                    "value": "tgt_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tgt_vocab_size, params.embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_236": {
                "variable": {
                    "value": "tgt_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tgt_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('embedding', [tgt_vocab_size, params.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embedding', [tgt_vocab_size, params.embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "features['target']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_237": {
                "variable": {
                    "value": "tgt_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[params.embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_238": {
                "variable": {
                    "value": "tgt_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tgt_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(tgt_emb, features['target'])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tgt_inputs, tgt_bias)",
                            "Call"
                        ],
                        [
                            "layers.attention.add_timing_signal(tgt_inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tgt_inputs, 1.0 - params.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(tgt_emb, features['target'])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tgt_inputs, tgt_bias)",
                            "Call"
                        ],
                        [
                            "layers.attention.add_timing_signal(tgt_inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tgt_inputs, 1.0 - params.dropout)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "tgt_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias', [params.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('bias', [params.embedding_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_241": {
                "variable": {
                    "value": "char_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[char_vocab_size, params.char_embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_242": {
                "variable": {
                    "value": "char_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "char_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('embedding', [char_vocab_size, params.char_embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embedding', [char_vocab_size, params.char_embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "features['chars']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sequence_mask_243": {
                "variable": {
                    "value": "mask_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "features['char_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_251": {
                "variable": {
                    "value": "src_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "src_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(src_emb, features['source'])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(src_inputs, src_bias)",
                            "Call"
                        ],
                        [
                            "tf.concat([src_inputs, char_cnn_emb], -1)",
                            "Call"
                        ],
                        [
                            "layers.attention.add_timing_signal(src_inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(src_inputs, 1.0 - params.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(src_emb, features['source'])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(src_inputs, src_bias)",
                            "Call"
                        ],
                        [
                            "tf.concat([concat_inputs, global_emb], -1)",
                            "Call"
                        ],
                        [
                            "layers.attention.add_timing_signal(src_inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(src_inputs, 1.0 - params.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - params.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_252": {
                "variable": {
                    "value": "tgt_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tgt_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(tgt_emb, features['target'])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tgt_inputs, tgt_bias)",
                            "Call"
                        ],
                        [
                            "layers.attention.add_timing_signal(tgt_inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tgt_inputs, 1.0 - params.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(tgt_emb, features['target'])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tgt_inputs, tgt_bias)",
                            "Call"
                        ],
                        [
                            "layers.attention.add_timing_signal(tgt_inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tgt_inputs, 1.0 - params.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - params.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_262": {
                "variable": {
                    "value": "mask_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_263": {
                "variable": {
                    "value": "mask_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(features['source_length'], -1)",
                            "Call"
                        ],
                        [
                            "tf.to_float(mask_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_285": {
                "name_or_scope": {
                    "value": "sequence_labeling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_293": {
                "variable": {
                    "value": "src_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "src_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(load_glove(params.glove_emb_path), name='embedding', trainable=params.fine_tuning)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embedding', [src_vocab_size, params.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.Variable(load_glove(params.glove_emb_path), name='embedding', trainable=params.fine_tuning)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embedding', [src_vocab_size, params.embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "features['source']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_294": {
                "variable": {
                    "value": "src_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[params.embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_295": {
                "variable": {
                    "value": "src_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "src_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(src_emb, features['source'])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(src_inputs, src_bias)",
                            "Call"
                        ],
                        [
                            "tf.concat([src_inputs, char_cnn_emb], -1)",
                            "Call"
                        ],
                        [
                            "layers.attention.add_timing_signal(src_inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(src_inputs, 1.0 - params.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(src_emb, features['source'])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(src_inputs, src_bias)",
                            "Call"
                        ],
                        [
                            "tf.concat([concat_inputs, global_emb], -1)",
                            "Call"
                        ],
                        [
                            "layers.attention.add_timing_signal(src_inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(src_inputs, 1.0 - params.dropout)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "src_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias', [params.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('bias', [params.embedding_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_305": {
                "variable": {
                    "value": "tgt_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tgt_vocab_size, params.embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_306": {
                "variable": {
                    "value": "tgt_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tgt_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('embedding', [tgt_vocab_size, params.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embedding', [tgt_vocab_size, params.embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "features['target']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_307": {
                "variable": {
                    "value": "tgt_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[params.embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_308": {
                "variable": {
                    "value": "tgt_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tgt_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(tgt_emb, features['target'])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tgt_inputs, tgt_bias)",
                            "Call"
                        ],
                        [
                            "layers.attention.add_timing_signal(tgt_inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tgt_inputs, 1.0 - params.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(tgt_emb, features['target'])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tgt_inputs, tgt_bias)",
                            "Call"
                        ],
                        [
                            "layers.attention.add_timing_signal(tgt_inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tgt_inputs, 1.0 - params.dropout)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "tgt_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias', [params.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('bias', [params.embedding_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_311": {
                "variable": {
                    "value": "char_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[char_vocab_size, params.char_embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_312": {
                "variable": {
                    "value": "char_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "char_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('embedding', [char_vocab_size, params.char_embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embedding', [char_vocab_size, params.char_embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "features['chars']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sequence_mask_313": {
                "variable": {
                    "value": "mask_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "features['char_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_318": {
                "variable": {
                    "value": "concat_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[concat_inputs, src_inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_320": {
                "variable": {
                    "value": "concat_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[concat_inputs, src_bert_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_327": {
                "variable": {
                    "value": "src_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "src_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(src_emb, features['source'])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(src_inputs, src_bias)",
                            "Call"
                        ],
                        [
                            "tf.concat([src_inputs, char_cnn_emb], -1)",
                            "Call"
                        ],
                        [
                            "layers.attention.add_timing_signal(src_inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(src_inputs, 1.0 - params.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(src_emb, features['source'])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(src_inputs, src_bias)",
                            "Call"
                        ],
                        [
                            "tf.concat([concat_inputs, global_emb], -1)",
                            "Call"
                        ],
                        [
                            "layers.attention.add_timing_signal(src_inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(src_inputs, 1.0 - params.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - params.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_328": {
                "variable": {
                    "value": "tgt_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tgt_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(tgt_emb, features['target'])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tgt_inputs, tgt_bias)",
                            "Call"
                        ],
                        [
                            "layers.attention.add_timing_signal(tgt_inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tgt_inputs, 1.0 - params.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(tgt_emb, features['target'])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tgt_inputs, tgt_bias)",
                            "Call"
                        ],
                        [
                            "layers.attention.add_timing_signal(tgt_inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tgt_inputs, 1.0 - params.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - params.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_342": {
                "input_tensor": {
                    "value": "src_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(features['source_length'], maxlen=tf.shape(encoder_output)[1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(src_mask, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_370": {
                "variable": {
                    "value": "readout",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "readout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.nn.maxout(maxout_features, maxout_size, params.maxnum, concat=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(readout)",
                            "Call"
                        ],
                        [
                            "layers.nn.maxout(maxout_features, maxout_size, params.maxnum, concat=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(readout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(readout, 1.0 - params.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(readout, 1.0 - params.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - params.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_397": {
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sequence_mask_399": {
                "lengths": {
                    "value": "features['target_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.shape(features['target'])[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_405": {
                "input_tensor": {
                    "value": "tgt_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.sequence_mask(features['target_length'], maxlen=tf.shape(features['target'])[1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "forward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "backward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "forward0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "backward0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "backward1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "forward1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_223": {
                "name_or_scope": {
                    "value": "source_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_225": {
                "variable": {
                    "value": "src_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "load_glove(params.glove_emb_path)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "params.fine_tuning",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_229": {
                "variable": {
                    "value": "src_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[src_vocab_size, params.embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "target_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_240": {
                "name_or_scope": {
                    "value": "char_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_258": {
                "input": {
                    "value": "global_hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_encoder(cell_fw, cell_bw, src_inputs, features['source_length'])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_259": {
                "input": {
                    "value": "global_hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_encoder(cell_fw, cell_bw, src_inputs, features['source_length'])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_267": {
                "variable": {
                    "value": "float_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_268": {
                "variable": {
                    "value": "reshaped_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "float_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(features['source_length'])",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.sequence_mask(features['source_length']))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_269": {
                "variable": {
                    "value": "tile_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(float_mask, shape=[batch_size, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, sent_size, params.hidden_size * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_270": {
                "variable": {
                    "value": "concat_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[global_hidden, tile_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "map_fn_271": {
                "variable": {
                    "value": "global_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: tf.reduce_max(x[:tf.cast(x[-1][-1], tf.int32)], axis=-2)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "concat_hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([global_hidden, tile_mask], axis=-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_286": {
                "name_or_scope": {
                    "value": "source_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_288": {
                "variable": {
                    "value": "src_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "load_glove(params.glove_emb_path)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "params.fine_tuning",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_292": {
                "variable": {
                    "value": "src_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[src_vocab_size, params.embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_297": {
                "name_or_scope": {
                    "value": "bert_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_300": {
                "variable": {
                    "value": "bert_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bert_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[params.bert_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_301": {
                "variable": {
                    "value": "src_bert_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "src_bert_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['bert']",
                            "Subscript"
                        ],
                        [
                            "tf.convert_to_tensor(src_bert_emb, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(src_bert_emb, bert_bias)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bias_add_302": {
                "variable": {
                    "value": "src_bert_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "src_bert_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['bert']",
                            "Subscript"
                        ],
                        [
                            "tf.convert_to_tensor(src_bert_emb, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(src_bert_emb, bert_bias)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bert_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bert_bias', [params.bert_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_304": {
                "name_or_scope": {
                    "value": "target_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_310": {
                "name_or_scope": {
                    "value": "char_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_171": {
                "input": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(memory, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_264": {
                "input_tensor": {
                    "value": "global_hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_encoder(cell_fw, cell_bw, src_inputs, features['source_length'])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_275": {
                "variable": {
                    "value": "float_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sequence_mask(features['source_length'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_277": {
                "variable": {
                    "value": "expand_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "append_inf_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(float_mask - 1) * 10000000000.0",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_278": {
                "variable": {
                    "value": "softmax_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "expand_mask + att_weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_279": {
                "variable": {
                    "value": "global_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "global_hidden * softmax_weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_339": {
                "input": {
                    "value": "encoder_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_encoder(cell_fw, cell_bw, src_inputs, features['source_length'])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_418": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_436": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_454": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_401": {
                "input": {
                    "value": "features['target']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_max_271": {
                "input_tensor": {
                    "value": "x[:tf.cast(x[-1][-1], tf.int32)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sequence_mask_275": {
                "lengths": {
                    "value": "features['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_271": {
                "x": {
                    "value": "x[-1][-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "thumt/models/seq2seq.py": {
        "tensorflow": {
            "bias_add_39": {
                "variable": {
                    "value": "src_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "src_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(src_emb, src_seq)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(src_inputs, src_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(src_inputs, 1.0 - params.dropout)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "src_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias', [params.embedding_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_40": {
                "variable": {
                    "value": "tgt_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tgt_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(tgt_emb, tgt_seq)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tgt_inputs, tgt_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tgt_inputs, 1.0 - params.dropout)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "tgt_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias', [params.embedding_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "MultiRNNCell_81": {
                "variable": {
                    "value": "cell_enc",
                    "type": "Variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "cell_enc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell(cell_enc)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultiRNNCell_82": {
                "variable": {
                    "value": "cell_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "cell_dec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell(cell_dec)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_89": {
                "variable": {
                    "value": "shifted_tgt_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tgt_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(tgt_emb, tgt_seq)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tgt_inputs, tgt_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tgt_inputs, 1.0 - params.dropout)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_109": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.nn.linear(outputs[:, -1, :], tgt_vocab_size, True, scope='softmax')",
                            "Call"
                        ],
                        [
                            "layers.nn.linear(outputs, tgt_vocab_size, True, scope='softmax')",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1, tgt_vocab_size])",
                            "Call"
                        ],
                        [
                            "model_graph(features, None, params)",
                            "Call"
                        ],
                        [
                            "model_graph(features, None, params)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tgt_vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "ce",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ce",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.nn.smoothed_softmax_cross_entropy_with_logits(logits=logits, labels=labels, smoothing=params.label_smoothing, normalize=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(ce, tf.shape(labels))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_119": {
                "variable": {
                    "value": "tgt_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sequence_mask(features['target_length'], maxlen=tf.shape(features['target'])[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reverse_sequence_23": {
                "variable": {
                    "value": "src_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['source']",
                            "Subscript"
                        ],
                        [
                            "tf.reverse_sequence(src_seq, seq_dim=1, seq_lengths=features['source_length'])",
                            "Call"
                        ]
                    ]
                },
                "seq_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "seq_lengths": {
                    "value": "features['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_43": {
                "variable": {
                    "value": "src_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "src_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(src_emb, src_seq)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(src_inputs, src_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(src_inputs, 1.0 - params.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - params.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_44": {
                "variable": {
                    "value": "tgt_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tgt_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(tgt_emb, tgt_seq)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tgt_inputs, tgt_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tgt_inputs, 1.0 - params.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - params.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DropoutWrapper_59": {
                "variable": {
                    "value": "cell_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(params.hidden_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(cell_e, output_keep_prob=1.0 - params.dropout, variational_recurrent=params.use_variational_dropout, input_size=params.embedding_size, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.GRUCell(params.hidden_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.ResidualWrapper(cell_e)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "1.0 - params.dropout",
                    "type": "BinOp",
                    "possible_values": []
                },
                "variational_recurrent": {
                    "value": "params.use_variational_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "params.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_66": {
                "variable": {
                    "value": "cell_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(params.hidden_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(cell_d, output_keep_prob=1.0 - params.dropout, variational_recurrent=params.use_variational_dropout, input_size=params.embedding_size, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.GRUCell(params.hidden_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.ResidualWrapper(cell_d)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "1.0 - params.dropout",
                    "type": "BinOp",
                    "possible_values": []
                },
                "variational_recurrent": {
                    "value": "params.use_variational_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "params.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_85": {
                "variable": {
                    "value": "(_, final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_enc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell(cell_enc)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "src_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(src_emb, src_seq)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(src_inputs, src_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(src_inputs, 1.0 - params.dropout)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "features['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_93": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_dec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell(cell_dec)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "shifted_tgt_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(tgt_inputs, [[0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "shifted_tgt_inputs[:, :-1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "features['target_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_state": {
                    "value": "final_state",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dropout_98": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(outputs, 1.0 - params.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - params.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_26": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_28": {
                "variable": {
                    "value": "src_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[src_vocab_size, params.embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_30": {
                "variable": {
                    "value": "src_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[params.embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_31": {
                "variable": {
                    "value": "src_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "src_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('embedding', [src_vocab_size, params.embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "src_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['source']",
                            "Subscript"
                        ],
                        [
                            "tf.reverse_sequence(src_seq, seq_dim=1, seq_lengths=features['source_length'])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_34": {
                "variable": {
                    "value": "tgt_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tgt_vocab_size, params.embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_36": {
                "variable": {
                    "value": "tgt_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[params.embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_37": {
                "variable": {
                    "value": "tgt_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tgt_emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('embedding', [tgt_vocab_size, params.embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "tgt_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "BasicLSTMCell_51": {
                "variable": {
                    "value": "cell_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "params.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_52": {
                "variable": {
                    "value": "cell_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "params.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ResidualWrapper_75": {
                "variable": {
                    "value": "cell_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(params.hidden_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(cell_e, output_keep_prob=1.0 - params.dropout, variational_recurrent=params.use_variational_dropout, input_size=params.embedding_size, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.GRUCell(params.hidden_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.ResidualWrapper(cell_e)",
                            "Call"
                        ]
                    ]
                }
            },
            "ResidualWrapper_76": {
                "variable": {
                    "value": "cell_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(params.hidden_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(cell_d, output_keep_prob=1.0 - params.dropout, variational_recurrent=params.use_variational_dropout, input_size=params.embedding_size, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.GRUCell(params.hidden_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.ResidualWrapper(cell_d)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_118": {
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sequence_mask_120": {
                "lengths": {
                    "value": "features['target_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.shape(features['target'])[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_125": {
                "input_tensor": {
                    "value": "tgt_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.sequence_mask(features['target_length'], maxlen=tf.shape(features['target'])[1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "source_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_33": {
                "name_or_scope": {
                    "value": "target_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GRUCell_54": {
                "variable": {
                    "value": "cell_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "params.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_55": {
                "variable": {
                    "value": "cell_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "params.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_138": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_155": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_172": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_122": {
                "input": {
                    "value": "features['target']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "thumt/models/transformer.py": {
        "tensorflow": {
            "random_normal_initializer_23": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "params.hidden_size ** (-0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sequence_mask_176": {
                "variable": {
                    "value": "src_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "src_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['source_length']",
                            "Subscript"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "tf.shape(features['source'])[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_179": {
                "variable": {
                    "value": "tgt_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "tgt_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['target_length']",
                            "Subscript"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "tf.shape(features['target'])[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_184": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_195": {
                "variable": {
                    "value": "encoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(src_embedding, src_seq) * hidden_size ** 0.5",
                            "BinOp"
                        ],
                        [
                            "inputs * tf.expand_dims(src_mask, -1)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias', [hidden_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_222": {
                "variable": {
                    "value": "decoder_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "decoder_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transformer_decoder(decoder_input, encoder_output, dec_attn_bias, enc_attn_bias, params)",
                            "Call"
                        ],
                        [
                            "decoder_output[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(decoder_output, [-1, hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_223": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "decoder_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transformer_decoder(decoder_input, encoder_output, dec_attn_bias, enc_attn_bias, params)",
                            "Call"
                        ],
                        [
                            "decoder_output[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(decoder_output, [-1, hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', [src_vocab_size, hidden_size], initializer=initializer)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_233": {
                "variable": {
                    "value": "ce",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ce",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.nn.smoothed_softmax_cross_entropy_with_logits(logits=logits, labels=labels, smoothing=params.label_smoothing, normalize=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(ce, tf.shape(tgt_seq))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(tgt_seq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[src_vocab_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(0.0, params.hidden_size ** (-0.5))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_33": {
                "variable": {
                    "value": "semb",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "source_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[src_vocab_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(0.0, params.hidden_size ** (-0.5))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_36": {
                "variable": {
                    "value": "temb",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "target_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tgt_vocab_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(0.0, params.hidden_size ** (-0.5))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_43": {
                "variable": {
                    "value": "softmax_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(0.0, params.hidden_size ** (-0.5))",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_60": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(y, keep_prob)",
                            "Call"
                        ],
                        [
                            "layers.attention.multihead_attention(layer_process(x, params.layer_preprocess), None, bias, params.num_heads, params.attention_key_channels or params.hidden_size, params.attention_value_channels or params.hidden_size, params.hidden_size, 1.0 - params.attention_dropout)",
                            "Call"
                        ],
                        [
                            "y['outputs']",
                            "Subscript"
                        ],
                        [
                            "ffn_layer(layer_process(x, params.layer_preprocess), params.filter_size, params.hidden_size, 1.0 - params.relu_dropout)",
                            "Call"
                        ],
                        [
                            "layers.attention.multihead_attention(layer_process(x, params.layer_preprocess), None, bias, params.num_heads, params.attention_key_channels or params.hidden_size, params.attention_value_channels or params.hidden_size, params.hidden_size, 1.0 - params.attention_dropout)",
                            "Call"
                        ],
                        [
                            "y['outputs']",
                            "Subscript"
                        ],
                        [
                            "layers.attention.multihead_attention(layer_process(x, params.layer_preprocess), memory, mem_bias, params.num_heads, params.attention_key_channels or params.hidden_size, params.attention_value_channels or params.hidden_size, params.hidden_size, 1.0 - params.attention_dropout)",
                            "Call"
                        ],
                        [
                            "y['outputs']",
                            "Subscript"
                        ],
                        [
                            "ffn_layer(layer_process(x, params.layer_preprocess), params.filter_size, params.hidden_size, 1.0 - params.relu_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 - params.residual_dropout",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_207": {
                "variable": {
                    "value": "encoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "encoder_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(inputs, bias)",
                            "Call"
                        ],
                        [
                            "layers.attention.add_timing_signal(encoder_input)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(encoder_input, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 - params.residual_dropout",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_208": {
                "variable": {
                    "value": "decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "decoder_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(targets, [[0, 0], [1, 0], [0, 0]])[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "layers.attention.add_timing_signal(decoder_input)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(decoder_input, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 - params.residual_dropout",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_217": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "decoder_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transformer_decoder(decoder_input, encoder_output, dec_attn_bias, enc_attn_bias, params)",
                            "Call"
                        ],
                        [
                            "decoder_output[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(decoder_output, [-1, hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', [src_vocab_size, hidden_size], initializer=initializer)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'transformer'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "ffn_layer",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_70": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.nn.linear(inputs, hidden_size, True, True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(hidden)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden, keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_73": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.nn.linear(inputs, hidden_size, True, True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(hidden)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 - params.residual_dropout",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'transformer'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "values": {
                    "value": "[inputs, bias]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_119": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'transformer'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "values": {
                    "value": "[inputs, memory, bias, mem_bias]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_189": {
                "params": {
                    "value": "src_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "src_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['source']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_190": {
                "params": {
                    "value": "tgt_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tgt_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_191": {
                "input": {
                    "value": "src_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(src_len, maxlen=tf.shape(features['source'])[1], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_192": {
                "input": {
                    "value": "tgt_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(tgt_len, maxlen=tf.shape(features['target'])[1], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_202": {
                "tensor": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(tgt_embedding, tgt_seq) * hidden_size ** 0.5",
                            "BinOp"
                        ],
                        [
                            "targets * tf.expand_dims(tgt_mask, -1)",
                            "BinOp"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_233": {
                "input": {
                    "value": "tgt_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_234": {
                "input_tensor": {
                    "value": "tgt_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(tgt_len, maxlen=tf.shape(features['target'])[1], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "input_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "output_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_198": {
                "input": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(tgt_embedding, tgt_seq) * hidden_size ** 0.5",
                            "BinOp"
                        ],
                        [
                            "targets * tf.expand_dims(tgt_mask, -1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "'layer_%d' % layer",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_123": {
                "name_or_scope": {
                    "value": "'layer_%d' % layer",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_177": {
                "input": {
                    "value": "features['source']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_180": {
                "input": {
                    "value": "features['target']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_247": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(0.0, params.hidden_size ** (-0.5))",
                            "Call"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_267": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_286": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "self_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "feed_forward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "self_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "encdec_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_154": {
                "name_or_scope": {
                    "value": "feed_forward",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "thumt/scripts/checkpoint_averaging.py": {
        "tensorflow": {
            "list_variables_71": {
                "variable": {
                    "value": "var_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "checkpoints[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_96": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_98": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Glob_111": {
                "variable": {
                    "value": "params_files",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "params_pattern",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.path, '*.json')",
                            "Call"
                        ]
                    ]
                }
            },
            "set_verbosity_57": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_checkpoint_79": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "checkpoints",
                            "Name"
                        ]
                    ]
                }
            },
            "info_108": {
                "msg": {
                    "value": "Averaged checkpoints saved in %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "saved_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output, 'average')",
                            "Call"
                        ]
                    ]
                }
            },
            "run_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_32": {
                "filename": {
                    "value": "os.path.join(path, 'checkpoint')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GFile_37": {
                "name": {
                    "value": "os.path.join(path, 'checkpoint')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Exists_52": {
                "filename": {
                    "value": "path + '.meta'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Exists_53": {
                "filename": {
                    "value": "path + '.index'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_84": {
                "msg": {
                    "value": "Read from checkpoint %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "checkpoints",
                            "Name"
                        ]
                    ]
                }
            },
            "get_variable_91": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "line.strip().split(':')[-1].strip()[1:-1]",
                            "Subscript"
                        ],
                        [
                            "var_values",
                            "Name"
                        ],
                        [
                            "var_values",
                            "Name"
                        ],
                        [
                            "params_files",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "var_values[name].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var_dtypes[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "placeholder_94": {
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "v.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_95": {
                "ref": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "global_variables_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Copy_116": {
                "oldpath": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "line.strip().split(':')[-1].strip()[1:-1]",
                            "Subscript"
                        ],
                        [
                            "var_values",
                            "Name"
                        ],
                        [
                            "var_values",
                            "Name"
                        ],
                        [
                            "params_files",
                            "Name"
                        ]
                    ]
                },
                "newpath": {
                    "value": "new_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "name.replace(FLAGS.path.rstrip('/'), FLAGS.output.rstrip('/'))",
                            "Call"
                        ]
                    ]
                },
                "overwrite": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_initializer_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "thumt/scripts/convert_old_model.py": {
        "tensorflow": {
            "Saver_139": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf_vars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.get_variable(v, initializer=variables[v], dtype=tf.float32) for v in variables]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Graph_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_136": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_131": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_133": {
                "name": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "values[key]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "variables[v]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "thumt/scripts/input_converter.py": {
        "tensorflow": {
            "TFRecordWriter_54": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "out_filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Example_49": {
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Int64List_37": {
                "variable": {
                    "value": "int64_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Feature_38": {
                "variable": {
                    "value": "features[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "int64_list": {
                    "value": "int64_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.Int64List(value=v)",
                            "Call"
                        ]
                    ]
                }
            },
            "FloatList_40": {
                "variable": {
                    "value": "float_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Feature_41": {
                "variable": {
                    "value": "features[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "float_list": {
                    "value": "float_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.FloatList(value=v)",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_49": {
                "feature": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "info_59": {
                "msg": {
                    "value": "write: %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "count",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "count + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "TFRecordWriter_96": {
                "path": {
                    "value": "output_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, output_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "BytesList_43": {
                "variable": {
                    "value": "bytes_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Feature_44": {
                "variable": {
                    "value": "features[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bytes_list": {
                    "value": "bytes_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.BytesList(value=v)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "thumt/utils/hooks.py": {
        "tensorflow": {
            "get_collection_18": {
                "variable": {
                    "value": "savers",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "collection_key",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GraphKeys.SAVERS",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Graph_124": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ChiefSessionCreator_146": {
                "variable": {
                    "value": "sess_creator",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SecondOrStepTimer_207": {
                "variable": {
                    "value": "self._timer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "every_secs": {
                    "value": "eval_secs or None",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "every_steps": {
                    "value": "eval_steps or None",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "get_global_step_215": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Glob_222": {
                "variable": {
                    "value": "params_files",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "params_pattern",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self._base_dir, '*.json')",
                            "Call"
                        ]
                    ]
                }
            },
            "SessionRunArgs_234": {
                "variable": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": []
                },
                "fetches": {
                    "value": "self._global_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GFile_32": {
                "name": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self._save_path, removed)",
                            "Call"
                        ],
                        [
                            "os.path.join(self._save_path, removed)",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_51": {
                "name": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self._save_path, removed)",
                            "Call"
                        ],
                        [
                            "os.path.join(self._save_path, removed)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Exists_63": {
                "filename": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self._save_path, removed)",
                            "Call"
                        ],
                        [
                            "os.path.join(self._save_path, removed)",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_66": {
                "name": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self._save_path, removed)",
                            "Call"
                        ],
                        [
                            "os.path.join(self._save_path, removed)",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_88": {
                "name": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self._save_path, removed)",
                            "Call"
                        ],
                        [
                            "os.path.join(self._save_path, removed)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_192": {
                "msg": {
                    "value": "Create EvaluationHook.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MonitoredSession_151": {
                "session_creator": {
                    "value": "sess_creator",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.ChiefSessionCreator(checkpoint_dir=path, config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_217": {
                "filename": {
                    "value": "self._save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_218": {
                "msg": {
                    "value": "'Making dir: %s' % self._save_path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MakeDirs_219": {
                "dirname": {
                    "value": "self._save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Copy_226": {
                "oldpath": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "name.strip()[1:-1]",
                            "Subscript"
                        ],
                        [
                            "params_files",
                            "Name"
                        ],
                        [
                            "files",
                            "Name"
                        ],
                        [
                            "files",
                            "Name"
                        ]
                    ]
                },
                "newpath": {
                    "value": "new_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "name.replace(self._base_dir, self._save_path)",
                            "Call"
                        ]
                    ]
                },
                "overwrite": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "info_306": {
                "msg": {
                    "value": "'Validating model at step %d' % global_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_311": {
                "msg": {
                    "value": "'%s at step %d: %f' % (self._metric, global_step, score)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Glob_326": {
                "variable": {
                    "value": "old_files",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "old_path + '*'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Glob_336": {
                "variable": {
                    "value": "files",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "filename + '*'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_349": {
                "msg": {
                    "value": "'Best score: %f' % best_score",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_249": {
                "msg": {
                    "value": "'Saving checkpoints for %d into %s.' % (global_step, save_path)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_255": {
                "msg": {
                    "value": "'Validating model at step %d' % global_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_260": {
                "msg": {
                    "value": "'%s at step %d: %f' % (self._metric, global_step, score)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Glob_275": {
                "variable": {
                    "value": "old_files",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "old_path + '*'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Glob_285": {
                "variable": {
                    "value": "files",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "filename + '*'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_298": {
                "msg": {
                    "value": "'Best score at step %d: %f' % (global_step, best_score)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_327": {
                "msg": {
                    "value": "'Copying %s to %s' % (old_path, new_path)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_335": {
                "msg": {
                    "value": "'Removing %s' % filename",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_276": {
                "msg": {
                    "value": "'Copying %s to %s' % (old_path, new_path)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_284": {
                "msg": {
                    "value": "'Removing %s' % filename",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Copy_331": {
                "oldpath": {
                    "value": "o_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "old_files",
                            "Name"
                        ],
                        [
                            "old_files",
                            "Name"
                        ]
                    ]
                },
                "newpath": {
                    "value": "n_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "o_file.replace(old_path, new_path)",
                            "Call"
                        ],
                        [
                            "o_file.replace(old_path, new_path)",
                            "Call"
                        ]
                    ]
                },
                "overwrite": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Remove_339": {
                "filename": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "name.strip()[1:-1]",
                            "Subscript"
                        ],
                        [
                            "params_files",
                            "Name"
                        ],
                        [
                            "files",
                            "Name"
                        ],
                        [
                            "files",
                            "Name"
                        ]
                    ]
                }
            },
            "Copy_280": {
                "oldpath": {
                    "value": "o_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "old_files",
                            "Name"
                        ],
                        [
                            "old_files",
                            "Name"
                        ]
                    ]
                },
                "newpath": {
                    "value": "n_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "o_file.replace(old_path, new_path)",
                            "Call"
                        ],
                        [
                            "o_file.replace(old_path, new_path)",
                            "Call"
                        ]
                    ]
                },
                "overwrite": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Remove_288": {
                "filename": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "name.strip()[1:-1]",
                            "Subscript"
                        ],
                        [
                            "params_files",
                            "Name"
                        ],
                        [
                            "files",
                            "Name"
                        ],
                        [
                            "files",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "thumt/utils/loss.py": {
        "tensorflow": {
            "reduce_sum_12": {
                "input_tensor": {
                    "value": "tgt_mask",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "thumt/utils/mrt_utils.py": {
        "tensorflow": {
            "shape_24": {
                "variable": {
                    "value": "sample_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features['samples']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_26": {
                "variable": {
                    "value": "eos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "eos_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones([sample_shape[0], 1]) * eos_id",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(eos_seq)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_27": {
                "variable": {
                    "value": "features[samples]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "[features['samples'], eos_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, pad_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_33": {
                "variable": {
                    "value": "target_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[features['target'], padding]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_34": {
                "variable": {
                    "value": "features[samples]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "[features['samples'], target_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "py_func_37": {
                "variable": {
                    "value": "features[samples]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "func": {
                    "value": "get_unique",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[features['samples'], eos_id]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_40": {
                "variable": {
                    "value": "sample_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features['samples']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_44": {
                "variable": {
                    "value": "features[samples]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "features['samples']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_45": {
                "variable": {
                    "value": "features[sample_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "features['sample_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tile_47": {
                "variable": {
                    "value": "features[source]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['source']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[sample_shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_48": {
                "variable": {
                    "value": "features[source_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[sample_shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_fn_52": {
                "variable": {
                    "value": "features[BLEU]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fn": {
                    "value": "bleu_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda x: bleu_tensor(x, features['target'], eos_id)",
                            "Lambda"
                        ]
                    ]
                },
                "elems": {
                    "value": "features['samples']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_86": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(sen, eos)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "segment_min_87": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "indices[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "segment_ids": {
                    "value": "indices[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_100": {
                "variable": {
                    "value": "seqlen",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_101": {
                "variable": {
                    "value": "alive_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(initial_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, sample_num]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_102": {
                "variable": {
                    "value": "alive_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alive_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(initial_ids, 1), [1, sample_num])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(alive_seq, [sa[0] * sa[1], 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([alive_seq, new_samples], 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_103": {
                "variable": {
                    "value": "sa",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alive_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(initial_ids, 1), [1, sample_num])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(alive_seq, [sa[0] * sa[1], 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([alive_seq, new_samples], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_104": {
                "variable": {
                    "value": "alive_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "alive_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(initial_ids, 1), [1, sample_num])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(alive_seq, [sa[0] * sa[1], 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([alive_seq, new_samples], 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[sa[0] * sa[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "while_loop_116": {
                "variable": {
                    "value": "(_, alive_seq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "_is_finished",
                    "type": "Variable",
                    "possible_values": []
                },
                "body": {
                    "value": "inner_loop",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[seqlen, alive_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[tf.TensorShape([]), tf.TensorShape([None, None])]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "fill_162": {
                "variable": {
                    "value": "initial_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.constant(bos_id, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_173": {
                "variable": {
                    "value": "features[source]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['source']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_174": {
                "variable": {
                    "value": "features[source]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['source']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, sample_num, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_175": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features['source']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_178": {
                "variable": {
                    "value": "features[source]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['source']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[0] * shape[1], shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_183": {
                "variable": {
                    "value": "features[source_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_184": {
                "variable": {
                    "value": "features[source_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, sample_num]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_186": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_189": {
                "variable": {
                    "value": "features[source_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[0] * shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_196": {
                "variable": {
                    "value": "decode_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "decode_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params.decode_length",
                            "Attribute"
                        ],
                        [
                            "tf.to_float(tf.shape(features['target'])[1]) * tf.constant(params.mrt_length_ratio)",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(decode_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_214": {
                "variable": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ce * tgt_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_217": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-logprobs",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_111": {
                "variable": {
                    "value": "new_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "symbols_to_logits_fn(alive_seq)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_112": {
                "variable": {
                    "value": "new_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multinomial(logit, 1)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(new_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_113": {
                "variable": {
                    "value": "alive_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[alive_seq, new_samples]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_148": {
                "variable": {
                    "value": "features[target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "decoded_ids[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_149": {
                "variable": {
                    "value": "features[target_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.shape(features['target'])[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(features['target'])[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_min_216": {
                "input_tensor": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(ce * tgt_mask, axis=1)",
                            "Call"
                        ],
                        [
                            "logprobs - tf.reduce_min(logprobs)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_218": {
                "input_tensor": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.exp(-logprobs)",
                            "Call"
                        ],
                        [
                            "probs / tf.reduce_sum(probs)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "py_func_226": {
                "func": {
                    "value": "lambda x, y: bleu_numpy(x, y, eos, smooth=True)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "inp": {
                    "value": "[trans, ref]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_25": {
                "shape": {
                    "value": "[sample_shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_86": {
                "x": {
                    "value": "sen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sens",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "eos",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_92": {
                "input_tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_97": {
                "input": {
                    "value": "initial_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.fill([batch_size], tf.constant(bos_id, dtype=tf.int32))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_101": {
                "input": {
                    "value": "initial_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.fill([batch_size], tf.constant(bos_id, dtype=tf.int32))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_159": {
                "input": {
                    "value": "features['source']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_162": {
                "value": {
                    "value": "bos_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params.mapping['target'][params.bos]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_194": {
                "x": {
                    "value": "tf.shape(features['target'])[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_195": {
                "value": {
                    "value": "params.mrt_length_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_220": {
                "input_tensor": {
                    "value": "ave_bleu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probs * features['BLEU']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_30": {
                "input": {
                    "value": "features['samples']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_31": {
                "input": {
                    "value": "features['target']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "TensorShape_121": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_122": {
                "dims": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_150": {
                "input": {
                    "value": "features['target']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_194": {
                "input": {
                    "value": "features['target']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_149": {
                "input": {
                    "value": "features['target']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "thumt/utils/parallel.py": {
        "tensorflow": {
            "replica_device_setter_48": {
                "worker_device": {
                    "value": "worker",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'/gpu:%d' % i",
                            "BinOp"
                        ]
                    ]
                },
                "ps_device": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                },
                "ps_tasks": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "i != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "get_variable_scope_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_82": {
                "name": {
                    "value": "'parallel_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_83": {
                "device_name": {
                    "value": "device_setter",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_create_device_setter(False, worker, len(devices))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "thumt/utils/search.py": {
        "tensorflow": {
            "reshape_32": {
                "variable": {
                    "value": "batch_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(batch_size * beam_size) // beam_size",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(batch_pos, [batch_size, beam_size])",
                            "Call"
                        ],
                        [
                            "compute_batch_indices(batch_size, beam_size)",
                            "Call"
                        ],
                        [
                            "compute_batch_indices(batch_size, beam_size * 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_61": {
                "variable": {
                    "value": "(_, topk_indexes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "k": {
                    "value": "beam_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params.beam_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_72": {
                "variable": {
                    "value": "top_coordinates",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_pos, topk_indexes]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_75": {
                "variable": {
                    "value": "topk_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sequences",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "top_coordinates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([batch_pos, topk_indexes], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_76": {
                "variable": {
                    "value": "topk_flags",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flags",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "top_coordinates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([batch_pos, topk_indexes], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_77": {
                "variable": {
                    "value": "topk_gathered_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "scores_to_gather",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "top_coordinates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([batch_pos, topk_indexes], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_109": {
                "variable": {
                    "value": "initial_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0] + [-float('inf')] * (beam_size - 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_111": {
                "variable": {
                    "value": "alive_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "initial_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([[0.0] + [-float('inf')] * (beam_size - 1)])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_114": {
                "variable": {
                    "value": "alive_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(initial_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_115": {
                "variable": {
                    "value": "alive_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alive_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(initial_ids, 1), [1, beam_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "variable": {
                    "value": "finished_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(alive_seq)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "variable": {
                    "value": "finished_flags",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, beam_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_397": {
                "variable": {
                    "value": "(_, alive_seq, alive_log_probs, finished_seq, finished_scores, finished_flags)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "_is_finished",
                    "type": "Variable",
                    "possible_values": []
                },
                "body": {
                    "value": "inner_loop",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.constant(0), alive_seq, alive_log_probs, finished_seq, finished_scores, finished_flags]",
                    "type": "List",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[tf.TensorShape([]), tf.TensorShape([None, None, None]), alive_log_probs.get_shape(), tf.TensorShape([None, None, None]), finished_scores.get_shape(), finished_flags.get_shape()]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_424": {
                "variable": {
                    "value": "finished_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reduce_any(finished_flags, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "finished_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros(tf.shape(alive_seq), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.reduce_any(finished_flags, 1), finished_seq, alive_seq)",
                            "Call"
                        ],
                        [
                            "tf.concat([finished_seq, tf.zeros([batch_size, beam_size, 1], tf.int32)], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "alive_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(initial_ids, 1), [1, beam_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_426": {
                "variable": {
                    "value": "finished_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reduce_any(finished_flags, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "finished_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones([batch_size, beam_size]) * -INF",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.reduce_any(finished_flags, 1), finished_scores, alive_log_probs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "alive_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(initial_log_probs, [batch_size, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_456": {
                "variable": {
                    "value": "initial_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.constant(bos_id, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_468": {
                "variable": {
                    "value": "features[source]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['source']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_469": {
                "variable": {
                    "value": "features[source]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['source']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, beam_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_470": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features['source']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_472": {
                "variable": {
                    "value": "features[source]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['source']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[0] * shape[1], shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_476": {
                "variable": {
                    "value": "features[chars]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['chars']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_477": {
                "variable": {
                    "value": "features[chars]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['chars']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, beam_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_478": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features['chars']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_481": {
                "variable": {
                    "value": "features[chars]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['chars']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[0] * shape[1], shape[2], shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_485": {
                "variable": {
                    "value": "features[source_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_486": {
                "variable": {
                    "value": "features[source_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_488": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_490": {
                "variable": {
                    "value": "features[source_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[0] * shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_494": {
                "variable": {
                    "value": "features[char_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['char_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_495": {
                "variable": {
                    "value": "features[char_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['char_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, beam_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_497": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features['char_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_499": {
                "variable": {
                    "value": "features[char_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['char_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[0] * shape[1], shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_150": {
                "variable": {
                    "value": "finished_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_seq, tf.zeros([batch_size, beam_size, 1], tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_159": {
                "variable": {
                    "value": "curr_finished_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_seq, curr_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_160": {
                "variable": {
                    "value": "curr_finished_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_scores, curr_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_162": {
                "variable": {
                    "value": "curr_finished_flags",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_flags, curr_finished]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_220": {
                "variable": {
                    "value": "flat_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "alive_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(initial_ids, 1), [1, beam_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * beam_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_243": {
                "variable": {
                    "value": "length_penalty",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(lp_constant + tf.to_float(i + 1)) / (1.0 + lp_constant)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params.decode_alpha",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_250": {
                "variable": {
                    "value": "flat_curr_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "curr_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "curr_scores + tf.to_float(curr_finished) * -INF",
                            "BinOp"
                        ],
                        [
                            "log_probs / length_penalty",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, beam_size * vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_253": {
                "variable": {
                    "value": "(topk_scores, topk_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_curr_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(curr_scores, [-1, beam_size * vocab_size])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_272": {
                "variable": {
                    "value": "topk_coordinates",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_pos, topk_beam_index]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_276": {
                "variable": {
                    "value": "topk_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "alive_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(initial_ids, 1), [1, beam_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, 2)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "topk_coordinates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([batch_pos, topk_beam_index], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_279": {
                "variable": {
                    "value": "topk_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[topk_seq, tf.expand_dims(topk_ids, axis=2)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_282": {
                "variable": {
                    "value": "topk_finished",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "topk_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "topk_ids % vocab_size",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "eos_id",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pow_367": {
                "variable": {
                    "value": "max_length_penalty",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(5.0 + tf.to_float(decode_length)) / 6.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params.decode_alpha",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_min_376": {
                "variable": {
                    "value": "lowest_score_of_finished_in_finished",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "finished_scores * tf.to_float(finished_in_finished)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_all_387": {
                "variable": {
                    "value": "bound_is_met",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.greater(lowest_score_of_finished_in_finished, lower_bound_alive_scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_442": {
                "variable": {
                    "value": "features[target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "decoded_ids[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_443": {
                "variable": {
                    "value": "features[target_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.shape(features['target'])[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(features['target'])[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_502": {
                "variable": {
                    "value": "features[bert]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['bert']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_503": {
                "variable": {
                    "value": "features[bert]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['bert']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, beam_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_504": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features['bert']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_507": {
                "variable": {
                    "value": "features[bert]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['bert']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[0] * shape[1], shape[2], shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_17": {
                "input_tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_106": {
                "input": {
                    "value": "initial_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.fill([batch_size], tf.constant(bos_id, dtype=tf.int32))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_114": {
                "input": {
                    "value": "initial_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.fill([batch_size], tf.constant(bos_id, dtype=tf.int32))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_120": {
                "input": {
                    "value": "alive_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(initial_ids, 1), [1, beam_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_122": {
                "shape": {
                    "value": "[batch_size, beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "less_392": {
                "x": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "decode_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params.decode_length",
                            "Attribute"
                        ],
                        [
                            "tf.shape(features['source'])[1] + decode_length",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_any_425": {
                "input_tensor": {
                    "value": "finished_flags",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, beam_size], tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_427": {
                "input_tensor": {
                    "value": "finished_flags",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, beam_size], tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_453": {
                "input": {
                    "value": "features['source']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_456": {
                "value": {
                    "value": "bos_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params.mapping['target'][params.bos]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_188": {
                "x": {
                    "value": "curr_finished",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_225": {
                "tensor": {
                    "value": "flat_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, beam_size, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "add_n_236": {
                "inputs": {
                    "value": "candidate_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[log_prob_from_logits(logits) for logits in logits_list]",
                            "ListComp"
                        ],
                        [
                            "tf.add_n(candidate_log_probs) / float(n_models)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_240": {
                "input": {
                    "value": "alive_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(initial_log_probs, [batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_388": {
                "x": {
                    "value": "lowest_score_of_finished_in_finished",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(finished_scores * tf.to_float(finished_in_finished), axis=1)",
                            "Call"
                        ],
                        [
                            "lowest_score_of_finished_in_finished + (1.0 - tf.to_float(tf.reduce_any(finished_in_finished, 1))) * -INF",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "lower_bound_alive_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alive_log_probs[:, 0] / max_length_penalty",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_400": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_514": {
                "input": {
                    "value": "features['source']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "shape": {
                    "value": "[batch_size, beam_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_157": {
                "x": {
                    "value": "curr_finished",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_279": {
                "input": {
                    "value": "topk_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "topk_ids % vocab_size",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_377": {
                "x": {
                    "value": "finished_in_finished",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "to_float_384": {
                "x": {
                    "value": "tf.reduce_any(finished_in_finished, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorShape_404": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_405": {
                "dims": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_407": {
                "dims": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_444": {
                "input": {
                    "value": "features['target']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_244": {
                "x": {
                    "value": "i + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_367": {
                "x": {
                    "value": "decode_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params.decode_length",
                            "Attribute"
                        ],
                        [
                            "tf.shape(features['source'])[1] + decode_length",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_any_384": {
                "input_tensor": {
                    "value": "finished_in_finished",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_443": {
                "input": {
                    "value": "features['target']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "thumt/utils/utils.py": {
        "tensorflow": {
            "group_40": {
                "*inputs": {
                    "value": "*ops",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "name or 'zero_op'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "group_66": {
                "*inputs": {
                    "value": "*ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "IndexedSlices_75": {
                "variable": {
                    "value": "slices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "scale * grad.values",
                    "type": "BinOp",
                    "possible_values": []
                },
                "indices": {
                    "value": "grad.indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_36": {
                "device_name": {
                    "value": "var.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_48": {
                "device_name": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device or var.device",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_37": {
                "shape": {
                    "value": "var.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_50": {
                "initial_value": {
                    "value": "tf.zeros(var.shape.as_list())",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'replicate/' + var.name.split(':')[0]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assign_add_61": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "variables",
                            "Name"
                        ],
                        [
                            "variables",
                            "Name"
                        ]
                    ]
                },
                "value": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "shape": {
                    "value": "var.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scatter_add_63": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "variables",
                            "Name"
                        ],
                        [
                            "variables",
                            "Name"
                        ]
                    ]
                },
                "indices": {
                    "value": "grad.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "updates": {
                    "value": "grad.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}