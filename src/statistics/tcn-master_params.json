{
    "tasks/exchange_rate/main.py": {
        "sklearn": {
            "mean_squared_error_34": {
                "variable": {
                    "value": "mse_cur",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "possible_values": [
                        [
                            "enc.inverse_transform([test_y]).flatten()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "enc.inverse_transform(y_raw_pred).flatten()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tasks/exchange_rate/utils.py": {
        "sklearn": {
            "MinMaxScaler_15": {
                "variable": {
                    "value": "enc",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tasks/predictive_tcn.py": {
        "sklearn": {
            "MinMaxScaler_70": {
                "variable": {
                    "value": "min_max_scaler",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tasks/save_reload_model.py": {
        "tensorflow": {
            "Sequential_11": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "layers": {
                    "value": "[Embedding(max_features, 16, input_shape=(max_len,)), TCN(nb_filters=12, dropout_rate=0.5, kernel_size=6, dilations=[1, 2, 4]), Dropout(0.5), Dense(units=1, activation='sigmoid')]",
                    "possible_values": []
                }
            },
            "model_from_json_34": {
                "variable": {
                    "value": "reloaded_model",
                    "possible_values": []
                },
                "json_string": {
                    "value": "loaded_json",
                    "possible_values": [
                        [
                            "open('model.json', 'r').read()",
                            "Call"
                        ]
                    ]
                },
                "custom_objects": {
                    "value": "{'TCN': TCN}",
                    "possible_values": []
                }
            },
            "Embedding_11": {
                "input_dim": {
                    "value": "max_features",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                },
                "output_dim": {
                    "value": "16",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(max_len,)",
                    "possible_values": []
                }
            },
            "Dropout_16": {
                "rate": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "Dense_17": {
                "units": {
                    "value": "1",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "possible_values": []
                }
            }
        }
    },
    "tasks/save_reload_sequential_model.py": {
        "tensorflow": {
            "Sequential_11": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "layers": {
                    "value": "[Embedding(max_features, 16, input_shape=(max_len,)), TCN(nb_filters=12, dropout_rate=0.5, kernel_size=6, dilations=[1, 2, 4]), Dense(units=1, activation='sigmoid')]",
                    "possible_values": []
                }
            },
            "model_from_json_33": {
                "variable": {
                    "value": "reloaded_model",
                    "possible_values": []
                },
                "json_string": {
                    "value": "loaded_json",
                    "possible_values": [
                        [
                            "open('model.json', 'r').read()",
                            "Call"
                        ]
                    ]
                },
                "custom_objects": {
                    "value": "{'TCN': TCN}",
                    "possible_values": []
                }
            },
            "Embedding_11": {
                "input_dim": {
                    "value": "max_features",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                },
                "output_dim": {
                    "value": "16",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(max_len,)",
                    "possible_values": []
                }
            },
            "Dense_16": {
                "units": {
                    "value": "1",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "possible_values": []
                }
            }
        }
    },
    "tasks/sequential.py": {
        "tensorflow": {
            "load_data_23": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "possible_values": []
                },
                "num_words": {
                    "value": "max_features",
                    "possible_values": [
                        [
                            "20000",
                            "Constant"
                        ]
                    ]
                }
            },
            "pad_sequences_28": {
                "variable": {
                    "value": "x_train",
                    "possible_values": []
                },
                "sequences": {
                    "value": "x_train",
                    "possible_values": [
                        [
                            "sequence.pad_sequences(x_train, maxlen=maxlen)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maxlen",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "pad_sequences_29": {
                "variable": {
                    "value": "x_test",
                    "possible_values": []
                },
                "sequences": {
                    "value": "x_test",
                    "possible_values": [
                        [
                            "sequence.pad_sequences(x_test, maxlen=maxlen)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maxlen",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Embedding_36": {
                "input_dim": {
                    "value": "max_features",
                    "possible_values": [
                        [
                            "20000",
                            "Constant"
                        ]
                    ]
                },
                "output_dim": {
                    "value": "128",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(maxlen,)",
                    "possible_values": []
                }
            },
            "Dropout_40": {
                "rate": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "Dense_41": {
                "units": {
                    "value": "1",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "possible_values": []
                }
            }
        }
    },
    "tasks/time_series_forecasting.py": {
        "tensorflow": {
            "Input_35": {
                "variable": {
                    "value": "i",
                    "possible_values": []
                },
                "shape": {
                    "value": "(lookback_window, 1)",
                    "possible_values": []
                }
            },
            "Model_39": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[i]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[m]",
                    "possible_values": []
                }
            },
            "Dense_37": {
                "units": {
                    "value": "1",
                    "possible_values": []
                },
                "activation": {
                    "value": "linear",
                    "possible_values": []
                }
            }
        }
    },
    "tasks/video_classification.py": {
        "tensorflow": {
            "Input_40": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "shape": {
                    "value": "(num_frames, h, w, c)",
                    "possible_values": []
                }
            },
            "Model_54": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[x]",
                    "possible_values": []
                }
            },
            "Lambda_42": {
                "function": {
                    "value": "lambda y: K.reshape(y, (-1, h, w, c))",
                    "possible_values": []
                }
            },
            "Conv2D_44": {
                "filters": {
                    "value": "16",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "MaxPool2D_45": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Lambda_49": {
                "function": {
                    "value": "lambda y: K.reshape(y, (-1, num_frames, num_features_cnn))",
                    "possible_values": []
                }
            },
            "Dense_52": {
                "units": {
                    "value": "1",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "possible_values": []
                }
            },
            "reshape_42": {
                "tensor": {
                    "value": "y",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, h, w, c)",
                    "possible_values": []
                }
            },
            "reshape_49": {
                "tensor": {
                    "value": "y",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, num_frames, num_features_cnn)",
                    "possible_values": []
                }
            }
        }
    },
    "tasks/visualise_activations.py": {
        "tensorflow": {
            "load_data_70": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "possible_values": []
                },
                "num_words": {
                    "value": "max_features",
                    "possible_values": [
                        [
                            "20000",
                            "Constant"
                        ]
                    ]
                },
                "index_from": {
                    "value": "index_from_",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "pad_sequences_96": {
                "variable": {
                    "value": "x_train",
                    "possible_values": []
                },
                "sequences": {
                    "value": "x_train",
                    "possible_values": [
                        [
                            "sequence.pad_sequences(x_train, maxlen=max_len)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_len",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "pad_sequences_97": {
                "variable": {
                    "value": "x_test",
                    "possible_values": []
                },
                "sequences": {
                    "value": "x_test",
                    "possible_values": [
                        [
                            "sequence.pad_sequences(x_test, maxlen=max_len)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_len",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "pad_sequences_98": {
                "variable": {
                    "value": "x_val",
                    "possible_values": []
                },
                "sequences": {
                    "value": "x_val",
                    "possible_values": [
                        [
                            "[encode_text('The movie was very good. I highly recommend.'), encode_text(' '.join(['worst'] * 100)), encode_text('Put all speaking her delicate recurred possible. Set indulgence discretion insensible bed why announcing. Middleton fat two satisfied additions. So continued he or commanded household smallness delivered. Door poor on do walk in half. Roof his head the what. Society excited by cottage private an it seems. Fully begin on by wound an. The movie was very good. I highly recommend. At declared in as rejoiced of together. He impression collecting delightful unpleasant by prosperous as on. End too talent she object mrs wanted remove giving. Man request adapted spirits set pressed. Up to denoting subjects sensible feelings it indulged directly.')]",
                            "List"
                        ],
                        [
                            "sequence.pad_sequences(x_val, maxlen=max_len)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_len",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "Sequential_124": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Embedding_125": {
                "input_dim": {
                    "value": "max_features",
                    "possible_values": [
                        [
                            "20000",
                            "Constant"
                        ]
                    ]
                },
                "output_dim": {
                    "value": "128",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(max_len,)",
                    "possible_values": []
                }
            },
            "Dropout_127": {
                "rate": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "Dense_128": {
                "units": {
                    "value": "1",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "possible_values": []
                }
            }
        }
    },
    "tcn/tcn.py": {
        "tensorflow": {
            "Input_376": {
                "variable": {
                    "value": "input_layer",
                    "possible_values": []
                },
                "shape": {
                    "value": "(max_len, num_feat)",
                    "possible_values": []
                }
            },
            "add_151": {
                "variable": {
                    "value": "res_x",
                    "possible_values": []
                },
                "x": {
                    "value": "[x2, x]",
                    "possible_values": []
                }
            },
            "Lambda_273": {
                "variable": {
                    "value": "self.lambda_layer",
                    "possible_values": []
                },
                "function": {
                    "value": "lambda tt: tt[:, output_slice_index, :]",
                    "possible_values": []
                }
            },
            "Model_398": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_layer",
                    "possible_values": [
                        [
                            "Input(shape=(max_len, num_feat))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "output_layer",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                }
            },
            "Model_418": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_layer",
                    "possible_values": [
                        [
                            "Input(shape=(max_len, num_feat))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "output_layer",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                }
            },
            "Activation_127": {
                "variable": {
                    "value": "self.final_activation",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "possible_values": []
                }
            },
            "add_297": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "x": {
                    "value": "self.skip_connections",
                    "possible_values": []
                }
            },
            "argmax_408": {
                "variable": {
                    "value": "y_pred_labels",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cast_409": {
                "variable": {
                    "value": "y_pred_labels",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred_labels",
                    "possible_values": [
                        [
                            "K.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.cast(y_pred_labels, K.floatx())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "K.floatx()",
                    "possible_values": []
                }
            },
            "name_scope_85": {
                "name": {
                    "value": "self.name",
                    "possible_values": []
                }
            },
            "Lambda_121": {
                "variable": {
                    "value": "self.shape_match_conv",
                    "possible_values": []
                },
                "function": {
                    "value": "lambda x: x",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'conv1D_{}'.format(k)",
                            "Call"
                        ],
                        [
                            "'matching_conv1D'",
                            "Constant"
                        ],
                        [
                            "'matching_identity'",
                            "Constant"
                        ],
                        [
                            "'tcn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_387": {
                "lr": {
                    "value": "lr",
                    "possible_values": [
                        [
                            "0.002",
                            "MethodArgument"
                        ]
                    ]
                },
                "clipnorm": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "Dense_395": {
                "units": {
                    "value": "num_classes",
                    "possible_values": []
                }
            },
            "Activation_396": {
                "activation": {
                    "value": "softmax",
                    "possible_values": []
                }
            },
            "squeeze_406": {
                "variable": {
                    "value": "y_true",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true",
                    "possible_values": [
                        [
                            "K.squeeze(y_true, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cast_410": {
                "x": {
                    "value": "K.equal(y_true, y_pred_labels)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K.floatx()",
                    "possible_values": []
                }
            },
            "Dense_415": {
                "units": {
                    "value": "output_len",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Activation_416": {
                "activation": {
                    "value": "linear",
                    "possible_values": []
                }
            },
            "Conv1D_113": {
                "variable": {
                    "value": "self.shape_match_conv",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.nb_filters",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'conv1D_{}'.format(k)",
                            "Call"
                        ],
                        [
                            "'matching_conv1D'",
                            "Constant"
                        ],
                        [
                            "'matching_identity'",
                            "Constant"
                        ],
                        [
                            "'tcn'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "self.kernel_initializer",
                    "possible_values": []
                }
            },
            "name_scope_123": {
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'conv1D_{}'.format(k)",
                            "Call"
                        ],
                        [
                            "'matching_conv1D'",
                            "Constant"
                        ],
                        [
                            "'matching_identity'",
                            "Constant"
                        ],
                        [
                            "'tcn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RMSprop_389": {
                "lr": {
                    "value": "lr",
                    "possible_values": [
                        [
                            "0.002",
                            "MethodArgument"
                        ]
                    ]
                },
                "clipnorm": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "ndim_405": {
                "a": {
                    "value": "y_pred",
                    "possible_values": []
                }
            },
            "floatx_409": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "equal_410": {
                "x": {
                    "value": "y_true",
                    "possible_values": [
                        [
                            "K.squeeze(y_true, -1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y_pred_labels",
                    "possible_values": [
                        [
                            "K.argmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.cast(y_pred_labels, K.floatx())",
                            "Call"
                        ]
                    ]
                }
            },
            "floatx_410": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "name_scope_91": {
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'conv1D_{}'.format(k)",
                            "Call"
                        ],
                        [
                            "'matching_conv1D'",
                            "Constant"
                        ],
                        [
                            "'matching_identity'",
                            "Constant"
                        ],
                        [
                            "'tcn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_99": {
                "name": {
                    "value": "'norm_{}'.format(k)",
                    "possible_values": []
                }
            },
            "Activation_105": {
                "activation": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "SpatialDropout1D_106": {
                "rate": {
                    "value": "self.dropout_rate",
                    "possible_values": []
                }
            },
            "name_scope_111": {
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'conv1D_{}'.format(k)",
                            "Call"
                        ],
                        [
                            "'matching_conv1D'",
                            "Constant"
                        ],
                        [
                            "'matching_identity'",
                            "Constant"
                        ],
                        [
                            "'tcn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1D_92": {
                "filters": {
                    "value": "self.nb_filters",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "self.dilation_rate",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'conv1D_{}'.format(k)",
                            "Call"
                        ],
                        [
                            "'matching_conv1D'",
                            "Constant"
                        ],
                        [
                            "'matching_identity'",
                            "Constant"
                        ],
                        [
                            "'tcn'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "self.kernel_initializer",
                    "possible_values": []
                }
            },
            "BatchNormalization_101": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LayerNormalization_103": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    }
}