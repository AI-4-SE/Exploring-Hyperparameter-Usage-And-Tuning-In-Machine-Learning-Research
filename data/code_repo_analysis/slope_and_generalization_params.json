{
    "experiment_code/dataloader.py": {
        "tensorflow": {},
        "torch": {
            "from_numpy_42": {
                "variable": {
                    "value": "x_train",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_train.astype('float32')",
                            "Call"
                        ],
                        [
                            "x_train / 255",
                            "BinOp"
                        ],
                        [
                            "(x_train - 0.1307) / 0.3081",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(x_train).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_43": {
                "variable": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_test.astype('float32')",
                            "Call"
                        ],
                        [
                            "x_test / 255",
                            "BinOp"
                        ],
                        [
                            "(x_test - 0.1307) / 0.3081",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(x_test).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_train).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_46": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_test).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_55": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "full_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[(torch.unsqueeze(x_test[i, :], dim=0), y_test[i]) for i in range(x_test.shape[0])]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_51": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "full_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[(torch.unsqueeze(x_train[i, :], dim=0), y_train[i]) for i in range(x_train.shape[0])]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "full_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[(torch.unsqueeze(x_train[i, :], dim=0), y_train[i]) for i in range(x_train.shape[0])]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.FashionMNIST(root='./data', train=False, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.KMNIST(root='./data', train=False, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transformImg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_68": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.FashionMNIST(root='./data', train=True, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.KMNIST(root='./data', train=True, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transformImg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.FashionMNIST(root='./data', train=True, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.KMNIST(root='./data', train=True, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transformImg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.FashionMNIST(root='./data', train=False, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.KMNIST(root='./data', train=False, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transformImg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_47": {
                "input": {
                    "value": "x_train[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_48": {
                "input": {
                    "value": "x_test[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_84": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.FashionMNIST(root='./data', train=True, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.KMNIST(root='./data', train=True, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transformImg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_86": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.FashionMNIST(root='./data', train=True, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.KMNIST(root='./data', train=True, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transformImg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_102": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.FashionMNIST(root='./data', train=False, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.KMNIST(root='./data', train=False, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transformImg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.FashionMNIST(root='./data', train=True, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.KMNIST(root='./data', train=True, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transformImg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_101": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.FashionMNIST(root='./data', train=True, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.KMNIST(root='./data', train=True, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transformImg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_133": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[(torch.from_numpy(val_x[i, :]).float(), torch.tensor(val_y[i])) for i in range(val_x.shape[0])]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_130": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[(torch.from_numpy(train_x[i, :]).float(), torch.tensor(train_y[i])) for i in range(train_x.shape[0])]",
                            "ListComp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_132": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[(torch.from_numpy(train_x[i, :]).float(), torch.tensor(train_y[i])) for i in range(train_x.shape[0])]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_126": {
                "ndarray": {
                    "value": "train_x[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "data": {
                    "value": "train_y[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_127": {
                "ndarray": {
                    "value": "val_x[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "data": {
                    "value": "val_y[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "experiment_code/geometric.py": {
        "torch": {
            "zeros_78": {
                "variable": {
                    "value": "grad_v",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clone_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_pt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_pt",
                            "Method Argument"
                        ],
                        [
                            "data_pt",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_86": {
                "variable": {
                    "value": "jac_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_135": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_137": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_148": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_net(data_pt, get_list=True)",
                            "Call"
                        ],
                        [
                            "my_net(x)",
                            "Call"
                        ],
                        [
                            "my_net(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiment_code/localMeasure.py": {
        "torch": {
            "load_82": {
                "f": {
                    "value": "my_model.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clone_111": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_112": {
                "variable": {
                    "value": "rand_vec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_113": {
                "input": {
                    "value": "torch.sum(rand_vec ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_113": {
                "input": {
                    "value": "rand_vec ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "experiment_code/main.py": {
        "torch": {
            "DataLoader_49": {
                "variable": {
                    "value": "geom_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "geom_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "geometricDataLoader(train_loader_g, num_estimates)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiment_code/networks.py": {
        "torch": {
            "Linear_16": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inp_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_dim",
                            "Method Argument"
                        ],
                        [
                            "inp_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_24": {
                "variable": {
                    "value": "self.moduleList",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.moduleList",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "variable": {
                    "value": "cn",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.final_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_104": {
                "variable": {
                    "value": "self.moduleList",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "moduleList",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_37": {
                "variable": {
                    "value": "self.bn_moduleList",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.bn_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_48": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_out_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "drop_out_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "cn",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_110": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cn(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_35": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_82": {
                "tensors": {
                    "value": "act_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiment_code/resizedDataloader.py": {
        "torch": {
            "DataLoader_42": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.KMNIST(root='./data', train=True, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FashionMNIST(root='./data', train=True, download=True, transform=transformImg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_43": {
                "variable": {
                    "value": "test_loader_large",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.KMNIST(root='./data', train=False, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FashionMNIST(root='./data', train=False, download=True, transform=transformImg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_44": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.KMNIST(root='./data', train=False, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FashionMNIST(root='./data', train=False, download=True, transform=transformImg)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_55": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.KMNIST(root='./data', train=True, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FashionMNIST(root='./data', train=True, download=True, transform=transformImg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_56": {
                "variable": {
                    "value": "test_loader_large",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.KMNIST(root='./data', train=False, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FashionMNIST(root='./data', train=False, download=True, transform=transformImg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_57": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.KMNIST(root='./data', train=False, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FashionMNIST(root='./data', train=False, download=True, transform=transformImg)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_68": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.KMNIST(root='./data', train=True, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FashionMNIST(root='./data', train=True, download=True, transform=transformImg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_69": {
                "variable": {
                    "value": "test_loader_large",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.KMNIST(root='./data', train=False, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FashionMNIST(root='./data', train=False, download=True, transform=transformImg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.KMNIST(root='./data', train=False, download=True, transform=transformImg)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.FashionMNIST(root='./data', train=False, download=True, transform=transformImg)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiment_code/training.py": {
        "torch": {
            "SGD_52": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.my_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_55": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_57": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_82": {
                "variable": {
                    "value": "out_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.my_net(x)",
                            "Call"
                        ],
                        [
                            "self.my_net(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_99": {
                "variable": {
                    "value": "out_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.my_net(x)",
                            "Call"
                        ],
                        [
                            "self.my_net(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_117": {
                "obj": {
                    "value": "self.my_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.folder_name, 'my_model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiment_code/utils.py": {
        "torch": {
            "squeeze_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(x, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}