{
    "SiamDW-master-revised/lib/core/function.py": {
        "torch": {
            "mean_42": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(template, search, label_cls)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "loss.data[0]",
                            "Subscript"
                        ],
                        [
                            "cfg.SIAMRPN.TRAIN.CLS_WEIGHT * cls_loss + cfg.SIAMRPN.TRAIN.REG_WEIGHT * loc_loss",
                            "BinOp"
                        ],
                        [
                            "loss.data[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_107": {
                "variable": {
                    "value": "cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(template, search, label_cls, label_reg, label_reg_weight, sum_weight)",
                            "Call"
                        ],
                        [
                            "torch.mean(cls_loss)",
                            "Call"
                        ],
                        [
                            "cls_loss.data[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_108": {
                "variable": {
                    "value": "loc_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(template, search, label_cls, label_reg, label_reg_weight, sum_weight)",
                            "Call"
                        ],
                        [
                            "torch.mean(loc_loss)",
                            "Call"
                        ],
                        [
                            "loc_loss.data[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SGD_150": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "trainable_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "cur_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_lr",
                            "Method Argument"
                        ],
                        [
                            "cur_lr",
                            "Method Argument"
                        ],
                        [
                            "cur_lr",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.SIAMFC.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.SIAMFC.TRAIN.WEIGHT_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "SiamDW-master-revised/lib/dataset/siamfc.py": {
        "torch": {}
    },
    "SiamDW-master-revised/lib/dataset/siamrpn.py": {
        "torch": {}
    },
    "SiamDW-master-revised/lib/models/backbones.py": {
        "torch": {}
    },
    "SiamDW-master-revised/lib/models/connect.py": {
        "torch": {
            "conv2d_25": {
                "variable": {
                    "value": "po",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "px",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(1, -1, x.size()[2], x.size()[3])",
                            "Call"
                        ],
                        [
                            "x.view(1, -1, x.size()[2], x.size()[3])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "pk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.view(-1, x.size()[1], kernel.size()[2], kernel.size()[3])",
                            "Call"
                        ],
                        [
                            "kernel.view(-1, x.size()[1], kernel.size()[2], kernel.size()[3])",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "kernel.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.template_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.inchannels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.outchannels * self.cls_channel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.template_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.inchannels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.outchannels * self.reg_channel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.search_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.inchannels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.outchannels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.search_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.inchannels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.outchannels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.adjust",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.reg_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.reg_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_65": {
                "variable": {
                    "value": "po",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "px",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(1, -1, x.size()[2], x.size()[3])",
                            "Call"
                        ],
                        [
                            "x.view(1, -1, x.size()[2], x.size()[3])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "pk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.view(-1, x.size()[1], kernel.size()[2], kernel.size()[3])",
                            "Call"
                        ],
                        [
                            "kernel.view(-1, x.size()[1], kernel.size()[2], kernel.size()[3])",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "kernel.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv2d_31": {
                "input": {
                    "value": "x_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_f",
                            "Method Argument"
                        ],
                        [
                            "x_f",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "z_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_f",
                            "Method Argument"
                        ],
                        [
                            "z_f",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "SiamDW-master-revised/lib/models/modules.py": {
        "torch": {
            "Conv2d_23": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_113": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_119": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_120": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_121": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_122": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "firstchannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_170": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "firstchannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_171": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_172": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_246": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_247": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_268": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_269": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_270": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_271": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_272": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_273": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_274": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_322": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_323": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_324": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_325": {
                "variable": {
                    "value": "self.maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_326": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_380": {
                "variable": {
                    "value": "self.basic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1_0', nn.Conv2d(in_planes, inner_width, 1, stride=1, bias=False)), ('bn1', nn.BatchNorm2d(inner_width)), ('act0', nn.ReLU()), ('conv3_0', nn.Conv2d(inner_width, inner_width, 3, stride=1, padding=1, groups=cardinality, bias=False)), ('bn2', nn.BatchNorm2d(inner_width)), ('act1', nn.ReLU()), ('conv1_1', nn.Conv2d(inner_width, inner_width * self.expansion, 1, stride=1, bias=False)), ('bn3', nn.BatchNorm2d(inner_width * self.expansion))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_393": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_398": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * inner_width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MaxPool2d_422": {
                "variable": {
                    "value": "self.maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_423": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_425": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_planes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_426": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.in_planes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_455": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn0(self.conv0(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_204": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_221": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_354": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_395": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, inner_width * self.expansion, 1, stride=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_452": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_255": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "center_crop7(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_310": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch3x3, branch1x1]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_205": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_207": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_396": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_width * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_406": {
                "input": {
                    "value": "self.bn0(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_382": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_383": {
                "num_features": {
                    "value": "inner_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_384": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_386": {
                "in_channels": {
                    "value": "inner_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "cardinality",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "cardinality",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_387": {
                "num_features": {
                    "value": "inner_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_388": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_389": {
                "in_channels": {
                    "value": "inner_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_width * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_390": {
                "num_features": {
                    "value": "inner_width * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "SiamDW-master-revised/lib/models/siamfc.py": {
        "torch": {
            "BCEWithLogitsLoss_20": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "index_select_31": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(pred, 0, select)",
                            "Call"
                        ],
                        [
                            "pred.view(-1)",
                            "Call"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "select",
                    "type": "variable",
                    "possible_values": [
                        [
                            "select",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "index_select_32": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(label, 0, select)",
                            "Call"
                        ],
                        [
                            "label.view(-1)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "select",
                    "type": "variable",
                    "possible_values": [
                        [
                            "select",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "SiamDW-master-revised/lib/models/siamrpn.py": {
        "torch": {
            "BCEWithLogitsLoss_28": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "index_select_60": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(pred, 0, select)",
                            "Call"
                        ],
                        [
                            "pred.view(-1)",
                            "Call"
                        ],
                        [
                            "pred.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "torch.index_select(pred, 0, select)",
                            "Call"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "select",
                    "type": "variable",
                    "possible_values": [
                        [
                            "select",
                            "Method Argument"
                        ],
                        [
                            "select",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "index_select_61": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(label, 0, select)",
                            "Call"
                        ],
                        [
                            "label.view(-1)",
                            "Call"
                        ],
                        [
                            "label.view(-1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(label, 0, select)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "select",
                    "type": "variable",
                    "possible_values": [
                        [
                            "select",
                            "Method Argument"
                        ],
                        [
                            "select",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_83": {
                "variable": {
                    "value": "cls_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.connect_model(template_feature, search_feature)",
                            "Call"
                        ],
                        [
                            "self.connector(self.zf, xf)",
                            "Call"
                        ],
                        [
                            "pred_cls.view(b, 2, c // 2, h, w)",
                            "Call"
                        ],
                        [
                            "pred_cls.permute(0, 2, 3, 4, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.log_softmax(pred_cls, dim=4)",
                            "Call"
                        ],
                        [
                            "pred_cls.contiguous().view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.connector(zf, xf)",
                            "Call"
                        ],
                        [
                            "pred_cls",
                            "Method Argument"
                        ],
                        [
                            "pred_cls",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_97": {
                "variable": {
                    "value": "pred_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.connect_model(template_feature, search_feature)",
                            "Call"
                        ],
                        [
                            "self.connector(self.zf, xf)",
                            "Call"
                        ],
                        [
                            "pred_cls.view(b, 2, c // 2, h, w)",
                            "Call"
                        ],
                        [
                            "pred_cls.permute(0, 2, 3, 4, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.log_softmax(pred_cls, dim=4)",
                            "Call"
                        ],
                        [
                            "pred_cls.contiguous().view(-1, 2)",
                            "Call"
                        ],
                        [
                            "self.connector(zf, xf)",
                            "Call"
                        ],
                        [
                            "pred_cls",
                            "Method Argument"
                        ],
                        [
                            "pred_cls",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_121": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(pred, 0, select)",
                            "Call"
                        ],
                        [
                            "pred.view(-1)",
                            "Call"
                        ],
                        [
                            "pred.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "torch.index_select(pred, 0, select)",
                            "Call"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "select",
                    "type": "variable",
                    "possible_values": [
                        [
                            "select",
                            "Method Argument"
                        ],
                        [
                            "select",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "index_select_122": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(label, 0, select)",
                            "Call"
                        ],
                        [
                            "label.view(-1)",
                            "Call"
                        ],
                        [
                            "label.view(-1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(label, 0, select)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "select",
                    "type": "variable",
                    "possible_values": [
                        [
                            "select",
                            "Method Argument"
                        ],
                        [
                            "select",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "nll_loss_124": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(pred, 0, select)",
                            "Call"
                        ],
                        [
                            "pred.view(-1)",
                            "Call"
                        ],
                        [
                            "pred.view(-1, 2)",
                            "Call"
                        ],
                        [
                            "torch.index_select(pred, 0, select)",
                            "Call"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(label, 0, select)",
                            "Call"
                        ],
                        [
                            "label.view(-1)",
                            "Call"
                        ],
                        [
                            "label.view(-1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(label, 0, select)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "SiamDW-master-revised/lib/tracker/siamfc.py": {
        "torch": {}
    },
    "SiamDW-master-revised/lib/tracker/siamrpn.py": {
        "torch": {
            "sigmoid_97": {
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.track(x_crop)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(score).squeeze().cpu().data.numpy()",
                            "Call"
                        ],
                        [
                            "F.softmax(score.permute(1, 2, 3, 0).contiguous().view(2, -1, s, s), dim=0).squeeze().data[1, ...].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.update(net, x_crop.cuda(), target_pos, target_sz * scale_z, window, scale_z, p)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_99": {
                "input": {
                    "value": "score.permute(1, 2, 3, 0).contiguous().view(2, -1, s, s)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "SiamDW-master-revised/lib/utils/utils.py": {
        "torch": {
            "zeros_100": {
                "variable": {
                    "value": "pyramid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(in_side_scaled)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "out_side",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_side",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "out_side",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_side",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "current_device_232": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_233": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage.cuda(device)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "current_device_455": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_456": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpt_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage.cuda(device)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "ndarray": {
                    "value": "ndarray",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ndarray",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_517": {
                "obj": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "states",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_519": {
                "obj": {
                    "value": "states['state_dict']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'model_best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "SiamDW-master-revised/siamese_tracking/run_video.py": {
        "torch": {}
    },
    "SiamDW-master-revised/siamese_tracking/run_webcam.py": {
        "torch": {}
    },
    "SiamDW-master-revised/siamese_tracking/test_siamfc.py": {
        "torch": {}
    },
    "SiamDW-master-revised/siamese_tracking/test_siamrpn.py": {
        "torch": {}
    },
    "SiamDW-master-revised/siamese_tracking/train_siamfc.py": {
        "torch": {
            "SGD_81": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "trainable_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "check_trainable(model, logger)",
                            "Call"
                        ],
                        [
                            "trainable_params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "cfg.SIAMFC.TRAIN.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "cfg.SIAMFC.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.SIAMFC.TRAIN.WEIGHT_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_155": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.__dict__[config.SIAMFC.TRAIN.MODEL]()",
                            "Call"
                        ],
                        [
                            "load_pretrain(model, './pretrain/{}'.format(config.SIAMFC.TRAIN.PRETRAIN))",
                            "Call"
                        ],
                        [
                            "restore_from(model, optimizer, config.SIAMFC.TRAIN.RESUME)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=gpus).cuda()",
                            "Call"
                        ],
                        [
                            "siamfc_train(train_loader, model, optimizer, epoch + 1, curLR, config, writer_dict, logger)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(i) for i in config.GPUS.split(',')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "ExponentialLR_90": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(trainable_params, cfg.SIAMFC.TRAIN.LR, momentum=cfg.SIAMFC.TRAIN.MOMENTUM, weight_decay=cfg.SIAMFC.TRAIN.WEIGHT_DECAY)",
                            "Call"
                        ],
                        [
                            "get_optimizer(config, trainable_params)",
                            "Call"
                        ],
                        [
                            "restore_from(model, optimizer, config.SIAMFC.TRAIN.RESUME)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.8685",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_163": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SiamFCDataset(config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.SIAMFC.TRAIN.BATCH * gpu_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_92": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(trainable_params, cfg.SIAMFC.TRAIN.LR, momentum=cfg.SIAMFC.TRAIN.MOMENTUM, weight_decay=cfg.SIAMFC.TRAIN.WEIGHT_DECAY)",
                            "Call"
                        ],
                        [
                            "get_optimizer(config, trainable_params)",
                            "Call"
                        ],
                        [
                            "restore_from(model, optimizer, config.SIAMFC.TRAIN.RESUME)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_94": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(trainable_params, cfg.SIAMFC.TRAIN.LR, momentum=cfg.SIAMFC.TRAIN.MOMENTUM, weight_decay=cfg.SIAMFC.TRAIN.WEIGHT_DECAY)",
                            "Call"
                        ],
                        [
                            "get_optimizer(config, trainable_params)",
                            "Call"
                        ],
                        [
                            "restore_from(model, optimizer, config.SIAMFC.TRAIN.RESUME)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "SiamDW-master-revised/siamese_tracking/train_siamrpn.py": {
        "torch": {
            "SGD_83": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "trainable_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "check_trainable(model, logger)",
                            "Call"
                        ],
                        [
                            "trainable_params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "cfg.SIAMRPN.TRAIN.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "cfg.SIAMRPN.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.SIAMRPN.TRAIN.WEIGHT_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_166": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.__dict__[config.SIAMRPN.TRAIN.MODEL](anchors_nums=anchor_nums, cls_type=config.SIAMRPN.TRAIN.CLS_TYPE)",
                            "Call"
                        ],
                        [
                            "load_pretrain(model, './pretrain/{0}'.format(config.SIAMRPN.TRAIN.PRETRAIN))",
                            "Call"
                        ],
                        [
                            "restore_from(model, optimizer, config.SIAMRPN.TRAIN.RESUME)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=gpus).cuda()",
                            "Call"
                        ],
                        [
                            "siamrpn_train(train_loader, model, optimizer, epoch + 1, curLR, config, writer_dict, logger, cls_type=config.SIAMRPN.TRAIN.CLS_TYPE)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(i) for i in config.GPUS.split(',')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "ExponentialLR_97": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(trainable_params, cfg.SIAMRPN.TRAIN.LR, momentum=cfg.SIAMRPN.TRAIN.MOMENTUM, weight_decay=cfg.SIAMRPN.TRAIN.WEIGHT_DECAY)",
                            "Call"
                        ],
                        [
                            "get_optimizer(config, trainable_params)",
                            "Call"
                        ],
                        [
                            "restore_from(model, optimizer, config.SIAMRPN.TRAIN.RESUME)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.8685",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_174": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SiamRPNDataset(config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.SIAMRPN.TRAIN.BATCH * gpu_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_99": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(trainable_params, cfg.SIAMRPN.TRAIN.LR, momentum=cfg.SIAMRPN.TRAIN.MOMENTUM, weight_decay=cfg.SIAMRPN.TRAIN.WEIGHT_DECAY)",
                            "Call"
                        ],
                        [
                            "get_optimizer(config, trainable_params)",
                            "Call"
                        ],
                        [
                            "restore_from(model, optimizer, config.SIAMRPN.TRAIN.RESUME)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_101": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(trainable_params, cfg.SIAMRPN.TRAIN.LR, momentum=cfg.SIAMRPN.TRAIN.MOMENTUM, weight_decay=cfg.SIAMRPN.TRAIN.WEIGHT_DECAY)",
                            "Call"
                        ],
                        [
                            "get_optimizer(config, trainable_params)",
                            "Call"
                        ],
                        [
                            "restore_from(model, optimizer, config.SIAMRPN.TRAIN.RESUME)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}