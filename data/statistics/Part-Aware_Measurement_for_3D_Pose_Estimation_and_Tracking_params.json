{
    "src/dataset.py": {
        "torch": {}
    },
    "src/evalmodel.py": {
        "torch": {}
    },
    "src/ivclabpose.py": {
        "torch": {
            "device_111": {
                "variable": {
                    "value": "gpu_args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(gpu_args.gpus[0]) if len(gpu_args.gpus) > 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "camera_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(P)",
                            "Call"
                        ],
                        [
                            "camera_num",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "camera_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(P)",
                            "Call"
                        ],
                        [
                            "camera_num",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_166": {
                "data": {
                    "value": "[[0, -x[2], x[1]], [x[2], 0, -x[0]], [-x[1], x[0], 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_174": {
                "data": {
                    "value": "RT[y]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "inverse_167": {
                "input": {
                    "value": "K_0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "t_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/testmodel.py": {
        "torch": {}
    },
    "src/tracking/IterativeTracker.py": {
        "torch": {}
    },
    "src/utils/calculate.py": {
        "torch": {
            "zeros_like_88": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_bin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_bin",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_94": {
                "variable": {
                    "value": "vis",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_bin.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_95": {
                "variable": {
                    "value": "match_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_bin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_bin",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_135": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sort_139": {
                "variable": {
                    "value": "(u, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_140": {
                "variable": {
                    "value": "sv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(y, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_143": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(0, device=sv.device, dtype=sv.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_136": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_144": {
                "input": {
                    "value": "y - theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_117": {
                "input": {
                    "value": "torch.abs(X2[:] - X[:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_142": {
                "input": {
                    "value": "to_find.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "sv.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "sv.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_144": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "sv.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_117": {
                "input": {
                    "value": "X2[:] - X[:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_141": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(u) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "u.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "u.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/matching.py": {
        "torch": {
            "cat_188": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[query_features[f].unsqueeze(0) for (f, _, _) in query]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gallery_features[f].unsqueeze(0) for (f, _, _) in gallery]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[query_features[f].unsqueeze(0) for (f, _, _) in query]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gallery_features[f].unsqueeze(0) for (f, _, _) in gallery]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_209": {
                "variable": {
                    "value": "affinity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_affinity * torch.tensor(5.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_231": {
                "ndarray": {
                    "value": "cost_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((len(x), len(y)), dtype=np.float)",
                            "Call"
                        ],
                        [
                            "np.maximum(0.0, cdist(x, y, metric))",
                            "Call"
                        ],
                        [
                            "1 - cost_matrix",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_193": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([query_features[f].unsqueeze(0) for (f, _, _) in query], 0)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([query_features[f].unsqueeze(0) for (f, _, _) in query], 0)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ],
                        [
                            "[query_features[f].numpy() for (f, _, _) in query]",
                            "ListComp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_193": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_194": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([gallery_features[f].unsqueeze(0) for (f, _, _) in gallery], 0)",
                            "Call"
                        ],
                        [
                            "y.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([gallery_features[f].unsqueeze(0) for (f, _, _) in gallery], 0)",
                            "Call"
                        ],
                        [
                            "y.view(n, -1)",
                            "Call"
                        ],
                        [
                            "[gallery_features[f].numpy() for (f, _, _) in gallery]",
                            "ListComp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_194": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_205": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([query_features[f].unsqueeze(0) for (f, _, _) in query], 0)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([query_features[f].unsqueeze(0) for (f, _, _) in query], 0)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ],
                        [
                            "[query_features[f].numpy() for (f, _, _) in query]",
                            "ListComp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_205": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_206": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([gallery_features[f].unsqueeze(0) for (f, _, _) in gallery], 0)",
                            "Call"
                        ],
                        [
                            "y.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([gallery_features[f].unsqueeze(0) for (f, _, _) in gallery], 0)",
                            "Call"
                        ],
                        [
                            "y.view(n, -1)",
                            "Call"
                        ],
                        [
                            "[gallery_features[f].numpy() for (f, _, _) in gallery]",
                            "ListComp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_206": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_209": {
                "data": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    }
}