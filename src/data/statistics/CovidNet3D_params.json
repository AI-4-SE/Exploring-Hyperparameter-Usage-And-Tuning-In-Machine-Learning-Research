{
    "utils/utils.py": {
        "sklearn": {
            "roc_curve_108": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true_onehot[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_109": {
                "variable": {
                    "value": "covid_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "max_101": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "callbacks/callbacks.py": {
        "torch": {
            "save_160": {
                "obj": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model_state_dict': model_state_dict, 'mutator_state_dict': mutator_state_dict, 'optimizer_state_dict': optimizer_state_dict, 'lr_scheduler_state_dict': lr_scheduler_state_dict, 'epoch': epoch, 'best_metric': metric}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "dest_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.checkpoint_dir, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.checkpoint_dir, name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_164": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model",
                            "Attribute"
                        ],
                        [
                            "self.model.module",
                            "Attribute"
                        ]
                    ]
                },
                "f": {
                    "value": "dest_path.replace('.pth', '_fullmodel.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_151": {
                "obj": {
                    "value": "valid_report",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self.trainer, 'valid_report', None)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "report_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.checkpoint_dir, f'best_epoch{epoch}_valid_report.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/common_datasets.py": {
        "torch": {
            "randint_66": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_63": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_65": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/ct_data.py": {
        "torch": {
            "tensor_113": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sample['label']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_148": {
                "variable": {
                    "value": "slice_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "slice_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_nifti(sample)",
                            "Call"
                        ],
                        [
                            "self.get_png(sample)",
                            "Call"
                        ],
                        [
                            "self.transforms.transform(slice_tensor)",
                            "Call"
                        ],
                        [
                            "slice_tensor[0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.FloatTensor(img_fdata)",
                            "Call"
                        ],
                        [
                            "slice_tensor.unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "slice_tensor.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "slice_tensor[:, slices, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(slice_tensor, size)",
                            "Call"
                        ],
                        [
                            "slice_tensor[:, :, size[0] - h // 2:size[0] + h // 2, size[1] - w // 2:size[1] + w // 2]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(slice_tensor)",
                            "Call"
                        ],
                        [
                            "slice_tensor.permute(1, 0, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(h * 5 // 4, w * 5 // 4)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "stack_168": {
                "variable": {
                    "value": "slice_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "slice_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_nifti(sample)",
                            "Call"
                        ],
                        [
                            "self.get_png(sample)",
                            "Call"
                        ],
                        [
                            "self.transforms.transform(slice_tensor)",
                            "Call"
                        ],
                        [
                            "slice_tensor[0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.FloatTensor(img_fdata)",
                            "Call"
                        ],
                        [
                            "slice_tensor.unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "slice_tensor.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "slice_tensor[:, slices, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(slice_tensor, size)",
                            "Call"
                        ],
                        [
                            "slice_tensor[:, :, size[0] - h // 2:size[0] + h // 2, size[1] - w // 2:size[1] + w // 2]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(slice_tensor)",
                            "Call"
                        ],
                        [
                            "slice_tensor.permute(1, 0, 2, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_166": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img[0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "evaluator/base_evaluator.py": {
        "torch": {}
    },
    "evaluator/default_evaluator.py": {
        "torch": {
            "SummaryWriter_37": {
                "variable": {
                    "value": "self.writter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(self.cfg.logger.path, 'summary_runs')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_52": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.cfg.dataset.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.cfg.dataset.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_67": {
                "variable": {
                    "value": "self.test_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.test_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.cfg.dataset.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.cfg.dataset.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_134": {
                "variable": {
                    "value": "self.train_loader_part",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_dataset_part",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.cfg.dataset.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.cfg.dataset.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_137": {
                "variable": {
                    "value": "self.valid_loader_part",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.valid_dataset_part",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.cfg.dataset.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.cfg.dataset.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_342": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_true)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_true)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_343": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_pred)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_402": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_true)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_true)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_403": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_pred)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_194": {
                "variable": {
                    "value": "num_gpus_available",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_196": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg.trainer.device_ids",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_409": {
                "obj": {
                    "value": "self.valid_report",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(config.logger.path, f'best_epoch{epoch}_valid_report.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_426": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg.model.resume_path",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataParallel_198": {
                "variable": {
                    "value": "self.kd_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.kd_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg.trainer.device_ids",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_310": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_370": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "kd_model.py": {
        "torch": {
            "load_11": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.kd.model.path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "KLDivLoss_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_26": {
                "input": {
                    "value": "outputs / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_27": {
                "input": {
                    "value": "teacher_outputs / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "losses/loss.py": {
        "torch": {
            "tensor_17": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.loss.CrossEntropy.class_weight",
                            "Attribute"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.tensor(weight)",
                            "Call"
                        ],
                        [
                            "weight.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_19": {
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.loss.CrossEntropy.class_weight",
                            "Attribute"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.tensor(weight)",
                            "Call"
                        ],
                        [
                            "weight.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "LogSoftmax_36": {
                "variable": {
                    "value": "logsoftmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_39": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(target, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_40": {
                "variable": {
                    "value": "soft_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_44": {
                "input": {
                    "value": "torch.sum(-soft_target * logsoftmax(pred), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_44": {
                "input": {
                    "value": "-soft_target * logsoftmax(pred)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mutator/onehot_mutator.py": {
        "torch": {
            "ParameterDict_24": {
                "variable": {
                    "value": "self.choices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.choices[mutable.key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0.001 * torch.randn(mutable.length)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gumbel_softmax_41": {
                "variable": {
                    "value": "result[mutable.key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.choices[mutable.key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "hard": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.choices[mutable.key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0.001 * torch.randn(mutable.n_candidates)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gumbel_softmax_43": {
                "variable": {
                    "value": "result[mutable.key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.choices[mutable.key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "hard": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_28": {
                "*size": {
                    "value": "mutable.length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_30": {
                "*size": {
                    "value": "mutable.n_candidates",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "networks/mobile3d_net.py": {
        "torch": {
            "ModuleList_113": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "blocks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[first_block]",
                            "List"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool3d_115": {
                "variable": {
                    "value": "self.global_avg_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "networks/mobile3d_ops.py": {
        "torch": {
            "transpose_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batchsize, self.groups, channels_per_group, depth, height, width)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, -1, depth, height, width)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "self.inverted_bottleneck(x)",
                            "Call"
                        ],
                        [
                            "self.depth_conv(x)",
                            "Call"
                        ],
                        [
                            "self.point_linear(x)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_167": {
                "variable": {
                    "value": "weight_dict[conv]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_same_padding(self.kernel_size)",
                            "Call"
                        ],
                        [
                            "padding * self.dilation",
                            "BinOp"
                        ]
                    ]
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_288": {
                "variable": {
                    "value": "self.depth_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', nn.Conv3d(feature_dim, feature_dim, kernel_size, stride, pad, groups=feature_dim, bias=False)), ('bn', nn.BatchNorm3d(feature_dim)), ('act', nn.ReLU6(inplace=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_294": {
                "variable": {
                    "value": "self.point_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', nn.Conv3d(feature_dim, out_channels, 1, 1, 0, bias=False)), ('bn', nn.BatchNorm3d(out_channels))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout3d_100": {
                "variable": {
                    "value": "modules[dropout]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_216": {
                "variable": {
                    "value": "modules[dropout]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_281": {
                "variable": {
                    "value": "self.inverted_bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', nn.Conv3d(self.in_channels, feature_dim, 1, 1, 0, bias=False)), ('bn', nn.BatchNorm3d(feature_dim)), ('act', nn.ReLU6(inplace=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_316": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_91": {
                "variable": {
                    "value": "modules[bn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm3d_93": {
                "variable": {
                    "value": "modules[bn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_207": {
                "variable": {
                    "value": "modules[bn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_209": {
                "variable": {
                    "value": "modules[bn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_220": {
                "in_features": {
                    "value": "self.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv3d_318": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_289": {
                "in_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(self.in_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(self.in_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_same_padding(self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(self.in_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_290": {
                "num_features": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(self.in_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU6_291": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_295": {
                "in_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(self.in_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_296": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv3d_282": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(self.in_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_283": {
                "num_features": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(self.in_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU6_284": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "networks/mobile_utils.py": {
        "torch": {
            "ReLU_41": {
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU6_43": {
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "networks/ops.py": {
        "torch": {
            "Sequential_52": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_77": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_87": {
                "variable": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.split_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[layer(s) for (layer, s) in zip(self.layers, split)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "variable": {
                    "value": "self.pointwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_96": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(C_in, C_in * expand_ratio, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_139": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(channel, channel // reduction, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_163": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(C_in, C_in * expand_ratio, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_190": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(C_in, C_out, 1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_205": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_206": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_207": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_210": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.conv1(x), self.conv2(x[:, :, 1:, 1:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_232": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_233": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_234": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_237": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.conv1(x), self.conv2(x[:, :, 1:, 1:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_261": {
                "variable": {
                    "value": "self.dil_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * idx + 3",
                            "BinOp"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "dilation",
                            "variable"
                        ],
                        [
                            "2 * dilation",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_262": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_274": {
                "variable": {
                    "value": "self.depthwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * idx + 3",
                            "BinOp"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "dilation",
                            "variable"
                        ],
                        [
                            "2 * dilation",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_276": {
                "variable": {
                    "value": "self.pointwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_277": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "variable": {
                    "value": "depthwise",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c_in_group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.split_out_channels[idx]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "c_in_group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.split_out_channels[idx]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * idx + 3",
                            "BinOp"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "dilation",
                            "variable"
                        ],
                        [
                            "2 * dilation",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "c_in_group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.split_out_channels[idx]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * idx + 3",
                            "BinOp"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "dilation",
                            "variable"
                        ],
                        [
                            "2 * dilation",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cmid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(C_out * C_mid_mult)",
                            "Call"
                        ],
                        [
                            "C_mid if C_mid else cmid",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "cmid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(C_out * C_mid_mult)",
                            "Call"
                        ],
                        [
                            "C_mid if C_mid else cmid",
                            "IfExp"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "cmid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(C_out * C_mid_mult)",
                            "Call"
                        ],
                        [
                            "C_mid if C_mid else cmid",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cmid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(C_out * C_mid_mult)",
                            "Call"
                        ],
                        [
                            "C_mid if C_mid else cmid",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * idx + 3",
                            "BinOp"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "cmid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(C_out * C_mid_mult)",
                            "Call"
                        ],
                        [
                            "C_mid if C_mid else cmid",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "cmid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(C_out * C_mid_mult)",
                            "Call"
                        ],
                        [
                            "C_mid if C_mid else cmid",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_117": {
                "num_features": {
                    "value": "C_in * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU6_118": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "C_in * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "C_in * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_121": {
                "num_features": {
                    "value": "C_in * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU6_122": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "C_in * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_125": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_141": {
                "in_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_142": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_143": {
                "in_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_165": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_166": {
                "num_features": {
                    "value": "C_in * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU6_167": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "in_channels": {
                    "value": "C_in * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "C_in * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_170": {
                "num_features": {
                    "value": "C_in * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU6_171": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_175": {
                "in_channels": {
                    "value": "C_in * expand_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_176": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_191": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_192": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_212": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_239": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "retrain.py": {
        "torch": {
            "manual_seed_36": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_37": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.seed",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "search.py": {
        "torch": {
            "manual_seed_28": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_29": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.seed",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "trainer/default_trainer.py": {
        "torch": {
            "device_80": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_256": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg.model.resume_path",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_count_274": {
                "variable": {
                    "value": "num_gpus_available",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_276": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg.trainer.device_ids",
                            "Attribute"
                        ]
                    ]
                }
            },
            "is_available_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "trainer/onehot_trainer.py": {
        "torch": {
            "Adam_33": {
                "variable": {
                    "value": "self.ctrl_optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mutator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.arc_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_41": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices[:-split]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_42": {
                "variable": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices[-split:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_43": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.SubsetRandomSampler(indices[:-split])",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_48": {
                "variable": {
                    "value": "self.valid_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.SubsetRandomSampler(indices[-split:])",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "self.test_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset_valid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_149": {
                "variable": {
                    "value": "w_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loss(output, y)",
                            "Call"
                        ],
                        [
                            "loss + self.cfg.model.aux_weight * aux_loss",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "w_model + w_ctrl",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_168": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loss(output, y)",
                            "Call"
                        ],
                        [
                            "loss + self.cfg.model.aux_weight * aux_loss",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w.view(-1) for w in dw]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "norm_188": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__80": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_201": {
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loss(output, y)",
                            "Call"
                        ],
                        [
                            "loss + self.cfg.model.aux_weight * aux_loss",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.mutator.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/calc_model_flops_size.py": {
        "torch": {
            "tensor_17": {
                "variable": {
                    "value": "m.module_used",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_22": {
                "variable": {
                    "value": "m.total_ops",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "variable": {
                    "value": "m.module_used",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "variable": {
                    "value": "m.module_used",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_123": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_128": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_77": {
                "obj": {
                    "value": "input_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_55": {},
            "zeros_80": {
                "*size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/gumbel_softmax.py": {
        "torch": {
            "Uniform_5": {
                "variable": {
                    "value": "unif",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_15": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y / tau",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_18": {
                "variable": {
                    "value": "y_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gumbel_softmax(x, hard)",
                            "Call"
                        ],
                        [
                            "logits + gumbel.to(logits.device)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(y / tau, dim=dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_6": {
                "input": {
                    "value": "unif + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/optim_utils.py": {
        "torch": {
            "SGD_14": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CosineAnnealingLR_47": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adagrad_16": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CosineAnnealingWarmRestarts_49": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_18": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StepLR_51": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RMSprop_20": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MultiStepLR_53": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_55": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/trick_utils.py": {
        "torch": {
            "randperm_17": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_19": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "utils/visual_cam.py": {
        "torch": {
            "stack_150": {
                "variable": {
                    "value": "scan",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(scan)",
                            "Call"
                        ],
                        [
                            "scan.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(scan, 0)",
                            "Call"
                        ],
                        [
                            "self.data_preprocess(self.scan_path, self.transform, self.is_color, self.img_size, self.loader)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_152": {
                "variable": {
                    "value": "scan",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(scan)",
                            "Call"
                        ],
                        [
                            "scan.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(scan, 0)",
                            "Call"
                        ],
                        [
                            "self.data_preprocess(self.scan_path, self.transform, self.is_color, self.img_size, self.loader)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_39": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg.cam.model_path",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_36": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_38": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_141": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_148": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img[0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}