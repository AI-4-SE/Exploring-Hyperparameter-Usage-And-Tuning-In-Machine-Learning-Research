{
    "humap/humap.py": {
        "sklearn": {
            "check_array_100": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_array(X, dtype=np.float32, accept_sparse='csr', order='C')",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "accept_sparse": {
                    "value": "csr",
                    "type": "str",
                    "possible_values": []
                },
                "order": {
                    "value": "C",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_humap.py": {
        "sklearn": {
            "fetch_openml_14": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "mnist_784",
                    "type": "str",
                    "possible_values": []
                },
                "version": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_15": {
                "variable": {
                    "value": "(_, X, _, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_17": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fetch_openml('mnist_784', version=1, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, test_size=0.2, random_state=0)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "np.random.rand(1000, 1)",
                            "Call"
                        ],
                        [
                            "np.random.rand(1000, 2, 3)",
                            "Call"
                        ],
                        [
                            "np.random.rand(1000, 2)",
                            "Call"
                        ],
                        [
                            "np.random.rand(1000, 2).tolist()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_umap.py": {
        "sklearn": {
            "fetch_openml_14": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "mnist_784",
                    "type": "str",
                    "possible_values": []
                },
                "version": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_15": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fetch_openml('mnist_784', version=1, return_X_y=True)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "np.random.rand(1000, 1)",
                            "Call"
                        ],
                        [
                            "np.random.rand(1000, 2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}