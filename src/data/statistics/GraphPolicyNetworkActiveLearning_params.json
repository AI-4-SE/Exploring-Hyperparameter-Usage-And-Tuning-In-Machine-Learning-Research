{
    "src/baselines/active-learning/run_experiment.py": {
        "sklearn": {
            "normalize_193": {
                "variable": {
                    "value": "X_train",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(X_train)",
                            "Call"
                        ],
                        [
                            "scaler.transform(X_train)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_194": {
                "variable": {
                    "value": "X_val",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(X_val)",
                            "Call"
                        ],
                        [
                            "scaler.transform(X_val)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_195": {
                "variable": {
                    "value": "X_test",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(X_test)",
                            "Call"
                        ],
                        [
                            "scaler.transform(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "StandardScaler_198": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Glob_336": {
                "variable": {
                    "value": "existing_files",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "os.path.join(save_dir, filename + '*.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Exists_270": {
                "filename": {
                    "value": "FLAGS.save_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MkDir_272": {
                "dirname": {
                    "value": "FLAGS.save_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Exists_283": {
                "filename": {
                    "value": "save_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.save_dir, FLAGS.dataset + '_' + FLAGS.sampling_method)",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_339": {
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'log-' + strftime('%Y-%m-%d-%H-%M-%S', gmtime()) + '.txt')",
                            "Call"
                        ],
                        [
                            "'results_score_' + FLAGS.score_method + '_select_' + FLAGS.select_method + '_norm_' + str(normalize_data) + '_stand_' + str(standardize_data)",
                            "BinOp"
                        ],
                        [
                            "os.path.join(save_dir, filename + '_' + str(1000 + len(existing_files))[1:] + '.pkl')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MkDir_285": {
                "dirname": {
                    "value": "save_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.save_dir, FLAGS.dataset + '_' + FLAGS.sampling_method)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/baselines/active-learning/sampling_methods/graph_density.py": {
        "sklearn": {
            "kneighbors_graph_49": {
                "variable": {
                    "value": "connect",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.flat_X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "n_neighbor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pairwise_distances_60": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.flat_X[[i]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "Y": {
                    "value": "self.flat_X[[j]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "metric": {
                    "value": "manhattan",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines/active-learning/sampling_methods/hierarchical_clustering_AL.py": {
        "sklearn": {
            "PCA_92": {
                "variable": {
                    "value": "transformer",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "max_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AgglomerativeClustering_96": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affinity": {
                    "value": "affinity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'euclidean'",
                            "MethodArgument"
                        ]
                    ]
                },
                "linkage": {
                    "value": "linkage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'ward'",
                            "MethodArgument"
                        ]
                    ]
                },
                "n_clusters": {
                    "value": "len(classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_100": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affinity": {
                    "value": "affinity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'euclidean'",
                            "MethodArgument"
                        ]
                    ]
                },
                "linkage": {
                    "value": "linkage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'ward'",
                            "MethodArgument"
                        ]
                    ]
                },
                "n_clusters": {
                    "value": "len(classes)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines/active-learning/sampling_methods/informative_diverse.py": {
        "sklearn": {
            "MiniBatchKMeans_49": {
                "variable": {
                    "value": "self.cluster_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines/active-learning/sampling_methods/kcenter_greedy.py": {
        "sklearn": {
            "pairwise_distances_69": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "Y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features[cluster_centers]",
                            "Subscript"
                        ]
                    ]
                },
                "metric": {
                    "value": "self.metric",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines/active-learning/sampling_methods/represent_cluster_centers.py": {
        "sklearn": {
            "MiniBatchKMeans_70": {
                "variable": {
                    "value": "clustering_model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines/active-learning/utils/create_data.py": {
        "sklearn": {
            "CountVectorizer_120": {
                "variable": {
                    "value": "vect",
                    "type": "variable",
                    "possible_values": []
                },
                "max_features": {
                    "value": "30000",
                    "type": "int",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TfidfTransformer_121": {
                "variable": {
                    "value": "tfidf",
                    "type": "variable",
                    "possible_values": []
                },
                "norm": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_breast_cancer_214": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_iris_216": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "fetch_20newsgroups_vectorized_220": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "subset": {
                    "value": "all",
                    "type": "str",
                    "possible_values": []
                },
                "remove": {
                    "value": "headers",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TfidfTransformer_221": {
                "variable": {
                    "value": "tfidf",
                    "type": "variable",
                    "possible_values": []
                },
                "norm": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "GFile_74": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, dataset[1] + '.pkl')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Exists_208": {
                "filename": {
                    "value": "save_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.save_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "MkDir_209": {
                "dirname": {
                    "value": "save_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.save_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Exists_210": {
                "filename": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, dataset[1] + '.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_251": {
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, dataset[1] + '.pkl')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines/active-learning/utils/kernel_block_solver.py": {
        "sklearn": {
            "pairwise_kernels_76": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X_train",
                    "type": "variable",
                    "possible_values": []
                },
                "metric": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pairwise_kernels_138": {
                "variable": {
                    "value": "val_K",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X_val",
                    "type": "variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "self.X_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "metric": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "accuracy_score_145": {
                "variable": {
                    "value": "val_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "val_y",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "val_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(val_K.dot(self.coef_), axis=1)",
                            "Call"
                        ],
                        [
                            "self.predict(X_val)",
                            "Call"
                        ],
                        [
                            "val_K.dot(self.coef_)",
                            "Call"
                        ],
                        [
                            "val_pred - row_min[:, None]",
                            "BinOp"
                        ],
                        [
                            "np.exp(val_pred)",
                            "Call"
                        ],
                        [
                            "val_pred / sum_exp[:, None]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pairwise_kernels_152": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "self.X_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "metric": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pairwise_kernels_177": {
                "variable": {
                    "value": "val_K",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "self.X_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "metric": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "accuracy_score_131": {
                "variable": {
                    "value": "train_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encode_y(y_train)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y_hat, axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/baselines/active-learning/utils/utils.py": {
        "sklearn": {
            "GridSearchCV_249": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LogisticRegression(random_state=seed, multi_class='multinomial', solver='lbfgs', max_iter=200)",
                            "Call"
                        ],
                        [
                            "GridSearchCV(model, params, cv=3)",
                            "Call"
                        ],
                        [
                            "LogisticRegression(random_state=seed)",
                            "Call"
                        ],
                        [
                            "LinearSVC(random_state=seed)",
                            "Call"
                        ],
                        [
                            "SVC(random_state=seed)",
                            "Call"
                        ],
                        [
                            "BlockKernelSolver(random_state=seed)",
                            "Call"
                        ],
                        [
                            "SmallCNN(random_state=seed)",
                            "Call"
                        ],
                        [
                            "AllConv(random_state=seed)",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'C': [10.0 ** i for i in range(-4, 5)]}",
                            "Dict"
                        ],
                        [
                            "{'C': [10.0 ** i for i in range(-5, 4)]}",
                            "Dict"
                        ],
                        [
                            "{'C': [10.0 ** i for i in range(-4, 5)]}",
                            "Dict"
                        ],
                        [
                            "{'C': [10.0 ** i for i in range(-4, 5)]}",
                            "Dict"
                        ],
                        [
                            "{'C': [10.0 ** i for i in range(-6, 1)]}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogisticRegression_222": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "13",
                            "MethodArgument"
                        ]
                    ]
                },
                "multi_class": {
                    "value": "multinomial",
                    "type": "str",
                    "possible_values": []
                },
                "solver": {
                    "value": "lbfgs",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogisticRegression_226": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "13",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LinearSVC_229": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "13",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SVC_232": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "13",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "GFile_46": {
                "variable": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(data_dir, dataname + '.pkl')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Exists_118": {
                "filename": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(data_dir, dataname + '.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_120": {
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(data_dir, dataname + '.pkl')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines/age.py": {
        "sklearn": {
            "KMeans_62": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.NCL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "euclidean_distances_63": {
                "variable": {
                    "value": "ed",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "kmeans.cluster_centers_",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "src/baselines/anrmab.py": {
        "sklearn": {
            "KMeans_153": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.NCL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "euclidean_distances_154": {
                "variable": {
                    "value": "ed",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "kmeans.cluster_centers_",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines/sampling_methods/graph_density.py": {
        "sklearn": {
            "kneighbors_graph_49": {
                "variable": {
                    "value": "connect",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.flat_X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "n_neighbor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pairwise_distances_60": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.flat_X[[i]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "Y": {
                    "value": "self.flat_X[[j]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "metric": {
                    "value": "manhattan",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines/sampling_methods/hierarchical_clustering_AL.py": {
        "sklearn": {
            "PCA_92": {
                "variable": {
                    "value": "transformer",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "max_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AgglomerativeClustering_96": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affinity": {
                    "value": "affinity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'euclidean'",
                            "MethodArgument"
                        ]
                    ]
                },
                "linkage": {
                    "value": "linkage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'ward'",
                            "MethodArgument"
                        ]
                    ]
                },
                "n_clusters": {
                    "value": "len(classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_100": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affinity": {
                    "value": "affinity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'euclidean'",
                            "MethodArgument"
                        ]
                    ]
                },
                "linkage": {
                    "value": "linkage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'ward'",
                            "MethodArgument"
                        ]
                    ]
                },
                "n_clusters": {
                    "value": "len(classes)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines/sampling_methods/informative_diverse.py": {
        "sklearn": {
            "MiniBatchKMeans_49": {
                "variable": {
                    "value": "self.cluster_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines/sampling_methods/kcenter_greedy.py": {
        "sklearn": {
            "pairwise_distances_69": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "Y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features[cluster_centers]",
                            "Subscript"
                        ]
                    ]
                },
                "metric": {
                    "value": "self.metric",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines/sampling_methods/represent_cluster_centers.py": {
        "sklearn": {
            "MiniBatchKMeans_70": {
                "variable": {
                    "value": "clustering_model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/utils.py": {
        "sklearn": {
            "f1_score_72": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "labels.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred.max(1)[1].type_as(labels)",
                            "Call"
                        ],
                        [
                            "y_pred.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "(y_pred > 0.0).cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_42": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_91": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ent_1 + ent_2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_95": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(ent, dim=1)",
                            "Call"
                        ],
                        [
                            "-torch.log(torch.clamp(tens, min=1e-07)) * tens",
                            "BinOp"
                        ],
                        [
                            "torch.sum(entropy, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_143": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_144": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_145": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_88": {
                "input": {
                    "value": "torch.clamp(tens, min=1e-07)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_89": {
                "input": {
                    "value": "torch.clamp(reverse, min=1e-07)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_94": {
                "input": {
                    "value": "torch.clamp(tens, min=1e-07)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_88": {
                "input": {
                    "value": "tens",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_89": {
                "input": {
                    "value": "reverse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - tens",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_94": {
                "input": {
                    "value": "tens",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines/active-learning/utils/allconv.py": {
        "tensorflow": {
            "set_random_seed_61": {
                "seed": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines/active-learning/utils/chart_data.py": {
        "tensorflow": {
            "Glob_200": {
                "variable": {
                    "value": "files",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "os.path.join(FLAGS.source_dir, FLAGS.dataset + '*/results*.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Exists_194": {
                "filename": {
                    "value": "FLAGS.save_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MkDir_195": {
                "dirname": {
                    "value": "FLAGS.save_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FastGFile_56": {
                "name": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "files",
                            "Name"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines/active-learning/utils/small_cnn.py": {
        "tensorflow": {
            "set_random_seed_70": {
                "seed": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/datasetcollecting/biggraph.py": {
        "torch": {
            "cat_51": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(Y, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_9": {
                "condition": {
                    "value": "(numof1or0 > 0.75 + (numof1or0 < 0.25)) == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_21": {
                "condition": {
                    "value": "rate > 0.9",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_22": {
                "condition": {
                    "value": "rate2 > 0.9",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "src/train.py": {
        "torch": {
            "Adam_91": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.policy.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.rllr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_92": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "[1000, 3000]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_149": {
                "variable": {
                    "value": "logp_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logp_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(logp_actions)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_150": {
                "variable": {
                    "value": "p_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "p_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(p_actions)",
                            "Call"
                        ],
                        [
                            "[self.trackActionProb(self.states[i], self.pools[i], self.actions[i]) for i in range(len(self.states))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(p_actions)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_151": {
                "variable": {
                    "value": "self.entropy_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.entropy_reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_164": {
                "variable": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(rewards).cuda().type(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_198": {
                "variable": {
                    "value": "valid_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[pool].reshape(self.args.batchsize, -1)",
                            "Call"
                        ],
                        [
                            "valid_logits - max_logits",
                            "BinOp"
                        ],
                        [
                            "logits[pool].reshape(self.args.batchsize, -1)",
                            "Call"
                        ],
                        [
                            "valid_logits - max_logits",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_207": {
                "variable": {
                    "value": "valid_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[pool].reshape(self.args.batchsize, -1)",
                            "Call"
                        ],
                        [
                            "valid_logits - max_logits",
                            "BinOp"
                        ],
                        [
                            "logits[pool].reshape(self.args.batchsize, -1)",
                            "Call"
                        ],
                        [
                            "valid_logits - max_logits",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_212": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "valid_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(valid_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(valid_logits, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_179": {
                "variable": {
                    "value": "r_sign",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(rewards).cuda().type(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_112": {
                "obj": {
                    "value": "self.policy.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'models/{}.pkl'.format(self.args.policynet + self.args.savename + '_' + str(episode))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_170": {
                "input": {
                    "value": "torch.sum(losses, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_185": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio * rewards",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_110": {
                "obj": {
                    "value": "self.policy.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'models/{}.pkl'.format(self.args.policynet + self.args.savename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_170": {
                "input": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logp_actions * rewards + self.args.entcoef * self.entropy_reg",
                            "BinOp"
                        ],
                        [
                            "torch.min(ratio * rewards, (1 + epsilon * r_sign) * rewards)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_183": {
                "variable": {
                    "value": "p_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "p_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(p_actions)",
                            "Call"
                        ],
                        [
                            "[self.trackActionProb(self.states[i], self.pools[i], self.actions[i]) for i in range(len(self.states))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(p_actions)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_196": {
                "input": {
                    "value": "valid_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[pool].reshape(self.args.batchsize, -1)",
                            "Call"
                        ],
                        [
                            "valid_logits - max_logits",
                            "BinOp"
                        ],
                        [
                            "logits[pool].reshape(self.args.batchsize, -1)",
                            "Call"
                        ],
                        [
                            "valid_logits - max_logits",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_205": {
                "input": {
                    "value": "valid_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[pool].reshape(self.args.batchsize, -1)",
                            "Call"
                        ],
                        [
                            "valid_logits - max_logits",
                            "BinOp"
                        ],
                        [
                            "logits[pool].reshape(self.args.batchsize, -1)",
                            "Call"
                        ],
                        [
                            "valid_logits - max_logits",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_186": {
                "input": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logp_actions * rewards + self.args.entcoef * self.entropy_reg",
                            "BinOp"
                        ],
                        [
                            "torch.min(ratio * rewards, (1 + epsilon * r_sign) * rewards)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_139": {
                "input": {
                    "value": "1e-06 + self.valid_probs",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/classificationnet.py": {
        "torch": {
            "Parameter_20": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(batchsize, in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_34": {
                "variable": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "jik,ikp->jip",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_35": {
                "variable": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('jik,ikp->jip', input, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.reshape(support, [support.size(0), -1])",
                            "Call"
                        ],
                        [
                            "support + self.bias",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[support.size(0), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_40": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.spmm(adj, support)",
                            "Call"
                        ],
                        [
                            "torch.reshape(output, [output.size(0), self.batchsize, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[output.size(0), self.batchsize, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dropout_58": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc1(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_22": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(batchsize * out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_68": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.expand([self.batchsize] + list(x.size())).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.gc1(x, adj))",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.gc2(x, adj)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/dataloader.py": {
        "torch": {
            "sum_138": {
                "variable": {
                    "value": "self.deg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.adj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_93": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_94": {
                "variable": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "self.adj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.adj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "self.normadj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.normadj",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/env.py": {
        "torch": {
            "sum_55": {
                "variable": {
                    "value": "sum_kl_ht",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sparse_output_kl_ht",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.FloatTensor(indices, kl_ht, size=torch.Size([N, N, kl_ht.size(-1)]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_55": {
                "variable": {
                    "value": "sum_kl_ht",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_56": {
                "variable": {
                    "value": "sum_kl_th",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sparse_output_kl_th",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.FloatTensor(indices, kl_th, size=torch.Size([N, N, kl_th.size(-1)]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_56": {
                "variable": {
                    "value": "sum_kl_th",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_13": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(probs)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_15": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(probs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_27": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(logprobs)",
                            "Call"
                        ],
                        [
                            "F.softmax(logprobs, dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_113": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argsort_33": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_49": {
                "input": {
                    "value": "torch.log(torch.clamp_min(tailprobs, 1e-10)) * tailprobs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_50": {
                "input": {
                    "value": "torch.log(torch.clamp_min(headprobs, 1e-10)) * tailprobs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_51": {
                "input": {
                    "value": "torch.log(torch.clamp_min(headprobs, 1e-10)) * headprobs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_52": {
                "input": {
                    "value": "torch.log(torch.clamp_min(tailprobs, 1e-10)) * headprobs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_49": {
                "input": {
                    "value": "torch.clamp_min(tailprobs, 1e-10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_50": {
                "input": {
                    "value": "torch.clamp_min(headprobs, 1e-10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_51": {
                "input": {
                    "value": "torch.clamp_min(headprobs, 1e-10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_52": {
                "input": {
                    "value": "torch.clamp_min(tailprobs, 1e-10)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/player.py": {
        "torch": {
            "zeros_39": {
                "variable": {
                    "value": "valmask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batchsize, self.G.stat['nnode'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "testmask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batchsize, self.G.stat['nnode'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "self.valid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "self.testid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "testid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_62": {
                "variable": {
                    "value": "self.vallabel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vallabel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_63": {
                "variable": {
                    "value": "self.testlabel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "testlabel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "where_78": {
                "variable": {
                    "value": "(row, col)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask < 0.1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "variable": {
                    "value": "self.trainmask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batchsize, self.G.stat['nnode'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_153": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_90": {
                "input": {
                    "value": "self.trainmask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_132": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.testmask + self.valmask + self.trainmask",
                            "BinOp"
                        ],
                        [
                            "self.testmask",
                            "Attribute"
                        ],
                        [
                            "self.valmask",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_103": {
                "input": {
                    "value": "losses * self.trainmask",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/policynet.py": {
        "torch": {
            "Parameter_19": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_36": {
                "variable": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "jik,kp->jip",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_39": {
                "variable": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('jik,kp->jip', input, self.weight)",
                            "Call"
                        ],
                        [
                            "support + self.bias",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(support, [support.size(0), -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[support.size(0), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_41": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.spmm(adj, support)",
                            "Call"
                        ],
                        [
                            "torch.reshape(output, [output.size(0), self.batchsize, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[output.size(0), self.batchsize, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_58": {
                "variable": {
                    "value": "self.gcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.pnhid[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "statedim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.pnhid[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.pnhid[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.pnhid[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.lin3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.pnhid[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_97": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin1(state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_98": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/query.py": {
        "torch": {
            "softmax_63": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn(4, 7) * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_64": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(torch.randn(4, 7) * 3, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_66": {
                "variable": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "softmax_86": {
                "variable": {
                    "value": "valid_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[pool].reshape(self.args.batchsize, -1)",
                            "Call"
                        ],
                        [
                            "valid_logits - max_logits",
                            "BinOp"
                        ],
                        [
                            "logits[pool].reshape(batchsize, -1)",
                            "Call"
                        ],
                        [
                            "valid_logits - max_logits",
                            "BinOp"
                        ],
                        [
                            "logits[pool].reshape(batchsize, -1)",
                            "Call"
                        ],
                        [
                            "valid_logits - max_logits",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_90": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "valid_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(valid_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(valid_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(valid_logits, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_41": {
                "variable": {
                    "value": "valid_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[pool].reshape(self.args.batchsize, -1)",
                            "Call"
                        ],
                        [
                            "valid_logits - max_logits",
                            "BinOp"
                        ],
                        [
                            "logits[pool].reshape(batchsize, -1)",
                            "Call"
                        ],
                        [
                            "valid_logits - max_logits",
                            "BinOp"
                        ],
                        [
                            "logits[pool].reshape(batchsize, -1)",
                            "Call"
                        ],
                        [
                            "valid_logits - max_logits",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_44": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "valid_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(valid_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(valid_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(valid_logits, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_54": {
                "variable": {
                    "value": "valid_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[pool].reshape(self.args.batchsize, -1)",
                            "Call"
                        ],
                        [
                            "valid_logits - max_logits",
                            "BinOp"
                        ],
                        [
                            "logits[pool].reshape(batchsize, -1)",
                            "Call"
                        ],
                        [
                            "valid_logits - max_logits",
                            "BinOp"
                        ],
                        [
                            "logits[pool].reshape(batchsize, -1)",
                            "Call"
                        ],
                        [
                            "valid_logits - max_logits",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_57": {
                "variable": {
                    "value": "action_inpool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(valid_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(valid_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(valid_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_63": {
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_80": {
                "input": {
                    "value": "valid_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[pool].reshape(self.args.batchsize, -1)",
                            "Call"
                        ],
                        [
                            "valid_logits - max_logits",
                            "BinOp"
                        ],
                        [
                            "logits[pool].reshape(batchsize, -1)",
                            "Call"
                        ],
                        [
                            "valid_logits - max_logits",
                            "BinOp"
                        ],
                        [
                            "logits[pool].reshape(batchsize, -1)",
                            "Call"
                        ],
                        [
                            "valid_logits - max_logits",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_39": {
                "input": {
                    "value": "valid_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[pool].reshape(self.args.batchsize, -1)",
                            "Call"
                        ],
                        [
                            "valid_logits - max_logits",
                            "BinOp"
                        ],
                        [
                            "logits[pool].reshape(batchsize, -1)",
                            "Call"
                        ],
                        [
                            "valid_logits - max_logits",
                            "BinOp"
                        ],
                        [
                            "logits[pool].reshape(batchsize, -1)",
                            "Call"
                        ],
                        [
                            "valid_logits - max_logits",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_52": {
                "input": {
                    "value": "valid_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits[pool].reshape(self.args.batchsize, -1)",
                            "Call"
                        ],
                        [
                            "valid_logits - max_logits",
                            "BinOp"
                        ],
                        [
                            "logits[pool].reshape(batchsize, -1)",
                            "Call"
                        ],
                        [
                            "valid_logits - max_logits",
                            "BinOp"
                        ],
                        [
                            "logits[pool].reshape(batchsize, -1)",
                            "Call"
                        ],
                        [
                            "valid_logits - max_logits",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}