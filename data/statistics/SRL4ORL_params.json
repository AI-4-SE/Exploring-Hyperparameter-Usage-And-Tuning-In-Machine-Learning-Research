{
    "NeuralOPMining-JointSRL/data/Dataloader.py": {
        "torch": {}
    },
    "NeuralOPMining-JointSRL/driver/Attention.py": {
        "torch": {
            "arange_15": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(x.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_16": {
                "variable": {
                    "value": "inv_timescales",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_26": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scaled_time.sin(), scaled_time.cos()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_38": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_58": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2)) / self.temper",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(attn_mask, -1e+18)",
                            "Call"
                        ],
                        [
                            "self.sm(scores)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(combined_qkv, 3, dim=-1)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_78": {
                "variable": {
                    "value": "self.dropout_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_79": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "variable": {
                    "value": "self.dropout_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.qkv_combined",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "3 * model_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "head_count * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_122": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "combined_qkv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qkv_combined(q)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_134": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(q_s, k_s, v_s, attn_mask=mask.repeat(self.n_head, 1, 1))",
                            "Call"
                        ],
                        [
                            "outputs.view(self.n_head, -1, outputs.size()[-2], outputs.size()[-1])",
                            "Call"
                        ],
                        [
                            "torch.chunk(outputs, self.n_head, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(outputs, dim=-1).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.proj(outputs)",
                            "Call"
                        ],
                        [
                            "self.attention(q_s, k_s, v_s, attn_mask=mask.repeat(n_head, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(outputs, mb_size, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.proj(outputs)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(q_s, k_s, v_s, attn_mask=mask.repeat(self.n_head, 1, 1))",
                            "Call"
                        ],
                        [
                            "outputs.view(self.n_head, -1, outputs.size()[-2], outputs.size()[-1])",
                            "Call"
                        ],
                        [
                            "torch.chunk(outputs, self.n_head, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(outputs, dim=-1).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.proj(outputs)",
                            "Call"
                        ],
                        [
                            "self.attention(q_s, k_s, v_s, attn_mask=mask.repeat(n_head, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(outputs, mb_size, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.proj(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_135": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_153": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(head_count, model_dim, d_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_154": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(head_count, model_dim, d_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_155": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(head_count, model_dim, d_v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "head_count * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_187": {
                "variable": {
                    "value": "q_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(q, self.n_head, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_s, dim=0)",
                            "Call"
                        ],
                        [
                            "q_s.view(-1, q_s.size()[-2], q_s.size()[-1])",
                            "Call"
                        ],
                        [
                            "q.repeat(n_head, 1, 1).view(n_head, -1, d_model)",
                            "Call"
                        ],
                        [
                            "torch.bmm(q_s, self.w_qs).view(-1, len_q, d_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_188": {
                "variable": {
                    "value": "k_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(k, self.n_head, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack(k_s, dim=0)",
                            "Call"
                        ],
                        [
                            "k_s.view(-1, k_s.size()[-2], k_s.size()[-1])",
                            "Call"
                        ],
                        [
                            "k.repeat(n_head, 1, 1).view(n_head, -1, d_model)",
                            "Call"
                        ],
                        [
                            "torch.bmm(k_s, self.w_ks).view(-1, len_k, d_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_189": {
                "variable": {
                    "value": "v_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(v, self.n_head, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack(v_s, dim=0)",
                            "Call"
                        ],
                        [
                            "v_s.view(-1, v_s.size()[-2], v_s.size()[-1])",
                            "Call"
                        ],
                        [
                            "v.repeat(n_head, 1, 1).view(n_head, -1, d_model)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v_s, self.w_vs).view(-1, len_v, d_v)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(outputs, mb_size, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_252": {
                "variable": {
                    "value": "self.linear_keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_254": {
                "variable": {
                    "value": "self.linear_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_256": {
                "variable": {
                    "value": "self.linear_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_258": {
                "variable": {
                    "value": "self.sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_260": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_329": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._split_heads(self.linear_query(query))",
                            "Call"
                        ],
                        [
                            "query_up / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "key_up.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_361": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "orthogonal_84": {
                "module": {
                    "value": "self.w_1.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_87": {
                "module": {
                    "value": "self.w_2.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_113": {
                "module": {
                    "value": "self.qkv_combined.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_115": {
                "module": {
                    "value": "self.proj.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_163": {
                "module": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_164": {
                "module": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_165": {
                "module": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_167": {
                "module": {
                    "value": "self.proj.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_265": {
                "module": {
                    "value": "self.linear_keys.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_268": {
                "module": {
                    "value": "self.linear_values.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_271": {
                "module": {
                    "value": "self.linear_query.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_274": {
                "module": {
                    "value": "self.final_linear.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_47": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(combined_qkv, 3, dim=-1)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "chunk_123": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(combined_qkv, 3, dim=-1)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_124": {
                "input": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(combined_qkv, 3, dim=-1)",
                            "Call"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_125": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(combined_qkv, 3, dim=-1)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_126": {
                "tensors": {
                    "value": "v_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(v, self.n_head, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack(v_s, dim=0)",
                            "Call"
                        ],
                        [
                            "v_s.view(-1, v_s.size()[-2], v_s.size()[-1])",
                            "Call"
                        ],
                        [
                            "v.repeat(n_head, 1, 1).view(n_head, -1, d_model)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v_s, self.w_vs).view(-1, len_v, d_v)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_195": {
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(q_s, k_s, v_s, attn_mask=mask.repeat(self.n_head, 1, 1))",
                            "Call"
                        ],
                        [
                            "outputs.view(self.n_head, -1, outputs.size()[-2], outputs.size()[-1])",
                            "Call"
                        ],
                        [
                            "torch.chunk(outputs, self.n_head, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(outputs, dim=-1).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.proj(outputs)",
                            "Call"
                        ],
                        [
                            "self.attention(q_s, k_s, v_s, attn_mask=mask.repeat(n_head, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(outputs, mb_size, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.proj(outputs)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "mb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.size()",
                            "Call"
                        ],
                        [
                            "k.size()",
                            "Call"
                        ],
                        [
                            "v.size()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_337": {
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2)) / self.temper",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(attn_mask, -1e+18)",
                            "Call"
                        ],
                        [
                            "self.sm(scores)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._split_heads(self.linear_values(value))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "NeuralOPMining-JointSRL/driver/CRF.py": {
        "torch": {
            "Parameter_46": {
                "variable": {
                    "value": "self.start_transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_tags)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "self.end_transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_tags)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "self.transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_tags, num_tags)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_305": {
                "variable": {
                    "value": "safe_log_sum_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.exp(tensor - broadcast_offset), dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_119": {
                "input": {
                    "value": "llh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denominator - numerator",
                            "BinOp"
                        ],
                        [
                            "self.start_transitions[tags[0]]",
                            "Subscript"
                        ],
                        [
                            "llh + emissions[-1].gather(1, last_tags.view(-1, 1)).squeeze(1) * mask[-1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_305": {
                "input": {
                    "value": "torch.exp(tensor - broadcast_offset)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_305": {
                "input": {
                    "value": "tensor - broadcast_offset",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "NeuralOPMining-JointSRL/driver/Labeler.py": {
        "torch": {}
    },
    "NeuralOPMining-JointSRL/driver/Layer.py": {
        "torch": {
            "Parameter_18": {
                "variable": {
                    "value": "bias_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(bias.size()[0], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_57": {
                "variable": {
                    "value": "drop_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "drop_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.data.new(batch_size, hidden_size).fill_(1 - dropout)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(drop_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "drop_masks / (1 - dropout)",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(drop_masks, dim=2).expand(-1, -1, seq_length).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "drop_masks",
                            "Method Argument"
                        ],
                        [
                            "drop_masks",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_57": {
                "variable": {
                    "value": "drop_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "orthogonal_19": {
                "module": {
                    "value": "bias_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.Parameter(torch.FloatTensor(bias.size()[0], 1))",
                            "Call"
                        ],
                        [
                            "bias_temp.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_104": {
                "tensors": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_134": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_out",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "(True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_152": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()",
                            "Call"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_177": {
                "variable": {
                    "value": "self.a_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(d_hid)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_178": {
                "variable": {
                    "value": "self.b_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(d_hid)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_183": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "std_184": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_228": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.linear_input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.linear_output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_253": {
                "variable": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((input2, Variable(ones)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.transpose(input2, 1, 2)",
                            "Call"
                        ],
                        [
                            "input2",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_255": {
                "variable": {
                    "value": "biaffine",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(affine, input2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_369": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_385": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_425": {
                "variable": {
                    "value": "h_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_n, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_n, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_426": {
                "variable": {
                    "value": "c_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(c_n, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(c_n, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_435": {
                "variable": {
                    "value": "self.linear_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "6 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_437": {
                "variable": {
                    "value": "self.linear_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()",
                            "Call"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "5 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_481": {
                "variable": {
                    "value": "self.bilstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_486": {
                "variable": {
                    "value": "self.gate_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_528": {
                "variable": {
                    "value": "(lstm_out, output_lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.in_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.bilstm(x, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.out_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_529": {
                "variable": {
                    "value": "(source_x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "source_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(source_x, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_553": {
                "variable": {
                    "value": "information_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_556": {
                "variable": {
                    "value": "information_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "information_flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.add(allow_transformation, allow_carry)",
                            "Call"
                        ],
                        [
                            "padding(information_flow)",
                            "Call"
                        ],
                        [
                            "torch.stack(batched_output)",
                            "Call"
                        ],
                        [
                            "drop_sequence_sharedmask(information_flow, 0.1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(information_flow, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy()",
                    "type": "IfExp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_605": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_618": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bernoulli_26": {
                "input": {
                    "value": "word_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_embeddings.data.new(batch_size, seq_length).fill_(1 - dropout_emb)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(word_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "word_masks * scale",
                            "BinOp"
                        ],
                        [
                            "word_masks.unsqueeze(dim=2)",
                            "Call"
                        ],
                        [
                            "word_embeddings.data.new(batch_size, seq_length).fill_(1 - dropout_emb)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(word_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "word_masks.unsqueeze(dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_37": {
                "input": {
                    "value": "word_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_embeddings.data.new(batch_size, seq_length).fill_(1 - dropout_emb)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(word_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "word_masks * scale",
                            "BinOp"
                        ],
                        [
                            "word_masks.unsqueeze(dim=2)",
                            "Call"
                        ],
                        [
                            "word_embeddings.data.new(batch_size, seq_length).fill_(1 - dropout_emb)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(word_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "word_masks.unsqueeze(dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_39": {
                "input": {
                    "value": "tag_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tag_embeddings.data.new(batch_size, seq_length).fill_(1 - dropout_emb)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(tag_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "tag_masks * scale",
                            "BinOp"
                        ],
                        [
                            "tag_masks.unsqueeze(dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_55": {
                "input": {
                    "value": "drop_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.data.new(batch_size, hidden_size).fill_(1 - dropout)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(drop_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "drop_masks / (1 - dropout)",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(drop_masks, dim=2).expand(-1, -1, seq_length).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "drop_masks",
                            "Method Argument"
                        ],
                        [
                            "drop_masks",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "orthogonal_139": {
                "module": {
                    "value": "self.linear.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_167": {
                "module": {
                    "value": "self.linear.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input1, Variable(ones))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input2, Variable(ones))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_391": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "orthogonal_492": {
                "module": {
                    "value": "self.bilstm.all_weights[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "orthogonal_493": {
                "module": {
                    "value": "self.bilstm.all_weights[0][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "orthogonal_494": {
                "module": {
                    "value": "self.bilstm.all_weights[1][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "orthogonal_495": {
                "module": {
                    "value": "self.bilstm.all_weights[1][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_518": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.in_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.bilstm(x, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.out_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_520": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.in_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.bilstm(x, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.out_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy()",
                    "type": "IfExp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_524": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.in_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.bilstm(x, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.out_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_526": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.in_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.bilstm(x, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.out_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy()",
                    "type": "IfExp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_538": {
                "variable": {
                    "value": "transformation_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "information_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gate_layer(ith_source_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_540": {
                "variable": {
                    "value": "allow_transformation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transformation_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(information_source)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ith_lstm_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lstm_out[i][:output_lengths[i]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mul_545": {
                "variable": {
                    "value": "allow_carry",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "information_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gate_layer(ith_source_x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "carry_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - transformation_layer",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_547": {
                "variable": {
                    "value": "information_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "allow_transformation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(transformation_layer, ith_lstm_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "allow_carry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(information_source, carry_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConstantPad2d_549": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 0, output_lengths[0] - information_flow.size()[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unsqueeze_624": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "orthogonal_102": {
                "module": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(o, i)",
                            "Call"
                        ],
                        [
                            "self.named_parameters()",
                            "Call"
                        ],
                        [
                            "zip(param_names, layer_params)",
                            "Call"
                        ],
                        [
                            "zip(param_names, layer_params)",
                            "Call"
                        ],
                        [
                            "self.named_parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_113": {
                "input": {
                    "value": "self.drop_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_119": {
                "input": {
                    "value": "self.drop_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_125": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.in_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.bilstm(x, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.out_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.drop_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_177": {
                "*size": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_hid",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_178": {
                "*size": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_hid",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_236": {
                "ndarray": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((self.linear_output_size, self.linear_input_size), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "orthonormal_initializer(self.hidden_size, self.hidden_size + self.input_size)",
                            "Call"
                        ],
                        [
                            "orthonormal_initializer(self.hidden_size, self.hidden_size + 2 * self.hidden_size)",
                            "Call"
                        ],
                        [
                            "orthonormal_initializer(self.hidden_size, self.hidden_size + self.input_size)",
                            "Call"
                        ],
                        [
                            "orthonormal_initializer(self.hidden_size, self.hidden_size + self.hidden_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_255": {
                "input": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear(input1)",
                            "Call"
                        ],
                        [
                            "affine.view(batch_size, len1 * self.out_features, dim2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((input2, Variable(ones)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.transpose(input2, 1, 2)",
                            "Call"
                        ],
                        [
                            "input2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_408": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "input.data.new(batch_size, input_size).fill_(1 - self.dropout_in)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(input_mask), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "input_mask / (1 - self.dropout_in)",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(input_mask, dim=2).expand(-1, -1, max_time).permute(2, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_408": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_460": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preact.chunk(chunks=5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(t)",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_460": {
                "input": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preact.chunk(chunks=5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.tanh(j)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_587": {
                "modules": {
                    "value": "self.bcells",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_588": {
                "modules": {
                    "value": "self.b_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_653": {
                "tensors": {
                    "value": "c_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(c_n, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(c_n, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_296": {
                "input_size": {
                    "value": "layer_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size if layer == 0 else hidden_size * self.num_directions",
                            "IfExp"
                        ],
                        [
                            "input_size if layer == 0 else hidden_size",
                            "IfExp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()",
                            "Call"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_423": {
                "tensors": {
                    "value": "[layer_output, blayer_output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_466": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f * _c + i * j",
                            "BinOp"
                        ],
                        [
                            "mask * c + (1.0 - mask) * _c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "orthogonal_272": {
                "module": {
                    "value": "self.__getattr__(name)[self.hidden_size * i:self.hidden_size * (i + 1), :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LSTMCell_298": {
                "input_size": {
                    "value": "layer_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size if layer == 0 else hidden_size * self.num_directions",
                            "IfExp"
                        ],
                        [
                            "input_size if layer == 0 else hidden_size",
                            "IfExp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()",
                            "Call"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_337": {
                "ndarray": {
                    "value": "np.concatenate([W_x] * 4, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_338": {
                "ndarray": {
                    "value": "np.concatenate([W_h] * 4, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_349": {
                "ndarray": {
                    "value": "np.concatenate([W_x] * 4, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_350": {
                "ndarray": {
                    "value": "np.concatenate([W_h] * 4, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bernoulli_406": {
                "input": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "input.data.new(batch_size, input_size).fill_(1 - self.dropout_in)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(input_mask), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "input_mask / (1 - self.dropout_in)",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(input_mask, dim=2).expand(-1, -1, max_time).permute(2, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_412": {
                "input": {
                    "value": "hidden_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "input.data.new(batch_size, self.hidden_size).fill_(1 - self.dropout_out)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(hidden_mask), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hidden_mask / (1 - self.dropout_out)",
                            "BinOp"
                        ],
                        [
                            "self.f_dropout[layer]",
                            "Subscript"
                        ],
                        [
                            "self.b_dropout[layer]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_421": {
                "tensors": {
                    "value": "[layer_h_n, blayer_h_n]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_422": {
                "tensors": {
                    "value": "[layer_c_n, blayer_c_n]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_509": {
                "*size": {
                    "value": "1 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_510": {
                "*size": {
                    "value": "1 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_506": {
                "*size": {
                    "value": "1 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_507": {
                "*size": {
                    "value": "1 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "NeuralOPMining-JointSRL/driver/Train.py": {
        "torch": {}
    },
    "NeuralOPMining-PipeSRL/data/Dataloader.py": {
        "torch": {}
    },
    "NeuralOPMining-PipeSRL/driver/Attention.py": {
        "torch": {
            "arange_15": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(x.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_16": {
                "variable": {
                    "value": "inv_timescales",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_26": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scaled_time.sin(), scaled_time.cos()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_38": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_58": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2)) / self.temper",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(attn_mask, -1e+18)",
                            "Call"
                        ],
                        [
                            "self.sm(scores)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(combined_qkv, 3, dim=-1)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_78": {
                "variable": {
                    "value": "self.dropout_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_79": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "variable": {
                    "value": "self.dropout_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.qkv_combined",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "3 * model_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "head_count * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_122": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "combined_qkv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qkv_combined(q)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_134": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(q_s, k_s, v_s, attn_mask=mask.repeat(self.n_head, 1, 1))",
                            "Call"
                        ],
                        [
                            "outputs.view(self.n_head, -1, outputs.size()[-2], outputs.size()[-1])",
                            "Call"
                        ],
                        [
                            "torch.chunk(outputs, self.n_head, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(outputs, dim=-1).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.proj(outputs)",
                            "Call"
                        ],
                        [
                            "self.attention(q_s, k_s, v_s, attn_mask=mask.repeat(n_head, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(outputs, mb_size, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.proj(outputs)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(q_s, k_s, v_s, attn_mask=mask.repeat(self.n_head, 1, 1))",
                            "Call"
                        ],
                        [
                            "outputs.view(self.n_head, -1, outputs.size()[-2], outputs.size()[-1])",
                            "Call"
                        ],
                        [
                            "torch.chunk(outputs, self.n_head, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(outputs, dim=-1).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.proj(outputs)",
                            "Call"
                        ],
                        [
                            "self.attention(q_s, k_s, v_s, attn_mask=mask.repeat(n_head, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(outputs, mb_size, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.proj(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_135": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_153": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(head_count, model_dim, d_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_154": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(head_count, model_dim, d_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_155": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(head_count, model_dim, d_v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "head_count * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_187": {
                "variable": {
                    "value": "q_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(q, self.n_head, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_s, dim=0)",
                            "Call"
                        ],
                        [
                            "q_s.view(-1, q_s.size()[-2], q_s.size()[-1])",
                            "Call"
                        ],
                        [
                            "q.repeat(n_head, 1, 1).view(n_head, -1, d_model)",
                            "Call"
                        ],
                        [
                            "torch.bmm(q_s, self.w_qs).view(-1, len_q, d_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_188": {
                "variable": {
                    "value": "k_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(k, self.n_head, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack(k_s, dim=0)",
                            "Call"
                        ],
                        [
                            "k_s.view(-1, k_s.size()[-2], k_s.size()[-1])",
                            "Call"
                        ],
                        [
                            "k.repeat(n_head, 1, 1).view(n_head, -1, d_model)",
                            "Call"
                        ],
                        [
                            "torch.bmm(k_s, self.w_ks).view(-1, len_k, d_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_189": {
                "variable": {
                    "value": "v_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(v, self.n_head, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack(v_s, dim=0)",
                            "Call"
                        ],
                        [
                            "v_s.view(-1, v_s.size()[-2], v_s.size()[-1])",
                            "Call"
                        ],
                        [
                            "v.repeat(n_head, 1, 1).view(n_head, -1, d_model)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v_s, self.w_vs).view(-1, len_v, d_v)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(outputs, mb_size, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_252": {
                "variable": {
                    "value": "self.linear_keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_254": {
                "variable": {
                    "value": "self.linear_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_256": {
                "variable": {
                    "value": "self.linear_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_258": {
                "variable": {
                    "value": "self.sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_260": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_329": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._split_heads(self.linear_query(query))",
                            "Call"
                        ],
                        [
                            "query_up / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "key_up.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_361": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "orthogonal_84": {
                "module": {
                    "value": "self.w_1.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_87": {
                "module": {
                    "value": "self.w_2.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_113": {
                "module": {
                    "value": "self.qkv_combined.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_115": {
                "module": {
                    "value": "self.proj.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_163": {
                "module": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_164": {
                "module": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_165": {
                "module": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_167": {
                "module": {
                    "value": "self.proj.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_265": {
                "module": {
                    "value": "self.linear_keys.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_268": {
                "module": {
                    "value": "self.linear_values.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_271": {
                "module": {
                    "value": "self.linear_query.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_274": {
                "module": {
                    "value": "self.final_linear.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_47": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(combined_qkv, 3, dim=-1)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "chunk_123": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(combined_qkv, 3, dim=-1)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_124": {
                "input": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(combined_qkv, 3, dim=-1)",
                            "Call"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_125": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(combined_qkv, 3, dim=-1)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_126": {
                "tensors": {
                    "value": "v_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(v, self.n_head, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack(v_s, dim=0)",
                            "Call"
                        ],
                        [
                            "v_s.view(-1, v_s.size()[-2], v_s.size()[-1])",
                            "Call"
                        ],
                        [
                            "v.repeat(n_head, 1, 1).view(n_head, -1, d_model)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v_s, self.w_vs).view(-1, len_v, d_v)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_195": {
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(q_s, k_s, v_s, attn_mask=mask.repeat(self.n_head, 1, 1))",
                            "Call"
                        ],
                        [
                            "outputs.view(self.n_head, -1, outputs.size()[-2], outputs.size()[-1])",
                            "Call"
                        ],
                        [
                            "torch.chunk(outputs, self.n_head, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(outputs, dim=-1).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.proj(outputs)",
                            "Call"
                        ],
                        [
                            "self.attention(q_s, k_s, v_s, attn_mask=mask.repeat(n_head, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(outputs, mb_size, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.proj(outputs)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "mb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.size()",
                            "Call"
                        ],
                        [
                            "k.size()",
                            "Call"
                        ],
                        [
                            "v.size()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_337": {
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2)) / self.temper",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(attn_mask, -1e+18)",
                            "Call"
                        ],
                        [
                            "self.sm(scores)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._split_heads(self.linear_values(value))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "NeuralOPMining-PipeSRL/driver/CRF.py": {
        "torch": {
            "Parameter_46": {
                "variable": {
                    "value": "self.start_transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_tags)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "self.end_transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_tags)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "self.transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_tags, num_tags)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_305": {
                "variable": {
                    "value": "safe_log_sum_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.exp(tensor - broadcast_offset), dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_119": {
                "input": {
                    "value": "llh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denominator - numerator",
                            "BinOp"
                        ],
                        [
                            "self.start_transitions[tags[0]]",
                            "Subscript"
                        ],
                        [
                            "llh + emissions[-1].gather(1, last_tags.view(-1, 1)).squeeze(1) * mask[-1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_305": {
                "input": {
                    "value": "torch.exp(tensor - broadcast_offset)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_305": {
                "input": {
                    "value": "tensor - broadcast_offset",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "NeuralOPMining-PipeSRL/driver/Labeler.py": {
        "torch": {}
    },
    "NeuralOPMining-PipeSRL/driver/Layer.py": {
        "torch": {
            "Parameter_18": {
                "variable": {
                    "value": "bias_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(bias.size()[0], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_57": {
                "variable": {
                    "value": "drop_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "drop_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.data.new(batch_size, hidden_size).fill_(1 - dropout)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(drop_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "drop_masks / (1 - dropout)",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(drop_masks, dim=2).expand(-1, -1, seq_length).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "drop_masks",
                            "Method Argument"
                        ],
                        [
                            "drop_masks",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_57": {
                "variable": {
                    "value": "drop_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "orthogonal_19": {
                "module": {
                    "value": "bias_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.Parameter(torch.FloatTensor(bias.size()[0], 1))",
                            "Call"
                        ],
                        [
                            "bias_temp.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_104": {
                "tensors": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_134": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_out",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "(True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_152": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()",
                            "Call"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_177": {
                "variable": {
                    "value": "self.a_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(d_hid)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_178": {
                "variable": {
                    "value": "self.b_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(d_hid)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_183": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "std_184": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_228": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.linear_input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.linear_output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_253": {
                "variable": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((input2, Variable(ones)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.transpose(input2, 1, 2)",
                            "Call"
                        ],
                        [
                            "input2",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_255": {
                "variable": {
                    "value": "biaffine",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(affine, input2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_369": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_385": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_425": {
                "variable": {
                    "value": "h_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_n, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_n, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_426": {
                "variable": {
                    "value": "c_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(c_n, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(c_n, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_435": {
                "variable": {
                    "value": "self.linear_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "6 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_437": {
                "variable": {
                    "value": "self.linear_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()",
                            "Call"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "5 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_481": {
                "variable": {
                    "value": "self.bilstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_486": {
                "variable": {
                    "value": "self.gate_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_528": {
                "variable": {
                    "value": "(lstm_out, output_lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.in_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.bilstm(x, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.out_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_529": {
                "variable": {
                    "value": "(source_x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "source_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(source_x, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_553": {
                "variable": {
                    "value": "information_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_556": {
                "variable": {
                    "value": "information_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "information_flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.add(allow_transformation, allow_carry)",
                            "Call"
                        ],
                        [
                            "padding(information_flow)",
                            "Call"
                        ],
                        [
                            "torch.stack(batched_output)",
                            "Call"
                        ],
                        [
                            "drop_sequence_sharedmask(information_flow, 0.1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(information_flow, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy()",
                    "type": "IfExp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_605": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_618": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bernoulli_26": {
                "input": {
                    "value": "word_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_embeddings.data.new(batch_size, seq_length).fill_(1 - dropout_emb)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(word_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "word_masks * scale",
                            "BinOp"
                        ],
                        [
                            "word_masks.unsqueeze(dim=2)",
                            "Call"
                        ],
                        [
                            "word_embeddings.data.new(batch_size, seq_length).fill_(1 - dropout_emb)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(word_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "word_masks.unsqueeze(dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_37": {
                "input": {
                    "value": "word_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_embeddings.data.new(batch_size, seq_length).fill_(1 - dropout_emb)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(word_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "word_masks * scale",
                            "BinOp"
                        ],
                        [
                            "word_masks.unsqueeze(dim=2)",
                            "Call"
                        ],
                        [
                            "word_embeddings.data.new(batch_size, seq_length).fill_(1 - dropout_emb)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(word_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "word_masks.unsqueeze(dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_39": {
                "input": {
                    "value": "tag_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tag_embeddings.data.new(batch_size, seq_length).fill_(1 - dropout_emb)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(tag_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "tag_masks * scale",
                            "BinOp"
                        ],
                        [
                            "tag_masks.unsqueeze(dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_55": {
                "input": {
                    "value": "drop_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.data.new(batch_size, hidden_size).fill_(1 - dropout)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(drop_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "drop_masks / (1 - dropout)",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(drop_masks, dim=2).expand(-1, -1, seq_length).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "drop_masks",
                            "Method Argument"
                        ],
                        [
                            "drop_masks",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "orthogonal_139": {
                "module": {
                    "value": "self.linear.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_167": {
                "module": {
                    "value": "self.linear.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input1, Variable(ones))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input2, Variable(ones))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_391": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "orthogonal_492": {
                "module": {
                    "value": "self.bilstm.all_weights[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "orthogonal_493": {
                "module": {
                    "value": "self.bilstm.all_weights[0][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "orthogonal_494": {
                "module": {
                    "value": "self.bilstm.all_weights[1][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "orthogonal_495": {
                "module": {
                    "value": "self.bilstm.all_weights[1][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_518": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.in_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.bilstm(x, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.out_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_520": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.in_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.bilstm(x, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.out_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy()",
                    "type": "IfExp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_524": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.in_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.bilstm(x, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.out_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_526": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.in_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.bilstm(x, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.out_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy()",
                    "type": "IfExp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_538": {
                "variable": {
                    "value": "transformation_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "information_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gate_layer(ith_source_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_540": {
                "variable": {
                    "value": "allow_transformation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transformation_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(information_source)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ith_lstm_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lstm_out[i][:output_lengths[i]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mul_545": {
                "variable": {
                    "value": "allow_carry",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "information_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gate_layer(ith_source_x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "carry_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - transformation_layer",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_547": {
                "variable": {
                    "value": "information_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "allow_transformation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(transformation_layer, ith_lstm_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "allow_carry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(information_source, carry_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConstantPad2d_549": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 0, output_lengths[0] - information_flow.size()[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unsqueeze_624": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "orthogonal_102": {
                "module": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(o, i)",
                            "Call"
                        ],
                        [
                            "self.named_parameters()",
                            "Call"
                        ],
                        [
                            "zip(param_names, layer_params)",
                            "Call"
                        ],
                        [
                            "zip(param_names, layer_params)",
                            "Call"
                        ],
                        [
                            "self.named_parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_113": {
                "input": {
                    "value": "self.drop_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_119": {
                "input": {
                    "value": "self.drop_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_125": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.in_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.bilstm(x, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.out_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.drop_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_177": {
                "*size": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_hid",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_178": {
                "*size": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_hid",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_236": {
                "ndarray": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((self.linear_output_size, self.linear_input_size), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "orthonormal_initializer(self.hidden_size, self.hidden_size + self.input_size)",
                            "Call"
                        ],
                        [
                            "orthonormal_initializer(self.hidden_size, self.hidden_size + 2 * self.hidden_size)",
                            "Call"
                        ],
                        [
                            "orthonormal_initializer(self.hidden_size, self.hidden_size + self.input_size)",
                            "Call"
                        ],
                        [
                            "orthonormal_initializer(self.hidden_size, self.hidden_size + self.hidden_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_255": {
                "input": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear(input1)",
                            "Call"
                        ],
                        [
                            "affine.view(batch_size, len1 * self.out_features, dim2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((input2, Variable(ones)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.transpose(input2, 1, 2)",
                            "Call"
                        ],
                        [
                            "input2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_408": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "input.data.new(batch_size, input_size).fill_(1 - self.dropout_in)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(input_mask), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "input_mask / (1 - self.dropout_in)",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(input_mask, dim=2).expand(-1, -1, max_time).permute(2, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_408": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_460": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preact.chunk(chunks=5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(t)",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_460": {
                "input": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preact.chunk(chunks=5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.tanh(j)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_587": {
                "modules": {
                    "value": "self.bcells",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_588": {
                "modules": {
                    "value": "self.b_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_653": {
                "tensors": {
                    "value": "c_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(c_n, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(c_n, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_296": {
                "input_size": {
                    "value": "layer_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size if layer == 0 else hidden_size * self.num_directions",
                            "IfExp"
                        ],
                        [
                            "input_size if layer == 0 else hidden_size",
                            "IfExp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()",
                            "Call"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_423": {
                "tensors": {
                    "value": "[layer_output, blayer_output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_466": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f * _c + i * j",
                            "BinOp"
                        ],
                        [
                            "mask * c + (1.0 - mask) * _c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "orthogonal_272": {
                "module": {
                    "value": "self.__getattr__(name)[self.hidden_size * i:self.hidden_size * (i + 1), :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LSTMCell_298": {
                "input_size": {
                    "value": "layer_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size if layer == 0 else hidden_size * self.num_directions",
                            "IfExp"
                        ],
                        [
                            "input_size if layer == 0 else hidden_size",
                            "IfExp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()",
                            "Call"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_337": {
                "ndarray": {
                    "value": "np.concatenate([W_x] * 4, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_338": {
                "ndarray": {
                    "value": "np.concatenate([W_h] * 4, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_349": {
                "ndarray": {
                    "value": "np.concatenate([W_x] * 4, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_350": {
                "ndarray": {
                    "value": "np.concatenate([W_h] * 4, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bernoulli_406": {
                "input": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "input.data.new(batch_size, input_size).fill_(1 - self.dropout_in)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(input_mask), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "input_mask / (1 - self.dropout_in)",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(input_mask, dim=2).expand(-1, -1, max_time).permute(2, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_412": {
                "input": {
                    "value": "hidden_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "input.data.new(batch_size, self.hidden_size).fill_(1 - self.dropout_out)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(hidden_mask), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hidden_mask / (1 - self.dropout_out)",
                            "BinOp"
                        ],
                        [
                            "self.f_dropout[layer]",
                            "Subscript"
                        ],
                        [
                            "self.b_dropout[layer]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_421": {
                "tensors": {
                    "value": "[layer_h_n, blayer_h_n]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_422": {
                "tensors": {
                    "value": "[layer_c_n, blayer_c_n]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_509": {
                "*size": {
                    "value": "1 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_510": {
                "*size": {
                    "value": "1 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_506": {
                "*size": {
                    "value": "1 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_507": {
                "*size": {
                    "value": "1 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "NeuralOPMining-PipeSRL/driver/Test.py": {
        "torch": {}
    },
    "NeuralOPMining-PipeSRL/driver/Train.py": {
        "torch": {}
    },
    "NeuralOPMining/data/Dataloader.py": {
        "torch": {}
    },
    "NeuralOPMining/driver/Attention.py": {
        "torch": {
            "arange_15": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(x.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_16": {
                "variable": {
                    "value": "inv_timescales",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_26": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scaled_time.sin(), scaled_time.cos()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_38": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_58": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2)) / self.temper",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(attn_mask, -1e+18)",
                            "Call"
                        ],
                        [
                            "self.sm(scores)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(combined_qkv, 3, dim=-1)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_78": {
                "variable": {
                    "value": "self.dropout_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_79": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "variable": {
                    "value": "self.dropout_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.qkv_combined",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "3 * model_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "head_count * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_122": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "combined_qkv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qkv_combined(q)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_134": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(q_s, k_s, v_s, attn_mask=mask.repeat(self.n_head, 1, 1))",
                            "Call"
                        ],
                        [
                            "outputs.view(self.n_head, -1, outputs.size()[-2], outputs.size()[-1])",
                            "Call"
                        ],
                        [
                            "torch.chunk(outputs, self.n_head, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(outputs, dim=-1).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.proj(outputs)",
                            "Call"
                        ],
                        [
                            "self.attention(q_s, k_s, v_s, attn_mask=mask.repeat(n_head, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(outputs, mb_size, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.proj(outputs)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(q_s, k_s, v_s, attn_mask=mask.repeat(self.n_head, 1, 1))",
                            "Call"
                        ],
                        [
                            "outputs.view(self.n_head, -1, outputs.size()[-2], outputs.size()[-1])",
                            "Call"
                        ],
                        [
                            "torch.chunk(outputs, self.n_head, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(outputs, dim=-1).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.proj(outputs)",
                            "Call"
                        ],
                        [
                            "self.attention(q_s, k_s, v_s, attn_mask=mask.repeat(n_head, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(outputs, mb_size, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.proj(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_135": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_153": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(head_count, model_dim, d_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_154": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(head_count, model_dim, d_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_155": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(head_count, model_dim, d_v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "head_count * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_187": {
                "variable": {
                    "value": "q_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(q, self.n_head, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_s, dim=0)",
                            "Call"
                        ],
                        [
                            "q_s.view(-1, q_s.size()[-2], q_s.size()[-1])",
                            "Call"
                        ],
                        [
                            "q.repeat(n_head, 1, 1).view(n_head, -1, d_model)",
                            "Call"
                        ],
                        [
                            "torch.bmm(q_s, self.w_qs).view(-1, len_q, d_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_188": {
                "variable": {
                    "value": "k_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(k, self.n_head, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack(k_s, dim=0)",
                            "Call"
                        ],
                        [
                            "k_s.view(-1, k_s.size()[-2], k_s.size()[-1])",
                            "Call"
                        ],
                        [
                            "k.repeat(n_head, 1, 1).view(n_head, -1, d_model)",
                            "Call"
                        ],
                        [
                            "torch.bmm(k_s, self.w_ks).view(-1, len_k, d_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_189": {
                "variable": {
                    "value": "v_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(v, self.n_head, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack(v_s, dim=0)",
                            "Call"
                        ],
                        [
                            "v_s.view(-1, v_s.size()[-2], v_s.size()[-1])",
                            "Call"
                        ],
                        [
                            "v.repeat(n_head, 1, 1).view(n_head, -1, d_model)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v_s, self.w_vs).view(-1, len_v, d_v)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(outputs, mb_size, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_252": {
                "variable": {
                    "value": "self.linear_keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_254": {
                "variable": {
                    "value": "self.linear_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_256": {
                "variable": {
                    "value": "self.linear_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_258": {
                "variable": {
                    "value": "self.sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_260": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_329": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._split_heads(self.linear_query(query))",
                            "Call"
                        ],
                        [
                            "query_up / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "key_up.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_361": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "orthogonal_84": {
                "module": {
                    "value": "self.w_1.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_87": {
                "module": {
                    "value": "self.w_2.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_113": {
                "module": {
                    "value": "self.qkv_combined.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_115": {
                "module": {
                    "value": "self.proj.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_163": {
                "module": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_164": {
                "module": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_165": {
                "module": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_167": {
                "module": {
                    "value": "self.proj.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_265": {
                "module": {
                    "value": "self.linear_keys.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_268": {
                "module": {
                    "value": "self.linear_values.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_271": {
                "module": {
                    "value": "self.linear_query.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_274": {
                "module": {
                    "value": "self.final_linear.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_47": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(combined_qkv, 3, dim=-1)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "chunk_123": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(combined_qkv, 3, dim=-1)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_124": {
                "input": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(combined_qkv, 3, dim=-1)",
                            "Call"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_125": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(combined_qkv, 3, dim=-1)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_126": {
                "tensors": {
                    "value": "v_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(v, self.n_head, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack(v_s, dim=0)",
                            "Call"
                        ],
                        [
                            "v_s.view(-1, v_s.size()[-2], v_s.size()[-1])",
                            "Call"
                        ],
                        [
                            "v.repeat(n_head, 1, 1).view(n_head, -1, d_model)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v_s, self.w_vs).view(-1, len_v, d_v)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_195": {
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(q_s, k_s, v_s, attn_mask=mask.repeat(self.n_head, 1, 1))",
                            "Call"
                        ],
                        [
                            "outputs.view(self.n_head, -1, outputs.size()[-2], outputs.size()[-1])",
                            "Call"
                        ],
                        [
                            "torch.chunk(outputs, self.n_head, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(outputs, dim=-1).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.proj(outputs)",
                            "Call"
                        ],
                        [
                            "self.attention(q_s, k_s, v_s, attn_mask=mask.repeat(n_head, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(outputs, mb_size, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.proj(outputs)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "mb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.size()",
                            "Call"
                        ],
                        [
                            "k.size()",
                            "Call"
                        ],
                        [
                            "v.size()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_337": {
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2)) / self.temper",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(attn_mask, -1e+18)",
                            "Call"
                        ],
                        [
                            "self.sm(scores)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._split_heads(self.linear_values(value))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "NeuralOPMining/driver/CRF.py": {
        "torch": {
            "Parameter_46": {
                "variable": {
                    "value": "self.start_transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_tags)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "self.end_transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_tags)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "self.transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_tags, num_tags)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_305": {
                "variable": {
                    "value": "safe_log_sum_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.exp(tensor - broadcast_offset), dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_119": {
                "input": {
                    "value": "llh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denominator - numerator",
                            "BinOp"
                        ],
                        [
                            "self.start_transitions[tags[0]]",
                            "Subscript"
                        ],
                        [
                            "llh + emissions[-1].gather(1, last_tags.view(-1, 1)).squeeze(1) * mask[-1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_305": {
                "input": {
                    "value": "torch.exp(tensor - broadcast_offset)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_305": {
                "input": {
                    "value": "tensor - broadcast_offset",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "NeuralOPMining/driver/Labeler.py": {
        "torch": {}
    },
    "NeuralOPMining/driver/Layer.py": {
        "torch": {
            "Parameter_18": {
                "variable": {
                    "value": "bias_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(bias.size()[0], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_57": {
                "variable": {
                    "value": "drop_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "drop_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.data.new(batch_size, hidden_size).fill_(1 - dropout)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(drop_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "drop_masks / (1 - dropout)",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(drop_masks, dim=2).expand(-1, -1, seq_length).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "drop_masks",
                            "Method Argument"
                        ],
                        [
                            "drop_masks",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_57": {
                "variable": {
                    "value": "drop_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "orthogonal_19": {
                "module": {
                    "value": "bias_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.Parameter(torch.FloatTensor(bias.size()[0], 1))",
                            "Call"
                        ],
                        [
                            "bias_temp.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_104": {
                "tensors": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_134": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_out",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "(True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_152": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()",
                            "Call"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_177": {
                "variable": {
                    "value": "self.a_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(d_hid)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_178": {
                "variable": {
                    "value": "self.b_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(d_hid)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_183": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "std_184": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_228": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.linear_input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.linear_output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_253": {
                "variable": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((input2, Variable(ones)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.transpose(input2, 1, 2)",
                            "Call"
                        ],
                        [
                            "input2",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_255": {
                "variable": {
                    "value": "biaffine",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(affine, input2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_369": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_385": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_425": {
                "variable": {
                    "value": "h_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_n, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_n, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_426": {
                "variable": {
                    "value": "c_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(c_n, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(c_n, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_435": {
                "variable": {
                    "value": "self.linear_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "6 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_437": {
                "variable": {
                    "value": "self.linear_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()",
                            "Call"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "5 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_481": {
                "variable": {
                    "value": "self.bilstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_486": {
                "variable": {
                    "value": "self.gate_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_528": {
                "variable": {
                    "value": "(lstm_out, output_lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.in_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.bilstm(x, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.out_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_529": {
                "variable": {
                    "value": "(source_x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "source_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(source_x, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_553": {
                "variable": {
                    "value": "information_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_556": {
                "variable": {
                    "value": "information_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "information_flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.add(allow_transformation, allow_carry)",
                            "Call"
                        ],
                        [
                            "padding(information_flow)",
                            "Call"
                        ],
                        [
                            "torch.stack(batched_output)",
                            "Call"
                        ],
                        [
                            "drop_sequence_sharedmask(information_flow, 0.1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(information_flow, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy()",
                    "type": "IfExp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_605": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_618": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bernoulli_26": {
                "input": {
                    "value": "word_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_embeddings.data.new(batch_size, seq_length).fill_(1 - dropout_emb)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(word_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "word_masks * scale",
                            "BinOp"
                        ],
                        [
                            "word_masks.unsqueeze(dim=2)",
                            "Call"
                        ],
                        [
                            "word_embeddings.data.new(batch_size, seq_length).fill_(1 - dropout_emb)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(word_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "word_masks.unsqueeze(dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_37": {
                "input": {
                    "value": "word_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_embeddings.data.new(batch_size, seq_length).fill_(1 - dropout_emb)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(word_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "word_masks * scale",
                            "BinOp"
                        ],
                        [
                            "word_masks.unsqueeze(dim=2)",
                            "Call"
                        ],
                        [
                            "word_embeddings.data.new(batch_size, seq_length).fill_(1 - dropout_emb)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(word_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "word_masks.unsqueeze(dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_39": {
                "input": {
                    "value": "tag_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tag_embeddings.data.new(batch_size, seq_length).fill_(1 - dropout_emb)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(tag_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "tag_masks * scale",
                            "BinOp"
                        ],
                        [
                            "tag_masks.unsqueeze(dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_55": {
                "input": {
                    "value": "drop_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.data.new(batch_size, hidden_size).fill_(1 - dropout)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(drop_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "drop_masks / (1 - dropout)",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(drop_masks, dim=2).expand(-1, -1, seq_length).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "drop_masks",
                            "Method Argument"
                        ],
                        [
                            "drop_masks",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "orthogonal_139": {
                "module": {
                    "value": "self.linear.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_167": {
                "module": {
                    "value": "self.linear.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input1, Variable(ones))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input2, Variable(ones))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_391": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "orthogonal_492": {
                "module": {
                    "value": "self.bilstm.all_weights[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "orthogonal_493": {
                "module": {
                    "value": "self.bilstm.all_weights[0][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "orthogonal_494": {
                "module": {
                    "value": "self.bilstm.all_weights[1][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "orthogonal_495": {
                "module": {
                    "value": "self.bilstm.all_weights[1][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_518": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.in_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.bilstm(x, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.out_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_520": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.in_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.bilstm(x, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.out_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy()",
                    "type": "IfExp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_524": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.in_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.bilstm(x, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.out_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_526": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.in_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.bilstm(x, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.out_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy()",
                    "type": "IfExp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_538": {
                "variable": {
                    "value": "transformation_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "information_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gate_layer(ith_source_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_540": {
                "variable": {
                    "value": "allow_transformation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transformation_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(information_source)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ith_lstm_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lstm_out[i][:output_lengths[i]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mul_545": {
                "variable": {
                    "value": "allow_carry",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "information_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gate_layer(ith_source_x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "carry_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - transformation_layer",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_547": {
                "variable": {
                    "value": "information_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "allow_transformation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(transformation_layer, ith_lstm_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "allow_carry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(information_source, carry_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConstantPad2d_549": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 0, output_lengths[0] - information_flow.size()[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unsqueeze_624": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "orthogonal_102": {
                "module": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(o, i)",
                            "Call"
                        ],
                        [
                            "self.named_parameters()",
                            "Call"
                        ],
                        [
                            "zip(param_names, layer_params)",
                            "Call"
                        ],
                        [
                            "zip(param_names, layer_params)",
                            "Call"
                        ],
                        [
                            "self.named_parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_113": {
                "input": {
                    "value": "self.drop_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_119": {
                "input": {
                    "value": "self.drop_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_125": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.in_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.bilstm(x, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.out_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.drop_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_177": {
                "*size": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_hid",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_178": {
                "*size": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_hid",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_236": {
                "ndarray": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((self.linear_output_size, self.linear_input_size), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "orthonormal_initializer(self.hidden_size, self.hidden_size + self.input_size)",
                            "Call"
                        ],
                        [
                            "orthonormal_initializer(self.hidden_size, self.hidden_size + 2 * self.hidden_size)",
                            "Call"
                        ],
                        [
                            "orthonormal_initializer(self.hidden_size, self.hidden_size + self.input_size)",
                            "Call"
                        ],
                        [
                            "orthonormal_initializer(self.hidden_size, self.hidden_size + self.hidden_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_255": {
                "input": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear(input1)",
                            "Call"
                        ],
                        [
                            "affine.view(batch_size, len1 * self.out_features, dim2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((input2, Variable(ones)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.transpose(input2, 1, 2)",
                            "Call"
                        ],
                        [
                            "input2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_408": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "input.data.new(batch_size, input_size).fill_(1 - self.dropout_in)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(input_mask), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "input_mask / (1 - self.dropout_in)",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(input_mask, dim=2).expand(-1, -1, max_time).permute(2, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_408": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_460": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preact.chunk(chunks=5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(t)",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_460": {
                "input": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preact.chunk(chunks=5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.tanh(j)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_587": {
                "modules": {
                    "value": "self.bcells",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_588": {
                "modules": {
                    "value": "self.b_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_653": {
                "tensors": {
                    "value": "c_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(c_n, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(c_n, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_296": {
                "input_size": {
                    "value": "layer_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size if layer == 0 else hidden_size * self.num_directions",
                            "IfExp"
                        ],
                        [
                            "input_size if layer == 0 else hidden_size",
                            "IfExp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()",
                            "Call"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_423": {
                "tensors": {
                    "value": "[layer_output, blayer_output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_466": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f * _c + i * j",
                            "BinOp"
                        ],
                        [
                            "mask * c + (1.0 - mask) * _c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "orthogonal_272": {
                "module": {
                    "value": "self.__getattr__(name)[self.hidden_size * i:self.hidden_size * (i + 1), :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LSTMCell_298": {
                "input_size": {
                    "value": "layer_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size if layer == 0 else hidden_size * self.num_directions",
                            "IfExp"
                        ],
                        [
                            "input_size if layer == 0 else hidden_size",
                            "IfExp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()",
                            "Call"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_337": {
                "ndarray": {
                    "value": "np.concatenate([W_x] * 4, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_338": {
                "ndarray": {
                    "value": "np.concatenate([W_h] * 4, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_349": {
                "ndarray": {
                    "value": "np.concatenate([W_x] * 4, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_350": {
                "ndarray": {
                    "value": "np.concatenate([W_h] * 4, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bernoulli_406": {
                "input": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "input.data.new(batch_size, input_size).fill_(1 - self.dropout_in)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(input_mask), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "input_mask / (1 - self.dropout_in)",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(input_mask, dim=2).expand(-1, -1, max_time).permute(2, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_412": {
                "input": {
                    "value": "hidden_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "input.data.new(batch_size, self.hidden_size).fill_(1 - self.dropout_out)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(hidden_mask), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hidden_mask / (1 - self.dropout_out)",
                            "BinOp"
                        ],
                        [
                            "self.f_dropout[layer]",
                            "Subscript"
                        ],
                        [
                            "self.b_dropout[layer]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_421": {
                "tensors": {
                    "value": "[layer_h_n, blayer_h_n]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_422": {
                "tensors": {
                    "value": "[layer_c_n, blayer_c_n]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_509": {
                "*size": {
                    "value": "1 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_510": {
                "*size": {
                    "value": "1 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_506": {
                "*size": {
                    "value": "1 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_507": {
                "*size": {
                    "value": "1 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "NeuralOPMining/driver/Test.py": {
        "torch": {}
    },
    "NeuralOPMining/driver/Train.py": {
        "torch": {}
    },
    "NeuralSRL/data/Dataloader.py": {
        "torch": {}
    },
    "NeuralSRL/driver/Attention.py": {
        "torch": {
            "arange_15": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(x.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_16": {
                "variable": {
                    "value": "inv_timescales",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_26": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scaled_time.sin(), scaled_time.cos()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_38": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_58": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2)) / self.temper",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(attn_mask, -1e+18)",
                            "Call"
                        ],
                        [
                            "self.sm(scores)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(combined_qkv, 3, dim=-1)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_78": {
                "variable": {
                    "value": "self.dropout_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_79": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "variable": {
                    "value": "self.dropout_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.qkv_combined",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "3 * model_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "head_count * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_122": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "combined_qkv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qkv_combined(q)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_134": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(q_s, k_s, v_s, attn_mask=mask.repeat(self.n_head, 1, 1))",
                            "Call"
                        ],
                        [
                            "outputs.view(self.n_head, -1, outputs.size()[-2], outputs.size()[-1])",
                            "Call"
                        ],
                        [
                            "torch.chunk(outputs, self.n_head, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(outputs, dim=-1).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.proj(outputs)",
                            "Call"
                        ],
                        [
                            "self.attention(q_s, k_s, v_s, attn_mask=mask.repeat(n_head, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(outputs, mb_size, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.proj(outputs)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(q_s, k_s, v_s, attn_mask=mask.repeat(self.n_head, 1, 1))",
                            "Call"
                        ],
                        [
                            "outputs.view(self.n_head, -1, outputs.size()[-2], outputs.size()[-1])",
                            "Call"
                        ],
                        [
                            "torch.chunk(outputs, self.n_head, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(outputs, dim=-1).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.proj(outputs)",
                            "Call"
                        ],
                        [
                            "self.attention(q_s, k_s, v_s, attn_mask=mask.repeat(n_head, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(outputs, mb_size, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.proj(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_135": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_153": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(head_count, model_dim, d_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_154": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(head_count, model_dim, d_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_155": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(head_count, model_dim, d_v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "head_count * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_187": {
                "variable": {
                    "value": "q_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(q, self.n_head, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_s, dim=0)",
                            "Call"
                        ],
                        [
                            "q_s.view(-1, q_s.size()[-2], q_s.size()[-1])",
                            "Call"
                        ],
                        [
                            "q.repeat(n_head, 1, 1).view(n_head, -1, d_model)",
                            "Call"
                        ],
                        [
                            "torch.bmm(q_s, self.w_qs).view(-1, len_q, d_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_188": {
                "variable": {
                    "value": "k_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(k, self.n_head, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack(k_s, dim=0)",
                            "Call"
                        ],
                        [
                            "k_s.view(-1, k_s.size()[-2], k_s.size()[-1])",
                            "Call"
                        ],
                        [
                            "k.repeat(n_head, 1, 1).view(n_head, -1, d_model)",
                            "Call"
                        ],
                        [
                            "torch.bmm(k_s, self.w_ks).view(-1, len_k, d_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_189": {
                "variable": {
                    "value": "v_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(v, self.n_head, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack(v_s, dim=0)",
                            "Call"
                        ],
                        [
                            "v_s.view(-1, v_s.size()[-2], v_s.size()[-1])",
                            "Call"
                        ],
                        [
                            "v.repeat(n_head, 1, 1).view(n_head, -1, d_model)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v_s, self.w_vs).view(-1, len_v, d_v)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(outputs, mb_size, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_252": {
                "variable": {
                    "value": "self.linear_keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_254": {
                "variable": {
                    "value": "self.linear_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_256": {
                "variable": {
                    "value": "self.linear_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_258": {
                "variable": {
                    "value": "self.sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_260": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_329": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._split_heads(self.linear_query(query))",
                            "Call"
                        ],
                        [
                            "query_up / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "key_up.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_361": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "orthogonal_84": {
                "module": {
                    "value": "self.w_1.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_87": {
                "module": {
                    "value": "self.w_2.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_113": {
                "module": {
                    "value": "self.qkv_combined.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_115": {
                "module": {
                    "value": "self.proj.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_163": {
                "module": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_164": {
                "module": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_165": {
                "module": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_167": {
                "module": {
                    "value": "self.proj.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_265": {
                "module": {
                    "value": "self.linear_keys.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_268": {
                "module": {
                    "value": "self.linear_values.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_271": {
                "module": {
                    "value": "self.linear_query.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_274": {
                "module": {
                    "value": "self.final_linear.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_47": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(combined_qkv, 3, dim=-1)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "chunk_123": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(combined_qkv, 3, dim=-1)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_124": {
                "input": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(combined_qkv, 3, dim=-1)",
                            "Call"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_125": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(combined_qkv, 3, dim=-1)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_126": {
                "tensors": {
                    "value": "v_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(v, self.n_head, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack(v_s, dim=0)",
                            "Call"
                        ],
                        [
                            "v_s.view(-1, v_s.size()[-2], v_s.size()[-1])",
                            "Call"
                        ],
                        [
                            "v.repeat(n_head, 1, 1).view(n_head, -1, d_model)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v_s, self.w_vs).view(-1, len_v, d_v)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_195": {
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(q_s, k_s, v_s, attn_mask=mask.repeat(self.n_head, 1, 1))",
                            "Call"
                        ],
                        [
                            "outputs.view(self.n_head, -1, outputs.size()[-2], outputs.size()[-1])",
                            "Call"
                        ],
                        [
                            "torch.chunk(outputs, self.n_head, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(outputs, dim=-1).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.proj(outputs)",
                            "Call"
                        ],
                        [
                            "self.attention(q_s, k_s, v_s, attn_mask=mask.repeat(n_head, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(outputs, mb_size, dim=0), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.proj(outputs)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "mb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.size()",
                            "Call"
                        ],
                        [
                            "k.size()",
                            "Call"
                        ],
                        [
                            "v.size()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_337": {
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2)) / self.temper",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(attn_mask, -1e+18)",
                            "Call"
                        ],
                        [
                            "self.sm(scores)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._split_heads(self.linear_values(value))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "NeuralSRL/driver/CRF.py": {
        "torch": {
            "Parameter_46": {
                "variable": {
                    "value": "self.start_transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_tags)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "self.end_transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_tags)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "self.transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_tags, num_tags)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_305": {
                "variable": {
                    "value": "safe_log_sum_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.exp(tensor - broadcast_offset), dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_119": {
                "input": {
                    "value": "llh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "denominator - numerator",
                            "BinOp"
                        ],
                        [
                            "self.start_transitions[tags[0]]",
                            "Subscript"
                        ],
                        [
                            "llh + emissions[-1].gather(1, last_tags.view(-1, 1)).squeeze(1) * mask[-1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_305": {
                "input": {
                    "value": "torch.exp(tensor - broadcast_offset)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_305": {
                "input": {
                    "value": "tensor - broadcast_offset",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "NeuralSRL/driver/Labeler.py": {
        "torch": {}
    },
    "NeuralSRL/driver/Layer.py": {
        "torch": {
            "Parameter_18": {
                "variable": {
                    "value": "bias_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(bias.size()[0], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_57": {
                "variable": {
                    "value": "drop_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "drop_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.data.new(batch_size, hidden_size).fill_(1 - dropout)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(drop_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "drop_masks / (1 - dropout)",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(drop_masks, dim=2).expand(-1, -1, seq_length).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "drop_masks",
                            "Method Argument"
                        ],
                        [
                            "drop_masks",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_57": {
                "variable": {
                    "value": "drop_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "orthogonal_19": {
                "module": {
                    "value": "bias_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.Parameter(torch.FloatTensor(bias.size()[0], 1))",
                            "Call"
                        ],
                        [
                            "bias_temp.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_104": {
                "tensors": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_134": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_out",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "(True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_152": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()",
                            "Call"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_177": {
                "variable": {
                    "value": "self.a_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(d_hid)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_178": {
                "variable": {
                    "value": "self.b_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(d_hid)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_183": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "std_184": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_228": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.linear_input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.linear_output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_253": {
                "variable": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((input2, Variable(ones)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.transpose(input2, 1, 2)",
                            "Call"
                        ],
                        [
                            "input2",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_255": {
                "variable": {
                    "value": "biaffine",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(affine, input2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_369": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_385": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_425": {
                "variable": {
                    "value": "h_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_n, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_n, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_426": {
                "variable": {
                    "value": "c_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(c_n, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(c_n, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_435": {
                "variable": {
                    "value": "self.linear_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "6 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_437": {
                "variable": {
                    "value": "self.linear_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()",
                            "Call"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "5 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_481": {
                "variable": {
                    "value": "self.bilstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_486": {
                "variable": {
                    "value": "self.gate_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_528": {
                "variable": {
                    "value": "(lstm_out, output_lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.in_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.bilstm(x, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.out_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_529": {
                "variable": {
                    "value": "(source_x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "source_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(source_x, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_553": {
                "variable": {
                    "value": "information_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_556": {
                "variable": {
                    "value": "information_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "information_flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.add(allow_transformation, allow_carry)",
                            "Call"
                        ],
                        [
                            "padding(information_flow)",
                            "Call"
                        ],
                        [
                            "torch.stack(batched_output)",
                            "Call"
                        ],
                        [
                            "drop_sequence_sharedmask(information_flow, 0.1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(information_flow, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy()",
                    "type": "IfExp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_605": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_618": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bernoulli_26": {
                "input": {
                    "value": "word_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_embeddings.data.new(batch_size, seq_length).fill_(1 - dropout_emb)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(word_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "word_masks * scale",
                            "BinOp"
                        ],
                        [
                            "word_masks.unsqueeze(dim=2)",
                            "Call"
                        ],
                        [
                            "word_embeddings.data.new(batch_size, seq_length).fill_(1 - dropout_emb)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(word_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "word_masks.unsqueeze(dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_37": {
                "input": {
                    "value": "word_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_embeddings.data.new(batch_size, seq_length).fill_(1 - dropout_emb)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(word_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "word_masks * scale",
                            "BinOp"
                        ],
                        [
                            "word_masks.unsqueeze(dim=2)",
                            "Call"
                        ],
                        [
                            "word_embeddings.data.new(batch_size, seq_length).fill_(1 - dropout_emb)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(word_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "word_masks.unsqueeze(dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_39": {
                "input": {
                    "value": "tag_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tag_embeddings.data.new(batch_size, seq_length).fill_(1 - dropout_emb)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(tag_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "tag_masks * scale",
                            "BinOp"
                        ],
                        [
                            "tag_masks.unsqueeze(dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_55": {
                "input": {
                    "value": "drop_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.data.new(batch_size, hidden_size).fill_(1 - dropout)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(drop_masks), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "drop_masks / (1 - dropout)",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(drop_masks, dim=2).expand(-1, -1, seq_length).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "drop_masks",
                            "Method Argument"
                        ],
                        [
                            "drop_masks",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "orthogonal_139": {
                "module": {
                    "value": "self.linear.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_167": {
                "module": {
                    "value": "self.linear.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input1, Variable(ones))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input2, Variable(ones))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_391": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "orthogonal_492": {
                "module": {
                    "value": "self.bilstm.all_weights[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "orthogonal_493": {
                "module": {
                    "value": "self.bilstm.all_weights[0][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "orthogonal_494": {
                "module": {
                    "value": "self.bilstm.all_weights[1][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "orthogonal_495": {
                "module": {
                    "value": "self.bilstm.all_weights[1][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_518": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.in_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.bilstm(x, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.out_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_520": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.in_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.bilstm(x, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.out_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy()",
                    "type": "IfExp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_524": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.in_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.bilstm(x, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.out_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_526": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.in_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.bilstm(x, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.out_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy()",
                    "type": "IfExp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_538": {
                "variable": {
                    "value": "transformation_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "information_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gate_layer(ith_source_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_540": {
                "variable": {
                    "value": "allow_transformation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transformation_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(information_source)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ith_lstm_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lstm_out[i][:output_lengths[i]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mul_545": {
                "variable": {
                    "value": "allow_carry",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "information_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gate_layer(ith_source_x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "carry_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - transformation_layer",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_547": {
                "variable": {
                    "value": "information_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "allow_transformation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(transformation_layer, ith_lstm_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "allow_carry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(information_source, carry_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConstantPad2d_549": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 0, output_lengths[0] - information_flow.size()[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unsqueeze_624": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "orthogonal_102": {
                "module": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(o, i)",
                            "Call"
                        ],
                        [
                            "self.named_parameters()",
                            "Call"
                        ],
                        [
                            "zip(param_names, layer_params)",
                            "Call"
                        ],
                        [
                            "zip(param_names, layer_params)",
                            "Call"
                        ],
                        [
                            "self.named_parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_113": {
                "input": {
                    "value": "self.drop_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_119": {
                "input": {
                    "value": "self.drop_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_125": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.in_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.bilstm(x, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.out_dropout_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(x, x_lengths.cpu().numpy() if self.cuda_id else x_lengths.numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.drop_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_177": {
                "*size": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_hid",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_178": {
                "*size": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_hid",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_236": {
                "ndarray": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((self.linear_output_size, self.linear_input_size), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "orthonormal_initializer(self.hidden_size, self.hidden_size + self.input_size)",
                            "Call"
                        ],
                        [
                            "orthonormal_initializer(self.hidden_size, self.hidden_size + 2 * self.hidden_size)",
                            "Call"
                        ],
                        [
                            "orthonormal_initializer(self.hidden_size, self.hidden_size + self.input_size)",
                            "Call"
                        ],
                        [
                            "orthonormal_initializer(self.hidden_size, self.hidden_size + self.hidden_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_255": {
                "input": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear(input1)",
                            "Call"
                        ],
                        [
                            "affine.view(batch_size, len1 * self.out_features, dim2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((input2, Variable(ones)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.transpose(input2, 1, 2)",
                            "Call"
                        ],
                        [
                            "input2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_408": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "input.data.new(batch_size, input_size).fill_(1 - self.dropout_in)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(input_mask), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "input_mask / (1 - self.dropout_in)",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(input_mask, dim=2).expand(-1, -1, max_time).permute(2, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_408": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_460": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preact.chunk(chunks=5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(t)",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_460": {
                "input": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preact.chunk(chunks=5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.tanh(j)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_587": {
                "modules": {
                    "value": "self.bcells",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_588": {
                "modules": {
                    "value": "self.b_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_653": {
                "tensors": {
                    "value": "c_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(c_n, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(c_n, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_296": {
                "input_size": {
                    "value": "layer_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size if layer == 0 else hidden_size * self.num_directions",
                            "IfExp"
                        ],
                        [
                            "input_size if layer == 0 else hidden_size",
                            "IfExp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()",
                            "Call"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_423": {
                "tensors": {
                    "value": "[layer_output, blayer_output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_466": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f * _c + i * j",
                            "BinOp"
                        ],
                        [
                            "mask * c + (1.0 - mask) * _c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "orthogonal_272": {
                "module": {
                    "value": "self.__getattr__(name)[self.hidden_size * i:self.hidden_size * (i + 1), :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LSTMCell_298": {
                "input_size": {
                    "value": "layer_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size if layer == 0 else hidden_size * self.num_directions",
                            "IfExp"
                        ],
                        [
                            "input_size if layer == 0 else hidden_size",
                            "IfExp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()",
                            "Call"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_337": {
                "ndarray": {
                    "value": "np.concatenate([W_x] * 4, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_338": {
                "ndarray": {
                    "value": "np.concatenate([W_h] * 4, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_349": {
                "ndarray": {
                    "value": "np.concatenate([W_x] * 4, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_350": {
                "ndarray": {
                    "value": "np.concatenate([W_h] * 4, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bernoulli_406": {
                "input": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "input.data.new(batch_size, input_size).fill_(1 - self.dropout_in)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(input_mask), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "input_mask / (1 - self.dropout_in)",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(input_mask, dim=2).expand(-1, -1, max_time).permute(2, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_412": {
                "input": {
                    "value": "hidden_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "input.data.new(batch_size, self.hidden_size).fill_(1 - self.dropout_out)",
                            "Call"
                        ],
                        [
                            "Variable(torch.bernoulli(hidden_mask), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hidden_mask / (1 - self.dropout_out)",
                            "BinOp"
                        ],
                        [
                            "self.f_dropout[layer]",
                            "Subscript"
                        ],
                        [
                            "self.b_dropout[layer]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_421": {
                "tensors": {
                    "value": "[layer_h_n, blayer_h_n]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_422": {
                "tensors": {
                    "value": "[layer_c_n, blayer_c_n]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_509": {
                "*size": {
                    "value": "1 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_510": {
                "*size": {
                    "value": "1 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_506": {
                "*size": {
                    "value": "1 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_507": {
                "*size": {
                    "value": "1 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "NeuralSRL/driver/Test.py": {
        "torch": {}
    },
    "NeuralSRL/driver/Train.py": {
        "torch": {}
    }
}