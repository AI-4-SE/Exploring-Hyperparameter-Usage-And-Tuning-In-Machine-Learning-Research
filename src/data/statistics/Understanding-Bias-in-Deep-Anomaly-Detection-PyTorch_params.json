{
    "dataset/dad_loader.py": {
        "sklearn": {
            "shuffle_226": {
                "variable": {
                    "value": "idx_normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "list(range(len(dataset_normal)))",
                    "type": "Call",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "42",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shuffle_227": {
                "variable": {
                    "value": "idx_abnormal",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "list(range(len(dataset_abnormal)))",
                    "type": "Call",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "42",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "ConcatDataset_155": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "dataset_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "DataLoader_280": {
                "variable": {
                    "value": "all_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.all_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_99": {
                "*size": {
                    "value": "len(dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_239": {
                "variable": {
                    "value": "all_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_normal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gen_dataset(root, tester_list, label_normal, n_tester_normal)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_normal_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "idx_normal[:n_normal_train]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Subset_247": {
                "variable": {
                    "value": "set_normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_normal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gen_dataset(root, tester_list, label_normal, n_tester_normal)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_normal_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "idx_normal[:n_normal_train]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Subset_248": {
                "variable": {
                    "value": "set_abnormal",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_abnormal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gen_dataset(root, tester_list, label_abnormal, n_tester_abnormal)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_abnormal_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "idx_abnormal[:n_abnormal_train]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ConcatDataset_249": {
                "variable": {
                    "value": "all_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[set_normal, set_abnormal]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Subset_254": {
                "variable": {
                    "value": "all_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_normal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gen_dataset(root, tester_list, label_normal, n_tester_normal)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_normal_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "idx_normal[n_normal_train:n_normal_train + 2000]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Subset_263": {
                "variable": {
                    "value": "all_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_abnormal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gen_dataset(root, tester_list, label_abnormal, n_tester_abnormal)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_abnormal_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "idx_abnormal[n_abnormal_train:]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "dataset/gaussian9d_hard_loader.py": {
        "sklearn": {
            "shuffle_95": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_174": {
                "variable": {
                    "value": "all_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.all_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_141": {
                "data": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.hstack((y_normal, y_abnormal))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/gaussian9d_loader.py": {
        "sklearn": {
            "shuffle_95": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_174": {
                "variable": {
                    "value": "all_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.all_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_141": {
                "data": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.hstack((y_normal, y_abnormal))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/imagenet_loader.py": {
        "sklearn": {
            "shuffle_127": {
                "variable": {
                    "value": "idx_normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "idx_normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shuffle_128": {
                "variable": {
                    "value": "idx_abnormal",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "idx_abnormal",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shuffle_145": {
                "variable": {
                    "value": "idx_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "idx_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Subset_103": {
                "variable": {
                    "value": "self.all_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "all_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ImageNetDataset(root=root)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_idx(train, load_method, threshold_type, trained_type, y, label_normal, label_abnormal, ratio_abnormal, random_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_169": {
                "variable": {
                    "value": "all_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.all_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/oct_loader.py": {
        "sklearn": {},
        "torch": {
            "Subset_120": {
                "variable": {
                    "value": "self.all_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "all_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "OCTFolder(root=root, transform=transform_)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_idx(train, n_normal_train, load_method, y, label_normal, label_abnormal, trained_type, ratio_abnormal, random_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_190": {
                "variable": {
                    "value": "all_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.all_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/oct_resize_loader.py": {
        "sklearn": {},
        "torch": {
            "Subset_121": {
                "variable": {
                    "value": "self.all_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "all_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "OCTResizeFolder(root=root, transform=transform_)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_idx(train, n_normal_train, load_method, y, label_normal, label_abnormal, trained_type, ratio_abnormal, random_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_191": {
                "variable": {
                    "value": "all_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.all_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/real_loader.py": {
        "sklearn": {
            "shuffle_86": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_161": {
                "variable": {
                    "value": "all_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.all_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "data": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones(len(X)) * label_normal",
                            "BinOp"
                        ],
                        [
                            "np.ones(len(X)) * label_normal",
                            "BinOp"
                        ],
                        [
                            "np.hstack((y_normal, y_abnormal))",
                            "Call"
                        ],
                        [
                            "np.ones(len(X)) * label_abnormal",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/real_pac_config_loader.py": {
        "sklearn": {},
        "torch": {
            "DataLoader_202": {
                "variable": {
                    "value": "all_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.all_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_161": {
                "data": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones(len(X)) * label_normal",
                            "BinOp"
                        ],
                        [
                            "np.ones(len(X)) * label_normal",
                            "BinOp"
                        ],
                        [
                            "np.ones(len(X)) * label_normal",
                            "BinOp"
                        ],
                        [
                            "np.hstack((y_normal, y_abnormal))",
                            "Call"
                        ],
                        [
                            "np.ones(len(X)) * label_abnormal",
                            "BinOp"
                        ],
                        [
                            "np.ones(len(X)) * label_abnormal",
                            "BinOp"
                        ],
                        [
                            "np.hstack((y_normal, y_abnormal))",
                            "Call"
                        ],
                        [
                            "np.hstack((y_normal, y_abnormal))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/real_pac_loader.py": {
        "sklearn": {},
        "torch": {
            "DataLoader_189": {
                "variable": {
                    "value": "all_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.all_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_146": {
                "data": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones(len(X)) * label_normal",
                            "BinOp"
                        ],
                        [
                            "np.ones(len(X)) * label_normal",
                            "BinOp"
                        ],
                        [
                            "np.hstack((y_normal, y_abnormal))",
                            "Call"
                        ],
                        [
                            "np.ones(len(X)) * label_abnormal",
                            "BinOp"
                        ],
                        [
                            "np.ones(len(X)) * label_normal",
                            "BinOp"
                        ],
                        [
                            "np.hstack((y_normal, y_abnormal))",
                            "Call"
                        ],
                        [
                            "np.ones(len(X)) * label_abnormal",
                            "BinOp"
                        ],
                        [
                            "np.hstack((y_normal, y_abnormal))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/synthetic_loader.py": {
        "sklearn": {
            "shuffle_80": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_119": {
                "variable": {
                    "value": "all_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.all_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "data": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(len(X))",
                            "Call"
                        ],
                        [
                            "np.ones(len(X))",
                            "Call"
                        ],
                        [
                            "np.hstack((y_normal, y_abnormal))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "main/main_pac_gaussian_test.py": {
        "sklearn": {},
        "torch": {
            "manual_seed_92": {
                "seed": {
                    "value": "random_state_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.random_state_test",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "main/main_pac_gaussian_train.py": {
        "sklearn": {},
        "torch": {
            "manual_seed_95": {
                "seed": {
                    "value": "random_state_train",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "main/main_real.py": {
        "sklearn": {},
        "torch": {}
    },
    "main/main_vision.py": {
        "sklearn": {},
        "torch": {}
    },
    "model/abc_optimizer.py": {
        "sklearn": {
            "roc_auc_score_157": {
                "variable": {
                    "value": "self.test_auc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.isin(labels, label_normal)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 - torch.exp(-dist_mean)",
                            "BinOp"
                        ],
                        [
                            "1 - torch.exp(-dist_mean)",
                            "BinOp"
                        ],
                        [
                            "np.array(scores)",
                            "Call"
                        ],
                        [
                            "1 - torch.exp(-dist_mean)",
                            "BinOp"
                        ],
                        [
                            "np.array(scores)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "MSELoss_53": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_54": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_57": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(net.parameters(), lr=self.lr, weight_decay=self.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "self.lr_milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MSELoss_117": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_196": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_79": {
                "variable": {
                    "value": "dist_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(outputs, inputs)",
                            "Call"
                        ],
                        [
                            "criterion(outputs, inputs)",
                            "Call"
                        ],
                        [
                            "criterion(outputs, inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "list(range(1, len(dist.shape)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_85": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "dist_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ],
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ],
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-torch.log(scores + self.eps)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_88": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist_mean, -torch.log(scores + self.eps))",
                            "Call"
                        ],
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist_mean, -torch.log(scores + self.eps))",
                            "Call"
                        ],
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist_mean, -torch.log(scores + self.eps))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_134": {
                "variable": {
                    "value": "dist_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(outputs, inputs)",
                            "Call"
                        ],
                        [
                            "criterion(outputs, inputs)",
                            "Call"
                        ],
                        [
                            "criterion(outputs, inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "list(range(1, len(dist.shape)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_136": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "dist_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ],
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ],
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-torch.log(scores + self.eps)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_139": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist_mean, -torch.log(scores + self.eps))",
                            "Call"
                        ],
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist_mean, -torch.log(scores + self.eps))",
                            "Call"
                        ],
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist_mean, -torch.log(scores + self.eps))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_213": {
                "variable": {
                    "value": "dist_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(outputs, inputs)",
                            "Call"
                        ],
                        [
                            "criterion(outputs, inputs)",
                            "Call"
                        ],
                        [
                            "criterion(outputs, inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "list(range(1, len(dist.shape)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_217": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "dist_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ],
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ],
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-torch.log(scores + self.eps)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_221": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist_mean, -torch.log(scores + self.eps))",
                            "Call"
                        ],
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist_mean, -torch.log(scores + self.eps))",
                            "Call"
                        ],
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist_mean, -torch.log(scores + self.eps))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_82": {
                "input": {
                    "value": "-dist_mean",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "data": {
                    "value": "np.isin(y.cpu().data.numpy(), label_normal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_135": {
                "input": {
                    "value": "-dist_mean",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "data": {
                    "value": "np.isin(y.cpu().data.numpy(), label_normal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_215": {
                "input": {
                    "value": "-dist_mean",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_217": {
                "data": {
                    "value": "np.isin(y.cpu().data.numpy(), label_normal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_87": {
                "input": {
                    "value": "scores + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_138": {
                "input": {
                    "value": "scores + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_219": {
                "input": {
                    "value": "scores + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/hsc_optimizer.py": {
        "sklearn": {
            "roc_auc_score_147": {
                "variable": {
                    "value": "self.test_auc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.isin(labels, label_normal)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 - torch.exp(-dist)",
                            "BinOp"
                        ],
                        [
                            "1 - torch.exp(-dist)",
                            "BinOp"
                        ],
                        [
                            "1 - torch.exp(-dist)",
                            "BinOp"
                        ],
                        [
                            "np.array(scores)",
                            "Call"
                        ],
                        [
                            "1 - torch.exp(-dist)",
                            "BinOp"
                        ],
                        [
                            "1 - torch.exp(-dist)",
                            "BinOp"
                        ],
                        [
                            "np.array(scores)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "MSELoss_48": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_49": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_52": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(net.parameters(), lr=self.lr, weight_decay=self.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "self.lr_milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MSELoss_186": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_77": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.norm(outputs, p=2, dim=1) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.norm(outputs, p=2, dim=1) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.norm(outputs, p=2, dim=1) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "-torch.log(scores + self.eps)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_80": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist, -torch.log(scores + self.eps))",
                            "Call"
                        ],
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist, -torch.log(scores + self.eps))",
                            "Call"
                        ],
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist, -torch.log(scores + self.eps))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_125": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.norm(outputs, p=2, dim=1) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.norm(outputs, p=2, dim=1) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.norm(outputs, p=2, dim=1) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "-torch.log(scores + self.eps)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_128": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist, -torch.log(scores + self.eps))",
                            "Call"
                        ],
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist, -torch.log(scores + self.eps))",
                            "Call"
                        ],
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist, -torch.log(scores + self.eps))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_205": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.norm(outputs, p=2, dim=1) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.norm(outputs, p=2, dim=1) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.norm(outputs, p=2, dim=1) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "-torch.log(scores + self.eps)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_209": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist, -torch.log(scores + self.eps))",
                            "Call"
                        ],
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist, -torch.log(scores + self.eps))",
                            "Call"
                        ],
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist, -torch.log(scores + self.eps))",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_73": {
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "net(inputs)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_74": {
                "input": {
                    "value": "-dist",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "data": {
                    "value": "np.isin(y.cpu().data.numpy(), label_normal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_123": {
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "net(inputs)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_124": {
                "input": {
                    "value": "-dist",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "data": {
                    "value": "np.isin(y.cpu().data.numpy(), label_normal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_130": {
                "input": {
                    "value": "-dist",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_202": {
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "net(inputs)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_203": {
                "input": {
                    "value": "-dist",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_205": {
                "data": {
                    "value": "np.isin(y.cpu().data.numpy(), label_normal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_210": {
                "input": {
                    "value": "-dist",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_79": {
                "input": {
                    "value": "scores + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_127": {
                "input": {
                    "value": "scores + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_207": {
                "input": {
                    "value": "scores + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/one_class_optimizer.py": {
        "sklearn": {
            "roc_auc_score_306": {
                "variable": {
                    "value": "self.test_auc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.isin(labels, label_normal)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(rec_loss, dim=tuple(range(1, rec.dim())))",
                            "Call"
                        ],
                        [
                            "np.array(scores)",
                            "Call"
                        ],
                        [
                            "dist",
                            "Name"
                        ],
                        [
                            "np.array(scores)",
                            "Call"
                        ],
                        [
                            "dist",
                            "Name"
                        ],
                        [
                            "np.array(scores)",
                            "Call"
                        ],
                        [
                            "np.array(scores)",
                            "Call"
                        ],
                        [
                            "dist",
                            "Name"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "MSELoss_48": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_55": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "ae_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_60": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(ae_net.parameters(), lr=self.lr, weight_decay=self.weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.Adam(net.parameters(), lr=self.lr, weight_decay=self.weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.Adam(net.parameters(), lr=self.lr, weight_decay=self.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "self.lr_milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MSELoss_119": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_206": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_207": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_210": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(ae_net.parameters(), lr=self.lr, weight_decay=self.weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.Adam(net.parameters(), lr=self.lr, weight_decay=self.weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.Adam(net.parameters(), lr=self.lr, weight_decay=self.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "self.lr_milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_319": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "net.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_381": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_382": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_385": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(ae_net.parameters(), lr=self.lr, weight_decay=self.weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.Adam(net.parameters(), lr=self.lr, weight_decay=self.weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.Adam(net.parameters(), lr=self.lr, weight_decay=self.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "self.lr_milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_482": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "net.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_538": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_85": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rec_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(rec, inputs)",
                            "Call"
                        ],
                        [
                            "criterion(rec, inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_139": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rec_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(rec, inputs)",
                            "Call"
                        ],
                        [
                            "criterion(rec, inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "tuple(range(1, rec.dim()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_146": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rec_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(rec, inputs)",
                            "Call"
                        ],
                        [
                            "criterion(rec, inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_183": {
                "data": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(net.rep_dim, device=self.device)",
                            "Call"
                        ],
                        [
                            "c / n_samples",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(net.rep_dim, device=self.device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_234": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(outputs - self.c) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_237": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum((outputs - self.c) ** 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum((outputs - self.c) ** 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum((outputs - self.c) ** 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum((outputs - self.c) ** 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum((outputs - self.c) ** 2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.eta * (dist + self.eps) ** (-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_241": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist, self.eta * (dist + self.eps) ** (-1))",
                            "Call"
                        ],
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist, self.eta * (dist + self.eps) ** (-1))",
                            "Call"
                        ],
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist, self.eta * (dist + self.eps) ** (-1))",
                            "Call"
                        ],
                        [
                            "dist",
                            "Name"
                        ]
                    ]
                }
            },
            "no_grad_277": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_283": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(outputs - self.c) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_284": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum((outputs - self.c) ** 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum((outputs - self.c) ** 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum((outputs - self.c) ** 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum((outputs - self.c) ** 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum((outputs - self.c) ** 2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.eta * (dist + self.eps) ** (-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_288": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist, self.eta * (dist + self.eps) ** (-1))",
                            "Call"
                        ],
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist, self.eta * (dist + self.eps) ** (-1))",
                            "Call"
                        ],
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist, self.eta * (dist + self.eps) ** (-1))",
                            "Call"
                        ],
                        [
                            "dist",
                            "Name"
                        ]
                    ]
                }
            },
            "no_grad_322": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_358": {
                "data": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(net.rep_dim, device=self.device)",
                            "Call"
                        ],
                        [
                            "c / n_samples",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(net.rep_dim, device=self.device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_409": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(outputs - self.c) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_411": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum((outputs - self.c) ** 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum((outputs - self.c) ** 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum((outputs - self.c) ** 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum((outputs - self.c) ** 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum((outputs - self.c) ** 2, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_447": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_453": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(outputs - self.c) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_454": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum((outputs - self.c) ** 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum((outputs - self.c) ** 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum((outputs - self.c) ** 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum((outputs - self.c) ** 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum((outputs - self.c) ** 2, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_485": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_516": {
                "data": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(net.rep_dim, device=self.device)",
                            "Call"
                        ],
                        [
                            "c / n_samples",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(net.rep_dim, device=self.device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_547": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_553": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(outputs - self.c) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_562": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist, self.eta * (dist + self.eps) ** (-1))",
                            "Call"
                        ],
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist, self.eta * (dist + self.eps) ** (-1))",
                            "Call"
                        ],
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist, self.eta * (dist + self.eps) ** (-1))",
                            "Call"
                        ],
                        [
                            "dist",
                            "Name"
                        ]
                    ]
                }
            },
            "sum_329": {
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "net(inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_492": {
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "net(inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_556": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum((outputs - self.c) ** 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum((outputs - self.c) ** 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum((outputs - self.c) ** 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum((outputs - self.c) ** 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum((outputs - self.c) ** 2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.eta * (dist + self.eps) ** (-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_237": {
                "data": {
                    "value": "np.isin(y.cpu().data.numpy(), label_normal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_284": {
                "data": {
                    "value": "np.isin(y.cpu().data.numpy(), label_normal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_556": {
                "data": {
                    "value": "np.isin(y.cpu().data.numpy(), label_normal)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model/rec_optimizer.py": {
        "sklearn": {
            "roc_auc_score_146": {
                "variable": {
                    "value": "self.test_auc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.isin(labels, label_normal)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dist_mean",
                            "Name"
                        ],
                        [
                            "np.array(scores)",
                            "Call"
                        ],
                        [
                            "dist_mean",
                            "Name"
                        ],
                        [
                            "np.array(scores)",
                            "Call"
                        ],
                        [
                            "dist_mean",
                            "Name"
                        ],
                        [
                            "np.array(scores)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "MSELoss_49": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_50": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_53": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(net.parameters(), lr=self.lr, weight_decay=self.weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.Adam(net.parameters(), lr=self.lr, weight_decay=self.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "self.lr_milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MSELoss_108": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_193": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_194": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_197": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(net.parameters(), lr=self.lr, weight_decay=self.weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.Adam(net.parameters(), lr=self.lr, weight_decay=self.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "self.lr_milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MSELoss_249": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_320": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_74": {
                "variable": {
                    "value": "dist_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(X_pred, X)",
                            "Call"
                        ],
                        [
                            "criterion(X_pred, X)",
                            "Call"
                        ],
                        [
                            "criterion(X_pred, X)",
                            "Call"
                        ],
                        [
                            "criterion(X_pred, X)",
                            "Call"
                        ],
                        [
                            "criterion(X_pred, X)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "list(range(1, len(dist.shape)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_76": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "dist_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ],
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ],
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ],
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ],
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.eta * dist_mean ** (-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_79": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist_mean, self.eta * dist_mean ** (-1))",
                            "Call"
                        ],
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist_mean, self.eta * dist_mean ** (-1))",
                            "Call"
                        ],
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist_mean, self.eta * dist_mean ** (-1))",
                            "Call"
                        ],
                        [
                            "dist_mean",
                            "Name"
                        ]
                    ]
                }
            },
            "no_grad_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_124": {
                "variable": {
                    "value": "dist_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(X_pred, X)",
                            "Call"
                        ],
                        [
                            "criterion(X_pred, X)",
                            "Call"
                        ],
                        [
                            "criterion(X_pred, X)",
                            "Call"
                        ],
                        [
                            "criterion(X_pred, X)",
                            "Call"
                        ],
                        [
                            "criterion(X_pred, X)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "list(range(1, len(dist.shape)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_126": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "dist_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ],
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ],
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ],
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ],
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.eta * dist_mean ** (-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_129": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist_mean, self.eta * dist_mean ** (-1))",
                            "Call"
                        ],
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist_mean, self.eta * dist_mean ** (-1))",
                            "Call"
                        ],
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist_mean, self.eta * dist_mean ** (-1))",
                            "Call"
                        ],
                        [
                            "dist_mean",
                            "Name"
                        ]
                    ]
                }
            },
            "mean_218": {
                "variable": {
                    "value": "dist_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(X_pred, X)",
                            "Call"
                        ],
                        [
                            "criterion(X_pred, X)",
                            "Call"
                        ],
                        [
                            "criterion(X_pred, X)",
                            "Call"
                        ],
                        [
                            "criterion(X_pred, X)",
                            "Call"
                        ],
                        [
                            "criterion(X_pred, X)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "list(range(1, len(dist.shape)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_220": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ],
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ],
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ],
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ],
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_265": {
                "variable": {
                    "value": "dist_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(X_pred, X)",
                            "Call"
                        ],
                        [
                            "criterion(X_pred, X)",
                            "Call"
                        ],
                        [
                            "criterion(X_pred, X)",
                            "Call"
                        ],
                        [
                            "criterion(X_pred, X)",
                            "Call"
                        ],
                        [
                            "criterion(X_pred, X)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "list(range(1, len(dist.shape)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_267": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ],
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ],
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ],
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ],
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_329": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_337": {
                "variable": {
                    "value": "dist_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(X_pred, X)",
                            "Call"
                        ],
                        [
                            "criterion(X_pred, X)",
                            "Call"
                        ],
                        [
                            "criterion(X_pred, X)",
                            "Call"
                        ],
                        [
                            "criterion(X_pred, X)",
                            "Call"
                        ],
                        [
                            "criterion(X_pred, X)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "list(range(1, len(dist.shape)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_345": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist_mean, self.eta * dist_mean ** (-1))",
                            "Call"
                        ],
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist_mean, self.eta * dist_mean ** (-1))",
                            "Call"
                        ],
                        [
                            "torch.where(torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device), dist_mean, self.eta * dist_mean ** (-1))",
                            "Call"
                        ],
                        [
                            "dist_mean",
                            "Name"
                        ]
                    ]
                }
            },
            "where_340": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.tensor(np.isin(y.cpu().data.numpy(), label_normal)).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "dist_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ],
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ],
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ],
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ],
                        [
                            "torch.mean(dist, axis=list(range(1, len(dist.shape))))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.eta * dist_mean ** (-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "data": {
                    "value": "np.isin(y.cpu().data.numpy(), label_normal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "data": {
                    "value": "np.isin(y.cpu().data.numpy(), label_normal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_340": {
                "data": {
                    "value": "np.isin(y.cpu().data.numpy(), label_normal)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/cifar10_loader.py": {
        "torch": {
            "Subset_93": {
                "variable": {
                    "value": "self.all_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "all_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CIFAR10Dataset(root=self.root, train=train, transform=transforms.ToTensor(), download=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_idx(train, load_method, y, label_normal, label_abnormal, ratio_abnormal, random_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_145": {
                "variable": {
                    "value": "all_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.all_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/fmnist_config_loader.py": {
        "torch": {
            "Subset_114": {
                "variable": {
                    "value": "self.all_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "all_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FashionMNISTConfigDataset(root=self.root, train=train, transform=transforms.ToTensor(), download=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_idx_config(train, load_method, y, label_normal, label_abnormal, ratio_abnormal, random_state, ratio_a, ratio_b)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_179": {
                "variable": {
                    "value": "all_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.all_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/fmnist_loader.py": {
        "torch": {
            "Subset_93": {
                "variable": {
                    "value": "self.all_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "all_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FashionMNISTDataset(root=self.root, train=train, transform=transforms.ToTensor(), download=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_idx(train, load_method, y, label_normal, label_abnormal, ratio_abnormal, random_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_145": {
                "variable": {
                    "value": "all_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.all_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/kmnist_loader.py": {
        "torch": {
            "Subset_93": {
                "variable": {
                    "value": "self.all_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "all_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "KMNISTDataset(root=self.root, train=train, transform=transforms.ToTensor(), download=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_idx(train, load_method, y, label_normal, label_abnormal, ratio_abnormal, random_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_145": {
                "variable": {
                    "value": "all_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.all_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/mnist_loader.py": {
        "torch": {
            "Subset_93": {
                "variable": {
                    "value": "self.all_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "all_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MNISTDataset(root=self.root, train=train, transform=transforms.ToTensor(), download=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_idx(train, load_method, y, label_normal, label_abnormal, ratio_abnormal, random_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_145": {
                "variable": {
                    "value": "all_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.all_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model/main_model_abc.py": {
        "torch": {
            "load_55": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda:1'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_78": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda:1'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_52": {
                "obj": {
                    "value": "{'net_dict': net_dict}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "export_model",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/main_model_hsc.py": {
        "torch": {
            "load_55": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda:1'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_78": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda:1'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_52": {
                "obj": {
                    "value": "{'net_dict': net_dict}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "export_model",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/main_model_one_class.py": {
        "torch": {
            "load_58": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda:1'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda:1'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_241": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda:1'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda:1'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_200": {
                "obj": {
                    "value": "{'c': self.c, 'net_dict': net_dict, 'ae_net_dict': ae_net_dict}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "export_model",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/main_model_rec.py": {
        "torch": {
            "load_66": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda:1'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_95": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda:1'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_63": {
                "obj": {
                    "value": "{'net_dict': net_dict}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "export_model",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "network/base_net.py": {
        "torch": {}
    },
    "network/cbam.py": {
        "torch": {
            "max_71": {
                "variable": {
                    "value": "(s, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_flatten",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tensor.view(tensor.size(0), tensor.size(1), -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "7",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_65": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "channel_att_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "channel_att_raw",
                            "Name"
                        ],
                        [
                            "channel_att_sum + channel_att_raw",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_65": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_91": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.spatial(x_compress)",
                            "Call"
                        ],
                        [
                            "self.ChannelGate(x)",
                            "Call"
                        ],
                        [
                            "self.SpatialGate(x_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_78": {
                "tensors": {
                    "value": "(torch.max(x, 1)[0].unsqueeze(1), torch.mean(x, 1).unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "gate_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "gate_channels // reduction_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "gate_channels // reduction_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "gate_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_47": {
                "variable": {
                    "value": "avg_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_pool2d_50": {
                "variable": {
                    "value": "max_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_78": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_78": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lp_pool2d_53": {
                "variable": {
                    "value": "lp_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_78": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "network/cifar10_LeNet.py": {
        "torch": {
            "MaxPool2d_21": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias_terms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "variable": {
                    "value": "self.bn2d1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "bias_terms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias_terms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self.bn2d2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "bias_terms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias_terms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.bn2d3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "bias_terms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias_terms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_35": {
                "variable": {
                    "value": "self.bn1d1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "bias_terms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias_terms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "leaky_relu_49": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1d1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_92": {
                "variable": {
                    "value": "self.deconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(self.rep_dim / (4 * 4))",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_94": {
                "variable": {
                    "value": "self.bn2d4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_95": {
                "variable": {
                    "value": "self.deconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "variable": {
                    "value": "self.bn2d5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_98": {
                "variable": {
                    "value": "self.deconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "variable": {
                    "value": "self.bn2d6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_101": {
                "variable": {
                    "value": "self.deconv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_106": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.leaky_relu(self.bn2d1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.leaky_relu(self.bn2d2(x)))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.leaky_relu(self.bn2d3(x)))",
                            "Call"
                        ],
                        [
                            "x.view(int(x.size(0)), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn1d1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.view(int(x.size(0)), int(self.rep_dim / (4 * 4)), 4, 4)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d4(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.deconv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d5(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.deconv3(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d6(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.deconv4(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_108": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.leaky_relu(self.bn2d4(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_110": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.leaky_relu(self.bn2d5(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_112": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.leaky_relu(self.bn2d6(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_114": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.leaky_relu(self.bn2d1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.leaky_relu(self.bn2d2(x)))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.leaky_relu(self.bn2d3(x)))",
                            "Call"
                        ],
                        [
                            "x.view(int(x.size(0)), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn1d1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.view(int(x.size(0)), int(self.rep_dim / (4 * 4)), 4, 4)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d4(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.deconv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d5(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.deconv3(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d6(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.deconv4(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_42": {
                "input": {
                    "value": "self.bn2d1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_44": {
                "input": {
                    "value": "self.bn2d2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_46": {
                "input": {
                    "value": "self.bn2d3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_108": {
                "input": {
                    "value": "self.bn2d4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_110": {
                "input": {
                    "value": "self.bn2d5(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_112": {
                "input": {
                    "value": "self.bn2d6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "network/fmnist_LeNet.py": {
        "torch": {
            "MaxPool2d_20": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn2d1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn2d2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_26": {
                "variable": {
                    "value": "self.bn1d1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "leaky_relu_36": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1d1(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_50": {
                "variable": {
                    "value": "self.bn1d2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_51": {
                "variable": {
                    "value": "self.deconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "variable": {
                    "value": "self.bn2d3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_53": {
                "variable": {
                    "value": "self.deconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "variable": {
                    "value": "self.bn2d4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_55": {
                "variable": {
                    "value": "self.deconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_60": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.leaky_relu(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_62": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.leaky_relu(self.bn2d3(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_64": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.leaky_relu(self.bn2d4(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_66": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.leaky_relu(self.bn2d1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.leaky_relu(self.bn2d2(x)))",
                            "Call"
                        ],
                        [
                            "x.view(int(x.size(0)), -1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn1d1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.bn1d2(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "x.view(int(x.size(0)), int(128 / 16), 4, 4)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(x), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d3(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.deconv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d4(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.deconv3(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_32": {
                "input": {
                    "value": "self.bn2d1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_34": {
                "input": {
                    "value": "self.bn2d2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_60": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.leaky_relu(self.bn2d1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.leaky_relu(self.bn2d2(x)))",
                            "Call"
                        ],
                        [
                            "x.view(int(x.size(0)), -1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn1d1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.bn1d2(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "x.view(int(x.size(0)), int(128 / 16), 4, 4)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(x), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d3(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.deconv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d4(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.deconv3(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_62": {
                "input": {
                    "value": "self.bn2d3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_64": {
                "input": {
                    "value": "self.bn2d4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "network/gaussian3d_net.py": {
        "torch": {
            "Linear_19": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "leaky_relu_24": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "leaky_relu_42": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "network/gaussian9d_net.py": {
        "torch": {
            "Linear_19": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "leaky_relu_24": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_25": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "leaky_relu_43": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_44": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "network/imagenet_WideResNet.py": {
        "torch": {
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_27": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_28": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * BasicBlock.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_103": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_105": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_130": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_131": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_133": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_166": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_224": {
                "variable": {
                    "value": "self.deconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(self.rep_dim / (4 * 4))",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_226": {
                "variable": {
                    "value": "self.bn2d4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_227": {
                "variable": {
                    "value": "self.deconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_229": {
                "variable": {
                    "value": "self.bn2d5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_230": {
                "variable": {
                    "value": "self.deconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_232": {
                "variable": {
                    "value": "self.bn2d6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_233": {
                "variable": {
                    "value": "self.deconv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_236": {
                "variable": {
                    "value": "self.bn2d7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_237": {
                "variable": {
                    "value": "self.deconv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_240": {
                "variable": {
                    "value": "self.bn2d8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_241": {
                "variable": {
                    "value": "self.deconv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_260": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, 3, 224, 224)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.bam1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.bam2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.bam3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "x.view(int(x.size(0)), int(self.rep_dim / (4 * 4)), 4, 4)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d4(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.deconv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d5(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.deconv3(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d6(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.deconv4(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d7(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.deconv5(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d8(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.deconv6(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_262": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.leaky_relu(self.bn2d4(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_265": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.leaky_relu(self.bn2d5(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_269": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.leaky_relu(self.bn2d6(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_273": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.leaky_relu(self.bn2d7(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_277": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.leaky_relu(self.bn2d8(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_281": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, 3, 224, 224)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.bam1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.bam2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.bam3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "x.view(int(x.size(0)), int(self.rep_dim / (4 * 4)), 4, 4)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d4(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.deconv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d5(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.deconv3(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d6(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.deconv4(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d7(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.deconv5(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d8(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.deconv6(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_256": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "leaky_relu_262": {
                "input": {
                    "value": "self.bn2d4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_265": {
                "input": {
                    "value": "self.bn2d5(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_269": {
                "input": {
                    "value": "self.bn2d6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_273": {
                "input": {
                    "value": "self.bn2d7(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_277": {
                "input": {
                    "value": "self.bn2d8(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "network/kmnist_LeNet.py": {
        "torch": {
            "MaxPool2d_20": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn2d1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn2d2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_26": {
                "variable": {
                    "value": "self.bn1d1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "leaky_relu_36": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1d1(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_50": {
                "variable": {
                    "value": "self.bn1d2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_51": {
                "variable": {
                    "value": "self.deconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "variable": {
                    "value": "self.bn2d3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_53": {
                "variable": {
                    "value": "self.deconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "variable": {
                    "value": "self.bn2d4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_55": {
                "variable": {
                    "value": "self.deconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_60": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.leaky_relu(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_62": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.leaky_relu(self.bn2d3(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_64": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.leaky_relu(self.bn2d4(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_66": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.leaky_relu(self.bn2d1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.leaky_relu(self.bn2d2(x)))",
                            "Call"
                        ],
                        [
                            "x.view(int(x.size(0)), -1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn1d1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.bn1d2(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "x.view(int(x.size(0)), int(128 / 16), 4, 4)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(x), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d3(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.deconv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d4(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.deconv3(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_32": {
                "input": {
                    "value": "self.bn2d1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_34": {
                "input": {
                    "value": "self.bn2d2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_60": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.leaky_relu(self.bn2d1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.leaky_relu(self.bn2d2(x)))",
                            "Call"
                        ],
                        [
                            "x.view(int(x.size(0)), -1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn1d1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.bn1d2(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "x.view(int(x.size(0)), int(128 / 16), 4, 4)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(x), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d3(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.deconv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d4(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.deconv3(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_62": {
                "input": {
                    "value": "self.bn2d3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_64": {
                "input": {
                    "value": "self.bn2d4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "network/mlp.py": {
        "torch": {
            "ModuleList_20": {
                "variable": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[Linear_BN_leakyReLU(neurons[i - 1], neurons[i], bias=bias) for i in range(1, len(neurons))]",
                            "ListComp"
                        ],
                        [
                            "[Linear_BN_leakyReLU(neurons[i - 1], neurons[i], bias=bias) for i in range(1, len(neurons))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.code",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "rep_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_40": {
                "variable": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[Linear_BN_leakyReLU(neurons[i - 1], neurons[i], bias=bias) for i in range(1, len(neurons))]",
                            "ListComp"
                        ],
                        [
                            "[Linear_BN_leakyReLU(neurons[i - 1], neurons[i], bias=bias) for i in range(1, len(neurons))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.reconstruction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "x_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_42": {
                "variable": {
                    "value": "self.output_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_76": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "leaky_relu_79": {
                "input": {
                    "value": "self.bn(self.linear(x))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "network/mnist_LeNet.py": {
        "torch": {
            "MaxPool2d_20": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn2d1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn2d2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_26": {
                "variable": {
                    "value": "self.bn1d1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "leaky_relu_36": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1d1(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_50": {
                "variable": {
                    "value": "self.bn1d2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_51": {
                "variable": {
                    "value": "self.deconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "variable": {
                    "value": "self.bn2d3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_53": {
                "variable": {
                    "value": "self.deconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "variable": {
                    "value": "self.bn2d4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_55": {
                "variable": {
                    "value": "self.deconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_60": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.leaky_relu(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_62": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.leaky_relu(self.bn2d3(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_64": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.leaky_relu(self.bn2d4(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_66": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.leaky_relu(self.bn2d1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.leaky_relu(self.bn2d2(x)))",
                            "Call"
                        ],
                        [
                            "x.view(int(x.size(0)), -1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn1d1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.bn1d2(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "x.view(int(x.size(0)), int(128 / 16), 4, 4)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(x), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d3(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.deconv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d4(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.deconv3(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_32": {
                "input": {
                    "value": "self.bn2d1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_34": {
                "input": {
                    "value": "self.bn2d2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_60": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.leaky_relu(self.bn2d1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.pool(F.leaky_relu(self.bn2d2(x)))",
                            "Call"
                        ],
                        [
                            "x.view(int(x.size(0)), -1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn1d1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.bn1d2(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "x.view(int(x.size(0)), int(128 / 16), 4, 4)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(x), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d3(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.deconv2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(F.leaky_relu(self.bn2d4(x)), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.deconv3(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_62": {
                "input": {
                    "value": "self.bn2d3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_64": {
                "input": {
                    "value": "self.bn2d4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "network/spectrum_net.py": {
        "torch": {
            "LSTM_19": {
                "variable": {
                    "value": "self.lstm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_20": {
                "variable": {
                    "value": "self.lstm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * 125",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_39": {
                "variable": {
                    "value": "self.lstm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_40": {
                "variable": {
                    "value": "self.lstm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32 * 125",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_48": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.reshape(x.size(0), 32 * 125).contiguous()",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), 125, 32).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}