{
    "DGI-HGAT/utils/clustering.py": {
        "sklearn": {
            "KMeans_32": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "normalized_mutual_info_score_57": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.argmax(y, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "estimator.predict(x)",
                            "Call"
                        ],
                        [
                            "estimator.predict(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalized_mutual_info_score_40": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.argmax(y, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "estimator.predict(x)",
                            "Call"
                        ],
                        [
                            "estimator.predict(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "adjusted_rand_score_42": {
                "variable": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(y)",
                            "Call"
                        ],
                        [
                            "np.argmax(y, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "estimator.predict(x)",
                            "Call"
                        ],
                        [
                            "estimator.predict(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "silhouette_score_46": {
                "variable": {
                    "value": "s3",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(x)",
                            "Call"
                        ],
                        [
                            "np.squeeze(x)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "estimator.labels_",
                            "Attribute"
                        ]
                    ]
                },
                "metric": {
                    "value": "euclidean",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "DGI-HGAT/utils/process.py": {
        "sklearn": {
            "f1_score_112": {
                "variable": {
                    "value": "macro",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(nb_graphs)",
                            "Call"
                        ],
                        [
                            "labels.long()",
                            "Call"
                        ],
                        [
                            "labels.to(torch.device('cpu')).numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "encode_onehot(labels)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.round(nn.Sigmoid()(logits))",
                            "Call"
                        ],
                        [
                            "preds.long()",
                            "Call"
                        ],
                        [
                            "preds.to(torch.device('cpu')).numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "round_54": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nn.Sigmoid()(logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_219": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_221": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_61": {
                "input": {
                    "value": "preds * labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_62": {
                "input": {
                    "value": "(preds - 1) * (labels - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_63": {
                "input": {
                    "value": "preds * (labels - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_64": {
                "input": {
                    "value": "(preds - 1) * labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_110": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_111": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "DGI-HGCN/utils/process.py": {
        "sklearn": {
            "f1_score_76": {
                "variable": {
                    "value": "macro",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(nb_graphs)",
                            "Call"
                        ],
                        [
                            "labels.long()",
                            "Call"
                        ],
                        [
                            "labels.to(torch.device('cpu')).numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "encode_onehot(labels)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.round(nn.Sigmoid()(logits))",
                            "Call"
                        ],
                        [
                            "preds.long()",
                            "Call"
                        ],
                        [
                            "preds.to(torch.device('cpu')).numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "round_55": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nn.Sigmoid()(logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_207": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_209": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_62": {
                "input": {
                    "value": "preds * labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_63": {
                "input": {
                    "value": "(preds - 1) * (labels - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_64": {
                "input": {
                    "value": "preds * (labels - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_65": {
                "input": {
                    "value": "(preds - 1) * labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_74": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_75": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "DGI-HGAT/execute.py": {
        "torch": {
            "Adam_102": {
                "variable": {
                    "value": "optimiser",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "l2_coef",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.weight_decay",
                            "Attribute"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_118": {
                "variable": {
                    "value": "b_xent",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_119": {
                "variable": {
                    "value": "xent",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_171": {
                "variable": {
                    "value": "train_lbls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[0, idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_172": {
                "variable": {
                    "value": "val_lbls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[0, idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_173": {
                "variable": {
                    "value": "test_lbls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[0, idx_test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_175": {
                "variable": {
                    "value": "tot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_249": {
                "variable": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(accs)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_252": {
                "variable": {
                    "value": "mac_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mac_f1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mac_f1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_36": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_39": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_43": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_131": {
                "variable": {
                    "value": "lbl_1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "nb_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_132": {
                "variable": {
                    "value": "lbl_2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "nb_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_133": {
                "variable": {
                    "value": "lbl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lbl_1, lbl_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_190": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "log.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "argmax_239": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(features, shuf_fts, nor_adjs, sparse, None, None, None)",
                            "Call"
                        ],
                        [
                            "log(train_embs)",
                            "Call"
                        ],
                        [
                            "log(test_embs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_244": {
                "variable": {
                    "value": "mac",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_37": {
                "device": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_46": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_164": {
                "f": {
                    "value": "str('best_dgi_head_' + str(args.nb_heads) + '_nhidden_' + str(args.hidden) + '_exp_' + str(exp) + '.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_150": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str('best_dgi_head_' + str(args.nb_heads) + '_nhidden_' + str(args.hidden) + '_exp_' + str(exp) + '.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_205": {
                "obj": {
                    "value": "log.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}.mlp.pkl'.format(epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_232": {
                "f": {
                    "value": "'{}.mlp.pkl'.format(best_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_240": {
                "input": {
                    "value": "preds == test_lbls",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "DGI-HGAT/executeCla.py": {
        "torch": {
            "CrossEntropyLoss_117": {
                "variable": {
                    "value": "xent",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_130": {
                "variable": {
                    "value": "train_lbls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[0, idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_131": {
                "variable": {
                    "value": "val_lbls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[0, idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_132": {
                "variable": {
                    "value": "test_lbls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[0, idx_test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "tot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_208": {
                "variable": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(accs)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_211": {
                "variable": {
                    "value": "mac_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mac_f1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mac_f1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_36": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_39": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_43": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_149": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "log.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "argmax_198": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log(train_embs)",
                            "Call"
                        ],
                        [
                            "log(test_embs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_203": {
                "variable": {
                    "value": "mac",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_37": {
                "device": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_46": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_123": {
                "f": {
                    "value": "str('best_dgi_head_' + str(args.nb_heads) + '_nhidden_' + str(args.hidden) + '_exp_' + str(exp) + '.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_164": {
                "obj": {
                    "value": "log.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}.mlp.pkl'.format(epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_191": {
                "f": {
                    "value": "'{}.mlp.pkl'.format(best_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_199": {
                "input": {
                    "value": "preds == test_lbls",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "device_222": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_215": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "DGI-HGAT/layers/attentionLayer.py": {
        "torch": {
            "Parameter_16": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(in_features, out_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(2 * out_features, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_21": {
                "variable": {
                    "value": "self.leakyrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_24": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_27": {
                "variable": {
                    "value": "a_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h.repeat(1, N).view(N * N, -1), h.repeat(N, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_31": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "adj > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.leakyrelu(torch.matmul(a_input, self.a).squeeze(2))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zero_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-9000000000000000.0 * torch.ones_like(e)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_32": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(adj > 0, e, zero_vec)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_34": {
                "variable": {
                    "value": "h_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(adj > 0, e, zero_vec)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(input, self.W)",
                            "Call"
                        ],
                        [
                            "torch.mm(input, self.W)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(in_features, out_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_56": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(1, out_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(1, out_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tanh_60": {
                "variable": {
                    "value": "self.Tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_61": {
                "variable": {
                    "value": "self.leakyrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_64": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_68": {
                "variable": {
                    "value": "semantic_attentions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(attention, h)",
                            "Call"
                        ],
                        [
                            "self.Tanh(h + self.b.repeat(h.size()[0], 1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.t(self.q)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_73": {
                "variable": {
                    "value": "semantic_attentions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "semantic_attentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(h_prime, torch.t(self.q)).view(P, -1)",
                            "Call"
                        ],
                        [
                            "semantic_attentions.mean(dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(semantic_attentions, dim=0)",
                            "Call"
                        ],
                        [
                            "semantic_attentions.view(P, 1, 1)",
                            "Call"
                        ],
                        [
                            "semantic_attentions.repeat(1, N, self.in_features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_83": {
                "variable": {
                    "value": "h_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(P, N, self.in_features)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "semantic_attentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(h_prime, torch.t(self.q)).view(P, -1)",
                            "Call"
                        ],
                        [
                            "semantic_attentions.mean(dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(semantic_attentions, dim=0)",
                            "Call"
                        ],
                        [
                            "semantic_attentions.view(P, 1, 1)",
                            "Call"
                        ],
                        [
                            "semantic_attentions.repeat(1, N, self.in_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_84": {
                "variable": {
                    "value": "h_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(input_embedding, semantic_attentions)",
                            "Call"
                        ],
                        [
                            "torch.sum(h_embedding, dim=0).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_84": {
                "variable": {
                    "value": "h_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_16": {
                "size": {
                    "value": "(in_features, out_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_18": {
                "size": {
                    "value": "(2 * out_features, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_28": {
                "input": {
                    "value": "a_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([h.repeat(1, N).view(N * N, -1), h.repeat(N, 1)], dim=1).view(N, -1, 2 * self.out_features)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_28": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_30": {
                "input": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.leakyrelu(torch.matmul(a_input, self.a).squeeze(2))",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_38": {
                "input": {
                    "value": "h_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(attention, h)",
                            "Call"
                        ],
                        [
                            "self.Tanh(h + self.b.repeat(h.size()[0], 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_54": {
                "size": {
                    "value": "(in_features, out_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "size": {
                    "value": "(1, out_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "size": {
                    "value": "(1, out_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "t_68": {
                "input": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "DGI-HGAT/layers/discriminator.py": {
        "torch": {
            "Bilinear_7": {
                "variable": {
                    "value": "self.f_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in1_features": {
                    "value": "n_h",
                    "type": "variable",
                    "possible_values": []
                },
                "in2_features": {
                    "value": "n_h",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_22": {
                "variable": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_26": {
                "variable": {
                    "value": "sc_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.f_k(h_pl, c_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_28": {
                "variable": {
                    "value": "sc_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.f_k(h_mi, c_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sc_1, sc_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DGI-HGAT/layers/hgat.py": {
        "torch": {
            "squeeze_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(x, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat([m_x for m_x in meta_path_x], dim=0)",
                            "Call"
                        ],
                        [
                            "self.semantic_level_attention(x, self.P)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[m_x for m_x in meta_path_x]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(x, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat([m_x for m_x in meta_path_x], dim=0)",
                            "Call"
                        ],
                        [
                            "self.semantic_level_attention(x, self.P)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_27": {
                "variable": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(adj, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_28": {
                "variable": {
                    "value": "m_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att(x, adj) for att in self.node_level_attentions[i]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DGI-HGAT/layers/readout.py": {
        "torch": {
            "unsqueeze_16": {
                "variable": {
                    "value": "msk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "msk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(msk, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_12": {
                "input": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_17": {
                "input": {
                    "value": "msk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(msk, -1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "DGI-HGAT/models/dgi.py": {
        "torch": {
            "Sigmoid_13": {
                "variable": {
                    "value": "self.sigm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DGI-HGAT/models/logreg.py": {
        "torch": {
            "Linear_8": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ft_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "DGI-HGCN/execute.py": {
        "torch": {
            "Adam_61": {
                "variable": {
                    "value": "optimiser",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "l2_coef",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_76": {
                "variable": {
                    "value": "b_xent",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_77": {
                "variable": {
                    "value": "xent",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_126": {
                "variable": {
                    "value": "train_lbls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[0, idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_127": {
                "variable": {
                    "value": "val_lbls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[0, idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_128": {
                "variable": {
                    "value": "test_lbls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[0, idx_test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "variable": {
                    "value": "tot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_198": {
                "variable": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(accs)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_201": {
                "variable": {
                    "value": "mac_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mac_f1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mac_f1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_25": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_28": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_89": {
                "variable": {
                    "value": "lbl_1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "nb_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "lbl_2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "nb_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_91": {
                "variable": {
                    "value": "lbl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lbl_1, lbl_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_144": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "log.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "argmax_192": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(features, shuf_fts, sp_nor_adjs if sparse else nor_adjs, sparse, None, None, None)",
                            "Call"
                        ],
                        [
                            "log(train_embs)",
                            "Call"
                        ],
                        [
                            "log(test_embs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_195": {
                "variable": {
                    "value": "mac",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_device_26": {
                "device": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_119": {
                "f": {
                    "value": "best_dgi.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_107": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "best_dgi.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_158": {
                "obj": {
                    "value": "log.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}.mlp.pkl'.format(epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_185": {
                "f": {
                    "value": "'{}.mlp.pkl'.format(best_epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_193": {
                "input": {
                    "value": "preds == test_lbls",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "DGI-HGCN/layers/attentionLayer.py": {
        "torch": {
            "Parameter_14": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(in_features, out_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_16": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(1, out_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(1, out_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tanh_20": {
                "variable": {
                    "value": "self.Tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_23": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_27": {
                "variable": {
                    "value": "semantic_attentions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Tanh(h + self.b.repeat(h.size()[0], 1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.t(self.q)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_32": {
                "variable": {
                    "value": "semantic_attentions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "semantic_attentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(h_prime, torch.t(self.q)).view(P, -1)",
                            "Call"
                        ],
                        [
                            "semantic_attentions.mean(dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(semantic_attentions, dim=0)",
                            "Call"
                        ],
                        [
                            "semantic_attentions.view(P, 1, 1)",
                            "Call"
                        ],
                        [
                            "semantic_attentions.repeat(1, N, self.in_features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_41": {
                "variable": {
                    "value": "h_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(P, N, self.in_features)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "semantic_attentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(h_prime, torch.t(self.q)).view(P, -1)",
                            "Call"
                        ],
                        [
                            "semantic_attentions.mean(dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(semantic_attentions, dim=0)",
                            "Call"
                        ],
                        [
                            "semantic_attentions.view(P, 1, 1)",
                            "Call"
                        ],
                        [
                            "semantic_attentions.repeat(1, N, self.in_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_42": {
                "variable": {
                    "value": "h_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(input_embedding, semantic_attentions)",
                            "Call"
                        ],
                        [
                            "torch.sum(h_embedding, dim=0).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_42": {
                "variable": {
                    "value": "h_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_14": {
                "size": {
                    "value": "(in_features, out_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "size": {
                    "value": "(1, out_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_18": {
                "size": {
                    "value": "(1, out_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "t_27": {
                "input": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "DGI-HGCN/layers/discriminator.py": {
        "torch": {
            "Bilinear_7": {
                "variable": {
                    "value": "self.f_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in1_features": {
                    "value": "n_h",
                    "type": "variable",
                    "possible_values": []
                },
                "in2_features": {
                    "value": "n_h",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_18": {
                "variable": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_21": {
                "variable": {
                    "value": "sc_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.f_k(h_pl, c_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_22": {
                "variable": {
                    "value": "sc_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.f_k(h_mi, c_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sc_1, sc_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DGI-HGCN/layers/gcn.py": {
        "torch": {
            "Linear_7": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_ft",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_ft",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_34": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.act(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_11": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_ft)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_29": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.spmm(adj, torch.squeeze(seq_fts, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_31": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "seq_fts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(seq)",
                            "Call"
                        ]
                    ]
                }
            },
            "PReLU_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_29": {
                "input": {
                    "value": "seq_fts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(seq)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DGI-HGCN/layers/hgcn.py": {
        "torch": {
            "cat_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[m_x for m_x in meta_path_x]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([m_x for m_x in meta_path_x], dim=0)",
                            "Call"
                        ],
                        [
                            "self.semantic_level_attention(x, self.P)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DGI-HGCN/layers/readout.py": {
        "torch": {
            "unsqueeze_14": {
                "variable": {
                    "value": "msk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "msk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(msk, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_12": {
                "input": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_15": {
                "input": {
                    "value": "msk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(msk, -1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "DGI-HGCN/models/dgi.py": {
        "torch": {
            "Sigmoid_11": {
                "variable": {
                    "value": "self.sigm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DGI-HGCN/models/logreg.py": {
        "torch": {
            "Linear_8": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ft_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}