{
    "src/data/features.py": {
        "sklearn": {
            "PCA_31": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "min(n_components, X.shape[1])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/semimarkov/semimarkov_utils.py": {
        "sklearn": {
            "GaussianMixture_68": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "diag",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GaussianMixture_78": {
                "variable": {
                    "value": "emissions",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "diag",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GaussianMixture_80": {
                "variable": {
                    "value": "emissions",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "covariance_type",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "ones_like_12": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_labels[:, 0]",
                            "Subscript"
                        ],
                        [
                            "this",
                            "Name"
                        ]
                    ]
                }
            },
            "where_18": {
                "variable": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "same_symbol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last == this",
                            "Compare"
                        ],
                        [
                            "same_symbol & (lengths < max_k - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "torch.full([1], -1, device=same_symbol.device, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "this",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_labels[:, n]",
                            "Subscript"
                        ],
                        [
                            "spans[:, n]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "where_19": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "same_symbol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last == this",
                            "Compare"
                        ],
                        [
                            "same_symbol & (lengths < max_k - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(last)",
                            "Call"
                        ],
                        [
                            "torch.where(same_symbol, lengths, torch.full([1], 0, device=same_symbol.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "lengths + 1",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.full([1], 0, device=same_symbol.device, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_23": {
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[last.unsqueeze(1)]",
                            "List"
                        ],
                        [
                            "[current_labels.unsqueeze(1)]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_60": {
                "variable": {
                    "value": "this_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "this == -1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "current_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spans[:, 0]",
                            "Subscript"
                        ],
                        [
                            "this_labels",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "this",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_labels[:, n]",
                            "Subscript"
                        ],
                        [
                            "spans[:, n]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_63": {
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[last.unsqueeze(1)]",
                            "List"
                        ],
                        [
                            "[current_labels.unsqueeze(1)]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_18": {
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "same_symbol.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_19": {
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "same_symbol.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/data/corpus.py": {
        "torch": {
            "from_numpy_349": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_features(self.load_features())",
                            "Call"
                        ],
                        [
                            "self._features",
                            "Attribute"
                        ],
                        [
                            "features[:, permutation]",
                            "Subscript"
                        ],
                        [
                            "features[:self.n_frames()]",
                            "Subscript"
                        ],
                        [
                            "features[self._truncated_nonbackground_timesteps()]",
                            "Subscript"
                        ],
                        [
                            "video_obj.features()",
                            "Call"
                        ],
                        [
                            "features[subsample_indices]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(features).float()",
                            "Call"
                        ],
                        [
                            "features / self.feature_downscale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_355": {
                "variable": {
                    "value": "constraints",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "constraints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._constraints[:self.n_frames()]",
                            "Subscript"
                        ],
                        [
                            "constraints[tnb]",
                            "Subscript"
                        ],
                        [
                            "video_obj.constraints",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(constraints).float()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/flow.py": {
        "torch": {
            "Linear_21": {
                "variable": {
                    "value": "self.in_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.flow_hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.out_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args.flow_hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_layer(input)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "getattr(self, name)(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "torch.cat((h1, h2_p), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "jacobian_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args.flow_hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.flow_hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_layer(input)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "getattr(self, name)(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "torch.cat((h1, h2_p), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_109": {
                "variable": {
                    "value": "(h1, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_layer(input)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "getattr(self, name)(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "torch.cat((h1, h2_p), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "features // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, h2_p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_116": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self, 'scale_cell{}'.format(i))(h1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/framewise.py": {
        "torch": {
            "Sequential_32": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_135": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_like_41": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "logits + mask",
                            "BinOp"
                        ],
                        [
                            "self.model.forward(features, valid_classes_per_instance=task_indices)",
                            "Call"
                        ],
                        [
                            "self.model.forward(features, valid_classes_per_instance=task_indices)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_25": {
                "p": {
                    "value": "args.ff_dropout_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim if args.ff_hidden_layers == 0 else args.ff_hidden_dim",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "args.ff_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.ff_hidden_dim if l_ix < args.ff_hidden_layers - 1 else output_dim",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/model.py": {
        "torch": {
            "DataLoader_68": {
                "dataset": {
                    "value": "datasplit",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "padding_colate",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "datasplit.batch_sampler(batch_size, batch_by_task, shuffle)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/semimarkov/semimarkov.py": {
        "torch": {
            "zeros_154": {
                "variable": {
                    "value": "constraints_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(constraints.size(0), constraints.size(1), len(task_indices))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clip_grad_norm__306": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/semimarkov/semimarkov_modules.py": {
        "torch": {
            "unfold_33": {
                "variable": {
                    "value": "sliding_windows",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(k, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(k, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_33": {
                "variable": {
                    "value": "sliding_windows",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "features.size(0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(1, K)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_143": {
                "variable": {
                    "value": "poisson_log_rates",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_144": {
                "variable": {
                    "value": "self.poisson_log_rates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "poisson_log_rates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(self.n_classes).float()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_146": {
                "variable": {
                    "value": "gaussian_means",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_147": {
                "variable": {
                    "value": "self.gaussian_means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "gaussian_means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(self.n_classes, self.feature_dim).float()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_150": {
                "variable": {
                    "value": "gaussian_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_151": {
                "variable": {
                    "value": "self.gaussian_cov",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "gaussian_cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(self.feature_dim).float()",
                            "Call"
                        ],
                        [
                            "torch.eye(self.feature_dim).float()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_154": {
                "variable": {
                    "value": "transition_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_155": {
                "variable": {
                    "value": "self.transition_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "transition_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(self.n_classes, self.n_classes).float()",
                            "Call"
                        ],
                        [
                            "self.transition_logits",
                            "Attribute"
                        ],
                        [
                            "transition_logits.masked_fill(self.transition_constraints, BIG_NEG)",
                            "Call"
                        ],
                        [
                            "transition_logits[valid_classes][:, valid_classes]",
                            "Subscript"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "variable": {
                    "value": "init_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_158": {
                "variable": {
                    "value": "self.init_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(self.n_classes).float()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_176": {
                "variable": {
                    "value": "self.init_constraints",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.full((self.n_classes,), 1, dtype=torch.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_184": {
                "variable": {
                    "value": "self.transition_constraints",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.full((self.n_classes, self.n_classes), 1, dtype=torch.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_264": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_274": {
                "variable": {
                    "value": "self.gaussian_cov.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "feats.var(dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_387": {
                "variable": {
                    "value": "time_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.max_k",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "log_rates.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_387": {
                "variable": {
                    "value": "time_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Poisson_392": {
                "variable": {
                    "value": "poissons",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "torch.exp(log_rates)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_507": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "N - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "N_1",
                            "Name"
                        ],
                        [
                            "scores.size(2)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_1 + 1",
                            "BinOp"
                        ],
                        [
                            "C_1",
                            "Name"
                        ],
                        [
                            "self.n_classes",
                            "Attribute"
                        ],
                        [
                            "len(valid_classes)",
                            "Call"
                        ],
                        [
                            "self.n_classes",
                            "Attribute"
                        ],
                        [
                            "len(valid_classes)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "emission_scores.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_527": {
                "variable": {
                    "value": "augmented",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[spans, torch.full([b, 1], -1, device=spans.device, dtype=torch.long)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_535": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_774": {
                "variable": {
                    "value": "self.initial_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.structure_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_781": {
                "variable": {
                    "value": "self.transition_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.structure_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.structure_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_791": {
                "variable": {
                    "value": "self.emission_mean_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*emission_mean_mlp",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_792": {
                "variable": {
                    "value": "self.emission_mean_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.feature_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_798": {
                "variable": {
                    "value": "self.length_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*length_mlp",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "eye_811": {
                "variable": {
                    "value": "gaussian_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_812": {
                "variable": {
                    "value": "self.gaussian_cov",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "gaussian_cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(self.feature_dim).float()",
                            "Call"
                        ],
                        [
                            "torch.eye(self.feature_dim).float()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_927": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bfe,bte->btf",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[x, class_embeddings]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_softmax_296": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_logits",
                            "Attribute"
                        ],
                        [
                            "logits.masked_fill(self.init_constraints, BIG_NEG)",
                            "Call"
                        ],
                        [
                            "logits[valid_classes]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_322": {
                "input": {
                    "value": "masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transition_logits",
                            "Name"
                        ],
                        [
                            "transition_logits.masked_fill(torch.eye(n_classes, device=self.transition_logits.device).bool(), BIG_NEG)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultivariateNormal_357": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "this_means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_means[:, c, :]",
                            "Subscript"
                        ]
                    ]
                },
                "scale_tril": {
                    "value": "scale_tril",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gaussian_cov.sqrt()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_362": {
                "tensors": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_462": {
                "variable": {
                    "value": "transition_augmented",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(b, C, C)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "BIG_NEG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1000000000.0",
                            "UnaryOp"
                        ]
                    ]
                },
                "device": {
                    "value": "transition.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_473": {
                "variable": {
                    "value": "init_augmented",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(b, C)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "BIG_NEG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1000000000.0",
                            "UnaryOp"
                        ]
                    ]
                },
                "device": {
                    "value": "init.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_476": {
                "variable": {
                    "value": "length_scores_augmented",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(b, K, C)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "BIG_NEG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1000000000.0",
                            "UnaryOp"
                        ]
                    ]
                },
                "device": {
                    "value": "length_scores.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_485": {
                "variable": {
                    "value": "emission_augmented",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(b, N, C)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "BIG_NEG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1000000000.0",
                            "UnaryOp"
                        ]
                    ]
                },
                "device": {
                    "value": "emission_scores.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_564": {
                "variable": {
                    "value": "log_det",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "features.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_776": {
                "variable": {
                    "value": "self.initial_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_783": {
                "variable": {
                    "value": "self.transition_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_801": {
                "variable": {
                    "value": "self.length_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_808": {
                "variable": {
                    "value": "self.encoder_to_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args.sm_component_z_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_853": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "features.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "features.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_854": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "features.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "features.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_864": {
                "variable": {
                    "value": "valid_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "component_embeddings.weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_892": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(emb, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_916": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.initial_weights(class_embeddings)",
                            "Call"
                        ],
                        [
                            "x.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(constraints.unsqueeze(0).expand_as(x), BIG_NEG)",
                            "Call"
                        ],
                        [
                            "x + self.transition_bias[valid_classes].unsqueeze(0).unsqueeze(-1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "self.transition_weights(class_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bfe,bte->btf', [x, class_embeddings])",
                            "Call"
                        ],
                        [
                            "x.masked_fill(constraints.unsqueeze(0).expand_as(x), BIG_NEG)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(torch.eye(len(valid_classes), device=x.device).bool().unsqueeze(0).expand_as(x), BIG_NEG)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_940": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.initial_weights(class_embeddings)",
                            "Call"
                        ],
                        [
                            "x.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(constraints.unsqueeze(0).expand_as(x), BIG_NEG)",
                            "Call"
                        ],
                        [
                            "x + self.transition_bias[valid_classes].unsqueeze(0).unsqueeze(-1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "self.transition_weights(class_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bfe,bte->btf', [x, class_embeddings])",
                            "Call"
                        ],
                        [
                            "x.masked_fill(constraints.unsqueeze(0).expand_as(x), BIG_NEG)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(torch.eye(len(valid_classes), device=x.device).bool().unsqueeze(0).expand_as(x), BIG_NEG)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_49": {
                "input": {
                    "value": "self.lin1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_177": {
                "size": {
                    "value": "(self.n_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_185": {
                "size": {
                    "value": "(self.n_classes, self.n_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_233": {
                "ndarray": {
                    "value": "init_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(stats['span_start_counts'] + self.args.sm_supervised_state_smoothing) / float(stats['instance_count'] + self.args.sm_supervised_state_smoothing * self.n_classes)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_242": {
                "ndarray": {
                    "value": "trans_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "smoothed_trans_counts / smoothed_trans_counts.sum(axis=0)[None, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_248": {
                "ndarray": {
                    "value": "mean_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(stats_merged['span_lengths'] + self.args.sm_supervised_length_smoothing) / (stats_merged['span_counts'] + self.args.sm_supervised_length_smoothing)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_252": {
                "ndarray": {
                    "value": "emission_gmm_merged.means_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_256": {
                "input": {
                    "value": "torch.from_numpy(emission_gmm_merged.covariances_[0]).to(device=self.gaussian_cov.device).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_390": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_392": {
                "input": {
                    "value": "log_rates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.poisson_log_rates[class_indices]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_551": {
                "*size": {
                    "value": "features.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "EmbeddingBag_760": {
                "num_embeddings": {
                    "value": "self.n_components",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_787": {
                "in_features": {
                    "value": "self.embedding_and_z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_790": {
                "in_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_792": {
                "*size": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_794": {
                "in_features": {
                    "value": "self.structure_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_797": {
                "in_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_883": {
                "data": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(b)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "device": {
                    "value": "component_embeddings.weight.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_884": {
                "data": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[offset]",
                            "List"
                        ],
                        [
                            "offsets[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "component_embeddings.weight.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_256": {
                "ndarray": {
                    "value": "emission_gmm_merged.covariances_[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_317": {
                "n": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(valid_classes)",
                            "Call"
                        ],
                        [
                            "self.n_classes",
                            "Attribute"
                        ],
                        [
                            "log_rates.size(-1)",
                            "Call"
                        ],
                        [
                            "self.n_classes",
                            "Attribute"
                        ],
                        [
                            "len(valid_classes)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.transition_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_527": {
                "size": {
                    "value": "[b, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "spans.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_529": {
                "start": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_776": {
                "*size": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_783": {
                "*size": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_801": {
                "*size": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_936": {
                "n": {
                    "value": "len(valid_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_936": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_841": {
                "input": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[:, self.z_dim:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pow_841": {
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.mean(dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "params[:, :self.z_dim]",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/sequential.py": {
        "torch": {
            "LSTM_21": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "args.seq_num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_27": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['features'].squeeze(0)",
                            "Call"
                        ],
                        [
                            "batch['features'].squeeze(0)",
                            "Call"
                        ],
                        [
                            "batch['features'].squeeze(0)",
                            "Call"
                        ],
                        [
                            "batch['features']",
                            "Subscript"
                        ],
                        [
                            "features.cuda()",
                            "Call"
                        ],
                        [
                            "batch['features']",
                            "Subscript"
                        ],
                        [
                            "features.cuda()",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['lengths']",
                            "Subscript"
                        ],
                        [
                            "lengths.cuda()",
                            "Call"
                        ],
                        [
                            "batch['lengths']",
                            "Subscript"
                        ],
                        [
                            "lengths.cuda()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_29": {
                "variable": {
                    "value": "(encoded, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "encoded_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "output_padding_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_249": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.seq_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_285": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "IGNORE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-100",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "full_like_260": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj(encoded)",
                            "Call"
                        ],
                        [
                            "logits + mask",
                            "BinOp"
                        ],
                        [
                            "self.model(features, lengths, valid_classes_per_instance=task_indices)",
                            "Call"
                        ],
                        [
                            "self.model(features, lengths, valid_classes_per_instance=task_indices)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_303": {
                "start": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features.size(1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/test_semimarkov.py": {
        "torch": {
            "device_12": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_114": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ToyDataset(*synthetic_data(num_data_points=N_train, C=C, N=N, K=K, num_classes_per_instance=num_classes_per_instance), max_k=MAX_K)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "features.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_119": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ToyDataset(*synthetic_data(num_data_points=N_test, C=C, N=N, K=K, num_classes_per_instance=num_classes_per_instance), max_k=MAX_K)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "features.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_125": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randint_261": {
                "variable": {
                    "value": "rand_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(5, 20)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "full_289": {
                "variable": {
                    "value": "lengths_unpadded",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(b,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_297": {
                "variable": {
                    "value": "trans_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "full_298": {
                "variable": {
                    "value": "init_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(C,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "BIG_NEG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1000000000.0",
                            "UnaryOp"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "full_301": {
                "variable": {
                    "value": "emission_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(b, padded_length, C)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "BIG_NEG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1000000000.0",
                            "UnaryOp"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "full_307": {
                "variable": {
                    "value": "length_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(K, C)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "BIG_NEG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1000000000.0",
                            "UnaryOp"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_45": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(_batch_size, _N, C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_46": {
                "variable": {
                    "value": "shift",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((_batch_size, _N, C))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_322": {
                "variable": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "allclose_318": {
                "input": {
                    "value": "sequence[:, step_length * step]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.full((1,), c).long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_323": {
                "input": {
                    "value": "sequence[batch_indices, lengths - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.full((1,), C).long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_318": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n // step_length % C",
                            "BinOp"
                        ],
                        [
                            "step % C",
                            "BinOp"
                        ]
                    ]
                }
            },
            "full_323": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}