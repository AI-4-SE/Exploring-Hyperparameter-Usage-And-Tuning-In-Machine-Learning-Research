{
    "examples/demo_tensorflow.py": {
        "tensorflow": {
            "Session_10": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_11": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_12": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_26": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_14": {
                "ys": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Sig(a, b)",
                            "Call"
                        ],
                        [
                            "LogSig(a, s, 'x') if expanded else LogSig(a, s)",
                            "IfExp"
                        ]
                    ]
                },
                "xs": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_32": {
                "ys": {
                    "value": "tf.reduce_sum(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_32": {
                "input_tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Sig(a, b)",
                            "Call"
                        ],
                        [
                            "LogSig(a, s, 'x') if expanded else LogSig(a, s)",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "examples/iisignature_tensorflow.py": {
        "tensorflow": {
            "get_default_graph_85": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_92": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_99": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "py_func_38": {
                "func": {
                    "value": "_sigGradImp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_sigGradImp",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[grad] + list(op.inputs)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "SigGrad",
                    "type": "str",
                    "possible_values": []
                }
            },
            "py_func_51": {
                "func": {
                    "value": "_sigScaleGradImp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_sigScaleGradImp",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[grad] + list(op.inputs)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32] * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "SigScaleGrad",
                    "type": "str",
                    "possible_values": []
                }
            },
            "py_func_55": {
                "func": {
                    "value": "_sigJoinGradImp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_sigJoinGradImp",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[grad] + list(op.inputs)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32] * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "SigJoinGrad",
                    "type": "str",
                    "possible_values": []
                }
            },
            "py_func_59": {
                "func": {
                    "value": "_sigJoinGradFixedImp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_sigJoinGradFixedImp",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[grad] + list(op.inputs)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32] * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "SigJoinGradFixed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_default_graph_107": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_112": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "py_func_47": {
                "func": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_logSigGradImp(self.s, self.method)",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[grad] + list(op.inputs)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "LogSigGrad",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RegisterGradient_84": {
                "op_type": {
                    "value": "rnd_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, 100000000.0))",
                            "BinOp"
                        ],
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, 100000000.0))",
                            "BinOp"
                        ],
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, 100000000.0))",
                            "BinOp"
                        ],
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, 100000000.0))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "py_func_87": {
                "func": {
                    "value": "_sigImp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_sigImp",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[x, m]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Sig",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RegisterGradient_91": {
                "op_type": {
                    "value": "rnd_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, 100000000.0))",
                            "BinOp"
                        ],
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, 100000000.0))",
                            "BinOp"
                        ],
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, 100000000.0))",
                            "BinOp"
                        ],
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, 100000000.0))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "py_func_94": {
                "func": {
                    "value": "_logSigImp(s, method)",
                    "type": "Call",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "LogSig",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RegisterGradient_98": {
                "op_type": {
                    "value": "rnd_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, 100000000.0))",
                            "BinOp"
                        ],
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, 100000000.0))",
                            "BinOp"
                        ],
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, 100000000.0))",
                            "BinOp"
                        ],
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, 100000000.0))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "py_func_101": {
                "func": {
                    "value": "_sigScaleImp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_sigScaleImp",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[x, y, m]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "SigScale",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RegisterGradient_106": {
                "op_type": {
                    "value": "rnd_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, 100000000.0))",
                            "BinOp"
                        ],
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, 100000000.0))",
                            "BinOp"
                        ],
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, 100000000.0))",
                            "BinOp"
                        ],
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, 100000000.0))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "py_func_109": {
                "func": {
                    "value": "_sigJoinImp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_sigJoinImp",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[x, y, m]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "SigJoin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RegisterGradient_111": {
                "op_type": {
                    "value": "rnd_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, 100000000.0))",
                            "BinOp"
                        ],
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, 100000000.0))",
                            "BinOp"
                        ],
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, 100000000.0))",
                            "BinOp"
                        ],
                        [
                            "'PyFuncGrad' + str(np.random.randint(0, 100000000.0))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "py_func_114": {
                "func": {
                    "value": "_sigJoinFixedImp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_sigJoinFixedImp",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[x, y, m, fixedLast]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "SigJoin",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "examples/demo_rnn_torch.py": {
        "torch": {
            "MSELoss_14": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "finalLayer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_27": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(rnn.parameters(), finalLayer.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "examples/demo_torch.py": {
        "torch": {
            "randn_12": {
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_15": {
                "*size": {
                    "value": "result.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_33": {
                "*size": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_34": {
                "*size": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_37": {
                "*size": {
                    "value": "result.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_43": {
                "*size": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_44": {
                "*size": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_47": {
                "*size": {
                    "value": "result.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_53": {
                "*size": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_54": {
                "*size": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_55": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_58": {
                "*size": {
                    "value": "result.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_22": {
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_28": {
                "*size": {
                    "value": "result.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/iisignature_recurrent_torch.py": {
        "torch": {
            "Linear_30": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.n_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "saved_data_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.n_units * (1 + self.sigsize if self.use_signatures else 1)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.n_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.log_timelapse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([math.log(initial_time_lapse)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sigs, raw_output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_65": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "lengths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "lengths[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_46": {
                "tensors": {
                    "value": "[prev_sigs, prev_states]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_52": {
                "input": {
                    "value": "self.log_timelapse",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/iisignature_torch.py": {
        "torch": {}
    }
}