{
    "experiment.py": {
        "sklearn": {
            "check_random_state_53": {
                "variable": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "train_test_split_88": {
                "variable": {
                    "value": "(X_train, X_valid, y_train, y_valid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_train",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "valid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "valid_size",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(random_seed)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "DataLoader_229": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(torch.Tensor(X_train), torch.Tensor(y_train))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_246": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(torch.Tensor(X_test), torch.Tensor(y_test))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_54": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_64": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:%d' % gpu_device",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SGD_213": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_decay",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_232": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(torch.Tensor(X_valid), torch.Tensor(y_valid))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_254": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrain.best_checkpoint_filename.format(epoch=best_epoch)",
                            "Call"
                        ],
                        [
                            "expt.best_checkpoint_filename.format(epoch=best_epoch)",
                            "Call"
                        ],
                        [
                            "expt.best_checkpoint_filename.format(epoch=best_epoch)",
                            "Call"
                        ],
                        [
                            "join(logging_path, 'bound_checkpoint_epoch.ckpt')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_281": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrain.best_checkpoint_filename.format(epoch=best_epoch)",
                            "Call"
                        ],
                        [
                            "expt.best_checkpoint_filename.format(epoch=best_epoch)",
                            "Call"
                        ],
                        [
                            "expt.best_checkpoint_filename.format(epoch=best_epoch)",
                            "Call"
                        ],
                        [
                            "join(logging_path, 'bound_checkpoint_epoch.ckpt')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_63": {
                "device": {
                    "value": "gpu_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gpu_device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_159": {
                "variable": {
                    "value": "pre_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pre_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_172": {
                "variable": {
                    "value": "pretrain_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(torch.Tensor(X_valid), torch.Tensor(y_valid))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_188": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrain.best_checkpoint_filename.format(epoch=best_epoch)",
                            "Call"
                        ],
                        [
                            "expt.best_checkpoint_filename.format(epoch=best_epoch)",
                            "Call"
                        ],
                        [
                            "expt.best_checkpoint_filename.format(epoch=best_epoch)",
                            "Call"
                        ],
                        [
                            "join(logging_path, 'bound_checkpoint_epoch.ckpt')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_215": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_decay",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TensorDataset_229": {
                "*tensors": {
                    "value": "torch.Tensor(X_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_246": {
                "*tensors": {
                    "value": "torch.Tensor(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_232": {
                "*tensors": {
                    "value": "torch.Tensor(X_valid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_172": {
                "*tensors": {
                    "value": "torch.Tensor(X_valid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_245": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_172": {}
        }
    },
    "launch.py": {
        "sklearn": {
            "ParameterGrid_37": {
                "variable": {
                    "value": "param_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "[{'network': ['pbgnet'], 'dataset': datasets, 'hidden_size': hidden_size, 'sample_size': sample_size, 'batch_size': batch_size, 'weight_decay': [0.0], 'prior': ['init'], 'learning_rate': learning_rate, 'optim_algo': ['adam'], 'valid_size': valid_size, 'pre_epochs': [0], 'hidden_layers': hidden_layers, 'random_seed': random_seed}, {'network': ['pbgnet'], 'dataset': datasets, 'hidden_size': hidden_size, 'sample_size': sample_size, 'batch_size': batch_size, 'weight_decay': [0.0], 'prior': ['pretrain'], 'learning_rate': learning_rate, 'optim_algo': ['adam'], 'valid_size': [0.5], 'pre_epochs': pre_epochs, 'hidden_layers': hidden_layers, 'random_seed': random_seed}, {'network': ['pbgnet_ll'], 'dataset': datasets, 'hidden_size': hidden_size, 'sample_size': sample_size, 'batch_size': batch_size, 'weight_decay': weight_decay, 'prior': ['init'], 'learning_rate': learning_rate, 'optim_algo': ['adam'], 'valid_size': valid_size, 'pre_epochs': [0], 'hidden_layers': hidden_layers, 'random_seed': random_seed}, {'network': ['baseline'], 'dataset': datasets, 'hidden_size': hidden_size, 'sample_size': [0], 'batch_size': batch_size, 'weight_decay': weight_decay, 'prior': ['zero'], 'learning_rate': learning_rate, 'optim_algo': optim_algo, 'valid_size': valid_size, 'pre_epochs': [0], 'hidden_layers': hidden_layers, 'random_seed': random_seed}]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "pbgdeep/dataset_loader.py": {
        "sklearn": {
            "check_random_state_20": {
                "variable": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_breast_cancer_39": {
                "variable": {
                    "value": "breast",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_40": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelEncoder_90": {
                "variable": {
                    "value": "le",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_95": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelEncoder_109": {
                "variable": {
                    "value": "le",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_119": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_42": {
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "self.test_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "train_test_split_55": {
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "self.test_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "train_test_split_85": {
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "self.test_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "train_test_split_97": {
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "self.test_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "train_test_split_121": {
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "self.test_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pbgdeep/networks.py": {
        "torch": {
            "linear_16": {
                "variable": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer(input)",
                            "Call"
                        ],
                        [
                            "layer(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_46": {
                "variable": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "erf_47": {
                "variable": {
                    "value": "erf_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "linear / math.sqrt(2 * input.shape[1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_86": {
                "variable": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "erf_87": {
                "variable": {
                    "value": "erf_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "linear / math.sqrt(2 * input.shape[1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_87": {
                "variable": {
                    "value": "erf_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_134": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_135": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ParameterDict_137": {
                "variable": {
                    "value": "self.priors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "{'weight': Parameter(torch.Tensor([0.0]), requires_grad=False), 'bias': Parameter(torch.Tensor([0.0]), requires_grad=False)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Parameter_174": {
                "variable": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_177": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_192": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_247": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_271": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_272": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ParameterDict_274": {
                "variable": {
                    "value": "self.priors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "{'weight': Parameter(torch.Tensor([0.0]), requires_grad=False), 'bias': Parameter(torch.Tensor([0.0]), requires_grad=False)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "erf_303": {
                "variable": {
                    "value": "erf_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.linear(self.s, self.weight, self.bias) / math.sqrt(2 * self.in_features)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_303": {
                "variable": {
                    "value": "erf_value",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "erf_316": {
                "variable": {
                    "value": "erf_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.linear(self.s, self.weight, self.bias) / math.sqrt(2 * self.in_features)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_316": {
                "variable": {
                    "value": "erf_value",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_337": {
                "variable": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_340": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_354": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_21": {
                "variable": {
                    "value": "exp_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-(linear / (math.sqrt(2) * torch.norm(input, dim=1, keepdim=True))) ** 2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "erf_26": {
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear / (math.sqrt(2) * torch.norm(input, dim=1, keepdim=True))",
                            "BinOp"
                        ],
                        [
                            "F.linear(input, self.weight, self.bias) / (math.sqrt(2) * torch.norm(input, dim=1, keepdim=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_52": {
                "variable": {
                    "value": "exp_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-(linear / math.sqrt(2 * input.shape[1])) ** 2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_92": {
                "variable": {
                    "value": "exp_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-(linear / math.sqrt(2 * input.shape[1])) ** 2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_92": {
                "variable": {
                    "value": "exp_value",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_211": {
                "variable": {
                    "value": "layer.priors[weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "state_dict[f'layers.{i}.weight'].data.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_212": {
                "variable": {
                    "value": "layer.priors[bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "state_dict[f'layers.{i}.bias'].data.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "erf_292": {
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear / (math.sqrt(2) * torch.norm(input, dim=1, keepdim=True))",
                            "BinOp"
                        ],
                        [
                            "F.linear(input, self.weight, self.bias) / (math.sqrt(2) * torch.norm(input, dim=1, keepdim=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_373": {
                "variable": {
                    "value": "layer.priors[weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "state_dict[f'layers.{i}.weight'].data.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_374": {
                "variable": {
                    "value": "layer.priors[bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "state_dict[f'layers.{i}.bias'].data.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "linear_291": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer(input)",
                            "Call"
                        ],
                        [
                            "layer(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_17": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer(input)",
                            "Call"
                        ],
                        [
                            "layer(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bernoulli_44": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proba.unsqueeze(-1).expand(*proba.shape, sample_size)",
                            "Call"
                        ],
                        [
                            "2 * torch.bernoulli(s) - 1",
                            "BinOp"
                        ],
                        [
                            "proba.unsqueeze(-1).expand(*proba.shape, sample_size)",
                            "Call"
                        ],
                        [
                            "2 * torch.bernoulli(s) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "bernoulli_84": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proba.unsqueeze(-1).expand(*proba.shape, sample_size)",
                            "Call"
                        ],
                        [
                            "2 * torch.bernoulli(s) - 1",
                            "BinOp"
                        ],
                        [
                            "proba.unsqueeze(-1).expand(*proba.shape, sample_size)",
                            "Call"
                        ],
                        [
                            "2 * torch.bernoulli(s) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_137": {
                "data": {
                    "value": "torch.Tensor([0.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_138": {
                "data": {
                    "value": "torch.Tensor([0.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_245": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.hidden_layers[:-1], self.hidden_layers[1:])",
                            "Call"
                        ],
                        [
                            "zip([self.input_size, *self.hidden_layers], [*self.hidden_layers, 1])",
                            "Call"
                        ],
                        [
                            "zip(self.hidden_layers[:-1], self.hidden_layers[1:])",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.hidden_layers[:-1], self.hidden_layers[1:])",
                            "Call"
                        ],
                        [
                            "zip([self.input_size, *self.hidden_layers], [*self.hidden_layers, 1])",
                            "Call"
                        ],
                        [
                            "zip(self.hidden_layers[:-1], self.hidden_layers[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_274": {
                "data": {
                    "value": "torch.Tensor([0.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_275": {
                "data": {
                    "value": "torch.Tensor([0.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_291": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer(input)",
                            "Call"
                        ],
                        [
                            "layer(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_202": {
                "input": {
                    "value": "layer.weight - layer.priors['weight']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_203": {
                "input": {
                    "value": "layer.bias - layer.priors['bias']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_364": {
                "input": {
                    "value": "layer.weight - layer.priors['weight']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_365": {
                "input": {
                    "value": "layer.bias - layer.priors['bias']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_22": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer(input)",
                            "Call"
                        ],
                        [
                            "layer(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "linear_303": {
                "input": {
                    "value": "self.s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_316": {
                "input": {
                    "value": "self.s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_21": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer(input)",
                            "Call"
                        ],
                        [
                            "layer(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_23": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer(input)",
                            "Call"
                        ],
                        [
                            "layer(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pbgdeep/utils.py": {
        "torch": {
            "mean_8": {
                "input": {
                    "value": "(1 - y * pred_y) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_22": {
                "input": {
                    "value": "-C * linear_loss - 1 / n_examples * (kl + math.log(2 * math.sqrt(n_examples) / delta))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_21": {
                "input": {
                    "value": "-C",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_60": {
                "input": {
                    "value": "self.network.t",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}