{
    "dmmfods/utils/Dense_U_Net_lidar_helper.py": {
        "tensorflow": {
            "norm_528": {
                "variable": {
                    "value": "points_all_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "points_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate(points, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_529": {
                "variable": {
                    "value": "cp_points_all_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "cp_points_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate(cp_points, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_530": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cp_points_all_tensor[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_531": {
                "variable": {
                    "value": "cp_points_all_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.gather_nd(cp_points_all_tensor, tf.where(mask))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_533": {
                "variable": {
                    "value": "points_all_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "points_all_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(points_all, axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(points_all_tensor, tf.where(mask))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.where(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_534": {
                "variable": {
                    "value": "lidar_array",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cp_points_all_tensor[..., 1:3], points_all_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "enable_eager_execution_559": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_nd_531": {
                "params": {
                    "value": "cp_points_all_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(cp_points_all, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.gather_nd(cp_points_all_tensor, tf.where(mask)), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.where(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_533": {
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(cp_points_all_tensor[..., 0], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordDataset_589": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "os.path.join(data_root, tf_dir, file)",
                    "type": "Call",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_532": {
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(cp_points_all_tensor[..., 0], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_jpeg_604": {
                "contents": {
                    "value": "image.image",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "sum_334": {
                "variable": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "est_bool & gt_bool",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_335": {
                "variable": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "est_bool | gt_bool",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_359": {
                "variable": {
                    "value": "iou_per_instance_per_class",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ground_truth_map_batch.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "ground_truth_map_batch.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "AvgPool2d_435": {
                "variable": {
                    "value": "avg_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_443": {
                "variable": {
                    "value": "max_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_480": {
                "variable": {
                    "value": "max_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(20, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(10, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_484": {
                "variable": {
                    "value": "lidar_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lidar_tensor.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_484": {
                "variable": {
                    "value": "lidar_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_688": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(config.dataset.batch_size, 7, 128, 192)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_743": {
                "variable": {
                    "value": "heatmaps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size_maps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_399": {
                "input": {
                    "value": "bin_pred == bin_gt",
                    "type": "Compare",
                    "possible_values": []
                },
                "axis": {
                    "value": "axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, 2)",
                            "Tuple"
                        ],
                        [
                            "(0, 2, 3)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "save_428": {
                "obj": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_ground_truth_maps(label_dict)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "join(dir, file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_501": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_717": {
                "variable": {
                    "value": "vec[j, :3, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "join(config.dir.data.root, files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_718": {
                "variable": {
                    "value": "vec[j, 3, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "lidar_file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "join(config.dir.data.root, path, 'lidar/lidar_img_' + image)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_719": {
                "variable": {
                    "value": "vec[j, 4:, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "heat_map_file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "join(config.dir.data.root, path, 'heat_maps/heat_map_img_' + image)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_725": {
                "obj": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((config.dataset.batch_size, 7, 128, 192))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "join(save_dir_batch, str(i % 99))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_607": {
                "obj": {
                    "value": "downsized_img_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "avgpool_tensor(torch.Tensor(np_img))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path_images, img_filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_622": {
                "obj": {
                    "value": "downsized_range_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool_lidar_tensor(range_tensor)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path_lidar, lidar_filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_646": {
                "obj": {
                    "value": "downsized_heat_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maxpool_tensor(heat_map)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path_heat_maps, heat_map_filename)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "dmmfods/agents/Dense_U_Net_lidar_Agent.py": {
        "torch": {
            "BCEWithLogitsLoss_54": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_57": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optimizer.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(self.config.optimizer.beta1, self.config.optimizer.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.config.optimizer.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optimizer.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "self.config.optimizer.amsgrad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_76": {
                "variable": {
                    "value": "self.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_93": {
                "variable": {
                    "value": "self.train_summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.config.dir.current_run.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "comment": {
                    "value": "Dense_U_Net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SummaryWriter_94": {
                "variable": {
                    "value": "self.val_summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.config.dir.current_run.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "comment": {
                    "value": "Dense_U_Net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_230": {
                "variable": {
                    "value": "epoch_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(number_of_batches, self.config.model.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_231": {
                "variable": {
                    "value": "epoch_iou",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(number_of_batches, self.config.model.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_232": {
                "variable": {
                    "value": "epoch_iou_nans",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(number_of_batches, self.config.model.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_233": {
                "variable": {
                    "value": "epoch_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(number_of_batches, self.config.model.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_301": {
                "variable": {
                    "value": "avg_epoch_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epoch_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((number_of_batches, self.config.model.num_classes)).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros((number_of_batches, self.config.model.num_classes)).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_302": {
                "variable": {
                    "value": "avg_epoch_iou",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epoch_iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((number_of_batches, self.config.model.num_classes))",
                            "Call"
                        ],
                        [
                            "torch.zeros((number_of_batches, self.config.model.num_classes))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_303": {
                "variable": {
                    "value": "cum_epoch_nans",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epoch_iou_nans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((number_of_batches, self.config.model.num_classes))",
                            "Call"
                        ],
                        [
                            "torch.zeros((number_of_batches, self.config.model.num_classes))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_304": {
                "variable": {
                    "value": "avg_epoch_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epoch_acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((number_of_batches, self.config.model.num_classes)).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros((number_of_batches, self.config.model.num_classes)).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_328": {
                "variable": {
                    "value": "epoch_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(number_of_batches, self.config.model.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_329": {
                "variable": {
                    "value": "epoch_iou",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(number_of_batches, self.config.model.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_330": {
                "variable": {
                    "value": "epoch_iou_nans",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(number_of_batches, self.config.model.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_331": {
                "variable": {
                    "value": "epoch_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(number_of_batches, self.config.model.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_388": {
                "variable": {
                    "value": "avg_epoch_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epoch_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((number_of_batches, self.config.model.num_classes)).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros((number_of_batches, self.config.model.num_classes)).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_389": {
                "variable": {
                    "value": "avg_epoch_iou",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epoch_iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((number_of_batches, self.config.model.num_classes))",
                            "Call"
                        ],
                        [
                            "torch.zeros((number_of_batches, self.config.model.num_classes))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_390": {
                "variable": {
                    "value": "cum_epoch_nans",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epoch_iou_nans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((number_of_batches, self.config.model.num_classes))",
                            "Call"
                        ],
                        [
                            "torch.zeros((number_of_batches, self.config.model.num_classes))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_391": {
                "variable": {
                    "value": "avg_epoch_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epoch_acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((number_of_batches, self.config.model.num_classes)).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros((number_of_batches, self.config.model.num_classes)).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StepLR_65": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "self.config.optimizer.lr_scheduler.every_n_epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.config.optimizer.lr_scheduler.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_78": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_82": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_122": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{self.config.agent.checkpoint.epoch: self.current_epoch, self.config.agent.checkpoint.train_iteration: self.current_train_iteration, self.config.agent.checkpoint.val_iteration: self.current_val_iteration, self.config.agent.checkpoint.best_val_iou: self.best_val_iou, self.config.agent.checkpoint.state_dict: self.model.state_dict(), self.config.agent.checkpoint.optimizer: self.optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.config.dir.current_run.checkpoints, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_144": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.config.dir.current_run.checkpoints, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_248": {
                "variable": {
                    "value": "loss_per_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "current_loss.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(0, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_253": {
                "variable": {
                    "value": "iou_per_class",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nanmean(iou_per_instance_per_class, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_256": {
                "variable": {
                    "value": "epoch_iou_nans[current_batch, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.isnan(iou_per_instance_per_class)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_346": {
                "variable": {
                    "value": "loss_per_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "current_loss.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(0, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_351": {
                "variable": {
                    "value": "iou_per_class",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nanmean(iou_per_instance_per_class, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_354": {
                "variable": {
                    "value": "epoch_iou_nans[current_batch, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.isnan(iou_per_instance_per_class)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_79": {
                "seed": {
                    "value": "self.config.agent.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_83": {
                "seed": {
                    "value": "self.config.agent.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_254": {
                "input": {
                    "value": "iou_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.nanmean(iou_per_instance_per_class, axis=0))",
                            "Call"
                        ],
                        [
                            "torch.tensor(np.nanmean(iou_per_instance_per_class, axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_256": {
                "input": {
                    "value": "iou_per_instance_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.compute_IoU_whole_img_batch(prediction.detach(), ht_map.detach(), self.config.agent.iou_threshold)",
                            "Call"
                        ],
                        [
                            "utils.compute_IoU_whole_img_batch(prediction.detach(), ht_map.detach(), self.config.agent.iou_threshold)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_264": {
                "input": {
                    "value": "current_loss.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_272": {
                "input": {
                    "value": "loss_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(current_loss.detach(), dim=(0, 2, 3))",
                            "Call"
                        ],
                        [
                            "torch.sum(current_loss.detach(), dim=(0, 2, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_279": {
                "input": {
                    "value": "acc_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.compute_accuracy(ht_map.detach(), prediction.detach(), self.config.agent.iou_threshold)",
                            "Call"
                        ],
                        [
                            "utils.compute_accuracy(ht_map.detach(), prediction.detach(), self.config.agent.iou_threshold)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_286": {
                "input": {
                    "value": "iou_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.nanmean(iou_per_instance_per_class, axis=0))",
                            "Call"
                        ],
                        [
                            "torch.tensor(np.nanmean(iou_per_instance_per_class, axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_352": {
                "input": {
                    "value": "iou_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.nanmean(iou_per_instance_per_class, axis=0))",
                            "Call"
                        ],
                        [
                            "torch.tensor(np.nanmean(iou_per_instance_per_class, axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_354": {
                "input": {
                    "value": "iou_per_instance_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.compute_IoU_whole_img_batch(prediction.detach(), ht_map.detach(), self.config.agent.iou_threshold)",
                            "Call"
                        ],
                        [
                            "utils.compute_IoU_whole_img_batch(prediction.detach(), ht_map.detach(), self.config.agent.iou_threshold)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_365": {
                "input": {
                    "value": "loss_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(current_loss.detach(), dim=(0, 2, 3))",
                            "Call"
                        ],
                        [
                            "torch.sum(current_loss.detach(), dim=(0, 2, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_372": {
                "input": {
                    "value": "acc_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.compute_accuracy(ht_map.detach(), prediction.detach(), self.config.agent.iou_threshold)",
                            "Call"
                        ],
                        [
                            "utils.compute_accuracy(ht_map.detach(), prediction.detach(), self.config.agent.iou_threshold)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_379": {
                "input": {
                    "value": "iou_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.nanmean(iou_per_instance_per_class, axis=0))",
                            "Call"
                        ],
                        [
                            "torch.tensor(np.nanmean(iou_per_instance_per_class, axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dmmfods/agents/FasterRCNNAgent.py": {
        "torch": {
            "BCEWithLogitsLoss_89": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_92": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optimizer.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(self.config.optimizer.beta1, self.config.optimizer.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.config.optimizer.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optimizer.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "self.config.optimizer.amsgrad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_112": {
                "variable": {
                    "value": "self.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_129": {
                "variable": {
                    "value": "self.train_summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.config.dir.current_run.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "comment": {
                    "value": "FasterRCNNResNet50",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SummaryWriter_131": {
                "variable": {
                    "value": "self.val_summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.config.dir.current_run.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "comment": {
                    "value": "FasterRCNNResNet50",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_269": {
                "variable": {
                    "value": "epoch_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "number_of_batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.data_loader.train_loader.dataset.__len__()",
                            "Call"
                        ],
                        [
                            "self.data_loader.valid_loader.dataset.__len__()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_320": {
                "variable": {
                    "value": "avg_epoch_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epoch_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(number_of_batches).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros((number_of_batches, self.config.model.num_classes)).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_343": {
                "variable": {
                    "value": "epoch_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(number_of_batches, self.config.model.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_344": {
                "variable": {
                    "value": "epoch_iou",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(number_of_batches, self.config.model.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_345": {
                "variable": {
                    "value": "epoch_iou_nans",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(number_of_batches, self.config.model.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_346": {
                "variable": {
                    "value": "epoch_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(number_of_batches, self.config.model.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_428": {
                "variable": {
                    "value": "avg_epoch_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epoch_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(number_of_batches).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros((number_of_batches, self.config.model.num_classes)).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_429": {
                "variable": {
                    "value": "avg_epoch_iou",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epoch_iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((number_of_batches, self.config.model.num_classes))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_430": {
                "variable": {
                    "value": "cum_epoch_nans",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epoch_iou_nans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((number_of_batches, self.config.model.num_classes))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_431": {
                "variable": {
                    "value": "avg_epoch_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epoch_acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((number_of_batches, self.config.model.num_classes)).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "model_in_layer[weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(model_in_layer['weight'], nn.init.kaiming_normal_(torch.ones((64, 1, 7, 7))))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "variable": {
                    "value": "self.model.backbone.body.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "StepLR_101": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "self.config.optimizer.lr_scheduler.every_n_epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.config.optimizer.lr_scheduler.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_114": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_118": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_160": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{self.config.agent.checkpoint.epoch: self.current_epoch, self.config.agent.checkpoint.train_iteration: self.current_train_iteration, self.config.agent.checkpoint.val_iteration: self.current_val_iteration, self.config.agent.checkpoint.best_val_iou: self.best_val_iou, self.config.agent.checkpoint.state_dict: self.model.state_dict(), self.config.agent.checkpoint.optimizer: self.optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.config.dir.current_run.checkpoints, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_182": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.config.dir.current_run.checkpoints, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_375": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ht_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tqdm_batch",
                            "variable"
                        ],
                        [
                            "ht_map.cuda(non_blocking=self.config.loader.async_loading)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_384": {
                "variable": {
                    "value": "loss_per_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "current_loss.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(0, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_390": {
                "variable": {
                    "value": "iou_per_class",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.nanmean(iou_per_instance_per_class, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_393": {
                "variable": {
                    "value": "epoch_iou_nans[current_batch, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.isnan(iou_per_instance_per_class)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_115": {
                "seed": {
                    "value": "self.config.agent.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_119": {
                "seed": {
                    "value": "self.config.agent.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_295": {
                "tensors": {
                    "value": "(image, lidar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_369": {
                "tensors": {
                    "value": "(image, lidar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_391": {
                "input": {
                    "value": "iou_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.nanmean(iou_per_instance_per_class, axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_393": {
                "input": {
                    "value": "iou_per_instance_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.compute_IoU_whole_img_batch(prediction.detach(), ht_map.detach(), self.config.agent.iou_threshold)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_405": {
                "input": {
                    "value": "loss_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(current_loss.detach(), dim=(0, 2, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_412": {
                "input": {
                    "value": "acc_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.compute_accuracy(ht_map.detach(), prediction.detach(), self.config.agent.iou_threshold)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_419": {
                "input": {
                    "value": "iou_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.nanmean(iou_per_instance_per_class, axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "any_379": {
                "input": {
                    "value": "class_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_prediction['labels'] == obj_class",
                            "Compare"
                        ]
                    ]
                }
            },
            "max_380": {
                "variable": {
                    "value": "(prediction[sample_i, obj_class], _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_prediction['masks'][class_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_80": {
                "*size": {
                    "value": "(64, 1, 7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "dmmfods/datasets/FasterRCNNData.py": {
        "torch": {
            "zeros_61": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(current_sample), 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(current_sample)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(current_sample), *self.img_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_tensor_97": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx.tolist()",
                            "Call"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_103": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "join(self.root, self.files[self.counter])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_131": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WaymoDataset('train', config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.loader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.loader.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "config.loader.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "config.loader.drop_last",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_136": {
                "variable": {
                    "value": "self.valid_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WaymoDataset('val', config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.loader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.loader.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "config.loader.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "config.loader.drop_last",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "boxes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[bb['x'] / 10, bb['y'] / 10, bb['x'] / 10 + bb['width'] / 10, bb['y'] / 10 + bb['height'] / 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_156": {
                "variable": {
                    "value": "self.valid_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WaymoDataset('test', config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.loader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.loader.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "config.loader.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "config.loader.drop_last",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dmmfods/datasets/WaymoData.py": {
        "torch": {
            "load_97": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "join(self.root, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_115": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "join(self.root, self.files['images'][idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_116": {
                "variable": {
                    "value": "lidar",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "join(self.root, self.files['lidar'][idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_117": {
                "variable": {
                    "value": "ht_map",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "join(self.root, self.files['heat_maps'][idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_93": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx.tolist()",
                            "Call"
                        ],
                        [
                            "idx.tolist()",
                            "Call"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_111": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx.tolist()",
                            "Call"
                        ],
                        [
                            "idx.tolist()",
                            "Call"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_175": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WaymoDataset('train', config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.loader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.loader.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "config.loader.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "config.loader.drop_last",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_180": {
                "variable": {
                    "value": "self.valid_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WaymoDataset('val', config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.loader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.loader.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "config.loader.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "config.loader.drop_last",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_200": {
                "variable": {
                    "value": "self.valid_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WaymoDataset('test', config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.loader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.loader.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "config.loader.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "config.loader.drop_last",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dmmfods/graphs/losses/FocalLoss.py": {
        "torch": {
            "exp_44": {
                "variable": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-BCE_loss",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_82": {
                "variable": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-BCE_loss",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_84": {
                "variable": {
                    "value": "F_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(-BCE_loss)",
                            "Call"
                        ],
                        [
                            "torch.exp(-BCE_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_41": {
                "variable": {
                    "value": "BCE_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_43": {
                "variable": {
                    "value": "BCE_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_79": {
                "variable": {
                    "value": "BCE_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_81": {
                "variable": {
                    "value": "BCE_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_48": {
                "input": {
                    "value": "F_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.alpha * (1 - pt) ** self.gamma * BCE_loss",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(pt)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_89": {
                "input": {
                    "value": "F_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.alpha * (1 - pt) ** self.gamma * BCE_loss",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(pt)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dmmfods/graphs/models/Dense_U_Net_lidar.py": {
        "torch": {
            "Sequential_72": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', nn.Conv2d(self.network_input_channels, self.num_init_features, kernel_size=7, stride=2, padding=3, bias=False)), ('norm0', nn.BatchNorm2d(self.num_init_features)), ('relu0', nn.ReLU(inplace=True)), ('pool0', nn.MaxPool2d(kernel_size=3, stride=2, padding=1))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "self.dec_out_to_heat_maps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('norm0', nn.BatchNorm2d(num_features + self.stream_1_in_channels + self.stream_2_in_channels)), ('relu0', nn.ReLU(inplace=True)), ('refine0', nn.Conv2d(num_features + self.stream_1_in_channels + self.stream_2_in_channels, num_features // 2, 3, stride=1, padding=1, bias=False)), ('norm1', nn.BatchNorm2d(num_features // 2)), ('relu1', nn.ReLU(inplace=True)), ('refine1', nn.Conv2d(num_features // 2, self.num_classes, 5, stride=1, padding=2, bias=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_264": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features, features_from_enc_stack.pop())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "transp_conv_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('norm0', nn.BatchNorm2d(num_in_features)), ('relu0', nn.ReLU(inplace=True)), ('conv_reduce', nn.Conv2d(num_in_features, num_features, kernel_size=1, stride=1, padding=0, bias=False)), ('norm1', nn.BatchNorm2d(num_features)), ('relu1', nn.ReLU(inplace=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Upsample_120": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(stream_1_data, stream_2_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features, stream_2_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_117": {
                "in_channels": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_init_features",
                            "Attribute"
                        ],
                        [
                            "num_features + num_layers * self.growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "feature_size_stack.pop()",
                            "Call"
                        ],
                        [
                            "self.num_init_features",
                            "Attribute"
                        ],
                        [
                            "self.features[self.concat_after_module_idx + 1].denselayer1.norm1.num_features",
                            "Attribute"
                        ],
                        [
                            "num_features + num_layers * self.growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_init_features",
                            "Attribute"
                        ],
                        [
                            "num_features + num_layers * self.growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "feature_size_stack.pop()",
                            "Call"
                        ],
                        [
                            "self.num_init_features",
                            "Attribute"
                        ],
                        [
                            "self.features[self.concat_after_module_idx + 1].denselayer1.norm1.num_features",
                            "Attribute"
                        ],
                        [
                            "num_features + num_layers * self.growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "variable": {
                    "value": "self.stream_2_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', nn.Conv2d(self.stream_2_in_channels, self.num_init_features, kernel_size=7, stride=2, padding=3, bias=False)), ('norm0', nn.BatchNorm2d(self.num_init_features)), ('relu0', nn.ReLU(inplace=True)), ('pool0', nn.MaxPool2d(kernel_size=3, stride=2, padding=1))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_187": {
                "variable": {
                    "value": "self.concat_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('norm', nn.BatchNorm2d(num_features * 2)), ('relu', nn.ReLU(inplace=True)), ('conv', nn.Conv2d(num_features * 2, num_features, kernel_size=1, stride=1, padding=0, bias=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_258": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features, features_from_enc_stack.pop())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_228": {
                "tensors": {
                    "value": "(stream_1_data, stream_2_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "self.network_input_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_init_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "self.num_init_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_77": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_124": {
                "num_features": {
                    "value": "num_features + self.stream_1_in_channels + self.stream_2_in_channels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "num_features + self.stream_1_in_channels + self.stream_2_in_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_features // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_128": {
                "num_features": {
                    "value": "num_features // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "in_channels": {
                    "value": "num_features // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_231": {
                "tensors": {
                    "value": "(stream_1_data, stream_2_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_109": {
                "num_features": {
                    "value": "num_in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_size_stack.pop()",
                            "Call"
                        ],
                        [
                            "num_features * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_110": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "num_in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_size_stack.pop()",
                            "Call"
                        ],
                        [
                            "num_features * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_init_features",
                            "Attribute"
                        ],
                        [
                            "num_features + num_layers * self.growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "feature_size_stack.pop()",
                            "Call"
                        ],
                        [
                            "self.num_init_features",
                            "Attribute"
                        ],
                        [
                            "self.features[self.concat_after_module_idx + 1].denselayer1.norm1.num_features",
                            "Attribute"
                        ],
                        [
                            "num_features + num_layers * self.growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_113": {
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_init_features",
                            "Attribute"
                        ],
                        [
                            "num_features + num_layers * self.growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "feature_size_stack.pop()",
                            "Call"
                        ],
                        [
                            "self.num_init_features",
                            "Attribute"
                        ],
                        [
                            "self.features[self.concat_after_module_idx + 1].denselayer1.norm1.num_features",
                            "Attribute"
                        ],
                        [
                            "num_features + num_layers * self.growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_114": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "in_channels": {
                    "value": "self.stream_2_in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_init_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_159": {
                "num_features": {
                    "value": "self.num_init_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_160": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_161": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_188": {
                "num_features": {
                    "value": "num_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_189": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_190": {
                "in_channels": {
                    "value": "num_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_init_features",
                            "Attribute"
                        ],
                        [
                            "num_features + num_layers * self.growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "feature_size_stack.pop()",
                            "Call"
                        ],
                        [
                            "self.num_init_features",
                            "Attribute"
                        ],
                        [
                            "self.features[self.concat_after_module_idx + 1].denselayer1.norm1.num_features",
                            "Attribute"
                        ],
                        [
                            "num_features + num_layers * self.growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}