{
    "CSGM/mnist/mnist_estimators.py": {
        "sklearn": {
            "OrthogonalMatchingPursuit_28": {
                "variable": {
                    "value": "omp_est",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_nonzero_coefs": {
                    "value": "hparams.omp_k",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Session_46": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(hparams.n_input, hparams.num_measurements)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "A",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "y_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(hparams.batch_size, hparams.num_measurements)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_63": {
                "variable": {
                    "value": "m_loss1_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(y_batch - y_hat_batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_64": {
                "variable": {
                    "value": "m_loss2_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(y_batch - y_hat_batch) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_65": {
                "variable": {
                    "value": "zp_loss_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "z_batch ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_71": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "total_loss_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hparams.mloss1_weight * m_loss1_batch + hparams.mloss2_weight * m_loss2_batch + hparams.zprior_weight * zp_loss_batch",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_74": {
                "variable": {
                    "value": "m_loss1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "m_loss1_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.abs(y_batch - y_hat_batch), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_75": {
                "variable": {
                    "value": "m_loss2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "m_loss2_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean((y_batch - y_hat_batch) ** 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_76": {
                "variable": {
                    "value": "zp_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "zp_loss_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(z_batch ** 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_80": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_87": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_89": {
                "variable": {
                    "value": "restorer",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_dict",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Session_133": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_138": {
                "variable": {
                    "value": "restorer",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_dict",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "identity_58": {
                "variable": {
                    "value": "y_hat_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hat_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.asarray(x_hat_batch)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.asarray(x_hat_batch)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "y_hat_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_60": {
                "variable": {
                    "value": "y_hat_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_hat_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.asarray(x_hat_batch)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.asarray(x_hat_batch)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(hparams.n_input, hparams.num_measurements), name='A')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "y_hat_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_63": {
                "x": {
                    "value": "y_batch - y_hat_batch",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "CSGM/utils.py": {
        "sklearn": {
            "Lasso_626": {
                "variable": {
                    "value": "lasso_est",
                    "type": "Variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "hparams.lmbd",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "latest_checkpoint_500": {
                "variable": {
                    "value": "restore_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "base_dir + dir_name + '/'",
                            "BinOp"
                        ],
                        [
                            "pattern.format(hparams.num_measurements, 'False')",
                            "Call"
                        ],
                        [
                            "pattern.format(hparams.num_measurements, 'True')",
                            "Call"
                        ],
                        [
                            "os.path.abspath(ckpt_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_505": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "A",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[784, hparams.num_measurements]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_507": {
                "variable": {
                    "value": "model_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[A]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_540": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "base_dir + dir_name + '/'",
                            "BinOp"
                        ],
                        [
                            "pattern.format(hparams.num_measurements, 'False')",
                            "Call"
                        ],
                        [
                            "pattern.format(hparams.num_measurements, 'True')",
                            "Call"
                        ],
                        [
                            "os.path.abspath(ckpt_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "variables_initializer_645": {
                "variable": {
                    "value": "opt_reinit_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "all_opt_variables",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opt_slots + var_list + [global_step]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reset_default_graph_511": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exponential_decay_428": {
                "learning_rate": {
                    "value": "hparams.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_434": {
                "value": {
                    "value": "hparams.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_439": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_441": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "hparams.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_508": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_443": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdamOptimizer_445": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_447": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "CSGM/celebA/celebA_estimators.py": {
        "tensorflow": {
            "Session_136": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_139": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(hparams.n_input, hparams.num_measurements)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "A",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_140": {
                "variable": {
                    "value": "y_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(hparams.batch_size, hparams.num_measurements)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_143": {
                "variable": {
                    "value": "z_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([hparams.batch_size, 100])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "z_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_157": {
                "variable": {
                    "value": "m_loss1_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(y_batch - y_hat_batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_158": {
                "variable": {
                    "value": "m_loss2_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(y_batch - y_hat_batch) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_159": {
                "variable": {
                    "value": "zp_loss_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "z_batch ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_161": {
                "variable": {
                    "value": "d_loss2_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1 - prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_169": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "total_loss_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hparams.mloss1_weight * m_loss1_batch + hparams.mloss2_weight * m_loss2_batch + hparams.zprior_weight * zp_loss_batch + hparams.dloss1_weight * d_loss1_batch + hparams.dloss2_weight * d_loss2_batch",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_172": {
                "variable": {
                    "value": "m_loss1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "m_loss1_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.abs(y_batch - y_hat_batch), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_173": {
                "variable": {
                    "value": "m_loss2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "m_loss2_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean((y_batch - y_hat_batch) ** 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_174": {
                "variable": {
                    "value": "zp_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "zp_loss_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(z_batch ** 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_175": {
                "variable": {
                    "value": "d_loss1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "d_loss1_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-tf.log(prob)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "reduce_mean_176": {
                "variable": {
                    "value": "d_loss2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "d_loss2_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.log(1 - prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_180": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_188": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_190": {
                "variable": {
                    "value": "restorer_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_dict_gen",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Saver_191": {
                "variable": {
                    "value": "restorer_discrim",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_dict_discrim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "identity_151": {
                "variable": {
                    "value": "y_hat_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hat_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.asarray(x_hat_batch)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.asarray(x_hat_batch)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.asarray(x_hat_batch)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.minimum(x_hat_batch, 1), -1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "y2_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_154": {
                "variable": {
                    "value": "y_hat_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_hat_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.asarray(x_hat_batch)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.asarray(x_hat_batch)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.asarray(x_hat_batch)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.minimum(x_hat_batch, 1), -1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(hparams.n_input, hparams.num_measurements), name='A')",
                            "Call"
                        ]
                    ]
                },
                "b_is_sparse": {
                    "value": "measurement_is_sparse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hparams.measurement_type in ['inpaint', 'superres']",
                            "Compare"
                        ]
                    ]
                },
                "name": {
                    "value": "y2_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_157": {
                "x": {
                    "value": "y_batch - y_hat_batch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_160": {
                "x": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_182": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_scope_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CSGM/celebA/celebA_input.py": {
        "tensorflow": {
            "Session_35": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_38": {
                "variable": {
                    "value": "z_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([hparams.batch_size, 100])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_42": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_45": {
                "variable": {
                    "value": "restorer",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_dict",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reset_default_graph_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CSGM/celebA/celebA_model_def.py": {
        "tensorflow": {
            "reshape_23": {
                "variable": {
                    "value": "x_hat_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_hat_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_hat_full[:hparams.batch_size], [hparams.batch_size, hparams.input_size * hparams.input_size * hparams.input_channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, hparams.input_size, hparams.input_size, hparams.input_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "all_zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, hparams.input_size, hparams.input_size, hparams.input_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_29": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(prob, [-1])",
                            "Call"
                        ],
                        [
                            "prob[:hparams.batch_size]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "latest_checkpoint_34": {
                "variable": {
                    "value": "restore_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "hparams.pretrained_model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "variable": {
                    "value": "x_hat_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_hat_full[:hparams.batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hparams.batch_size, hparams.input_size * hparams.input_size * hparams.input_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "latest_checkpoint_52": {
                "variable": {
                    "value": "restore_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "hparams.pretrained_model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "shape": {
                    "value": "[64, 100]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CSGM/dcgan/DCGANtensorflow/main.py": {
        "tensorflow": {
            "ConfigProto_76": {
                "variable": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_148": {
                "main": {
                    "value": "flags",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Session_79": {
                "config": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CSGM/dcgan/DCGANtensorflow/model.py": {
        "tensorflow": {
            "placeholder_118": {
                "variable": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size] + image_dims",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "real_images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_123": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.z_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "z",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_142": {
                "variable": {
                    "value": "self.d_loss_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sigmoid_cross_entropy_with_logits(self.D_logits, tf.ones_like(self.D))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_144": {
                "variable": {
                    "value": "self.d_loss_fake",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sigmoid_cross_entropy_with_logits(self.D_logits_, tf.zeros_like(self.D_))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_146": {
                "variable": {
                    "value": "self.g_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sigmoid_cross_entropy_with_logits(self.D_logits_, tf.ones_like(self.D_))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_157": {
                "variable": {
                    "value": "t_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_162": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "self.max_to_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_165": {
                "variable": {
                    "value": "d_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "config.beta1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_167": {
                "variable": {
                    "value": "g_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "config.beta1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_579": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'ckpts'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_109": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.y_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_368": {
                "name_or_scope": {
                    "value": "discriminator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_381": {
                "variable": {
                    "value": "yb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, 1, 1, self.y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_388": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lrelu(self.d_bn1(conv2d(h0, self.df_dim * 2, name='d_h1_conv')))",
                            "Call"
                        ],
                        [
                            "lrelu(self.d_bn1(conv2d(h0, self.df_dim + self.y_dim, name='d_h1_conv')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "concat([h1, y], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(self.h1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ],
                        [
                            "deconv2d(h0, [self.batch_size, s_h8, s_w8, self.gf_dim * 4], name='g_h1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(h1, train=False))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin'), train=False))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_399": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_412": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.z_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, s_h16, s_w16, self.gf_dim * 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_414": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn0(self.h0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_418": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn1(self.h1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_422": {
                "variable": {
                    "value": "h2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn2(h2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_426": {
                "variable": {
                    "value": "h3",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn3(h3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_438": {
                "variable": {
                    "value": "yb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, 1, 1, self.y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_441": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn0(linear(z, self.gfc_dim, 'g_h0_lin'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_445": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_447": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lrelu(self.d_bn1(conv2d(h0, self.df_dim * 2, name='d_h1_conv')))",
                            "Call"
                        ],
                        [
                            "lrelu(self.d_bn1(conv2d(h0, self.df_dim + self.y_dim, name='d_h1_conv')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "concat([h1, y], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(self.h1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ],
                        [
                            "deconv2d(h0, [self.batch_size, s_h8, s_w8, self.gf_dim * 4], name='g_h1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(h1, train=False))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin'), train=False))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, s_h4, s_w4, self.gf_dim * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_451": {
                "variable": {
                    "value": "h2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn2(deconv2d(h1, [self.batch_size, s_h2, s_w2, self.gf_dim * 2], name='g_h2'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_459": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_470": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "linear(z, self.gf_dim * 8 * s_h16 * s_w16, 'g_h0_lin')",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, s_h16, s_w16, self.gf_dim * 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_473": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn0(h0, train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_476": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn1(h1, train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_479": {
                "variable": {
                    "value": "h2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn2(h2, train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_482": {
                "variable": {
                    "value": "h3",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn3(h3, train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_493": {
                "variable": {
                    "value": "yb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, 1, 1, self.y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_496": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn0(linear(z, self.gfc_dim, 'g_h0_lin'), train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_499": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin'), train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_501": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lrelu(self.d_bn1(conv2d(h0, self.df_dim * 2, name='d_h1_conv')))",
                            "Call"
                        ],
                        [
                            "lrelu(self.d_bn1(conv2d(h0, self.df_dim + self.y_dim, name='d_h1_conv')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "concat([h1, y], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(self.h1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin')))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ],
                        [
                            "deconv2d(h0, [self.batch_size, s_h8, s_w8, self.gf_dim * 4], name='g_h1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(h1, train=False))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn1(linear(h0, self.gf_dim * 2 * s_h4 * s_w4, 'g_h1_lin'), train=False))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [self.batch_size, s_h4, s_w4, self.gf_dim * 2])",
                            "Call"
                        ],
                        [
                            "conv_cond_concat(h1, yb)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, s_h4, s_w4, self.gf_dim * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_504": {
                "variable": {
                    "value": "h2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.g_bn2(deconv2d(h1, [self.batch_size, s_h2, s_w2, self.gf_dim * 2], name='g_h2'), train=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "write_graph_567": {
                "graph_or_graph_def": {
                    "value": "tf.graph_util.convert_variables_to_constants(self.sess, self.sess.graph_def, ['generator_1/Tanh'])",
                    "type": "Call",
                    "possible_values": []
                },
                "logdir": {
                    "value": "checkpoint_dir + '/' + filename",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}-{:06d}_frz.pb'.format(filename, step)",
                    "type": "Call",
                    "possible_values": []
                },
                "as_text": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_138": {
                "logits": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_cond_concat(image, yb)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_like_143": {
                "input": {
                    "value": "self.D",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_145": {
                "input": {
                    "value": "self.D_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_147": {
                "input": {
                    "value": "self.D_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "initialize_all_variables_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_431": {
                "x": {
                    "value": "h4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "linear(tf.reshape(h3, [self.batch_size, -1]), 1, 'd_h4_lin')",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [self.batch_size, s_h, s_w, self.c_dim], name='g_h4')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_455": {
                "x": {
                    "value": "deconv2d(h2, [self.batch_size, s_h, s_w, self.c_dim], name='g_h3')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_486": {
                "x": {
                    "value": "h4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "linear(tf.reshape(h3, [self.batch_size, -1]), 1, 'd_h4_lin')",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [self.batch_size, s_h, s_w, self.c_dim], name='g_h4')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_508": {
                "x": {
                    "value": "deconv2d(h2, [self.batch_size, s_h, s_w, self.c_dim], name='g_h3')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_variables_to_constants_568": {
                "sess": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_graph_def": {
                    "value": "self.sess.graph_def",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_node_names": {
                    "value": "['generator_1/Tanh']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_140": {
                "logits": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_cond_concat(image, yb)",
                            "Call"
                        ]
                    ]
                },
                "targets": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate((trY, teY), axis=0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_377": {
                "tensor": {
                    "value": "h3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lrelu(self.d_bn3(conv2d(h2, self.df_dim * 8, name='d_h3_conv')))",
                            "Call"
                        ],
                        [
                            "linear(h2, 1, 'd_h3_lin')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn3(h3))",
                            "Call"
                        ],
                        [
                            "deconv2d(h2, [self.batch_size, s_h2, s_w2, self.gf_dim * 1], name='g_h3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn3(h3, train=False))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_379": {
                "x": {
                    "value": "h4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "linear(tf.reshape(h3, [self.batch_size, -1]), 1, 'd_h4_lin')",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [self.batch_size, s_h, s_w, self.c_dim], name='g_h4')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_396": {
                "x": {
                    "value": "h3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lrelu(self.d_bn3(conv2d(h2, self.df_dim * 8, name='d_h3_conv')))",
                            "Call"
                        ],
                        [
                            "linear(h2, 1, 'd_h3_lin')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn3(h3))",
                            "Call"
                        ],
                        [
                            "deconv2d(h2, [self.batch_size, s_h2, s_w2, self.gf_dim * 1], name='g_h3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.g_bn3(h3, train=False))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CSGM/dcgan/DCGANtensorflow/ops.py": {
        "tensorflow": {
            "get_variable_56": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, input_.get_shape()[-1], output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_58": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_60": {
                "variable": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(conv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "conv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_70": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, output_shape[-1], input_.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_82": {
                "variable": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "variable": {
                    "value": "deconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(deconv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "deconv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_91": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "leak * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_104": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_27": {
                "values": {
                    "value": "tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_74": {
                "variable": {
                    "value": "deconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "get_variable_98": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[1], output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_61": {
                "value": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_, w, strides=[1, d_h, d_w, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(conv, biases), conv.get_shape())",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_83": {
                "value": {
                    "value": "deconv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.deconv2d(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(deconv, biases), deconv.get_shape())",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_50": {
                "shape": {
                    "value": "[x_shapes[0], x_shapes[1], x_shapes[2], y_shapes[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_57": {
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_60": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_71": {
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_82": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_99": {
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_105": {
                "value": {
                    "value": "bias_start",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_109": {
                "a": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [shape[1], output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_107": {
                "a": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [shape[1], output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CSGM/dcgan/DCGANtensorflow/utils.py": {
        "tensorflow": {
            "trainable_variables_36": {
                "variable": {
                    "value": "model_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CSGM/dcgan/model_def.py": {
        "tensorflow": {
            "reshape_43": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ops.linear(z, hparams.gf_dim * 8 * s16 * s16, 'g_h0_lin')",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, s16, s16, hparams.gf_dim * 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "g_bn0(h0, train=train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_47": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "g_bn1(h1, train=train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "h2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "g_bn2(h2, train=train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_53": {
                "variable": {
                    "value": "h3",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "g_bn3(h3, train=train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_56": {
                "variable": {
                    "value": "x_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.deconv2d(h3, [hparams.batch_size, s, s, hparams.c_dim], name='g_h4')",
                            "Call"
                        ],
                        [
                            "ops.linear(tf.reshape(h3, [hparams.batch_size, -1]), 1, 'd_h3_lin')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_84": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "h4",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_29": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "discriminator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_81": {
                "tensor": {
                    "value": "h3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.deconv2d(h2, [hparams.batch_size, s2, s2, hparams.gf_dim * 1], name='g_h3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(g_bn3(h3, train=train))",
                            "Call"
                        ],
                        [
                            "ops.conv2d(h2, hparams.df_dim * 8, name='d_h3_conv')",
                            "Call"
                        ],
                        [
                            "ops.lrelu(d_bn3(h3, train=train))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[hparams.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "CSGM/dcgan/ops.py": {
        "tensorflow": {
            "get_variable_30": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[1], output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_32": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_44": {
                "values": {
                    "value": "[x, y * tf.ones([x_shapes[0], x_shapes[1], x_shapes[2], y_shapes[3]])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_50": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, output_shape[-1], input_.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_transpose_52": {
                "variable": {
                    "value": "deconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_54": {
                "variable": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "variable": {
                    "value": "deconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(deconv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "deconv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_64": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "leak * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_69": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, input_.get_shape()[-1], output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_71": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_73": {
                "variable": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(conv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "conv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_29": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_11": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_31": {
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_55": {
                "value": {
                    "value": "deconv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(deconv, biases), deconv.get_shape())",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_74": {
                "value": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_, w, strides=[1, d_h, d_w, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(conv, biases), conv.get_shape())",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_33": {
                "value": {
                    "value": "bias_start",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_37": {
                "a": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [shape[1], output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_44": {
                "shape": {
                    "value": "[x_shapes[0], x_shapes[1], x_shapes[2], y_shapes[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_51": {
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_54": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_70": {
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_73": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_35": {
                "a": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [shape[1], output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CSGM/e2e/model_def.py": {
        "tensorflow": {
            "placeholder_9": {
                "variable": {
                    "value": "y_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(hparams.batch_size, hparams.num_measurements)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_26": {
                "variable": {
                    "value": "x_hat_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(hidden, weights), biases, name='logits')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_22": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[prev_hidden_size, 784]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([784])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_24": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(hidden, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([hidden_size]))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', initializer=tf.zeros([784]))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_16": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[prev_hidden_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_17": {
                "variable": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([hidden_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_18": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(hidden, weights) + biases",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'hidden{0}'.format(i)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_21": {
                "name_or_scope": {
                    "value": "sigmoid_logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_15": {
                "name_or_scope": {
                    "value": "layer_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'hidden{0}'.format(i)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_24": {
                "a": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_batch",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(tf.matmul(hidden, weights) + biases, name=layer_name)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=[prev_hidden_size, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[prev_hidden_size, 784])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_23": {
                "shape": {
                    "value": "[784]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_17": {
                "shape": {
                    "value": "[hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_18": {
                "a": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_batch",
                            "Name"
                        ],
                        [
                            "tf.nn.relu(tf.matmul(hidden, weights) + biases, name=layer_name)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=[prev_hidden_size, hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[prev_hidden_size, 784])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CSGM/mnist/mnist_input.py": {
        "tensorflow": {
            "Session_30": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_33": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_36": {
                "variable": {
                    "value": "restorer",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_dict",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reset_default_graph_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CSGM/mnist/mnist_model_def.py": {
        "tensorflow": {
            "latest_checkpoint_22": {
                "variable": {
                    "value": "restore_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "hparams.pretrained_model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CSGM/mnist_vae/data_input.py": {
        "tensorflow": {}
    },
    "CSGM/mnist_vae/main.py": {
        "tensorflow": {
            "placeholder_19": {
                "variable": {
                    "value": "x_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, hparams.n_input]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_24": {
                "variable": {
                    "value": "z_sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.exp(z_log_sigma_sq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "z_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, hparams.n_z]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_36": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "hparams.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_45": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_48": {
                "variable": {
                    "value": "model_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_50": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_24": {
                "x": {
                    "value": "z_log_sigma_sq",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "CSGM/mnist_vae/model_def.py": {
        "tensorflow": {
            "reduce_sum_66": {
                "variable": {
                    "value": "reconstr_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=x, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_68": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reconstr_losses + latent_losses",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_73": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal((batch_size, hparams.n_z))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "z",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_24": {
                "variable": {
                    "value": "w1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "utils.xavier_init(hparams.n_input, hparams.n_hidden_recog_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_25": {
                "variable": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([hparams.n_hidden_recog_1], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_28": {
                "variable": {
                    "value": "w2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "utils.xavier_init(hparams.n_hidden_recog_1, hparams.n_hidden_recog_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "b2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([hparams.n_hidden_recog_2], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_32": {
                "variable": {
                    "value": "w3",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w3",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "utils.xavier_init(hparams.n_hidden_recog_2, hparams.n_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_33": {
                "variable": {
                    "value": "b3",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b3",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([hparams.n_z], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_36": {
                "variable": {
                    "value": "w4",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w4",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "utils.xavier_init(hparams.n_hidden_recog_2, hparams.n_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_37": {
                "variable": {
                    "value": "b4",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b4",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([hparams.n_z], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_49": {
                "variable": {
                    "value": "w1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "utils.xavier_init(hparams.n_z, hparams.n_hidden_gener_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_50": {
                "variable": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([hparams.n_hidden_gener_1], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_53": {
                "variable": {
                    "value": "w2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "utils.xavier_init(hparams.n_hidden_gener_1, hparams.n_hidden_gener_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_54": {
                "variable": {
                    "value": "b2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([hparams.n_hidden_gener_2], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_57": {
                "variable": {
                    "value": "w3",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w3",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "utils.xavier_init(hparams.n_hidden_gener_2, hparams.n_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_58": {
                "variable": {
                    "value": "b3",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b3",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([hparams.n_input], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_60": {
                "variable": {
                    "value": "x_reconstr_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(hidden2, w3) + b3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_66": {
                "labels": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(hidden2, w3) + b3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_67": {
                "input_tensor": {
                    "value": "1 + z_log_sigma_sq - tf.square(z_mean) - tf.exp(z_log_sigma_sq)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_34": {
                "a": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hparams.transfer_fct(tf.matmul(hidden1, w2) + b2)",
                            "Call"
                        ],
                        [
                            "hparams.transfer_fct(tf.matmul(hidden1, w2) + b2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w3', initializer=utils.xavier_init(hparams.n_hidden_recog_2, hparams.n_z))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w3', initializer=utils.xavier_init(hparams.n_hidden_gener_2, hparams.n_input))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_38": {
                "a": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hparams.transfer_fct(tf.matmul(hidden1, w2) + b2)",
                            "Call"
                        ],
                        [
                            "hparams.transfer_fct(tf.matmul(hidden1, w2) + b2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w4', initializer=utils.xavier_init(hparams.n_hidden_recog_2, hparams.n_z))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_59": {
                "a": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hparams.transfer_fct(tf.matmul(hidden1, w2) + b2)",
                            "Call"
                        ],
                        [
                            "hparams.transfer_fct(tf.matmul(hidden1, w2) + b2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w3', initializer=utils.xavier_init(hparams.n_hidden_recog_2, hparams.n_z))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w3', initializer=utils.xavier_init(hparams.n_hidden_gener_2, hparams.n_input))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_25": {
                "shape": {
                    "value": "[hparams.n_hidden_recog_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_26": {
                "a": {
                    "value": "x_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "w1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w1', initializer=utils.xavier_init(hparams.n_input, hparams.n_hidden_recog_1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w1', initializer=utils.xavier_init(hparams.n_z, hparams.n_hidden_gener_1))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_29": {
                "shape": {
                    "value": "[hparams.n_hidden_recog_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_30": {
                "a": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hparams.transfer_fct(tf.matmul(x_ph, w1) + b1)",
                            "Call"
                        ],
                        [
                            "hparams.transfer_fct(tf.matmul(z, w1) + b1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w2', initializer=utils.xavier_init(hparams.n_hidden_recog_1, hparams.n_hidden_recog_2))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w2', initializer=utils.xavier_init(hparams.n_hidden_gener_1, hparams.n_hidden_gener_2))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_33": {
                "shape": {
                    "value": "[hparams.n_z]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "shape": {
                    "value": "[hparams.n_z]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "shape": {
                    "value": "[hparams.n_hidden_gener_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_51": {
                "a": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal((batch_size, hparams.n_z)), name='z')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w1', initializer=utils.xavier_init(hparams.n_input, hparams.n_hidden_recog_1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w1', initializer=utils.xavier_init(hparams.n_z, hparams.n_hidden_gener_1))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_54": {
                "shape": {
                    "value": "[hparams.n_hidden_gener_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "a": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hparams.transfer_fct(tf.matmul(x_ph, w1) + b1)",
                            "Call"
                        ],
                        [
                            "hparams.transfer_fct(tf.matmul(z, w1) + b1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w2', initializer=utils.xavier_init(hparams.n_hidden_recog_1, hparams.n_hidden_recog_2))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w2', initializer=utils.xavier_init(hparams.n_hidden_gener_1, hparams.n_hidden_gener_2))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_58": {
                "shape": {
                    "value": "[hparams.n_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_67": {
                "x": {
                    "value": "z_log_sigma_sq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(hidden2, w4) + b4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_67": {
                "x": {
                    "value": "z_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(hidden2, w3) + b3",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "CSGM/mnist_vae/utils.py": {
        "tensorflow": {
            "get_checkpoint_state_50": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(ckpt_dir)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CSGM/reconstruction_methods.py": {
        "tensorflow": {}
    },
    "CSGM/vae/data_input.py": {
        "tensorflow": {}
    },
    "CSGM/vae/main.py": {
        "tensorflow": {
            "placeholder_19": {
                "variable": {
                    "value": "x_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, hparams.n_input]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_24": {
                "variable": {
                    "value": "z_sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.exp(z_log_sigma_sq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "z_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, hparams.n_z]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_36": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "hparams.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_45": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_48": {
                "variable": {
                    "value": "model_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_50": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_24": {
                "x": {
                    "value": "z_log_sigma_sq",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "CSGM/vae/model_def.py": {
        "tensorflow": {
            "reduce_sum_66": {
                "variable": {
                    "value": "reconstr_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=x, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_68": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reconstr_losses + latent_losses",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_73": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal((batch_size, hparams.n_z))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "z",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_24": {
                "variable": {
                    "value": "w1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "utils.xavier_init(hparams.n_input, hparams.n_hidden_recog_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_25": {
                "variable": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([hparams.n_hidden_recog_1], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_28": {
                "variable": {
                    "value": "w2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "utils.xavier_init(hparams.n_hidden_recog_1, hparams.n_hidden_recog_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "b2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([hparams.n_hidden_recog_2], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_32": {
                "variable": {
                    "value": "w3",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w3",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "utils.xavier_init(hparams.n_hidden_recog_2, hparams.n_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_33": {
                "variable": {
                    "value": "b3",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b3",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([hparams.n_z], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_36": {
                "variable": {
                    "value": "w4",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w4",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "utils.xavier_init(hparams.n_hidden_recog_2, hparams.n_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_37": {
                "variable": {
                    "value": "b4",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b4",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([hparams.n_z], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_49": {
                "variable": {
                    "value": "w1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "utils.xavier_init(hparams.n_z, hparams.n_hidden_gener_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_50": {
                "variable": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([hparams.n_hidden_gener_1], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_53": {
                "variable": {
                    "value": "w2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "utils.xavier_init(hparams.n_hidden_gener_1, hparams.n_hidden_gener_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_54": {
                "variable": {
                    "value": "b2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([hparams.n_hidden_gener_2], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_57": {
                "variable": {
                    "value": "w3",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w3",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "utils.xavier_init(hparams.n_hidden_gener_2, hparams.n_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_58": {
                "variable": {
                    "value": "b3",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b3",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([hparams.n_input], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_60": {
                "variable": {
                    "value": "x_reconstr_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(hidden2, w3) + b3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_66": {
                "labels": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(hidden2, w3) + b3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_67": {
                "input_tensor": {
                    "value": "1 + z_log_sigma_sq - tf.square(z_mean) - tf.exp(z_log_sigma_sq)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_34": {
                "a": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hparams.transfer_fct(tf.matmul(hidden1, w2) + b2)",
                            "Call"
                        ],
                        [
                            "hparams.transfer_fct(tf.matmul(hidden1, w2) + b2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w3', initializer=utils.xavier_init(hparams.n_hidden_recog_2, hparams.n_z))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w3', initializer=utils.xavier_init(hparams.n_hidden_gener_2, hparams.n_input))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_38": {
                "a": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hparams.transfer_fct(tf.matmul(hidden1, w2) + b2)",
                            "Call"
                        ],
                        [
                            "hparams.transfer_fct(tf.matmul(hidden1, w2) + b2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w4', initializer=utils.xavier_init(hparams.n_hidden_recog_2, hparams.n_z))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_59": {
                "a": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hparams.transfer_fct(tf.matmul(hidden1, w2) + b2)",
                            "Call"
                        ],
                        [
                            "hparams.transfer_fct(tf.matmul(hidden1, w2) + b2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w3', initializer=utils.xavier_init(hparams.n_hidden_recog_2, hparams.n_z))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w3', initializer=utils.xavier_init(hparams.n_hidden_gener_2, hparams.n_input))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_25": {
                "shape": {
                    "value": "[hparams.n_hidden_recog_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_26": {
                "a": {
                    "value": "x_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "w1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w1', initializer=utils.xavier_init(hparams.n_input, hparams.n_hidden_recog_1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w1', initializer=utils.xavier_init(hparams.n_z, hparams.n_hidden_gener_1))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_29": {
                "shape": {
                    "value": "[hparams.n_hidden_recog_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_30": {
                "a": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hparams.transfer_fct(tf.matmul(x_ph, w1) + b1)",
                            "Call"
                        ],
                        [
                            "hparams.transfer_fct(tf.matmul(z, w1) + b1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w2', initializer=utils.xavier_init(hparams.n_hidden_recog_1, hparams.n_hidden_recog_2))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w2', initializer=utils.xavier_init(hparams.n_hidden_gener_1, hparams.n_hidden_gener_2))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_33": {
                "shape": {
                    "value": "[hparams.n_z]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "shape": {
                    "value": "[hparams.n_z]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "shape": {
                    "value": "[hparams.n_hidden_gener_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_51": {
                "a": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal((batch_size, hparams.n_z)), name='z')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w1', initializer=utils.xavier_init(hparams.n_input, hparams.n_hidden_recog_1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w1', initializer=utils.xavier_init(hparams.n_z, hparams.n_hidden_gener_1))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_54": {
                "shape": {
                    "value": "[hparams.n_hidden_gener_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "a": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hparams.transfer_fct(tf.matmul(x_ph, w1) + b1)",
                            "Call"
                        ],
                        [
                            "hparams.transfer_fct(tf.matmul(z, w1) + b1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w2', initializer=utils.xavier_init(hparams.n_hidden_recog_1, hparams.n_hidden_recog_2))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w2', initializer=utils.xavier_init(hparams.n_hidden_gener_1, hparams.n_hidden_gener_2))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_58": {
                "shape": {
                    "value": "[hparams.n_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_67": {
                "x": {
                    "value": "z_log_sigma_sq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(hidden2, w4) + b4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_67": {
                "x": {
                    "value": "z_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(hidden2, w3) + b3",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "CSGM/vae/utils.py": {
        "tensorflow": {
            "get_checkpoint_state_50": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(ckpt_dir)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "LDAMP/main.py": {
        "tensorflow": {
            "list_physical_devices_96": {
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "LDAMP/reconstruction_methods.py": {
        "tensorflow": {
            "zeros_1171": {
                "variable": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, BATCH_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1200": {
                "variable": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, BATCH_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1233": {
                "variable": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, BATCH_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_1263": {
                "variable": {
                    "value": "wvar",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sigma_w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "new_sigma_w",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_1265": {
                "variable": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, BATCH_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1267": {
                "variable": {
                    "value": "xvar",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, BATCH_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1271": {
                "variable": {
                    "value": "OneOverM",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "float(1) / m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_1272": {
                "variable": {
                    "value": "A_norm2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(A_val)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_1416": {
                "variable": {
                    "value": "r_abs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.complex(xhat, tf.zeros([n, BATCH_SIZE], dtype=tf.float32)) + At_handle(A_val, z)",
                            "BinOp"
                        ],
                        [
                            "xhat + At_handle(A_val, z)",
                            "BinOp"
                        ],
                        [
                            "tf.complex(xhat, tf.zeros([n, BATCH_SIZE], dtype=tf.float32)) + Atz",
                            "BinOp"
                        ],
                        [
                            "xhat + Atz",
                            "BinOp"
                        ],
                        [
                            "tf.complex(xhat, tf.zeros([n, BATCH_SIZE], dtype=tf.float32)) + At_handle(A_val, z)",
                            "BinOp"
                        ],
                        [
                            "xhat + At_handle(A_val, z)",
                            "BinOp"
                        ],
                        [
                            "xbar + rvar * tf.matmul(A_val, s, adjoint_a=True)",
                            "BinOp"
                        ],
                        [
                            "tf.real(r)",
                            "Call"
                        ],
                        [
                            "tf.transpose(r)",
                            "Call"
                        ],
                        [
                            "tf.reshape(r, shape4D)",
                            "Call"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "maximum_1417": {
                "variable": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.001 * tf.reduce_max(r_abs, axis=0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multiply_1424": {
                "variable": {
                    "value": "eta_dx",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "eta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_normal(shape=r.get_shape(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=Aty_tf.get_shape(), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "xhat_perturbed - xhat",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_1425": {
                "variable": {
                    "value": "mean_eta_dx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "eta_dx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(eta, xhat_perturbed - xhat)",
                            "Call"
                        ],
                        [
                            "tf.multiply(eta, Px_hat_perturbed - Px_hat)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "divide_1426": {
                "variable": {
                    "value": "dxdrMC",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mean_eta_dx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(eta_dx, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(eta_dx, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(0.001 * tf.reduce_max(r_abs, axis=0), 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.maximum(0.001 * tf.reduce_max(Aty_tf, axis=0), 1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_1441": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.complex(xhat, tf.zeros([n, BATCH_SIZE], dtype=tf.float32)) + At_handle(A_val, z)",
                            "BinOp"
                        ],
                        [
                            "xhat + At_handle(A_val, z)",
                            "BinOp"
                        ],
                        [
                            "tf.complex(xhat, tf.zeros([n, BATCH_SIZE], dtype=tf.float32)) + Atz",
                            "BinOp"
                        ],
                        [
                            "xhat + Atz",
                            "BinOp"
                        ],
                        [
                            "tf.complex(xhat, tf.zeros([n, BATCH_SIZE], dtype=tf.float32)) + At_handle(A_val, z)",
                            "BinOp"
                        ],
                        [
                            "xhat + At_handle(A_val, z)",
                            "BinOp"
                        ],
                        [
                            "xbar + rvar * tf.matmul(A_val, s, adjoint_a=True)",
                            "BinOp"
                        ],
                        [
                            "tf.real(r)",
                            "Call"
                        ],
                        [
                            "tf.transpose(r)",
                            "Call"
                        ],
                        [
                            "tf.reshape(r, shape4D)",
                            "Call"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_1442": {
                "variable": {
                    "value": "orig_Shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.complex(xhat, tf.zeros([n, BATCH_SIZE], dtype=tf.float32)) + At_handle(A_val, z)",
                            "BinOp"
                        ],
                        [
                            "xhat + At_handle(A_val, z)",
                            "BinOp"
                        ],
                        [
                            "tf.complex(xhat, tf.zeros([n, BATCH_SIZE], dtype=tf.float32)) + Atz",
                            "BinOp"
                        ],
                        [
                            "xhat + Atz",
                            "BinOp"
                        ],
                        [
                            "tf.complex(xhat, tf.zeros([n, BATCH_SIZE], dtype=tf.float32)) + At_handle(A_val, z)",
                            "BinOp"
                        ],
                        [
                            "xhat + At_handle(A_val, z)",
                            "BinOp"
                        ],
                        [
                            "xbar + rvar * tf.matmul(A_val, s, adjoint_a=True)",
                            "BinOp"
                        ],
                        [
                            "tf.real(r)",
                            "Call"
                        ],
                        [
                            "tf.transpose(r)",
                            "Call"
                        ],
                        [
                            "tf.reshape(r, shape4D)",
                            "Call"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_1444": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.complex(xhat, tf.zeros([n, BATCH_SIZE], dtype=tf.float32)) + At_handle(A_val, z)",
                            "BinOp"
                        ],
                        [
                            "xhat + At_handle(A_val, z)",
                            "BinOp"
                        ],
                        [
                            "tf.complex(xhat, tf.zeros([n, BATCH_SIZE], dtype=tf.float32)) + Atz",
                            "BinOp"
                        ],
                        [
                            "xhat + Atz",
                            "BinOp"
                        ],
                        [
                            "tf.complex(xhat, tf.zeros([n, BATCH_SIZE], dtype=tf.float32)) + At_handle(A_val, z)",
                            "BinOp"
                        ],
                        [
                            "xhat + At_handle(A_val, z)",
                            "BinOp"
                        ],
                        [
                            "xbar + rvar * tf.matmul(A_val, s, adjoint_a=True)",
                            "BinOp"
                        ],
                        [
                            "tf.real(r)",
                            "Call"
                        ],
                        [
                            "tf.transpose(r)",
                            "Call"
                        ],
                        [
                            "tf.reshape(r, shape4D)",
                            "Call"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape4D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[-1, height_img, width_img, channel_img]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_1467": {
                "variable": {
                    "value": "x_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(x_hat, orig_Shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "maximum_1283": {
                "variable": {
                    "value": "pvar",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pvar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-05 * tf.ones((1, BATCH_SIZE), dtype=tf.float32)",
                            "BinOp"
                        ],
                        [
                            "Beta * A_norm2 * OneOverM * xvar + (1 - Beta) * pvar",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(pvar, 1e-05)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "maximum_1288": {
                "variable": {
                    "value": "svar",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "svar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-05 * tf.ones((1, BATCH_SIZE), dtype=tf.float32)",
                            "BinOp"
                        ],
                        [
                            "-Beta * dg + (1 - Beta) * svar",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(svar, 1e-05)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "maximum_1290": {
                "variable": {
                    "value": "rvar",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rvar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 / m_fp * tf.reduce_sum(tf.square(tf.abs(z)), axis=0)",
                            "BinOp"
                        ],
                        [
                            "1.0 / m_fp * tf.reduce_sum(tf.square(tf.abs(z)), axis=0)",
                            "BinOp"
                        ],
                        [
                            "1.0 / n_fp * tf.reduce_sum(tf.square(tf.abs(Atz)), axis=0)",
                            "BinOp"
                        ],
                        [
                            "1.0 / n_fp * tf.reduce_sum(tf.square(tf.abs(Atz)), axis=0)",
                            "BinOp"
                        ],
                        [
                            "1.0 / m_fp * tf.reduce_sum(tf.square(tf.abs(z)), axis=0)",
                            "BinOp"
                        ],
                        [
                            "1.0 / m_fp * tf.reduce_sum(tf.square(tf.abs(z)), axis=0)",
                            "BinOp"
                        ],
                        [
                            "OneOverA_norm2 * n / svar",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(rvar, 1e-05)",
                            "Call"
                        ],
                        [
                            "rvar",
                            "MethodArgument"
                        ],
                        [
                            "rvar",
                            "MethodArgument"
                        ],
                        [
                            "rvar",
                            "MethodArgument"
                        ],
                        [
                            "rvar",
                            "MethodArgument"
                        ],
                        [
                            "rvar",
                            "MethodArgument"
                        ],
                        [
                            "rvar",
                            "MethodArgument"
                        ],
                        [
                            "rvar",
                            "MethodArgument"
                        ],
                        [
                            "rvar",
                            "MethodArgument"
                        ],
                        [
                            "rvar",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "maximum_1295": {
                "variable": {
                    "value": "xvar",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "xvar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones((1, BATCH_SIZE), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "dxdr * rvar",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(xvar, 1e-05)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_1308": {
                "variable": {
                    "value": "weights[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(shape=(filter_height, filter_width, channel_img, num_filters), mean=init_mu, stddev=init_sigma)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_1323": {
                "variable": {
                    "value": "weights[n_DnCNN_layers - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(shape=(filter_height, filter_width, num_filters, 1), mean=init_mu, stddev=init_sigma)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_1428": {
                "variable": {
                    "value": "dxdrMC",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dxdrMC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.divide(mean_eta_dx, epsilon)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(dxdrMC)",
                            "Call"
                        ]
                    ]
                }
            },
            "real_1440": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.complex(xhat, tf.zeros([n, BATCH_SIZE], dtype=tf.float32)) + At_handle(A_val, z)",
                            "BinOp"
                        ],
                        [
                            "xhat + At_handle(A_val, z)",
                            "BinOp"
                        ],
                        [
                            "tf.complex(xhat, tf.zeros([n, BATCH_SIZE], dtype=tf.float32)) + Atz",
                            "BinOp"
                        ],
                        [
                            "xhat + Atz",
                            "BinOp"
                        ],
                        [
                            "tf.complex(xhat, tf.zeros([n, BATCH_SIZE], dtype=tf.float32)) + At_handle(A_val, z)",
                            "BinOp"
                        ],
                        [
                            "xhat + At_handle(A_val, z)",
                            "BinOp"
                        ],
                        [
                            "xbar + rvar * tf.matmul(A_val, s, adjoint_a=True)",
                            "BinOp"
                        ],
                        [
                            "tf.real(r)",
                            "Call"
                        ],
                        [
                            "tf.transpose(r)",
                            "Call"
                        ],
                        [
                            "tf.reshape(r, shape4D)",
                            "Call"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_1450": {
                "variable": {
                    "value": "conv_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.complex(xhat, tf.zeros([n, BATCH_SIZE], dtype=tf.float32)) + At_handle(A_val, z)",
                            "BinOp"
                        ],
                        [
                            "xhat + At_handle(A_val, z)",
                            "BinOp"
                        ],
                        [
                            "tf.complex(xhat, tf.zeros([n, BATCH_SIZE], dtype=tf.float32)) + Atz",
                            "BinOp"
                        ],
                        [
                            "xhat + Atz",
                            "BinOp"
                        ],
                        [
                            "tf.complex(xhat, tf.zeros([n, BATCH_SIZE], dtype=tf.float32)) + At_handle(A_val, z)",
                            "BinOp"
                        ],
                        [
                            "xhat + At_handle(A_val, z)",
                            "BinOp"
                        ],
                        [
                            "xbar + rvar * tf.matmul(A_val, s, adjoint_a=True)",
                            "BinOp"
                        ],
                        [
                            "tf.real(r)",
                            "Call"
                        ],
                        [
                            "tf.transpose(r)",
                            "Call"
                        ],
                        [
                            "tf.reshape(r, shape4D)",
                            "Call"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ],
                        [
                            "r",
                            "MethodArgument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_1451": {
                "variable": {
                    "value": "layers[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(r, weights[0], strides=[1, 1, 1, 1], padding='SAME', data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(layers[i - 1], weights[i], strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_1464": {
                "variable": {
                    "value": "layers[n_DnCNN_layers - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "layers[n_DnCNN_layers - 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "weights[n_DnCNN_layers - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_1268": {
                "shape": {
                    "value": "(m, BATCH_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1269": {
                "shape": {
                    "value": "(1, BATCH_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1270": {
                "shape": {
                    "value": "(1, BATCH_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_1272": {
                "x": {
                    "value": "A_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sensing_methods.GenerateMeasurementMatrix(measurement_mode)",
                            "Call"
                        ],
                        [
                            "sensing_methods.GenerateMeasurementMatrix(measurement_mode)",
                            "Call"
                        ],
                        [
                            "sensing_methods.GenerateMeasurementMatrix(measurement_mode)",
                            "Call"
                        ],
                        [
                            "sensing_methods.GenerateMeasurementMatrix(measurement_mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_1306": {
                "name_or_scope": {
                    "value": "l0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_1315": {
                "variable": {
                    "value": "weights[l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(shape=(filter_height, filter_width, num_filters, num_filters), mean=init_mu, stddev=init_sigma)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1321": {
                "name_or_scope": {
                    "value": "'l' + str(n_DnCNN_layers - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Print_1391": {
                "variable": {
                    "value": "rstd",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "rstd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "255.0 * tf.sqrt(tf.reduce_mean(rvar))",
                            "BinOp"
                        ],
                        [
                            "tf.Print(rstd, [rstd], 'rstd =')",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[rstd]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "rstd =",
                    "type": "str",
                    "possible_values": []
                }
            },
            "less_equal_1392": {
                "variable": {
                    "value": "NL_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rstd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "255.0 * tf.sqrt(tf.reduce_mean(rvar))",
                            "BinOp"
                        ],
                        [
                            "tf.Print(rstd, [rstd], 'rstd =')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "logical_and_1393": {
                "variable": {
                    "value": "NL_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(10.0, rstd)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less_equal(rstd, 20.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_1394": {
                "variable": {
                    "value": "NL_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(20.0, rstd)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less_equal(rstd, 40.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_1395": {
                "variable": {
                    "value": "NL_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(40.0, rstd)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less_equal(rstd, 60.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_1396": {
                "variable": {
                    "value": "NL_4",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(60.0, rstd)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less_equal(rstd, 80.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_1397": {
                "variable": {
                    "value": "NL_5",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(80.0, rstd)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less_equal(rstd, 100.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_1398": {
                "variable": {
                    "value": "NL_6",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(100.0, rstd)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less_equal(rstd, 150.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_1399": {
                "variable": {
                    "value": "NL_7",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(150.0, rstd)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less_equal(rstd, 300.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "case_1402": {
                "variable": {
                    "value": "(xhat, dxdr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred_fn_pairs": {
                    "value": "predicates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{NL_0: x_nl0, NL_1: x_nl1, NL_2: x_nl2, NL_3: x_nl3, NL_4: x_nl4, NL_5: x_nl5, NL_6: x_nl6, NL_7: x_nl7}",
                            "Dict"
                        ]
                    ]
                },
                "default": {
                    "value": "default",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_nl8",
                            "Name"
                        ]
                    ]
                },
                "exclusive": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_1403": {
                "variable": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xhat, shape=[n, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 0')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 1')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 2')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 3')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 4')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 5')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 6')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 7')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 8')",
                            "Call"
                        ],
                        [
                            "DnCNN(r, rvar, theta_thislayer, training=training)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n, BATCH_SIZE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1404": {
                "variable": {
                    "value": "dxdr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dxdr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(dxdr, shape=[1, BATCH_SIZE])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, BATCH_SIZE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_1449": {
                "name_or_scope": {
                    "value": "l0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_1457": {
                "variable": {
                    "value": "conv_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layers[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "filters": {
                    "value": "weights[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_1458": {
                "variable": {
                    "value": "batch_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(r, weights[0], strides=[1, 1, 1, 1], padding='SAME', data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(layers[i - 1], weights[i], strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "training",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "new_training",
                            "Name"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "BN",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_1459": {
                "variable": {
                    "value": "layers[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=conv_out, training=training, name='BN', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_1463": {
                "name_or_scope": {
                    "value": "'l' + str(n_DnCNN_layers - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_1467": {
                "tensor": {
                    "value": "x_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "r - layers[n_DnCNN_layers - 1]",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(tf.reshape(x_hat, orig_Shape))",
                            "Call"
                        ],
                        [
                            "DnCNN(y_measured, None, theta_dncnn, training=False)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "orig_Shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(r)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_195": {
                "variable": {
                    "value": "training_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_196": {
                "variable": {
                    "value": "sigma_w_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_197": {
                "variable": {
                    "value": "x_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, BATCH_SIZE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_1284": {
                "a": {
                    "value": "A_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sensing_methods.GenerateMeasurementMatrix(measurement_mode)",
                            "Call"
                        ],
                        [
                            "sensing_methods.GenerateMeasurementMatrix(measurement_mode)",
                            "Call"
                        ],
                        [
                            "sensing_methods.GenerateMeasurementMatrix(measurement_mode)",
                            "Call"
                        ],
                        [
                            "sensing_methods.GenerateMeasurementMatrix(measurement_mode)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xhat, shape=[n, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 0')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 1')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 2')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 3')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 4')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 5')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 6')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 7')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 8')",
                            "Call"
                        ],
                        [
                            "DnCNN(r, rvar, theta_thislayer, training=training)",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_1309": {
                "shape": {
                    "value": "(filter_height, filter_width, channel_img, num_filters)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mean": {
                    "value": "init_mu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.init_mu",
                            "Attribute"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "stddev": {
                    "value": "init_sigma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.init_sigma",
                            "Attribute"
                        ],
                        [
                            "0.1",
                            "Constant"
                        ],
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_1313": {
                "name_or_scope": {
                    "value": "'l' + str(l)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_1324": {
                "shape": {
                    "value": "(filter_height, filter_width, num_filters, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mean": {
                    "value": "init_mu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.init_mu",
                            "Attribute"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "stddev": {
                    "value": "init_sigma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.init_sigma",
                            "Attribute"
                        ],
                        [
                            "0.1",
                            "Constant"
                        ],
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_1333": {
                "name_or_scope": {
                    "value": "Iter0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Print_1340": {
                "variable": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xhat, shape=[n, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 0')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 1')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 2')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 3')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 4')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 5')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 6')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 7')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 8')",
                            "Call"
                        ],
                        [
                            "DnCNN(r, rvar, theta_thislayer, training=training)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[iter]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "used denoiser 0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Print_1346": {
                "variable": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xhat, shape=[n, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 0')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 1')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 2')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 3')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 4')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 5')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 6')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 7')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 8')",
                            "Call"
                        ],
                        [
                            "DnCNN(r, rvar, theta_thislayer, training=training)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[iter]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "used denoiser 1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Print_1352": {
                "variable": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xhat, shape=[n, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 0')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 1')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 2')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 3')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 4')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 5')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 6')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 7')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 8')",
                            "Call"
                        ],
                        [
                            "DnCNN(r, rvar, theta_thislayer, training=training)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[iter]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "used denoiser 2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Print_1358": {
                "variable": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xhat, shape=[n, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 0')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 1')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 2')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 3')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 4')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 5')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 6')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 7')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 8')",
                            "Call"
                        ],
                        [
                            "DnCNN(r, rvar, theta_thislayer, training=training)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[iter]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "used denoiser 3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Print_1364": {
                "variable": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xhat, shape=[n, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 0')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 1')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 2')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 3')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 4')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 5')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 6')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 7')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 8')",
                            "Call"
                        ],
                        [
                            "DnCNN(r, rvar, theta_thislayer, training=training)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[iter]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "used denoiser 4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Print_1370": {
                "variable": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xhat, shape=[n, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 0')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 1')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 2')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 3')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 4')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 5')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 6')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 7')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 8')",
                            "Call"
                        ],
                        [
                            "DnCNN(r, rvar, theta_thislayer, training=training)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[iter]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "used denoiser 5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Print_1376": {
                "variable": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xhat, shape=[n, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 0')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 1')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 2')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 3')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 4')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 5')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 6')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 7')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 8')",
                            "Call"
                        ],
                        [
                            "DnCNN(r, rvar, theta_thislayer, training=training)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[iter]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "used denoiser 6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Print_1382": {
                "variable": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xhat, shape=[n, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 0')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 1')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 2')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 3')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 4')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 5')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 6')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 7')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 8')",
                            "Call"
                        ],
                        [
                            "DnCNN(r, rvar, theta_thislayer, training=training)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[iter]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "used denoiser 7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Print_1388": {
                "variable": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xhat, shape=[n, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 0')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 1')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 2')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 3')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 4')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 5')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 6')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 7')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 8')",
                            "Call"
                        ],
                        [
                            "DnCNN(r, rvar, theta_thislayer, training=training)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[iter]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "used denoiser 8",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_1417": {
                "input_tensor": {
                    "value": "r_abs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.abs(r, name=None)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "complex_1420": {
                "real": {
                    "value": "tf.multiply(eta, epsilon)",
                    "type": "Call",
                    "possible_values": []
                },
                "imag": {
                    "value": "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_1422": {
                "x": {
                    "value": "eta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_normal(shape=r.get_shape(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=Aty_tf.get_shape(), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(0.001 * tf.reduce_max(r_abs, axis=0), 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.maximum(0.001 * tf.reduce_max(Aty_tf, axis=0), 1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_1456": {
                "name_or_scope": {
                    "value": "'l' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reset_default_graph_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_230": {
                "variable": {
                    "value": "optimizer0",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "learning_rates",
                            "Name"
                        ],
                        [
                            "learning_rates",
                            "Name"
                        ]
                    ]
                }
            },
            "get_collection_231": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_236": {
                "variable": {
                    "value": "saver_best",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_239": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_396": {
                "variable": {
                    "value": "x_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, BATCH_SIZE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_422": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_425": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_547": {
                "variable": {
                    "value": "training_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_548": {
                "variable": {
                    "value": "x_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, BATCH_SIZE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_944": {
                "variable": {
                    "value": "x_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, BATCH_SIZE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_1003": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_1007": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "complex_1181": {
                "real": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xhat, shape=[n, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 0')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 1')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 2')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 3')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 4')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 5')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 6')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 7')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 8')",
                            "Call"
                        ],
                        [
                            "DnCNN(r, rvar, theta_thislayer, training=training)",
                            "Call"
                        ]
                    ]
                },
                "imag": {
                    "value": "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_1182": {
                "input_tensor": {
                    "value": "tf.square(tf.abs(z))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_1185": {
                "input_tensor": {
                    "value": "tf.square(tf.abs(z))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "complex_1210": {
                "real": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xhat, shape=[n, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 0')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 1')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 2')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 3')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 4')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 5')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 6')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 7')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 8')",
                            "Call"
                        ],
                        [
                            "DnCNN(r, rvar, theta_thislayer, training=training)",
                            "Call"
                        ]
                    ]
                },
                "imag": {
                    "value": "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_1211": {
                "input_tensor": {
                    "value": "tf.square(tf.abs(Atz))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_1215": {
                "input_tensor": {
                    "value": "tf.square(tf.abs(Atz))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "complex_1243": {
                "real": {
                    "value": "xhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xhat, shape=[n, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 0')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 1')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 2')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 3')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 4')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 5')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 6')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 7')",
                            "Call"
                        ],
                        [
                            "tf.Print(xhat, [iter], 'used denoiser 8')",
                            "Call"
                        ],
                        [
                            "DnCNN(r, rvar, theta_thislayer, training=training)",
                            "Call"
                        ]
                    ]
                },
                "imag": {
                    "value": "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_1244": {
                "input_tensor": {
                    "value": "tf.square(tf.abs(z))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_1247": {
                "input_tensor": {
                    "value": "tf.square(tf.abs(z))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1292": {
                "a": {
                    "value": "A_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sensing_methods.GenerateMeasurementMatrix(measurement_mode)",
                            "Call"
                        ],
                        [
                            "sensing_methods.GenerateMeasurementMatrix(measurement_mode)",
                            "Call"
                        ],
                        [
                            "sensing_methods.GenerateMeasurementMatrix(measurement_mode)",
                            "Call"
                        ],
                        [
                            "sensing_methods.GenerateMeasurementMatrix(measurement_mode)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-05 * tf.ones((m, BATCH_SIZE), dtype=tf.float32)",
                            "BinOp"
                        ],
                        [
                            "Beta * g + (1 - Beta) * s",
                            "BinOp"
                        ]
                    ]
                },
                "adjoint_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "truncated_normal_1316": {
                "shape": {
                    "value": "(filter_height, filter_width, num_filters, num_filters)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mean": {
                    "value": "init_mu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.init_mu",
                            "Attribute"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "stddev": {
                    "value": "init_sigma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.init_sigma",
                            "Attribute"
                        ],
                        [
                            "0.1",
                            "Constant"
                        ],
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "sqrt_1336": {
                "x": {
                    "value": "tf.reduce_mean(rvar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_1393": {
                "x": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "rstd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "255.0 * tf.sqrt(tf.reduce_mean(rvar))",
                            "BinOp"
                        ],
                        [
                            "tf.Print(rstd, [rstd], 'rstd =')",
                            "Call"
                        ]
                    ]
                }
            },
            "less_equal_1393": {
                "x": {
                    "value": "rstd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "255.0 * tf.sqrt(tf.reduce_mean(rvar))",
                            "BinOp"
                        ],
                        [
                            "tf.Print(rstd, [rstd], 'rstd =')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "20.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "less_1394": {
                "x": {
                    "value": "20.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "rstd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "255.0 * tf.sqrt(tf.reduce_mean(rvar))",
                            "BinOp"
                        ],
                        [
                            "tf.Print(rstd, [rstd], 'rstd =')",
                            "Call"
                        ]
                    ]
                }
            },
            "less_equal_1394": {
                "x": {
                    "value": "rstd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "255.0 * tf.sqrt(tf.reduce_mean(rvar))",
                            "BinOp"
                        ],
                        [
                            "tf.Print(rstd, [rstd], 'rstd =')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "40.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "less_1395": {
                "x": {
                    "value": "40.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "rstd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "255.0 * tf.sqrt(tf.reduce_mean(rvar))",
                            "BinOp"
                        ],
                        [
                            "tf.Print(rstd, [rstd], 'rstd =')",
                            "Call"
                        ]
                    ]
                }
            },
            "less_equal_1395": {
                "x": {
                    "value": "rstd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "255.0 * tf.sqrt(tf.reduce_mean(rvar))",
                            "BinOp"
                        ],
                        [
                            "tf.Print(rstd, [rstd], 'rstd =')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "60.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "less_1396": {
                "x": {
                    "value": "60.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "rstd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "255.0 * tf.sqrt(tf.reduce_mean(rvar))",
                            "BinOp"
                        ],
                        [
                            "tf.Print(rstd, [rstd], 'rstd =')",
                            "Call"
                        ]
                    ]
                }
            },
            "less_equal_1396": {
                "x": {
                    "value": "rstd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "255.0 * tf.sqrt(tf.reduce_mean(rvar))",
                            "BinOp"
                        ],
                        [
                            "tf.Print(rstd, [rstd], 'rstd =')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "80.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "less_1397": {
                "x": {
                    "value": "80.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "rstd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "255.0 * tf.sqrt(tf.reduce_mean(rvar))",
                            "BinOp"
                        ],
                        [
                            "tf.Print(rstd, [rstd], 'rstd =')",
                            "Call"
                        ]
                    ]
                }
            },
            "less_equal_1397": {
                "x": {
                    "value": "rstd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "255.0 * tf.sqrt(tf.reduce_mean(rvar))",
                            "BinOp"
                        ],
                        [
                            "tf.Print(rstd, [rstd], 'rstd =')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "100.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "less_1398": {
                "x": {
                    "value": "100.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "rstd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "255.0 * tf.sqrt(tf.reduce_mean(rvar))",
                            "BinOp"
                        ],
                        [
                            "tf.Print(rstd, [rstd], 'rstd =')",
                            "Call"
                        ]
                    ]
                }
            },
            "less_equal_1398": {
                "x": {
                    "value": "rstd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "255.0 * tf.sqrt(tf.reduce_mean(rvar))",
                            "BinOp"
                        ],
                        [
                            "tf.Print(rstd, [rstd], 'rstd =')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "150.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "less_1399": {
                "x": {
                    "value": "150.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "rstd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "255.0 * tf.sqrt(tf.reduce_mean(rvar))",
                            "BinOp"
                        ],
                        [
                            "tf.Print(rstd, [rstd], 'rstd =')",
                            "Call"
                        ]
                    ]
                }
            },
            "less_equal_1399": {
                "x": {
                    "value": "rstd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "255.0 * tf.sqrt(tf.reduce_mean(rvar))",
                            "BinOp"
                        ],
                        [
                            "tf.Print(rstd, [rstd], 'rstd =')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "300.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_1406": {
                "name_or_scope": {
                    "value": "'Iter' + str(iter)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_1420": {
                "x": {
                    "value": "eta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_normal(shape=r.get_shape(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=Aty_tf.get_shape(), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(0.001 * tf.reduce_max(r_abs, axis=0), 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.maximum(0.001 * tf.reduce_max(Aty_tf, axis=0), 1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_1420": {
                "shape": {
                    "value": "[n, BATCH_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reset_default_graph_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_523": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_634": {
                "variable": {
                    "value": "vars_to_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_650": {
                "variable": {
                    "value": "optimizer0",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "learning_rates",
                            "Name"
                        ],
                        [
                            "learning_rates",
                            "Name"
                        ]
                    ]
                }
            },
            "get_collection_651": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_656": {
                "variable": {
                    "value": "saver_best",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_659": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_1181": {
                "shape": {
                    "value": "[n, BATCH_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_1182": {
                "x": {
                    "value": "tf.abs(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_1185": {
                "x": {
                    "value": "tf.abs(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_1210": {
                "shape": {
                    "value": "[n, BATCH_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_1211": {
                "x": {
                    "value": "tf.abs(Atz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_1215": {
                "x": {
                    "value": "tf.abs(Atz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_1243": {
                "shape": {
                    "value": "[n, BATCH_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_1244": {
                "x": {
                    "value": "tf.abs(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_1247": {
                "x": {
                    "value": "tf.abs(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_1336": {
                "input_tensor": {
                    "value": "rvar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 / m_fp * tf.reduce_sum(tf.square(tf.abs(z)), axis=0)",
                            "BinOp"
                        ],
                        [
                            "1.0 / m_fp * tf.reduce_sum(tf.square(tf.abs(z)), axis=0)",
                            "BinOp"
                        ],
                        [
                            "1.0 / n_fp * tf.reduce_sum(tf.square(tf.abs(Atz)), axis=0)",
                            "BinOp"
                        ],
                        [
                            "1.0 / n_fp * tf.reduce_sum(tf.square(tf.abs(Atz)), axis=0)",
                            "BinOp"
                        ],
                        [
                            "1.0 / m_fp * tf.reduce_sum(tf.square(tf.abs(z)), axis=0)",
                            "BinOp"
                        ],
                        [
                            "1.0 / m_fp * tf.reduce_sum(tf.square(tf.abs(z)), axis=0)",
                            "BinOp"
                        ],
                        [
                            "OneOverA_norm2 * n / svar",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(rvar, 1e-05)",
                            "Call"
                        ],
                        [
                            "rvar",
                            "MethodArgument"
                        ],
                        [
                            "rvar",
                            "MethodArgument"
                        ],
                        [
                            "rvar",
                            "MethodArgument"
                        ],
                        [
                            "rvar",
                            "MethodArgument"
                        ],
                        [
                            "rvar",
                            "MethodArgument"
                        ],
                        [
                            "rvar",
                            "MethodArgument"
                        ],
                        [
                            "rvar",
                            "MethodArgument"
                        ],
                        [
                            "rvar",
                            "MethodArgument"
                        ],
                        [
                            "rvar",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_1338": {
                "name_or_scope": {
                    "value": "'Adaptive_NL' + str(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_1344": {
                "name_or_scope": {
                    "value": "'Adaptive_NL' + str(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_1350": {
                "name_or_scope": {
                    "value": "'Adaptive_NL' + str(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_1356": {
                "name_or_scope": {
                    "value": "'Adaptive_NL' + str(3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_1362": {
                "name_or_scope": {
                    "value": "'Adaptive_NL' + str(4)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_1368": {
                "name_or_scope": {
                    "value": "'Adaptive_NL' + str(5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_1374": {
                "name_or_scope": {
                    "value": "'Adaptive_NL' + str(6)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_1380": {
                "name_or_scope": {
                    "value": "'Adaptive_NL' + str(7)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_1386": {
                "name_or_scope": {
                    "value": "'Adaptive_NL' + str(8)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_232": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_244": {
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_272": {
                "variable": {
                    "value": "saver_initvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "saver_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Session_418": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_430": {
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_585": {
                "variable": {
                    "value": "temp0",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "A_val_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "A_val_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_587": {
                "variable": {
                    "value": "pinv_A",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "A_val_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "temp1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matrix_inverse(temp0)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_588": {
                "variable": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pinv_A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(A_val_tf, temp1, transpose_a=True)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "A_val_tf",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_611": {
                "variable": {
                    "value": "x_ML",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pinv_A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(A_val_tf, temp1, transpose_a=True)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "y_measured",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.AddNoise(x_true, sigma_w)",
                            "Call"
                        ],
                        [
                            "utils.AddNoise(x_true, sigma_w_tf)",
                            "Call"
                        ],
                        [
                            "utils.GenerateNoisyCSData_handles(x_true, A_handle, sigma_w, A_val_tf)",
                            "Call"
                        ],
                        [
                            "utils.GenerateNoisyCSData_handles(x_true, A_handle, sigma_w, A_val_tf)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_1010": {
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_1029": {
                "variable": {
                    "value": "saver_initvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "saver_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "abs_1182": {
                "x": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y",
                            "Name"
                        ],
                        [
                            "y - A_handle(A_val, xhat) + n_fp / m_fp * tf.complex(dxdr, 0.0) * z",
                            "BinOp"
                        ],
                        [
                            "y - A_handle(A_val, xhat) + n_fp / m_fp * dxdr * z",
                            "BinOp"
                        ],
                        [
                            "y",
                            "Name"
                        ],
                        [
                            "y - A_handle(A_val, xhat)",
                            "BinOp"
                        ],
                        [
                            "y - A_handle(A_val, xhat)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_1185": {
                "x": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y",
                            "Name"
                        ],
                        [
                            "y - A_handle(A_val, xhat) + n_fp / m_fp * tf.complex(dxdr, 0.0) * z",
                            "BinOp"
                        ],
                        [
                            "y - A_handle(A_val, xhat) + n_fp / m_fp * dxdr * z",
                            "BinOp"
                        ],
                        [
                            "y",
                            "Name"
                        ],
                        [
                            "y - A_handle(A_val, xhat)",
                            "BinOp"
                        ],
                        [
                            "y - A_handle(A_val, xhat)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "complex_1188": {
                "real": {
                    "value": "dxdr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(dxdr, shape=[1, BATCH_SIZE])",
                            "Call"
                        ]
                    ]
                },
                "imag": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_1211": {
                "x": {
                    "value": "Atz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Aty",
                            "Name"
                        ],
                        [
                            "Aty - At_handle(A_val, A_handle(A_val, xhat)) + n_fp / m_fp * tf.complex(dxdr, 0.0) * Atz",
                            "BinOp"
                        ],
                        [
                            "Aty - At_handle(A_val, A_handle(A_val, xhat)) + n_fp / m_fp * dxdr * Atz",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_1215": {
                "x": {
                    "value": "Atz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Aty",
                            "Name"
                        ],
                        [
                            "Aty - At_handle(A_val, A_handle(A_val, xhat)) + n_fp / m_fp * tf.complex(dxdr, 0.0) * Atz",
                            "BinOp"
                        ],
                        [
                            "Aty - At_handle(A_val, A_handle(A_val, xhat)) + n_fp / m_fp * dxdr * Atz",
                            "BinOp"
                        ]
                    ]
                }
            },
            "complex_1220": {
                "real": {
                    "value": "dxdr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(dxdr, shape=[1, BATCH_SIZE])",
                            "Call"
                        ]
                    ]
                },
                "imag": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_1244": {
                "x": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y",
                            "Name"
                        ],
                        [
                            "y - A_handle(A_val, xhat) + n_fp / m_fp * tf.complex(dxdr, 0.0) * z",
                            "BinOp"
                        ],
                        [
                            "y - A_handle(A_val, xhat) + n_fp / m_fp * dxdr * z",
                            "BinOp"
                        ],
                        [
                            "y",
                            "Name"
                        ],
                        [
                            "y - A_handle(A_val, xhat)",
                            "BinOp"
                        ],
                        [
                            "y - A_handle(A_val, xhat)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_1247": {
                "x": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y",
                            "Name"
                        ],
                        [
                            "y - A_handle(A_val, xhat) + n_fp / m_fp * tf.complex(dxdr, 0.0) * z",
                            "BinOp"
                        ],
                        [
                            "y - A_handle(A_val, xhat) + n_fp / m_fp * dxdr * z",
                            "BinOp"
                        ],
                        [
                            "y",
                            "Name"
                        ],
                        [
                            "y - A_handle(A_val, xhat)",
                            "BinOp"
                        ],
                        [
                            "y - A_handle(A_val, xhat)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "l2_loss_215": {
                "t": {
                    "value": "x_true - x_hat",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_557": {
                "name_or_scope": {
                    "value": "'Iter' + str(iter)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_582": {
                "x": {
                    "value": "rvar_final",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "maximum_599": {
                "variable": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.001 * tf.reduce_max(Aty_tf, axis=0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_606": {
                "variable": {
                    "value": "Px_hat_perturbed",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(pinv_A, A_val_tf)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "x_hat_perturbed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_607": {
                "variable": {
                    "value": "Px_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(pinv_A, A_val_tf)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "x_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "r - layers[n_DnCNN_layers - 1]",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(tf.reshape(x_hat, orig_Shape))",
                            "Call"
                        ],
                        [
                            "DnCNN(y_measured, None, theta_dncnn, training=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_608": {
                "variable": {
                    "value": "eta_dx",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "eta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_normal(shape=r.get_shape(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=Aty_tf.get_shape(), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Px_hat_perturbed - Px_hat",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_609": {
                "variable": {
                    "value": "mean_eta_dx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "eta_dx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(eta, xhat_perturbed - xhat)",
                            "Call"
                        ],
                        [
                            "tf.multiply(eta, Px_hat_perturbed - Px_hat)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "control_dependencies_652": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_664": {
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_952": {
                "name_or_scope": {
                    "value": "'Iter' + str(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_666": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_695": {
                "variable": {
                    "value": "saver_initvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "saver_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Saver_747": {
                "variable": {
                    "value": "saver_initvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "saver_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Saver_1052": {
                "variable": {
                    "value": "saver_initvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "saver_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "multiply_601": {
                "x": {
                    "value": "eta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_normal(shape=r.get_shape(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=Aty_tf.get_shape(), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(0.001 * tf.reduce_max(r_abs, axis=0), 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.maximum(0.001 * tf.reduce_max(Aty_tf, axis=0), 1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_610": {
                "x": {
                    "value": "mean_eta_dx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(eta_dx, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(eta_dx, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(0.001 * tf.reduce_max(r_abs, axis=0), 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.maximum(0.001 * tf.reduce_max(Aty_tf, axis=0), 1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_615": {
                "t": {
                    "value": "x_true - x_hat",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_725": {
                "variable": {
                    "value": "saver_initvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "saver_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Saver_800": {
                "variable": {
                    "value": "saver_initvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "saver_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "variable_scope_962": {
                "name_or_scope": {
                    "value": "'Adaptive_NL' + str(noise_level)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_968": {
                "name_or_scope": {
                    "value": "'Iter' + str(iter)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_599": {
                "input_tensor": {
                    "value": "Aty_tf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "At_handle(A_val_tf, y_measured)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_628": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_629": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_630": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_631": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_776": {
                "variable": {
                    "value": "saver_initvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "saver_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "global_variables_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_1021": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_1022": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_1023": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_1024": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_686": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_687": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_688": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_689": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_739": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_740": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_741": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_742": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_1044": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_1045": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_1046": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_1047": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_715": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_716": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_717": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_718": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_790": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_791": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_792": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_793": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_766": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_767": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_768": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_769": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "LDAMP/sensing_methods.py": {
        "tensorflow": {
            "concat_168": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, tf.zeros([1, n], tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fft_169": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.complex(y, tf.zeros([1, 2 * n], tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "complex_171": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "real": {
                    "value": "tf.range(n, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "imag": {
                    "value": "tf.zeros(n, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reverse_179": {
                "variable": {
                    "value": "temp0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "roll_180": {
                "variable": {
                    "value": "temp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reverse(X, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shift": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_182": {
                "variable": {
                    "value": "temp3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "temp2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "temp1[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "complex_183": {
                "variable": {
                    "value": "Z",
                    "type": "Variable",
                    "possible_values": []
                },
                "real": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "imag": {
                    "value": "-temp3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "complex_184": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "real": {
                    "value": "tf.range(n, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "imag": {
                    "value": "tf.zeros(n, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "real_186": {
                "variable": {
                    "value": "temp4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.ifft(Z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reverse_188": {
                "variable": {
                    "value": "odd_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "temp4[:, n / 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_190": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(tf.concat([even_new, odd_new], axis=0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "y_measured",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[m, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "A_val_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[m, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_172": {
                "x": {
                    "value": "-1j * np.pi * k / (2.0 * n_fp)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_185": {
                "x": {
                    "value": "1j * np.pi * k / (2.0 * n_fp)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "y_measured",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[m, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "A_val_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[m, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "complex_169": {
                "real": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([x, tf.zeros([1, n], tf.float32)], axis=1)",
                            "Call"
                        ],
                        [
                            "np.zeros(2 * N)",
                            "Call"
                        ]
                    ]
                },
                "imag": {
                    "value": "tf.zeros([1, 2 * n], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "range_171": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_171": {
                "shape": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "new_n",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_173": {
                "x": {
                    "value": "n_fp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32(n)",
                            "Call"
                        ]
                    ]
                }
            },
            "range_184": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_184": {
                "shape": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "new_n",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ifft_186": {
                "input": {
                    "value": "Z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.complex(X, -temp3)",
                            "Call"
                        ],
                        [
                            "Z * np.exp(1j * np.pi * k / (2 * N))",
                            "BinOp"
                        ],
                        [
                            "X - 1j * np.append([0.0], np.flip(X, 0)[:N - 1])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_191": {
                "a": {
                    "value": "tf.concat([even_new, odd_new], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_193": {
                "x": {
                    "value": "n_fp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32(n)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_47": {
                "a": {
                    "value": "A_vals_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(tf.concat([even_new, odd_new], axis=0)), [1, n])",
                            "Call"
                        ],
                        [
                            "np.zeros(X.size)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_50": {
                "a": {
                    "value": "A_vals_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "adjoint_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_73": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "new_m",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseTensor_74": {
                "variable": {
                    "value": "sparse_sampling_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(zip(row_inds, rand_col_inds))",
                            "Call"
                        ],
                        [
                            "list(zip(row_inds, rand_col_inds))",
                            "Call"
                        ],
                        [
                            "list(zip(row_inds, rand_col_inds))",
                            "Call"
                        ],
                        [
                            "list(zip(row_inds, rand_col_inds))",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones(m, dtype=tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.ones(m, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(m, dtype=tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.ones(m, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dense_shape": {
                    "value": "[m, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "A_val_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_149": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "new_m",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseTensor_150": {
                "variable": {
                    "value": "sparse_sampling_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(zip(row_inds, rand_col_inds))",
                            "Call"
                        ],
                        [
                            "list(zip(row_inds, rand_col_inds))",
                            "Call"
                        ],
                        [
                            "list(zip(row_inds, rand_col_inds))",
                            "Call"
                        ],
                        [
                            "list(zip(row_inds, rand_col_inds))",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones(m, dtype=tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.ones(m, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(m, dtype=tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.ones(m, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dense_shape": {
                    "value": "[m, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_168": {
                "shape": {
                    "value": "[1, n]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_169": {
                "shape": {
                    "value": "[1, 2 * n]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "real_173": {
                "input": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.fft(tf.complex(y, tf.zeros([1, 2 * n], tf.float32)))",
                            "Call"
                        ],
                        [
                            "Y[:, :n]",
                            "Subscript"
                        ],
                        [
                            "Y * (np.exp(-1j * np.pi * k / (2 * N)) / np.sqrt(N / 2.0))",
                            "BinOp"
                        ],
                        [
                            "np.fft.fft(y)[:N]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "concat_191": {
                "values": {
                    "value": "[even_new, odd_new]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_59": {
                "a": {
                    "value": "A_vals_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.complex(x, tf.zeros([n, BATCH_SIZE], dtype=tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_62": {
                "a": {
                    "value": "A_vals_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "adjoint_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multiply_79": {
                "variable": {
                    "value": "signed_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sign_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "A_val_tf[0:n]",
                            "Subscript"
                        ],
                        [
                            "A_val_tf[0:n]",
                            "Subscript"
                        ],
                        [
                            "A_val_tf[0:n]",
                            "Subscript"
                        ],
                        [
                            "A_val_tf[0:n]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.complex(x, tf.zeros([n, BATCH_SIZE], dtype=tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "signed_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signed_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(sign_vec, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(signed_x, [height_img * width_img, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.transpose(signed_x)",
                            "Call"
                        ],
                        [
                            "tf.multiply(sign_vec, tf.complex(x, tf.zeros([n, BATCH_SIZE], dtype=tf.float32)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(signed_x, [height_img, width_img, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.transpose(signed_x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[height_img, width_img, BATCH_SIZE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_81": {
                "variable": {
                    "value": "signed_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "signed_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(sign_vec, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(signed_x, [height_img * width_img, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.transpose(signed_x)",
                            "Call"
                        ],
                        [
                            "tf.multiply(sign_vec, tf.complex(x, tf.zeros([n, BATCH_SIZE], dtype=tf.float32)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(signed_x, [height_img, width_img, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.transpose(signed_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "fft2d_82": {
                "variable": {
                    "value": "F_signed_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signed_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(sign_vec, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(signed_x, [height_img * width_img, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.transpose(signed_x)",
                            "Call"
                        ],
                        [
                            "tf.multiply(sign_vec, tf.complex(x, tf.zeros([n, BATCH_SIZE], dtype=tf.float32)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(signed_x, [height_img, width_img, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.transpose(signed_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_83": {
                "variable": {
                    "value": "F_signed_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "F_signed_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mydct(signed_x, type=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "tf.transpose(F_signed_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(F_signed_x, [height_img * width_img, BATCH_SIZE]) * np.sqrt(n_fp / m_fp)",
                            "BinOp"
                        ],
                        [
                            "tf.fft2d(signed_x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(F_signed_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(F_signed_x, [height_img * width_img, BATCH_SIZE]) * 1.0 / np.sqrt(m_fp)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "z_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z_padded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sparse_tensor_dense_matmul(sparse_sampling_matrix, z, adjoint_a=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z_padded, [height_img * width_img, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.transpose(z_padded)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(sparse_sampling_matrix, z, adjoint_a=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z_padded, [height_img, width_img, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.transpose(z_padded)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[height_img, width_img, BATCH_SIZE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_92": {
                "variable": {
                    "value": "z_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "z_padded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sparse_tensor_dense_matmul(sparse_sampling_matrix, z, adjoint_a=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z_padded, [height_img * width_img, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.transpose(z_padded)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(sparse_sampling_matrix, z, adjoint_a=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z_padded, [height_img, width_img, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.transpose(z_padded)",
                            "Call"
                        ]
                    ]
                }
            },
            "ifft2d_93": {
                "variable": {
                    "value": "Finv_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_padded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sparse_tensor_dense_matmul(sparse_sampling_matrix, z, adjoint_a=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z_padded, [height_img * width_img, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.transpose(z_padded)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(sparse_sampling_matrix, z, adjoint_a=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z_padded, [height_img, width_img, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.transpose(z_padded)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_94": {
                "variable": {
                    "value": "Finv_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Finv_z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "myidct(z_padded, type=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "tf.transpose(Finv_z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Finv_z, [height_img * width_img, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.ifft2d(z_padded)",
                            "Call"
                        ],
                        [
                            "tf.transpose(Finv_z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Finv_z, [height_img * width_img, BATCH_SIZE])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_95": {
                "variable": {
                    "value": "Finv_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Finv_z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "myidct(z_padded, type=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "tf.transpose(Finv_z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Finv_z, [height_img * width_img, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.ifft2d(z_padded)",
                            "Call"
                        ],
                        [
                            "tf.transpose(Finv_z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Finv_z, [height_img * width_img, BATCH_SIZE])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[height_img * width_img, BATCH_SIZE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_108": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "new_m",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseTensor_109": {
                "variable": {
                    "value": "sparse_sampling_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(zip(row_inds, rand_col_inds))",
                            "Call"
                        ],
                        [
                            "list(zip(row_inds, rand_col_inds))",
                            "Call"
                        ],
                        [
                            "list(zip(row_inds, rand_col_inds))",
                            "Call"
                        ],
                        [
                            "list(zip(row_inds, rand_col_inds))",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones(m, dtype=tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.ones(m, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(m, dtype=tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.ones(m, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dense_shape": {
                    "value": "[m, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "A_val_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_158": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "new_m",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseTensor_159": {
                "variable": {
                    "value": "sparse_sampling_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(zip(row_inds, rand_col_inds))",
                            "Call"
                        ],
                        [
                            "list(zip(row_inds, rand_col_inds))",
                            "Call"
                        ],
                        [
                            "list(zip(row_inds, rand_col_inds))",
                            "Call"
                        ],
                        [
                            "list(zip(row_inds, rand_col_inds))",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones(m, dtype=tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.ones(m, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(m, dtype=tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.ones(m, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dense_shape": {
                    "value": "[m, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "real_193": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(tf.concat([even_new, odd_new], axis=0)), [1, n])",
                            "Call"
                        ],
                        [
                            "np.zeros(X.size)",
                            "Call"
                        ]
                    ]
                }
            },
            "complex_59": {
                "real": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(tf.concat([even_new, odd_new], axis=0)), [1, n])",
                            "Call"
                        ],
                        [
                            "np.zeros(X.size)",
                            "Call"
                        ]
                    ]
                },
                "imag": {
                    "value": "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_114": {
                "variable": {
                    "value": "signed_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sign_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "A_val_tf[0:n]",
                            "Subscript"
                        ],
                        [
                            "A_val_tf[0:n]",
                            "Subscript"
                        ],
                        [
                            "A_val_tf[0:n]",
                            "Subscript"
                        ],
                        [
                            "A_val_tf[0:n]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(tf.concat([even_new, odd_new], axis=0)), [1, n])",
                            "Call"
                        ],
                        [
                            "np.zeros(X.size)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_115": {
                "variable": {
                    "value": "signed_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signed_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(sign_vec, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(signed_x, [height_img * width_img, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.transpose(signed_x)",
                            "Call"
                        ],
                        [
                            "tf.multiply(sign_vec, tf.complex(x, tf.zeros([n, BATCH_SIZE], dtype=tf.float32)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(signed_x, [height_img, width_img, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.transpose(signed_x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[height_img * width_img, BATCH_SIZE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_116": {
                "variable": {
                    "value": "signed_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "signed_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(sign_vec, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(signed_x, [height_img * width_img, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.transpose(signed_x)",
                            "Call"
                        ],
                        [
                            "tf.multiply(sign_vec, tf.complex(x, tf.zeros([n, BATCH_SIZE], dtype=tf.float32)))",
                            "Call"
                        ],
                        [
                            "tf.reshape(signed_x, [height_img, width_img, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.transpose(signed_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_118": {
                "variable": {
                    "value": "F_signed_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "F_signed_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mydct(signed_x, type=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "tf.transpose(F_signed_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(F_signed_x, [height_img * width_img, BATCH_SIZE]) * np.sqrt(n_fp / m_fp)",
                            "BinOp"
                        ],
                        [
                            "tf.fft2d(signed_x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(F_signed_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(F_signed_x, [height_img * width_img, BATCH_SIZE]) * 1.0 / np.sqrt(m_fp)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_126": {
                "variable": {
                    "value": "z_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z_padded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sparse_tensor_dense_matmul(sparse_sampling_matrix, z, adjoint_a=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z_padded, [height_img * width_img, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.transpose(z_padded)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(sparse_sampling_matrix, z, adjoint_a=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z_padded, [height_img, width_img, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.transpose(z_padded)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[height_img * width_img, BATCH_SIZE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_127": {
                "variable": {
                    "value": "z_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "z_padded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sparse_tensor_dense_matmul(sparse_sampling_matrix, z, adjoint_a=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z_padded, [height_img * width_img, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.transpose(z_padded)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(sparse_sampling_matrix, z, adjoint_a=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z_padded, [height_img, width_img, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.transpose(z_padded)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_129": {
                "variable": {
                    "value": "Finv_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Finv_z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "myidct(z_padded, type=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "tf.transpose(Finv_z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Finv_z, [height_img * width_img, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.ifft2d(z_padded)",
                            "Call"
                        ],
                        [
                            "tf.transpose(Finv_z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Finv_z, [height_img * width_img, BATCH_SIZE])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_130": {
                "variable": {
                    "value": "Finv_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Finv_z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "myidct(z_padded, type=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "tf.transpose(Finv_z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Finv_z, [height_img * width_img, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.ifft2d(z_padded)",
                            "Call"
                        ],
                        [
                            "tf.transpose(Finv_z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Finv_z, [height_img * width_img, BATCH_SIZE])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[height_img * width_img, BATCH_SIZE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "shape": {
                    "value": "[n, BATCH_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "complex_79": {
                "real": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(tf.concat([even_new, odd_new], axis=0)), [1, n])",
                            "Call"
                        ],
                        [
                            "np.zeros(X.size)",
                            "Call"
                        ]
                    ]
                },
                "imag": {
                    "value": "tf.zeros([n, BATCH_SIZE], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "shape": {
                    "value": "[n, BATCH_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "tensor": {
                    "value": "F_signed_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mydct(signed_x, type=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "tf.transpose(F_signed_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(F_signed_x, [height_img * width_img, BATCH_SIZE]) * np.sqrt(n_fp / m_fp)",
                            "BinOp"
                        ],
                        [
                            "tf.fft2d(signed_x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(F_signed_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(F_signed_x, [height_img * width_img, BATCH_SIZE]) * 1.0 / np.sqrt(m_fp)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[height_img * width_img, BATCH_SIZE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_96": {
                "x": {
                    "value": "tf.conj(sign_vec)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "Finv_z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "myidct(z_padded, type=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "tf.transpose(Finv_z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Finv_z, [height_img * width_img, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.ifft2d(z_padded)",
                            "Call"
                        ],
                        [
                            "tf.transpose(Finv_z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Finv_z, [height_img * width_img, BATCH_SIZE])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_119": {
                "tensor": {
                    "value": "F_signed_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mydct(signed_x, type=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "tf.transpose(F_signed_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(F_signed_x, [height_img * width_img, BATCH_SIZE]) * np.sqrt(n_fp / m_fp)",
                            "BinOp"
                        ],
                        [
                            "tf.fft2d(signed_x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(F_signed_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(F_signed_x, [height_img * width_img, BATCH_SIZE]) * 1.0 / np.sqrt(m_fp)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[height_img * width_img, BATCH_SIZE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_131": {
                "x": {
                    "value": "sign_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "A_val_tf[0:n]",
                            "Subscript"
                        ],
                        [
                            "A_val_tf[0:n]",
                            "Subscript"
                        ],
                        [
                            "A_val_tf[0:n]",
                            "Subscript"
                        ],
                        [
                            "A_val_tf[0:n]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "Finv_z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "myidct(z_padded, type=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "tf.transpose(Finv_z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Finv_z, [height_img * width_img, BATCH_SIZE])",
                            "Call"
                        ],
                        [
                            "tf.ifft2d(z_padded)",
                            "Call"
                        ],
                        [
                            "tf.transpose(Finv_z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Finv_z, [height_img * width_img, BATCH_SIZE])",
                            "Call"
                        ]
                    ]
                }
            },
            "conj_96": {
                "x": {
                    "value": "sign_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "A_val_tf[0:n]",
                            "Subscript"
                        ],
                        [
                            "A_val_tf[0:n]",
                            "Subscript"
                        ],
                        [
                            "A_val_tf[0:n]",
                            "Subscript"
                        ],
                        [
                            "A_val_tf[0:n]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "LDAMP/utils.py": {
        "tensorflow": {
            "clip_by_value_163": {
                "variable": {
                    "value": "x_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x_hat, clip_value_min=0, clip_value_max=1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_164": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x_hat - x_true)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_166": {
                "variable": {
                    "value": "xnorm2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x_true)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_193": {
                "variable": {
                    "value": "phat_abs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "phat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "minimum_195": {
                "variable": {
                    "value": "I1overI0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.div(B, tf.sqrt(tf.square(B) + 4))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.div(B, 0.5 + tf.sqrt(tf.square(B) + 0.25))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_196": {
                "x": {
                    "value": "wvar",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "pvar",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "div_197": {
                "x": {
                    "value": "pvar",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "wvar",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "multiply_198": {
                "x": {
                    "value": "y_sca",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.div(y_abs, 1.0 + tf.div(wvar, pvar))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "I1overI0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.div(B, tf.sqrt(tf.square(B) + 4)), tf.div(B, 0.5 + tf.sqrt(tf.square(B) + 0.25)))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_200": {
                "x": {
                    "value": "tf.div(1.0, wvar)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.div(1.0, pvar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_202": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.div(1.0, pvar)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.subtract(zhat, phat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_203": {
                "variable": {
                    "value": "dg",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.div(1.0, pvar)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.subtract(tf.div(tf.reduce_mean(sigma2_z, axis=(1, 2, 3)), pvar), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_215": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_226": {
                "variable": {
                    "value": "noisy",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "noisy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "clean + noise_vec",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(noisy, clean.shape)",
                            "Call"
                        ],
                        [
                            "clean + noise_vec",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "clean.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_283": {
                "variable": {
                    "value": "Pxhatnorm2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(tf.matmul(P, x_hat)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_284": {
                "variable": {
                    "value": "temp0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x_hat, clip_value_min=0, clip_value_max=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x_ML",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_285": {
                "variable": {
                    "value": "x_hatt_xML",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "temp0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(x_hat, x_ML)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_290": {
                "variable": {
                    "value": "Pxtruenorm2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(tf.matmul(P, x_true)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_279": {
                "input_tensor": {
                    "value": "(y - x_hat) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_286": {
                "input_tensor": {
                    "value": "Pxhatnorm2 + 2.0 * sigma_w ** 2 * MCdiv - 2.0 * x_hatt_xML",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_164": {
                "x": {
                    "value": "x_hat - x_true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_166": {
                "x": {
                    "value": "x_true",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_169": {
                "x": {
                    "value": "1.0 / mse",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_194": {
                "x": {
                    "value": "tf.multiply(y_abs, phat_abs)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wvar + pvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_195": {
                "x": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0 * tf.div(tf.multiply(y_abs, phat_abs), wvar + pvar)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5 + tf.sqrt(tf.square(B) + 0.25)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_198": {
                "x": {
                    "value": "phat_sca",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.div(phat_abs, 1.0 + tf.div(pvar, wvar))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.multiply(y_sca, I1overI0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_198": {
                "x": {
                    "value": "phat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "subtract_200": {
                "x": {
                    "value": "tf.div(1.0 + tf.multiply(B, I1overI0), tf.add(tf.div(1.0, wvar), tf.div(1.0, pvar)))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(tf.abs(zhat))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_202": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "pvar",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "subtract_202": {
                "x": {
                    "value": "zhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.add(phat_sca, tf.multiply(y_sca, I1overI0)), tf.sign(phat))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "phat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "div_203": {
                "x": {
                    "value": "tf.reduce_mean(sigma2_z, axis=(1, 2, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "pvar",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "subtract_203": {
                "x": {
                    "value": "tf.div(tf.reduce_mean(sigma2_z, axis=(1, 2, 3)), pvar)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_291": {
                "input_tensor": {
                    "value": "Pxtruenorm2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.abs(tf.matmul(P, x_true)) ** 2, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_194": {
                "x": {
                    "value": "y_abs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "phat_abs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.abs(phat)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_195": {
                "x": {
                    "value": "tf.square(B) + 0.25",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_200": {
                "x": {
                    "value": "tf.abs(zhat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_200": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "pvar",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "complex_222": {
                "real": {
                    "value": "tf.random_normal(shape=clean.shape, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "imag": {
                    "value": "tf.random_normal(shape=clean.shape, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_283": {
                "x": {
                    "value": "tf.matmul(P, x_hat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_290": {
                "x": {
                    "value": "tf.matmul(P, x_true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_200": {
                "x": {
                    "value": "zhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.add(phat_sca, tf.multiply(y_sca, I1overI0)), tf.sign(phat))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_203": {
                "input_tensor": {
                    "value": "sigma2_z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(tf.add(tf.square(y_sca), tf.square(phat_sca)), tf.subtract(tf.div(1.0 + tf.multiply(B, I1overI0), tf.add(tf.div(1.0, wvar), tf.div(1.0, pvar))), tf.square(tf.abs(zhat))))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_283": {
                "a": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "x_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(x_hat, clip_value_min=0, clip_value_max=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_290": {
                "a": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "x_true",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_195": {
                "x": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0 * tf.div(tf.multiply(y_abs, phat_abs), wvar + pvar)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_200": {
                "x": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0 * tf.div(tf.multiply(y_abs, phat_abs), wvar + pvar)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "I1overI0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.div(B, tf.sqrt(tf.square(B) + 4)), tf.div(B, 0.5 + tf.sqrt(tf.square(B) + 0.25)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CSGAN/main.py": {
        "torch": {}
    },
    "CSGAN/reconstruction_methods.py": {
        "torch": {
            "norm_99": {
                "variable": {
                    "value": "img_diff_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.flatten(img1, start_dim=1) - torch.flatten(img2, start_dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "p": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "norm_100": {
                "variable": {
                    "value": "m_diff_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m1 - m2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "p": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Linear_426": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_442": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(num_inputs, 500, True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_461": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "8192",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_462": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(num_inputs, 512, 4, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_486": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "8192",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_487": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(512, 256, 5, 2, padding=2, output_padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_504": {
                "variable": {
                    "value": "first_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.lin(inputs)",
                            "Call"
                        ],
                        [
                            "self.lin(inputs)",
                            "Call"
                        ],
                        [
                            "self.lin(inputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, 512, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_511": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_512": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(512, 256, 5, 2, padding=2, output_padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_529": {
                "variable": {
                    "value": "first_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.lin(inputs)",
                            "Call"
                        ],
                        [
                            "self.lin(inputs)",
                            "Call"
                        ],
                        [
                            "self.lin(inputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, 512, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_537": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "8192",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_538": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(512, 256, (4, 4), 2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_555": {
                "variable": {
                    "value": "first_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.lin(inputs)",
                            "Call"
                        ],
                        [
                            "self.lin(inputs)",
                            "Call"
                        ],
                        [
                            "self.lin(inputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, 512, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "normalize_586": {
                "variable": {
                    "value": "z_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_project_z(init_z, self.z_project_method)",
                            "Call"
                        ],
                        [
                            "z.add(-1 * self.s * z_grad)",
                            "Call"
                        ],
                        [
                            "_project_z(z, self.z_project_method)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_default_dtype_43": {
                "d": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "self.trainloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_79": {
                "variable": {
                    "value": "self.valloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_94": {
                "input": {
                    "value": "torch.square(self.m_targets - self.m_samples)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_101": {
                "input": {
                    "value": "img_diff_norm - m_diff_norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_141": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(list(self.generator.parameters()) + list(self._log_step_size_module.parameters()) + list(metric_params))",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_454": {
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.main(inputs)",
                            "Call"
                        ],
                        [
                            "self.main(inputs)",
                            "Call"
                        ],
                        [
                            "self.main(first_tensor)",
                            "Call"
                        ],
                        [
                            "self.main(first_tensor)",
                            "Call"
                        ],
                        [
                            "self.main(first_tensor)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batchsize, self.channels, self.imgdim, self.imgdim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_599": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_72": {
                "input": {
                    "value": "self._log_step_size_module.forward(torch.tensor([1.0]).cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_81": {
                "variable": {
                    "value": "self.testloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_94": {
                "input": {
                    "value": "self.m_targets - self.m_samples",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_150": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.output_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_174": {
                "variable": {
                    "value": "optimisation_cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((optimised_z - generator_inputs) ** 2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_176": {
                "variable": {
                    "value": "generator_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.get_measurement_error(images, samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_181": {
                "variable": {
                    "value": "rip_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(r1 + r2 + r3) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_188": {
                "variable": {
                    "value": "recons_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(torch.flatten(samples, start_dim=1) - torch.flatten(images, start_dim=1), dim=-1, p=None)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_443": {
                "in_features": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_444": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_445": {
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_446": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_447": {
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_448": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_463": {
                "in_channels": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_464": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_465": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_466": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_467": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_468": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_469": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_470": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_471": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_472": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_473": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_474": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_475": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_476": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_488": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_489": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_490": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_491": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_492": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_493": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_494": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_495": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_496": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_497": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_498": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_513": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_514": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_515": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_516": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_517": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_518": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_519": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_520": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_521": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_522": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_523": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_539": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_540": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_541": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_542": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_543": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_544": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_545": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_546": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_547": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_548": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_549": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_99": {
                "input": {
                    "value": "img2",
                    "type": "Variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_341": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.output_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_122": {
                "outputs": {
                    "value": "gen_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_measurement_error(data, loop_samples)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_project_z(init_z, self.z_project_method)",
                            "Call"
                        ],
                        [
                            "z.add(-1 * self.s * z_grad)",
                            "Call"
                        ],
                        [
                            "_project_z(z, self.z_project_method)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones_like(gen_loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_174": {
                "input": {
                    "value": "(optimised_z - generator_inputs) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_188": {
                "input": {
                    "value": "torch.flatten(samples, start_dim=1) - torch.flatten(images, start_dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "p": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "save_327": {
                "obj": {
                    "value": "{'iter': iter, 'best_iter': best_iter, 'best_recons_loss': best_recons_loss, 'loss': total_loss, 'generator_state_dict': self.generator.state_dict(), 'sensing_method_state_dict': self.sensing_method.state_dict(), '_log_step_size_module_state_dict': self._log_step_size_module.state_dict(), 'optimizer_state_dict': self.optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "self.output_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_246": {
                "variable": {
                    "value": "optimisation_cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((optimised_z - generator_inputs) ** 2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_248": {
                "variable": {
                    "value": "generator_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.get_measurement_error(valimages, samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_253": {
                "variable": {
                    "value": "rip_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(r1 + r2 + r3) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_256": {
                "variable": {
                    "value": "recons_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(torch.flatten(samples, start_dim=1) - torch.flatten(valimages, start_dim=1), dim=-1, p=None)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_306": {
                "obj": {
                    "value": "{'iter': iter, 'best_iter': best_iter, 'best_recons_loss': best_recons_loss, 'loss': total_loss, 'generator_state_dict': self.generator.state_dict(), 'sensing_method_state_dict': self.sensing_method.state_dict(), '_log_step_size_module_state_dict': self._log_step_size_module.state_dict(), 'optimizer_state_dict': self.optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "self.output_file_best",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_367": {
                "variable": {
                    "value": "optimisation_cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((optimised_z - generator_inputs) ** 2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_369": {
                "variable": {
                    "value": "generator_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.get_measurement_error(images, samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_374": {
                "variable": {
                    "value": "rip_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(r1 + r2 + r3) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_377": {
                "variable": {
                    "value": "recons_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(torch.flatten(samples, start_dim=1) - torch.flatten(images, start_dim=1), dim=-1, p=None)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_122": {
                "input": {
                    "value": "gen_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_measurement_error(data, loop_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_188": {
                "input": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images.cuda()",
                            "Call"
                        ],
                        [
                            "images.cuda()",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_366": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_246": {
                "input": {
                    "value": "(optimised_z - generator_inputs) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_256": {
                "input": {
                    "value": "torch.flatten(samples, start_dim=1) - torch.flatten(valimages, start_dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "p": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "sum_367": {
                "input": {
                    "value": "(optimised_z - generator_inputs) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_377": {
                "input": {
                    "value": "torch.flatten(samples, start_dim=1) - torch.flatten(images, start_dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "p": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "flatten_256": {
                "input": {
                    "value": "valimages",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_valimages.cuda()",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_377": {
                "input": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images.cuda()",
                            "Call"
                        ],
                        [
                            "images.cuda()",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CSGAN/sensing_methods.py": {
        "torch": {
            "normal_25": {
                "variable": {
                    "value": "sm",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "std": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.m, self.n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.s1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_34": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.s1(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.m]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(n, 500, True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_48": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.flatten(inputs, start_dim=1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, (3, 3), 1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, (5, 5), 2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(8192, m, True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_42": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_44": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_57": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_59": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_61": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_63": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_65": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_67": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_69": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "flatten_77": {
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.main(inputs)",
                            "Call"
                        ],
                        [
                            "self.lin(torch.flatten(outputs, start_dim=1))",
                            "Call"
                        ],
                        [
                            "self.main(inputs)",
                            "Call"
                        ],
                        [
                            "self.lin(torch.flatten(outputs, start_dim=1))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ZeroPad2d_85": {
                "padding": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LeakyReLU_86": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ZeroPad2d_88": {
                "padding": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_90": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ZeroPad2d_92": {
                "padding": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_93": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_94": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ZeroPad2d_96": {
                "padding": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_98": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "in_features": {
                    "value": "8192",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "flatten_107": {
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.main(inputs)",
                            "Call"
                        ],
                        [
                            "self.lin(torch.flatten(outputs, start_dim=1))",
                            "Call"
                        ],
                        [
                            "self.main(inputs)",
                            "Call"
                        ],
                        [
                            "self.lin(torch.flatten(outputs, start_dim=1))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CSGAN/utils.py": {
        "torch": {
            "tensor_94": {
                "variable": {
                    "value": "clean",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "clean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(clean)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_95": {
                "variable": {
                    "value": "noise_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "clean.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "prior_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_latents",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_117": {
                "variable": {
                    "value": "prior_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_latents",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Normal_119": {
                "loc": {
                    "value": "prior_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(num_latents, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "prior_scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(num_latents, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ISTANet/reconstruction_methods.py": {
        "torch": {
            "device_18": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Parameter_318": {
                "variable": {
                    "value": "self.lambda_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_319": {
                "variable": {
                    "value": "self.soft_thr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.01])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_322": {
                "variable": {
                    "value": "self.conv_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 1, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_324": {
                "variable": {
                    "value": "self.conv1_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_325": {
                "variable": {
                    "value": "self.conv2_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_326": {
                "variable": {
                    "value": "self.conv1_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_327": {
                "variable": {
                    "value": "self.conv2_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_329": {
                "variable": {
                    "value": "self.conv_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(1, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_336": {
                "variable": {
                    "value": "x_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, 1, self.specifics['input_width'], self.specifics['input_width'])",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.specifics['input_width'], self.specifics['input_width'])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_338": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.conv2d(x_input, self.conv_D, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv1_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_339": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_340": {
                "variable": {
                    "value": "x_forward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv2_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_342": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sign(x_forward)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "F.relu(torch.abs(x_forward) - self.soft_thr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_344": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv1_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_345": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_346": {
                "variable": {
                    "value": "x_backward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv2_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_348": {
                "variable": {
                    "value": "x_G",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_backward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv2_backward, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_354": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_forward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv1_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_355": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_356": {
                "variable": {
                    "value": "x_D_est",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv2_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_372": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "onelayer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mm_376": {
                "variable": {
                    "value": "PhiTPhi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.transpose(Phi, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Phi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_377": {
                "variable": {
                    "value": "PhiTb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Phix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mm(batch_x, torch.transpose(Phi, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.mm(batch_x, torch.transpose(Phi, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.mm(batch_x, torch.transpose(Phi, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Phi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_379": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Phix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mm(batch_x, torch.transpose(Phi, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.mm(batch_x, torch.transpose(Phi, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.mm(batch_x, torch.transpose(Phi, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(Qinit, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_397": {
                "variable": {
                    "value": "self.lambda_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_398": {
                "variable": {
                    "value": "self.soft_thr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.01])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_401": {
                "variable": {
                    "value": "self.conv1_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 1, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_402": {
                "variable": {
                    "value": "self.conv2_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_403": {
                "variable": {
                    "value": "self.conv1_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(32, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_404": {
                "variable": {
                    "value": "self.conv2_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_normal_(torch.Tensor(1, 32, 3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_411": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, 1, self.specifics['input_width'], self.specifics['input_width'])",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.specifics['input_width'], self.specifics['input_width'])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv1_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_412": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_413": {
                "variable": {
                    "value": "x_forward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv2_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_415": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sign(x_forward)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "F.relu(torch.abs(x_forward) - self.soft_thr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_417": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv1_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_418": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_419": {
                "variable": {
                    "value": "x_backward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv2_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_423": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_forward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv1_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_424": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_425": {
                "variable": {
                    "value": "x_est",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv2_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_440": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "onelayer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mm_444": {
                "variable": {
                    "value": "PhiTPhi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.transpose(Phi, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Phi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_445": {
                "variable": {
                    "value": "PhiTb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Phix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mm(batch_x, torch.transpose(Phi, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.mm(batch_x, torch.transpose(Phi, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.mm(batch_x, torch.transpose(Phi, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Phi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_447": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Phix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mm(batch_x, torch.transpose(Phi, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.mm(batch_x, torch.transpose(Phi, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.mm(batch_x, torch.transpose(Phi, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(Qinit, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_35": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ISTANetplus(self.specifics['layer_num'], specifics)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "ISTANet(self.specifics['layer_num'], specifics)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "self.model",
                            "Attribute"
                        ],
                        [
                            "self.model",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Adam_72": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.specifics['learning_rate']",
                            "Subscript"
                        ],
                        [
                            "self.specifics['learning_rate']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "Phi",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Phi_input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "Qinit",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Qinit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Qinit).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Qinit.to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Qinit).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Qinit.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_39": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ISTANetplus(self.specifics['layer_num'], specifics)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "ISTANet(self.specifics['layer_num'], specifics)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "self.model",
                            "Attribute"
                        ],
                        [
                            "self.model",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Adam_165": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.specifics['learning_rate']",
                            "Subscript"
                        ],
                        [
                            "self.specifics['learning_rate']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_205": {
                "variable": {
                    "value": "Phi",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Phi_input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_208": {
                "variable": {
                    "value": "Qinit",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Qinit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Qinit).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Qinit.to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Qinit).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Qinit.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_342": {
                "input": {
                    "value": "x_forward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_342": {
                "input": {
                    "value": "torch.abs(x_forward) - self.soft_thr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_376": {
                "input": {
                    "value": "Phi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_379": {
                "input": {
                    "value": "Qinit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Qinit).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Qinit.to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Qinit).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Qinit.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sign_415": {
                "input": {
                    "value": "x_forward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_415": {
                "input": {
                    "value": "torch.abs(x_forward) - self.soft_thr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_444": {
                "input": {
                    "value": "Phi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_447": {
                "input": {
                    "value": "Qinit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Qinit).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Qinit.to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Qinit).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Qinit.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_116": {
                "variable": {
                    "value": "Phix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data",
                            "Name"
                        ],
                        [
                            "batch_x.to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Img_output)",
                            "Call"
                        ],
                        [
                            "batch_x.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "batch_x.to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Img_output)",
                            "Call"
                        ],
                        [
                            "batch_x.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "batch_x.to(device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(Phi, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_121": {
                "variable": {
                    "value": "loss_discrepancy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(x_output - batch_x, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_123": {
                "variable": {
                    "value": "loss_constraint",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(loss_layers_sym[0], 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_332": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "PhiTPhi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mm(torch.transpose(Phi, 0, 1), Phi)",
                            "Call"
                        ],
                        [
                            "torch.mm(torch.transpose(Phi, 0, 1), Phi)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_404": {},
            "mm_407": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_D, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ],
                        [
                            "x - self.lambda_step * torch.mm(x, PhiTPhi)",
                            "BinOp"
                        ],
                        [
                            "x + self.lambda_step * PhiTb",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x_input, self.conv1_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(torch.sign(x_forward), F.relu(torch.abs(x_forward) - self.soft_thr))",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x_forward, self.conv1_backward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(Phix, torch.transpose(Qinit, 0, 1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "PhiTPhi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mm(torch.transpose(Phi, 0, 1), Phi)",
                            "Call"
                        ],
                        [
                            "torch.mm(torch.transpose(Phi, 0, 1), Phi)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_85": {
                "f": {
                    "value": "'%s/net_params_%d.pkl' % (pre_model_dir, start_epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_149": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/net_params_%d.pkl' % (model_dir, epoch_i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_171": {
                "f": {
                    "value": "'%s/net_params_%d.pkl' % (model_dir, epoch_num)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_342": {
                "input": {
                    "value": "x_forward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_415": {
                "input": {
                    "value": "x_forward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.conv2_forward, padding=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_116": {
                "input": {
                    "value": "Phi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_121": {
                "input": {
                    "value": "x_output - batch_x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_123": {
                "input": {
                    "value": "loss_layers_sym[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_125": {
                "input": {
                    "value": "torch.pow(loss_layers_sym[k + 1], 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_130": {
                "input": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor([0.01]).to(device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "loss_constraint",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(torch.pow(loss_layers_sym[0], 2))",
                            "Call"
                        ],
                        [
                            "loss_constraint + torch.mean(torch.pow(loss_layers_sym[k + 1], 2))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_258": {
                "variable": {
                    "value": "batch_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Img_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Icol",
                            "Name"
                        ],
                        [
                            "Icol",
                            "Name"
                        ]
                    ]
                }
            },
            "mm_261": {
                "variable": {
                    "value": "Phix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data",
                            "Name"
                        ],
                        [
                            "batch_x.to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Img_output)",
                            "Call"
                        ],
                        [
                            "batch_x.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "batch_x.to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Img_output)",
                            "Call"
                        ],
                        [
                            "batch_x.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "batch_x.to(device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(Phi, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_125": {
                "input": {
                    "value": "loss_layers_sym[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_235": {
                "variable": {
                    "value": "batch_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Img_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Icol",
                            "Name"
                        ],
                        [
                            "Icol",
                            "Name"
                        ]
                    ]
                }
            },
            "mm_239": {
                "variable": {
                    "value": "Phix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data",
                            "Name"
                        ],
                        [
                            "batch_x.to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Img_output)",
                            "Call"
                        ],
                        [
                            "batch_x.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "batch_x.to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Img_output)",
                            "Call"
                        ],
                        [
                            "batch_x.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "batch_x.to(device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(Phi, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_261": {
                "input": {
                    "value": "Phi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_239": {
                "input": {
                    "value": "Phi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Phi_input).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "Phi.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ISTANet/utils.py": {
        "torch": {
            "DataLoader_23": {
                "variable": {
                    "value": "rand_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "RandomDataset(Training_labels, nrtrain)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "specifics['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_26": {
                "variable": {
                    "value": "rand_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "RandomDataset(Training_labels, nrtrain)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "specifics['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_259": {
                "input": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Image.open(path)",
                            "Call"
                        ],
                        [
                            "self.transform(sample)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.specifics['input_width'] * self.specifics['input_width'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "div_260": {
                "input": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Image.open(path)",
                            "Call"
                        ],
                        [
                            "self.transform(sample)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "LAPRAN/lapgan_adaptiveCS_resnet.py": {
        "torch": {
            "Sequential_7": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nFeat, nFeat, kernel_size=kernel_size, padding=kernel_size // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nFeat, nFeat, kernel_size=kernel_size, padding=kernel_size // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.leny",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.base * self.fs ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_55": {
                "variable": {
                    "value": "self.bn_linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.base * self.fs ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.resblk1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_66": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.channels, self.base, kernel_size=3, padding=1, stride=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_126": {
                "variable": {
                    "value": "self.upsamp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_128": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_130": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.base * (self.fs // 2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.leny",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_133": {
                "variable": {
                    "value": "self.bn_linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.leny",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.leny * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.base * self.fs ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_135": {
                "variable": {
                    "value": "self.bn_linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.base * self.fs ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_137": {
                "variable": {
                    "value": "self.upsamp2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_138": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "self.resblk1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_143": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_147": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y.view(y.size(0), -1), self.output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_178": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.channels, self.base, kernel_size=3, padding=1, stride=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_221": {
                "variable": {
                    "value": "self.upsamp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_223": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_224": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_225": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_226": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_228": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.base * (self.fs // 2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.leny",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_229": {
                "variable": {
                    "value": "self.bn_linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.leny",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_230": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.leny * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.channels * self.fs ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_231": {
                "variable": {
                    "value": "self.bn_linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.channels * self.fs ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_233": {
                "variable": {
                    "value": "self.upsamp2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_235": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_238": {
                "variable": {
                    "value": "self.resblk1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_240": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_242": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_244": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y.view(y.size(0), -1), self.output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_274": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.channels, self.base, kernel_size=3, padding=1, stride=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_328": {
                "variable": {
                    "value": "self.upsamp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_330": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_331": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_332": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_333": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_335": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.base * (self.fs // 2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.leny",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_336": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.leny * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.channels * self.fs ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_338": {
                "variable": {
                    "value": "self.upsamp2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_340": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_343": {
                "variable": {
                    "value": "self.resblk1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_345": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_347": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_349": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_359": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y.view(y.size(0), -1), self.output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_381": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.channels, self.base, kernel_size=3, padding=1, stride=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_8": {
                "in_channels": {
                    "value": "nFeat",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nFeat",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_10": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "nFeat",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nFeat",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "nFeat",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nFeat",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "nFeat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "nFeat",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nFeat",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "nFeat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_91": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_95": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_99": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "2 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_179": {
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_181": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_183": {
                "in_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_185": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_187": {
                "in_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_189": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_191": {
                "in_channels": {
                    "value": "2 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_193": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_195": {
                "in_channels": {
                    "value": "2 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_197": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_199": {
                "in_channels": {
                    "value": "4 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_275": {
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_277": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_279": {
                "in_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_281": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_283": {
                "in_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_285": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_287": {
                "in_channels": {
                    "value": "2 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_289": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_291": {
                "in_channels": {
                    "value": "2 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_293": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_295": {
                "in_channels": {
                    "value": "4 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_297": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_299": {
                "in_channels": {
                    "value": "4 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_301": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_303": {
                "in_channels": {
                    "value": "8 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_304": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_382": {
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_384": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_386": {
                "in_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_388": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_390": {
                "in_channels": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_392": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_394": {
                "in_channels": {
                    "value": "2 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_396": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_398": {
                "in_channels": {
                    "value": "2 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_400": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_402": {
                "in_channels": {
                    "value": "4 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_404": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_406": {
                "in_channels": {
                    "value": "4 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_408": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_410": {
                "in_channels": {
                    "value": "8 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_412": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_414": {
                "in_channels": {
                    "value": "8 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_416": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_418": {
                "in_channels": {
                    "value": "16 * self.base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_419": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "LAPRAN/reconstruction_methods.py": {
        "torch": {
            "MSELoss_39": {
                "variable": {
                    "value": "self.criterion_mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_27": {
                "device": {
                    "value": "specifics['gpu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_34": {
                "seed": {
                    "value": "specifics['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_213": {
                "variable": {
                    "value": "self.testloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_225": {
                "variable": {
                    "value": "stage1_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "stage1_path + '/best_checkpoint.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_226": {
                "variable": {
                    "value": "stage2_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "stage2_path + '/best_checkpoint.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_227": {
                "variable": {
                    "value": "stage3_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "stage3_path + '/best_checkpoint.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_36": {
                "seed": {
                    "value": "specifics['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_233": {
                "variable": {
                    "value": "stage4_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "stage4_path + '/best_checkpoint.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_249": {
                "variable": {
                    "value": "self.trainloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_250": {
                "variable": {
                    "value": "self.valloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_265": {
                "variable": {
                    "value": "self.optimizer_lapnet1_gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.lapnet1_gen.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "specifics['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_266": {
                "variable": {
                    "value": "self.optimizer_lapnet1_disc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.lapnet1_disc.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "specifics['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_268": {
                "variable": {
                    "value": "self.optimizer_lapnet2_gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.lapnet2_gen.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "specifics['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_269": {
                "variable": {
                    "value": "self.optimizer_lapnet2_disc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.lapnet2_disc.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "specifics['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_271": {
                "variable": {
                    "value": "self.optimizer_lapnet3_gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.lapnet3_gen.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "specifics['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_272": {
                "variable": {
                    "value": "self.optimizer_lapnet3_disc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.lapnet3_disc.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "specifics['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_274": {
                "variable": {
                    "value": "self.optimizer_lapnet4_gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.lapnet4_gen.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "specifics['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_275": {
                "variable": {
                    "value": "self.optimizer_lapnet4_disc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.lapnet4_disc.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "specifics['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BCELoss_277": {
                "variable": {
                    "value": "self.criterion_bce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_450": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_476": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data_array.reshape(self.batch_size, self.channels, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "orthogonal_1021": {
                "module": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gain": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "current_device_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_303": {
                "variable": {
                    "value": "stage1_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "stage1_path + '/best_checkpoint.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_590": {
                "obj": {
                    "value": "{'iter': self.iter, 'best_iter': self.best_iter, 'best_recons_loss': self.best_recons_loss, 'generator_state_dict': self.lapnet1_gen.state_dict(), 'discriminator_state_dict': self.lapnet1_disc.state_dict(), 'gen_optim_state_dict': self.optimizer_lapnet1_gen.state_dict(), 'disc_optim_state_dict': self.optimizer_lapnet1_disc.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/%s/cr%s/%s/stage%s/model/last_checkpoint.pth' % (specifics['outf'], specifics['dataset'], self.cr4, specifics['model'], 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_706": {
                "obj": {
                    "value": "{'iter': self.iter, 'best_iter': self.best_iter, 'best_recons_loss': self.best_recons_loss, 'generator_state_dict': self.lapnet2_gen.state_dict(), 'discriminator_state_dict': self.lapnet2_disc.state_dict(), 'gen_optim_state_dict': self.optimizer_lapnet2_gen.state_dict(), 'disc_optim_state_dict': self.optimizer_lapnet2_disc.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/%s/cr%s/%s/stage%s/model/last_checkpoint.pth' % (specifics['outf'], specifics['dataset'], self.cr4, specifics['model'], 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_826": {
                "obj": {
                    "value": "{'iter': self.iter, 'best_iter': self.best_iter, 'best_recons_loss': self.best_recons_loss, 'generator_state_dict': self.lapnet3_gen.state_dict(), 'discriminator_state_dict': self.lapnet3_disc.state_dict(), 'gen_optim_state_dict': self.optimizer_lapnet3_gen.state_dict(), 'disc_optim_state_dict': self.optimizer_lapnet3_disc.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/%s/cr%s/%s/stage%s/model/last_checkpoint.pth' % (specifics['outf'], specifics['dataset'], self.cr4, specifics['model'], 3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_943": {
                "obj": {
                    "value": "{'iter': self.iter, 'best_iter': self.best_iter, 'best_recons_loss': self.best_recons_loss, 'generator_state_dict': self.lapnet4_gen.state_dict(), 'discriminator_state_dict': self.lapnet4_disc.state_dict(), 'gen_optim_state_dict': self.optimizer_lapnet4_gen.state_dict(), 'disc_optim_state_dict': self.optimizer_lapnet4_disc.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/%s/cr%s/%s/stage%s/model/last_checkpoint.pth' % (specifics['outf'], specifics['dataset'], self.cr4, specifics['model'], 4)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "orthogonal_1023": {
                "module": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gain": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_292": {
                "variable": {
                    "value": "stage1_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "stage1_path + '/last_checkpoint.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_307": {
                "variable": {
                    "value": "stage2_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "stage2_path + '/last_checkpoint.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_322": {
                "variable": {
                    "value": "stage1_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "stage1_path + '/best_checkpoint.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_323": {
                "variable": {
                    "value": "stage2_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "stage2_path + '/best_checkpoint.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_391": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_403": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data_array.reshape(self.batch_size, self.channels, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_467": {
                "variable": {
                    "value": "target[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "g4_target_temp[:, ::r * 4, ::r * 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_542": {
                "variable": {
                    "value": "self.g1_target[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "g1_target_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "g4_target_temp[:, ::r * 4, ::r * 4]",
                            "Subscript"
                        ],
                        [
                            "g4_target_temp[:, ::r * 4, ::r * 4]",
                            "Subscript"
                        ],
                        [
                            "g2_target_temp[:, ::2, ::2]",
                            "Subscript"
                        ],
                        [
                            "g4_target_temp[:, ::r * 4, ::r * 4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_544": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data_array.reshape(self.batch_size, self.channels, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_620": {
                "obj": {
                    "value": "{'iter': self.iter, 'best_iter': self.best_iter, 'best_recons_loss': self.best_recons_loss, 'generator_state_dict': self.lapnet1_gen.state_dict(), 'discriminator_state_dict': self.lapnet1_disc.state_dict(), 'gen_optim_state_dict': self.optimizer_lapnet1_gen.state_dict(), 'disc_optim_state_dict': self.optimizer_lapnet1_disc.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/%s/cr%s/%s/stage%s/model/best_checkpoint.pth' % (specifics['outf'], specifics['dataset'], self.cr4, specifics['model'], 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_649": {
                "variable": {
                    "value": "self.g2_target[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "g2_target_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "g4_target_temp[:, ::r * 2, ::r * 2]",
                            "Subscript"
                        ],
                        [
                            "g3_target_temp[:, ::2, ::2]",
                            "Subscript"
                        ],
                        [
                            "g4_target_temp[:, ::r * 2, ::r * 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_650": {
                "variable": {
                    "value": "self.g1_target[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "g1_target_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "g4_target_temp[:, ::r * 4, ::r * 4]",
                            "Subscript"
                        ],
                        [
                            "g4_target_temp[:, ::r * 4, ::r * 4]",
                            "Subscript"
                        ],
                        [
                            "g2_target_temp[:, ::2, ::2]",
                            "Subscript"
                        ],
                        [
                            "g4_target_temp[:, ::r * 4, ::r * 4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_654": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data_array.reshape(self.batch_size, self.channels, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_737": {
                "obj": {
                    "value": "{'iter': self.iter, 'best_iter': self.best_iter, 'best_recons_loss': self.best_recons_loss, 'generator_state_dict': self.lapnet2_gen.state_dict(), 'discriminator_state_dict': self.lapnet2_disc.state_dict(), 'gen_optim_state_dict': self.optimizer_lapnet2_gen.state_dict(), 'disc_optim_state_dict': self.optimizer_lapnet2_disc.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/%s/cr%s/%s/stage%s/model/best_checkpoint.pth' % (specifics['outf'], specifics['dataset'], self.cr4, specifics['model'], 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_767": {
                "variable": {
                    "value": "self.g3_target[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "g3_target_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "g4_target_temp[:, ::2, ::2]",
                            "Subscript"
                        ],
                        [
                            "g4_target_temp[:, ::r, ::r]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_768": {
                "variable": {
                    "value": "self.g2_target[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "g2_target_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "g4_target_temp[:, ::r * 2, ::r * 2]",
                            "Subscript"
                        ],
                        [
                            "g3_target_temp[:, ::2, ::2]",
                            "Subscript"
                        ],
                        [
                            "g4_target_temp[:, ::r * 2, ::r * 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_769": {
                "variable": {
                    "value": "self.g1_target[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "g1_target_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "g4_target_temp[:, ::r * 4, ::r * 4]",
                            "Subscript"
                        ],
                        [
                            "g4_target_temp[:, ::r * 4, ::r * 4]",
                            "Subscript"
                        ],
                        [
                            "g2_target_temp[:, ::2, ::2]",
                            "Subscript"
                        ],
                        [
                            "g4_target_temp[:, ::r * 4, ::r * 4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_773": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data_array.reshape(self.batch_size, self.channels, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_856": {
                "obj": {
                    "value": "{'iter': self.iter, 'best_iter': self.best_iter, 'best_recons_loss': self.best_recons_loss, 'generator_state_dict': self.lapnet3_gen.state_dict(), 'discriminator_state_dict': self.lapnet3_disc.state_dict(), 'gen_optim_state_dict': self.optimizer_lapnet3_gen.state_dict(), 'disc_optim_state_dict': self.optimizer_lapnet3_disc.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/%s/cr%s/%s/stage%s/model/best_checkpoint.pth' % (specifics['outf'], specifics['dataset'], self.cr4, specifics['model'], 3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_880": {
                "variable": {
                    "value": "self.g4_target[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "g4_target_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_array[i]",
                            "Subscript"
                        ],
                        [
                            "data_array[i]",
                            "Subscript"
                        ],
                        [
                            "data_array[i]",
                            "Subscript"
                        ],
                        [
                            "data_array[i]",
                            "Subscript"
                        ],
                        [
                            "data_array[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_881": {
                "variable": {
                    "value": "self.g3_target[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "g3_target_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "g4_target_temp[:, ::2, ::2]",
                            "Subscript"
                        ],
                        [
                            "g4_target_temp[:, ::r, ::r]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_882": {
                "variable": {
                    "value": "self.g2_target[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "g2_target_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "g4_target_temp[:, ::r * 2, ::r * 2]",
                            "Subscript"
                        ],
                        [
                            "g3_target_temp[:, ::2, ::2]",
                            "Subscript"
                        ],
                        [
                            "g4_target_temp[:, ::r * 2, ::r * 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_883": {
                "variable": {
                    "value": "self.g1_target[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "g1_target_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "g4_target_temp[:, ::r * 4, ::r * 4]",
                            "Subscript"
                        ],
                        [
                            "g4_target_temp[:, ::r * 4, ::r * 4]",
                            "Subscript"
                        ],
                        [
                            "g2_target_temp[:, ::2, ::2]",
                            "Subscript"
                        ],
                        [
                            "g4_target_temp[:, ::r * 4, ::r * 4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_886": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data_array.reshape(self.batch_size, self.channels, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_972": {
                "obj": {
                    "value": "{'iter': self.iter, 'best_iter': self.best_iter, 'best_recons_loss': self.best_recons_loss, 'generator_state_dict': self.lapnet4_gen.state_dict(), 'discriminator_state_dict': self.lapnet4_disc.state_dict(), 'gen_optim_state_dict': self.optimizer_lapnet4_gen.state_dict(), 'disc_optim_state_dict': self.optimizer_lapnet4_disc.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/%s/cr%s/%s/stage%s/model/best_checkpoint.pth' % (specifics['outf'], specifics['dataset'], self.cr4, specifics['model'], 4)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_331": {
                "variable": {
                    "value": "stage3_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "stage3_path + '/last_checkpoint.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_343": {
                "variable": {
                    "value": "stage1_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "stage1_path + '/best_checkpoint.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_344": {
                "variable": {
                    "value": "stage2_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "stage2_path + '/best_checkpoint.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_345": {
                "variable": {
                    "value": "stage3_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "stage3_path + '/best_checkpoint.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_469": {
                "variable": {
                    "value": "target[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "g4_target_temp[:, ::r * 2, ::r * 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_543": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_653": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_772": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_885": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_355": {
                "variable": {
                    "value": "stage4_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "stage4_path + '/last_checkpoint.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_367": {
                "variable": {
                    "value": "stage1_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "stage1_path + '/best_checkpoint.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_368": {
                "variable": {
                    "value": "stage2_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "stage2_path + '/best_checkpoint.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_369": {
                "variable": {
                    "value": "stage3_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "stage3_path + '/best_checkpoint.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_370": {
                "variable": {
                    "value": "stage4_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "stage4_path + '/best_checkpoint.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_399": {
                "variable": {
                    "value": "self.g4_target[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_array[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_411": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_471": {
                "variable": {
                    "value": "target[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "g4_target_temp[:, ::r, ::r]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_401": {
                "variable": {
                    "value": "self.g3_target[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_array[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_473": {
                "variable": {
                    "value": "target[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "g4_target_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_array[i]",
                            "Subscript"
                        ],
                        [
                            "data_array[i]",
                            "Subscript"
                        ],
                        [
                            "data_array[i]",
                            "Subscript"
                        ],
                        [
                            "data_array[i]",
                            "Subscript"
                        ],
                        [
                            "data_array[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_475": {
                "variable": {
                    "value": "target[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "g4_target_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_array[i]",
                            "Subscript"
                        ],
                        [
                            "data_array[i]",
                            "Subscript"
                        ],
                        [
                            "data_array[i]",
                            "Subscript"
                        ],
                        [
                            "data_array[i]",
                            "Subscript"
                        ],
                        [
                            "data_array[i]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "LAPRAN/sensing_methods.py": {
        "torch": {
            "from_numpy_23": {
                "variable": {
                    "value": "sm",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sensing_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "from_Numpy_matrix[:, :m, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.s1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "imgdim * imgdim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r1, r2, r3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.s1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "imgdim * imgdim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.s2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "imgdim * imgdim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.s3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "imgdim * imgdim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "LAPRAN/utils.py": {
        "torch": {}
    },
    "ReconNet/reconstruction_methods.py": {
        "torch": {
            "MSELoss_110": {
                "variable": {
                    "value": "self.loss_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_62": {
                "obj": {
                    "value": "self.sensing.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.model_root, sensing_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_71": {
                "variable": {
                    "value": "self.testdataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_44": {
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_101": {
                "variable": {
                    "value": "self.traindataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_107": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.specifics['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "betas": {
                    "value": "self.specifics['betas']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_131": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.specifics['specific-model-path']",
                            "Subscript"
                        ],
                        [
                            "os.path.join(self.model_root, best_model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_root, models[idx])",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_154": {
                "f": {
                    "value": "sensing_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.specifics['sensing-path']",
                            "Subscript"
                        ],
                        [
                            "os.path.join(self.model_root, sensing_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_root, sensors[idx])",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_90": {
                "variable": {
                    "value": "self.valdataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.valset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_126": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "len(models)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_149": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "len(models)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_205": {
                "obj": {
                    "value": "self.net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.model_root, best_model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_211": {
                "obj": {
                    "value": "self.net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.model_root, 'epoch%d' % epoch + model_ext)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Generator_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_88": {
                "seed": {
                    "value": "self.specifics['validation-split-seed'] if 'validation-split-seed' in self.specifics else 2147483647",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "ReconNet/utils.py": {
        "torch": {
            "ModuleList_87": {
                "variable": {
                    "value": "self.init_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_92": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_94": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_96": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.channel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "variable": {
                    "value": "self.l4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "self.l5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "variable": {
                    "value": "self.l6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xcs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_108": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.l1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_109": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.l2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_110": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.l3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_111": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.l4(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_112": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.l5(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_123": {
                "variable": {
                    "value": "self.s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "width * height",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_125": {
                "variable": {
                    "value": "self.s.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "orth(np.random.normal(size=(width * height, width * height)).astype(np.float32))[:m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "in_features": {
                    "value": "indim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outdim1 * outdim2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}