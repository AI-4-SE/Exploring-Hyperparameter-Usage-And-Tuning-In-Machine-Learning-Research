{
    ".legacy/m4depth_model.py": {
        "tensorflow": {
            "he_normal_127": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "he_normal_42": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "identity_56": {
                "variable": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.identity(depth)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_65": {
                "variable": {
                    "value": "rot_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "rot_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(rot_mat)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "trans_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.convert_to_tensor(trans_vec)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b, 1, 1, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_68": {
                "variable": {
                    "value": "h_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_69": {
                "variable": {
                    "value": "w_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_71": {
                "variable": {
                    "value": "(grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "w_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(-(w - 1.0) / 2.0, (w - 1.0) / 2.0 + 1.0, 1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.range(-(w - 1.0) / 2.0, (w - 1.0) / 2.0 + 1.0, 1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.arange(-(w - 1.0) / 2.0, (w - 1.0) / 2.0 + 1.0, 1.0).tolist()",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "h_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(-(h - 1.0) / 2.0, (h - 1.0) / 2.0 + 1.0, 1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.range(-(h - 1.0) / 2.0, (h - 1.0) / 2.0 + 1.0, 1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.arange(-(h - 1.0) / 2.0, (h - 1.0) / 2.0 + 1.0, 1.0).tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_72": {
                "variable": {
                    "value": "mesh",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[grid_x, grid_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_73": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_74": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.divide(tf.broadcast_to(mesh, [b, h, w, 2]), tf.reshape(f, [b, 1, 1, 1])), ones]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_75": {
                "variable": {
                    "value": "pos_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.divide(tf.broadcast_to(mesh, [b, h, w, 2]), tf.reshape(f, [b, 1, 1, 1])), ones], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.divide(mesh, tf.reshape(f, [b, 1, 1, 1])), ones], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_100": {
                "variable": {
                    "value": "t_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "t_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "convert_to_tensor_101": {
                "variable": {
                    "value": "proj_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "proj_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_104": {
                "variable": {
                    "value": "combined_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "combined_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linalg.matmul(proj_mat, t_mat)",
                            "Call"
                        ],
                        [
                            "tf.reshape(combined_mat, [b, 1, 1, 3, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, 1, 1, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_106": {
                "variable": {
                    "value": "h_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_107": {
                "variable": {
                    "value": "w_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_109": {
                "variable": {
                    "value": "(grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "w_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(-(w - 1.0) / 2.0, (w - 1.0) / 2.0 + 1.0, 1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.range(-(w - 1.0) / 2.0, (w - 1.0) / 2.0 + 1.0, 1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.arange(-(w - 1.0) / 2.0, (w - 1.0) / 2.0 + 1.0, 1.0).tolist()",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "h_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(-(h - 1.0) / 2.0, (h - 1.0) / 2.0 + 1.0, 1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.range(-(h - 1.0) / 2.0, (h - 1.0) / 2.0 + 1.0, 1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.arange(-(h - 1.0) / 2.0, (h - 1.0) / 2.0 + 1.0, 1.0).tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_110": {
                "variable": {
                    "value": "mesh",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[grid_x, grid_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_111": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_112": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.divide(mesh, tf.reshape(f, [b, 1, 1, 1])), ones]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_113": {
                "variable": {
                    "value": "pos_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([coords * depth, ones], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reverse_119": {
                "variable": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "proj_coord - mesh",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_121": {
                "variable": {
                    "value": "self.flow",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reverse(proj_coord - mesh, axis=[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "feature_pyramid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "recompute_depth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_79": {
                "variable": {
                    "value": "trans_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(rot_mat, [b, 1, 1, 1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "trans_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.convert_to_tensor(trans_vec), [b, 1, 1, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(tf.reshape(rot_mat, [b, 1, 1, 1, 3]), trans_vec)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_80": {
                "variable": {
                    "value": "proj_pos_rel",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(rot_mat, [b, 1, 1, 1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "pos_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(coords, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([coords * depth, ones], axis=-1), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_82": {
                "t": {
                    "value": "new_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(proj_pos_rel[:, :, :, :, 0]) * depth + tf.stop_gradient(trans_vec[:, :, :, :, 0])",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "2000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "reproject",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_103": {
                "variable": {
                    "value": "combined_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "proj_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(proj_data)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "t_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(t_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_116": {
                "variable": {
                    "value": "proj_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "combined_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linalg.matmul(proj_mat, t_mat)",
                            "Call"
                        ],
                        [
                            "tf.reshape(combined_mat, [b, 1, 1, 3, 4])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "pos_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(coords, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([coords * depth, ones], axis=-1), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "M4Depth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_47": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "current_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image",
                            "Name"
                        ],
                        [
                            "tf.nn.leaky_relu(tmp, 0.1, name='lRELU_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_sizes[i]",
                            "Subscript"
                        ]
                    ]
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.he_normal()",
                            "Call"
                        ],
                        [
                            "tf.keras.initializers.he_normal()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "conv2d_1",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l1(self.reg_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_48": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(current_layer, size, 3, 2, kernel_initializer=init, name='conv2d_1', padding='same', kernel_regularizer=tf.keras.regularizers.l1(self.reg_weight))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tmp, 0.1, name='lRELU_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(tmp, size, 3, 1, kernel_initializer=init, name='conv2d_2', padding='same', kernel_regularizer=tf.keras.regularizers.l1(self.reg_weight))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(prev_out, out_c, 3, 1, kernel_initializer=init, name='conv_%d' % i, padding='same', kernel_regularizer=tf.keras.regularizers.l1(self.reg_weight))",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "lRELU_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_49": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(current_layer, size, 3, 2, kernel_initializer=init, name='conv2d_1', padding='same', kernel_regularizer=tf.keras.regularizers.l1(self.reg_weight))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tmp, 0.1, name='lRELU_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(tmp, size, 3, 1, kernel_initializer=init, name='conv2d_2', padding='same', kernel_regularizer=tf.keras.regularizers.l1(self.reg_weight))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(prev_out, out_c, 3, 1, kernel_initializer=init, name='conv_%d' % i, padding='same', kernel_regularizer=tf.keras.regularizers.l1(self.reg_weight))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_sizes[i]",
                            "Subscript"
                        ]
                    ]
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.he_normal()",
                            "Call"
                        ],
                        [
                            "tf.keras.initializers.he_normal()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "conv2d_2",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l1(self.reg_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_50": {
                "variable": {
                    "value": "current_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(current_layer, size, 3, 2, kernel_initializer=init, name='conv2d_1', padding='same', kernel_regularizer=tf.keras.regularizers.l1(self.reg_weight))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tmp, 0.1, name='lRELU_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(tmp, size, 3, 1, kernel_initializer=init, name='conv2d_2', padding='same', kernel_regularizer=tf.keras.regularizers.l1(self.reg_weight))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(prev_out, out_c, 3, 1, kernel_initializer=init, name='conv_%d' % i, padding='same', kernel_regularizer=tf.keras.regularizers.l1(self.reg_weight))",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "lRELU_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_66": {
                "value": {
                    "value": "trans_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.convert_to_tensor(trans_vec), [b, 1, 1, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(tf.reshape(rot_mat, [b, 1, 1, 1, 3]), trans_vec)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_77": {
                "device_name": {
                    "value": "self.MATMUL_DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_81": {
                "input": {
                    "value": "proj_pos_rel[:, :, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_102": {
                "device_name": {
                    "value": "self.MATMUL_DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_113": {
                "values": {
                    "value": "[coords * depth, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_115": {
                "device_name": {
                    "value": "self.MATMUL_DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "'RIDEN_%d' % cnter",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_149": {
                "variable": {
                    "value": "f_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[d_0, f0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "identity_168": {
                "variable": {
                    "value": "prev_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([f1, cv, tf.math.log(d0_reproj / 10.0), tf.math.log(d_prev_l / 10.0), rot_map, trans_map, pixel_location], axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_176": {
                "variable": {
                    "value": "prev_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "deactivate_leaky_relu(prev_out, 0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-7.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "7.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "features",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "'layer_%d' % index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "divide_74": {
                "x": {
                    "value": "tf.broadcast_to(mesh, [b, h, w, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reshape(f, [b, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "tensor": {
                    "value": "rot_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(rot_mat)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, 1, 1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "tensor": {
                    "value": "rot_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(rot_mat)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, 1, 1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "divide_112": {
                "x": {
                    "value": "mesh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([grid_x, grid_y], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.stack([grid_x, grid_y], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.transpose(tf.meshgrid(h_range, w_range), perm=[1, 2, 0]), [b, h, w, 2])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reshape(f, [b, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_137": {
                "name_or_scope": {
                    "value": "preprocessor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_139": {
                "variable": {
                    "value": "d_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bilinear_147": {
                "variable": {
                    "value": "d_prev_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "d_prev_l",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "100.0 * tf.ones([b, h, w, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.compat.v1.image.resize_bilinear(d_prev_l, [h, w])",
                            "Call"
                        ],
                        [
                            "tf.exp(prev_out) * 10.0",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_157": {
                "variable": {
                    "value": "rot_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.broadcast_to(rot, [h, w, b, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[2, 0, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_158": {
                "variable": {
                    "value": "trans_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.broadcast_to(trans, [h, w, b, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[2, 0, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "broadcast_to_162": {
                "variable": {
                    "value": "mesh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.transpose(tf.meshgrid(h_range, w_range), perm=[1, 2, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b, h, w, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_165": {
                "variable": {
                    "value": "f_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[f1, cv, tf.math.log(d0_reproj / 10.0), tf.math.log(d_prev_l / 10.0), rot_map, trans_map, pixel_location]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_167": {
                "name_or_scope": {
                    "value": "depth_estimator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_172": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.identity(f_input)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tmp, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(deactivate_leaky_relu(prev_out, 0.1), -7.0, 7.0)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "out_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.he_normal()",
                            "Call"
                        ],
                        [
                            "tf.keras.initializers.he_normal()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'conv_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l1(self.reg_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_174": {
                "variable": {
                    "value": "prev_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(current_layer, size, 3, 2, kernel_initializer=init, name='conv2d_1', padding='same', kernel_regularizer=tf.keras.regularizers.l1(self.reg_weight))",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tmp, 0.1, name='lRELU_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(tmp, size, 3, 1, kernel_initializer=init, name='conv2d_2', padding='same', kernel_regularizer=tf.keras.regularizers.l1(self.reg_weight))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(prev_out, out_c, 3, 1, kernel_initializer=init, name='conv_%d' % i, padding='same', kernel_regularizer=tf.keras.regularizers.l1(self.reg_weight))",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_205": {
                "name_or_scope": {
                    "value": "upscaler",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "broadcast_to_74": {
                "input": {
                    "value": "mesh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([grid_x, grid_y], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.stack([grid_x, grid_y], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(tf.transpose(tf.meshgrid(h_range, w_range), perm=[1, 2, 0]), [b, h, w, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, h, w, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "tensor": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "tensor": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_150": {
                "input": {
                    "value": "d_prev_l",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "100.0 * tf.ones([b, h, w, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.compat.v1.image.resize_bilinear(d_prev_l, [h, w])",
                            "Call"
                        ],
                        [
                            "tf.exp(prev_out) * 10.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "input_prep",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_177": {
                "x": {
                    "value": "prev_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.identity(f_input)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tmp, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(deactivate_leaky_relu(prev_out, 0.1), -7.0, 7.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_178": {
                "x": {
                    "value": "prev_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.identity(f_input)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tmp, 0.1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(deactivate_leaky_relu(prev_out, 0.1), -7.0, 7.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_211": {
                "control_inputs": {
                    "value": "[est_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_215": {
                "name_or_scope": {
                    "value": "upscaler",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_145": {
                "shape": {
                    "value": "[b, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "broadcast_to_157": {
                "input": {
                    "value": "rot",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[h, w, b, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "broadcast_to_158": {
                "input": {
                    "value": "trans",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[h, w, b, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_162": {
                "a": {
                    "value": "tf.meshgrid(h_range, w_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_163": {
                "tensor": {
                    "value": "focal_l",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "focal / 2 ** cnter",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_221": {
                "control_inputs": {
                    "value": "[est_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "meshgrid_162": {
                "*args": {
                    "value": "h_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(-(h - 1.0) / 2.0, (h - 1.0) / 2.0 + 1.0, 1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.range(-(h - 1.0) / 2.0, (h - 1.0) / 2.0 + 1.0, 1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.arange(-(h - 1.0) / 2.0, (h - 1.0) / 2.0 + 1.0, 1.0).tolist()",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "w_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(-(w - 1.0) / 2.0, (w - 1.0) / 2.0 + 1.0, 1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.range(-(w - 1.0) / 2.0, (w - 1.0) / 2.0 + 1.0, 1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.arange(-(w - 1.0) / 2.0, (w - 1.0) / 2.0 + 1.0, 1.0).tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_165": {
                "x": {
                    "value": "d_prev_l / 10.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    ".legacy/m4depth_pipeline.py": {
        "tensorflow": {
            "split_83": {
                "variable": {
                    "value": "im_color_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data_batch[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self.seq_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_84": {
                "variable": {
                    "value": "im_depth_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data_batch[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self.seq_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_85": {
                "variable": {
                    "value": "rot_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data_batch[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self.seq_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_86": {
                "variable": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data_batch[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self.seq_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_174": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_180": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_192": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(current_step[0], 60000 // speed_multiplier)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "true_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "false_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cond_193": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(current_step[0], 120000 // speed_multiplier)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "true_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "false_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cond_194": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(current_step[0], 180000 // speed_multiplier)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "true_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "false_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cond_195": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(current_step[0], 240000 // speed_multiplier)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "true_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "false_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cond_196": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(current_step[0], 300000 // speed_multiplier)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "true_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "false_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "split_206": {
                "variable": {
                    "value": "im_color_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data_batch[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self.seq_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_207": {
                "variable": {
                    "value": "im_depth_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data_batch[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self.seq_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_208": {
                "variable": {
                    "value": "rot_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data_batch[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self.seq_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_209": {
                "variable": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data_batch[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self.seq_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_300": {
                "variable": {
                    "value": "gt_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "im_depth_seq[-1][0, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "80.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_301": {
                "variable": {
                    "value": "est_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "d_est_list[-1][0, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "80.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "squeeze_90": {
                "variable": {
                    "value": "im_color_seq[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "im_color_seq[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_91": {
                "variable": {
                    "value": "im_depth_seq[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "im_depth_seq[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_92": {
                "variable": {
                    "value": "rot_seq[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "rot_seq[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_93": {
                "variable": {
                    "value": "pos_seq[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_130": {
                "variable": {
                    "value": "reg_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.compat.v1.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_143": {
                "variable": {
                    "value": "d_gt_resized",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.image.resize_bilinear(im_depth_seq[-1], [height, width])",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "200.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_144": {
                "variable": {
                    "value": "d_est",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "d_pyr_seq[-1][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "200.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "squeeze_213": {
                "variable": {
                    "value": "im_color_seq[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "im_color_seq[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_214": {
                "variable": {
                    "value": "im_depth_seq[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "im_depth_seq[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_215": {
                "variable": {
                    "value": "rot_seq[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "rot_seq[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_216": {
                "variable": {
                    "value": "pos_seq[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_284": {
                "variable": {
                    "value": "est_resized",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "est",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "L1_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_136": {
                "name": {
                    "value": "network_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "summaries",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_186": {
                "input": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(self.learning_rate, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(self.learning_rate, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(current_step[0], 60000 // speed_multiplier), true_fn, false_fn)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(current_step[0], 120000 // speed_multiplier), true_fn, false_fn)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(current_step[0], 180000 // speed_multiplier), true_fn, false_fn)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(current_step[0], 240000 // speed_multiplier), true_fn, false_fn)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(current_step[0], 300000 // speed_multiplier), true_fn, false_fn)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_192": {
                "x": {
                    "value": "current_step[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "60000 // speed_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_193": {
                "x": {
                    "value": "current_step[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "120000 // speed_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_194": {
                "x": {
                    "value": "current_step[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "180000 // speed_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_195": {
                "x": {
                    "value": "current_step[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "240000 // speed_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_196": {
                "x": {
                    "value": "current_step[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "300000 // speed_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_199": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(self.learning_rate, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(self.learning_rate, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(current_step[0], 60000 // speed_multiplier), true_fn, false_fn)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(current_step[0], 120000 // speed_multiplier), true_fn, false_fn)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(current_step[0], 180000 // speed_multiplier), true_fn, false_fn)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(current_step[0], 240000 // speed_multiplier), true_fn, false_fn)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(current_step[0], 300000 // speed_multiplier), true_fn, false_fn)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_256": {
                "variable": {
                    "value": "thresh",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.clip_by_value(gt, min, max) / tf.clip_by_value(est, min, max)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.clip_by_value(est, min, max) / tf.clip_by_value(gt, min, max)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_259": {
                "variable": {
                    "value": "a1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.math.less(thresh, 1.25), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_260": {
                "variable": {
                    "value": "a2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.math.less(thresh, 1.25 ** 2), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_261": {
                "variable": {
                    "value": "a3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.math.less(thresh, 1.25 ** 3), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_119": {
                "variable": {
                    "value": "d_est_clipped",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "d_est",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.model.estimate_depth(im_color_seq[0], rot_seq[0], pos_seq[0], focal_length)",
                            "Call"
                        ],
                        [
                            "self.model.estimate_depth(im_color_seq[i], rot_seq[i], pos_seq[i], focal_length)",
                            "Call"
                        ],
                        [
                            "d_pyr_seq[i][j]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_value(d_pyr_seq[-1][0], 1.0, 200.0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.model.estimate_depth(im_color_seq[i], rot_seq[i], pos_seq[i], focal_length)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_122": {
                "variable": {
                    "value": "scaled_d_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_gt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(im_depth_seq[i], 0.1, 200)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(im_depth_seq[i + 1], 0.1, 200)",
                            "Call"
                        ]
                    ]
                }
            },
            "resize_bilinear_123": {
                "variable": {
                    "value": "d_gt_resized",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "scaled_d_gt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.log(d_gt)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bilinear_143": {
                "images": {
                    "value": "im_depth_seq[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_151": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_230": {
                "name_or_scope": {
                    "value": "absRel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_231": {
                "input_tensor": {
                    "value": "tf.math.abs(tf.clip_by_value(gt, min, max) - tf.clip_by_value(est, min, max)) / tf.clip_by_value(est, min, max)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_236": {
                "name_or_scope": {
                    "value": "sqRel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_237": {
                "input_tensor": {
                    "value": "tf.squared_difference(tf.clip_by_value(gt, min, max), tf.clip_by_value(est, min, max)) / tf.clip_by_value(est, min, max)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_243": {
                "name_or_scope": {
                    "value": "RMSE",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_244": {
                "input_tensor": {
                    "value": "tf.squared_difference(tf.clip_by_value(gt, min, max), tf.clip_by_value(est, min, max))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_249": {
                "name_or_scope": {
                    "value": "RMSE_log",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_250": {
                "input_tensor": {
                    "value": "tf.squared_difference(tf.math.log(tf.clip_by_value(gt, min, max)), tf.math.log(tf.clip_by_value(est, min, max)))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_255": {
                "name_or_scope": {
                    "value": "thres",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_302": {
                "x": {
                    "value": "80.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_115": {
                "variable": {
                    "value": "d_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "im_depth_seq[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_117": {
                "variable": {
                    "value": "d_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "im_depth_seq[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_152": {
                "name": {
                    "value": "summaries",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_153": {
                "name": {
                    "value": "inputs_left",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.image.convert_image_dtype(im_color_seq[-1], dtype=tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_155": {
                "name": {
                    "value": "d_est",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.image.convert_image_dtype(tf.math.log(d_est) / tf.math.log(200.0), dtype=tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_157": {
                "name": {
                    "value": "d_gt",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.image.convert_image_dtype(tf.math.log(d_gt_resized) / tf.math.log(200.0), dtype=tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_159": {
                "name": {
                    "value": "im_reproj",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.image.convert_image_dtype(im_reproj, dtype=tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_244": {
                "x": {
                    "value": "tf.reduce_mean(tf.squared_difference(tf.clip_by_value(gt, min, max), tf.clip_by_value(est, min, max)), axis=[1, 2, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_250": {
                "x": {
                    "value": "tf.reduce_mean(tf.squared_difference(tf.math.log(tf.clip_by_value(gt, min, max)), tf.math.log(tf.clip_by_value(est, min, max))), axis=[1, 2, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_259": {
                "x": {
                    "value": "tf.math.less(thresh, 1.25)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_260": {
                "x": {
                    "value": "tf.math.less(thresh, 1.25 ** 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_261": {
                "x": {
                    "value": "tf.math.less(thresh, 1.25 ** 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_125": {
                "input_tensor": {
                    "value": "tf.abs(tf.math.log(d_est_clipped) - d_gt_resized)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_image_dtype_154": {
                "image": {
                    "value": "im_color_seq[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_image_dtype_156": {
                "image": {
                    "value": "tf.math.log(d_est) / tf.math.log(200.0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_image_dtype_158": {
                "image": {
                    "value": "tf.math.log(d_gt_resized) / tf.math.log(200.0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_image_dtype_160": {
                "image": {
                    "value": "im_reproj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.reproject(im_color_seq[-2], im_depth_seq[-1], rot_seq[-1], pos_seq[-1], [384 / 2.0] * b)",
                            "Call"
                        ],
                        [
                            "im_color_seq[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_163": {
                "name": {
                    "value": "'z_d_est_%i' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.image.convert_image_dtype(tf.math.log(tf.clip_by_value(d, 1.0, 200.0)) / tf.math.log(200.0), dtype=tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_231": {
                "x": {
                    "value": "tf.clip_by_value(gt, min, max) - tf.clip_by_value(est, min, max)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_232": {
                "t": {
                    "value": "est",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "min",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squared_difference_237": {
                "x": {
                    "value": "tf.clip_by_value(gt, min, max)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.clip_by_value(est, min, max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_238": {
                "t": {
                    "value": "est",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "min",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_by_value_256": {
                "t": {
                    "value": "est",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "min",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_by_value_257": {
                "t": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "min",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "less_259": {
                "x": {
                    "value": "thresh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.clip_by_value(gt, min, max) / tf.clip_by_value(est, min, max), tf.clip_by_value(est, min, max) / tf.clip_by_value(gt, min, max))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "less_260": {
                "x": {
                    "value": "thresh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.clip_by_value(gt, min, max) / tf.clip_by_value(est, min, max), tf.clip_by_value(est, min, max) / tf.clip_by_value(gt, min, max))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.25 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "less_261": {
                "x": {
                    "value": "thresh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.clip_by_value(gt, min, max) / tf.clip_by_value(est, min, max), tf.clip_by_value(est, min, max) / tf.clip_by_value(gt, min, max))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.25 ** 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_125": {
                "x": {
                    "value": "tf.math.log(d_est_clipped) - d_gt_resized",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_image_dtype_164": {
                "image": {
                    "value": "tf.math.log(tf.clip_by_value(d, 1.0, 200.0)) / tf.math.log(200.0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_237": {
                "t": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "min",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squared_difference_245": {
                "x": {
                    "value": "tf.clip_by_value(gt, min, max)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.clip_by_value(est, min, max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squared_difference_251": {
                "x": {
                    "value": "tf.math.log(tf.clip_by_value(gt, min, max))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.math.log(tf.clip_by_value(est, min, max))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_156": {
                "x": {
                    "value": "200.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_158": {
                "x": {
                    "value": "200.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_245": {
                "t": {
                    "value": "est",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "min",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_251": {
                "x": {
                    "value": "tf.clip_by_value(gt, min, max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_252": {
                "x": {
                    "value": "tf.clip_by_value(est, min, max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_125": {
                "x": {
                    "value": "d_est_clipped",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(d_est, 0.1, 200)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_164": {
                "x": {
                    "value": "200.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_251": {
                "t": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "min",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_by_value_252": {
                "t": {
                    "value": "est",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "min",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_by_value_164": {
                "t": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "200.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    ".legacy/multi_gpu_pipeline/feedforward_pipeline.py": {
        "tensorflow": {
            "group_116": {
                "*inputs": {
                    "value": "*sync_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "group_242": {
                "variable": {
                    "value": "train_and_update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*train_ops + update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "variables_initializer_248": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vars",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_411": {
                "variable": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_412": {
                "variable": {
                    "value": "self.current_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "current_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RunOptions_414": {
                "variable": {
                    "value": "self.runOptions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.compat.v1.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunMetadata_415": {
                "variable": {
                    "value": "self.runMetadata",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_465": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_469": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Summary_771": {
                "variable": {
                    "value": "val_score_summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunMetadata_790": {
                "variable": {
                    "value": "run_metadata",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ProfileOptionBuilder_791": {
                "variable": {
                    "value": "opts",
                    "type": "Variable",
                    "possible_values": []
                },
                "options": {
                    "value": "tf.profiler.ProfileOptionBuilder.time_and_memory()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_87": {
                "tensor": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "t.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_op_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_add_237": {
                "variable": {
                    "value": "increment_global_step_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_336": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_410": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FileWriter_475": {
                "variable": {
                    "value": "train_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.log_dir",
                            "Attribute"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_714": {
                "variable": {
                    "value": "variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.compat.v1.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_134": {
                "variable": {
                    "value": "avg_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(grads_on_devices)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_146": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_148": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_161": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_198": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_235": {
                "key": {
                    "value": "tf.compat.v1.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_236": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_240": {
                "*inputs": {
                    "value": "*preload_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "group_241": {
                "*inputs": {
                    "value": "*gpucopy_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "device_270": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_295": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_313": {
                "*inputs": {
                    "value": "*preload_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "group_314": {
                "*inputs": {
                    "value": "*gpucopy_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "get_collection_478": {
                "variable": {
                    "value": "summaries_collection",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.compat.v1.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_479": {
                "variable": {
                    "value": "val_coll",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "validation_summaries",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_480": {
                "variable": {
                    "value": "oth_coll",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "other_summaries",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_486": {
                "variable": {
                    "value": "summary_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "other_summaries",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_487": {
                "variable": {
                    "value": "val_summary_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "validation_summaries",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_489": {
                "variable": {
                    "value": "summary_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_626": {
                "key": {
                    "value": "tf.compat.v1.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_635": {
                "key": {
                    "value": "tf.compat.v1.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_112": {
                "device_name": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_133": {
                "device_name": {
                    "value": "param_server_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'/gpu:0'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "Pipeline_Global_Step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_167": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_171": {
                "device_name": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "identity_213": {
                "variable": {
                    "value": "total_loss[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "total_loss[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "identity_214": {
                "variable": {
                    "value": "total_loss_avg[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "total_loss_avg[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_215": {
                "name": {
                    "value": "'total loss raw ' + names[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_216": {
                "name": {
                    "value": "total loss avg",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss_avg[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_223": {
                "name": {
                    "value": "names[i] + '/' + var.op.name + '/values '",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "variables",
                            "Name"
                        ],
                        [
                            "variables",
                            "Name"
                        ],
                        [
                            "variables",
                            "Name"
                        ]
                    ]
                }
            },
            "device_276": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_280": {
                "device_name": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_445": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_671": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_672": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "local_log",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.log_dir, 'pipeline')",
                            "Call"
                        ],
                        [
                            "os.path.join(FLAGS.log_dir, scope[offset:] + postfix)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_106": {
                "device_name": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_130": {
                "device_name": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_134": {
                "values": {
                    "value": "grads_on_devices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_176": {
                "name_or_scope": {
                    "value": "'GPU_%i' % device_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_177": {
                "name": {
                    "value": "'tower_%i' % device_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_205": {
                "name_or_scope": {
                    "value": "'Pipeline_Loss_%i_mean' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_207": {
                "decay": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_avg",
                    "type": "str",
                    "possible_values": []
                },
                "zero_debias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "control_dependencies_212": {
                "control_inputs": {
                    "value": "[avg_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "histogram_225": {
                "name": {
                    "value": "names[i] + '/' + var.op.name + '/gradients '",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_229": {
                "device_name": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_285": {
                "name_or_scope": {
                    "value": "'GPU_%i' % device_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_286": {
                "name": {
                    "value": "'tower_%i' % device_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_302": {
                "values": {
                    "value": "com_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_306": {
                "values": {
                    "value": "nn_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_312": {
                "input_tensor": {
                    "value": "single_perf_meas",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_scope_445": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_150": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_206": {
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "add_to_collection_483": {
                "name": {
                    "value": "validation_summaries",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "summaries_collection",
                            "Name"
                        ]
                    ]
                }
            },
            "add_to_collection_485": {
                "name": {
                    "value": "other_summaries",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "summaries_collection",
                            "Name"
                        ]
                    ]
                }
            },
            "is_variable_initialized_690": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "variables",
                            "Name"
                        ],
                        [
                            "variables",
                            "Name"
                        ],
                        [
                            "variables",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    ".legacy/multi_gpu_pipeline/pipeline_model.py": {
        "tensorflow": {
            "constant_84": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_42": {
                "variable": {
                    "value": "variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.compat.v1.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.get_variable_scope().name",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_scope_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    ".legacy/multi_gpu_pipeline/protobuf_db.py": {
        "tensorflow": {
            "RecordInput_307": {
                "variable": {
                    "value": "record_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "file_pattern": {
                    "value": "os.path.join(self.data_dir, '%s-*' % self.shard_prefix)",
                    "type": "Call",
                    "possible_values": []
                },
                "parallelism": {
                    "value": "min(n_threads, self.nrecord)",
                    "type": "Call",
                    "possible_values": []
                },
                "buffer_size": {
                    "value": "input_buffer_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(n_threads * 64, self.nrecord)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "total_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "queue_batch_size * num_queues",
                            "BinOp"
                        ]
                    ]
                }
            },
            "split_316": {
                "variable": {
                    "value": "records",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "records",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "record_input.get_yield_op()",
                            "Call"
                        ],
                        [
                            "tf.split(records, total_batch_size, 0)",
                            "Call"
                        ],
                        [
                            "[tf.reshape(record, []) for record in records]",
                            "ListComp"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "total_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "queue_batch_size * num_queues",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_122": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_124": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_173": {
                "variable": {
                    "value": "raw_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "encode_jpeg_174": {
                "variable": {
                    "value": "encoded_jpeg",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "raw_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.uint16)",
                            "Call"
                        ]
                    ]
                },
                "quality": {
                    "value": "self.jpeg_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimize_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_184": {
                "variable": {
                    "value": "raw_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "encode_png_185": {
                "variable": {
                    "value": "encoded_png",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "raw_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.uint16)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_195": {
                "variable": {
                    "value": "raw_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "encode_png_196": {
                "variable": {
                    "value": "encoded_png",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "raw_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.uint16)",
                            "Call"
                        ]
                    ]
                }
            },
            "Feature_205": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_219": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_224": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "parse_single_example_400": {
                "variable": {
                    "value": "obj",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.feature_map",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_411": {
                "values": {
                    "value": "obj_values.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Example_156": {
                "variable": {
                    "value": "sample_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=sample_dict)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_bytes_227": {
                "bytes_or_text": {
                    "value": "string",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "FixedLenFeature_252": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "FixedLenFeature_253": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "VarLenFeature_254": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_255": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_256": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_257": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_258": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_259": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_260": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_261": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_317": {
                "tensor": {
                    "value": "record",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_321": {
                "name": {
                    "value": "input_pipeline",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tf_record_iterator_364": {
                "path": {
                    "value": "tf_record_filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Glob_368": {
                "filename": {
                    "value": "tf_record_pattern",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "name_scope_399": {
                "name": {
                    "value": "deserialize_image_record",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TFRecordWriter_146": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.data_dir, output_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_bytes_171": {
                "bytes_or_text": {
                    "value": "open(image_data, 'rb').read()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_bytes_176": {
                "bytes_or_text": {
                    "value": "encoded_jpeg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.encode_jpeg(raw_data, quality=self.jpeg_q, optimize_size=True)",
                            "Call"
                        ],
                        [
                            "sess.run(encoded_jpeg, feed_dict={raw_data: image_data})",
                            "Call"
                        ]
                    ]
                }
            },
            "as_bytes_182": {
                "bytes_or_text": {
                    "value": "open(image_data, 'rb').read()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_bytes_187": {
                "bytes_or_text": {
                    "value": "encoded_png",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.encode_png(raw_data)",
                            "Call"
                        ],
                        [
                            "sess.run(encoded_png, feed_dict={raw_data: image_data})",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(raw_data)",
                            "Call"
                        ],
                        [
                            "sess.run(encoded_png, feed_dict={raw_data: image_data})",
                            "Call"
                        ]
                    ]
                }
            },
            "as_bytes_193": {
                "bytes_or_text": {
                    "value": "open(image_data, 'rb').read()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_bytes_198": {
                "bytes_or_text": {
                    "value": "encoded_png",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.encode_png(raw_data)",
                            "Call"
                        ],
                        [
                            "sess.run(encoded_png, feed_dict={raw_data: image_data})",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(raw_data)",
                            "Call"
                        ],
                        [
                            "sess.run(encoded_png, feed_dict={raw_data: image_data})",
                            "Call"
                        ]
                    ]
                }
            },
            "Int64List_205": {
                "value": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "FloatList_219": {
                "value": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "BytesList_224": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_png_270": {
                "contents": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_png_271": {
                "contents": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bitcast_272": {
                "input": {
                    "value": "tf.image.decode_png(img, dtype=tf.uint16)",
                    "type": "Call",
                    "possible_values": []
                },
                "type": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_png_272": {
                "contents": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_348": {
                "variable": {
                    "value": "features_data_queues[queue_num][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "features_data_queues[queue_num][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "parallel_stack_350": {
                "variable": {
                    "value": "features_data_queues[queue_num][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "features_data_queues[queue_num][i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_354": {
                "variable": {
                    "value": "additionnal_data_queues[queue_num][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "additionnal_data_queues[queue_num][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "parallel_stack_356": {
                "variable": {
                    "value": "additionnal_data_queues[queue_num][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "additionnal_data_queues[queue_num][i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Features_156": {
                "feature": {
                    "value": "sample_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    ".legacy/preprocess.py": {
        "tensorflow": {
            "stack_59": {
                "variable": {
                    "value": "im_color",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "im_color",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "im_color + [tf.reshape(data[i * 4 + 0], self.in_size + [3])]",
                            "BinOp"
                        ],
                        [
                            "tf.stack(im_color, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.slice(im_color, [offset, 0, 0, 0], [self.seq_len] + self.in_size + [3])",
                            "Call"
                        ],
                        [
                            "im_color[-self.seq_len:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.divide(tf.to_float(tf.concat(tf.unstack(im_color, axis=0), axis=-1)), 255.0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.stack(color_data, axis=0), [self.seq_len] + self.out_size + [3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_60": {
                "variable": {
                    "value": "im_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "im_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "im_depth + [tf.reshape(tf.to_float(tf.bitcast(data[i * 4 + 1], tf.float16)), self.in_size + [1])]",
                            "BinOp"
                        ],
                        [
                            "tf.stack(im_depth, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.slice(im_depth, [offset, 0, 0, 0], [self.seq_len] + self.in_size + [1])",
                            "Call"
                        ],
                        [
                            "im_depth[-self.seq_len:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.divide(512.0, tf.concat(tf.unstack(im_depth, axis=0), axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.stack(depth_data, axis=0), [self.seq_len] + self.out_size + [1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_61": {
                "variable": {
                    "value": "rot",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "rot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "rot + [tf.reshape(data[i * 4 + 2], [3])]",
                            "BinOp"
                        ],
                        [
                            "tf.stack(rot, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.slice(rot, [offset, 0], [self.seq_len, 3])",
                            "Call"
                        ],
                        [
                            "rot[-self.seq_len:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_62": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pos + [tf.reshape(data[i * 4 + 3], [3])]",
                            "BinOp"
                        ],
                        [
                            "tf.stack(pos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.slice(pos, [offset, 0], [self.seq_len, 3])",
                            "Call"
                        ],
                        [
                            "pos[-self.seq_len:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "divide_78": {
                "variable": {
                    "value": "im_color",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(tf.concat(tf.unstack(im_color, axis=0), axis=-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "divide_79": {
                "variable": {
                    "value": "im_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "512.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.concat(tf.unstack(im_depth, axis=0), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_83": {
                "variable": {
                    "value": "color_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "cropped_data[:, :, self.seq_len:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self.seq_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_84": {
                "variable": {
                    "value": "depth_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "cropped_data[:, :, :self.seq_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self.seq_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_85": {
                "variable": {
                    "value": "im_color",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack(color_data, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.seq_len] + self.out_size + [3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "variable": {
                    "value": "im_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack(depth_data, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.seq_len] + self.out_size + [1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_115": {
                "variable": {
                    "value": "focal_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.out_size[0] / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "divide_31": {
                "variable": {
                    "value": "local_patch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[float(self.in_size[0]), float(self.in_size[1])]",
                    "type": "List",
                    "possible_values": []
                },
                "y": {
                    "value": "zoom_factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random.uniform([1], minval=1.0, maxval=1.0)",
                            "Call"
                        ],
                        [
                            "tf.random.uniform([1], minval=1.0, maxval=1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_32": {
                "variable": {
                    "value": "local_patch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[local_patch_size[0], local_patch_size[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_crop_34": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_crop(image, tf.concat([[local_patch_size[0]], [local_patch_size[1]], [c]], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, self.out_size, tf.image.ResizeMethod.BILINEAR, align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "tf.concat([[local_patch_size[0]], [local_patch_size[1]], [c]], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "resize_35": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.random_crop(image, tf.concat([[local_patch_size[0]], [local_patch_size[1]], [c]], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, self.out_size, tf.image.ResizeMethod.BILINEAR, align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.out_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "method": {
                    "value": "tf.image.ResizeMethod.BILINEAR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "uniform_43": {
                "variable": {
                    "value": "zoom_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "uniform_45": {
                "variable": {
                    "value": "zoom_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "uniform_65": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "self.db_seq_len - self.seq_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_66": {
                "variable": {
                    "value": "im_color",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "im_color",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "im_color + [tf.reshape(data[i * 4 + 0], self.in_size + [3])]",
                            "BinOp"
                        ],
                        [
                            "tf.stack(im_color, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.slice(im_color, [offset, 0, 0, 0], [self.seq_len] + self.in_size + [3])",
                            "Call"
                        ],
                        [
                            "im_color[-self.seq_len:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.divide(tf.to_float(tf.concat(tf.unstack(im_color, axis=0), axis=-1)), 255.0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.stack(color_data, axis=0), [self.seq_len] + self.out_size + [3])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[offset, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.seq_len] + self.in_size + [3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "slice_67": {
                "variable": {
                    "value": "im_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "im_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "im_depth + [tf.reshape(tf.to_float(tf.bitcast(data[i * 4 + 1], tf.float16)), self.in_size + [1])]",
                            "BinOp"
                        ],
                        [
                            "tf.stack(im_depth, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.slice(im_depth, [offset, 0, 0, 0], [self.seq_len] + self.in_size + [1])",
                            "Call"
                        ],
                        [
                            "im_depth[-self.seq_len:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.divide(512.0, tf.concat(tf.unstack(im_depth, axis=0), axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.stack(depth_data, axis=0), [self.seq_len] + self.out_size + [1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[offset, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.seq_len] + self.in_size + [1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "slice_68": {
                "variable": {
                    "value": "rot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "rot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "rot + [tf.reshape(data[i * 4 + 2], [3])]",
                            "BinOp"
                        ],
                        [
                            "tf.stack(rot, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.slice(rot, [offset, 0], [self.seq_len, 3])",
                            "Call"
                        ],
                        [
                            "rot[-self.seq_len:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "begin": {
                    "value": "[offset, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.seq_len, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_69": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pos + [tf.reshape(data[i * 4 + 3], [3])]",
                            "BinOp"
                        ],
                        [
                            "tf.stack(pos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.slice(pos, [offset, 0], [self.seq_len, 3])",
                            "Call"
                        ],
                        [
                            "pos[-self.seq_len:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "begin": {
                    "value": "[offset, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.seq_len, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_100": {
                "variable": {
                    "value": "p_order",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_101": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_order",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape=[], minval=0.0, maxval=1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random.uniform(shape=[], minval=0.0, maxval=1.0, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cond_102": {
                "variable": {
                    "value": "(im_color, im_depth, rot, pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.less(p_order, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.less(p_order, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "true_flip_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "do_nothing",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "uniform_111": {
                "variable": {
                    "value": "p_order",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_112": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_order",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape=[], minval=0.0, maxval=1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random.uniform(shape=[], minval=0.0, maxval=1.0, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cond_113": {
                "variable": {
                    "value": "(im_color, im_depth, rot, pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.less(p_order, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.less(p_order, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "true_transpose",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "do_nothing",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "name_scope_26": {
                "name": {
                    "value": "random_crop_and_resize",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_78": {
                "x": {
                    "value": "tf.concat(tf.unstack(im_color, axis=0), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_79": {
                "values": {
                    "value": "tf.unstack(im_depth, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_81": {
                "values": {
                    "value": "[im_depth, im_color]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_85": {
                "values": {
                    "value": "color_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.split(cropped_data[:, :, self.seq_len:], self.seq_len, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_86": {
                "values": {
                    "value": "depth_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.split(cropped_data[:, :, :self.seq_len], self.seq_len, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reverse_94": {
                "variable": {
                    "value": "col",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "im_color",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "im_color + [tf.reshape(data[i * 4 + 0], self.in_size + [3])]",
                            "BinOp"
                        ],
                        [
                            "tf.stack(im_color, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.slice(im_color, [offset, 0, 0, 0], [self.seq_len] + self.in_size + [3])",
                            "Call"
                        ],
                        [
                            "im_color[-self.seq_len:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.divide(tf.to_float(tf.concat(tf.unstack(im_color, axis=0), axis=-1)), 255.0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.stack(color_data, axis=0), [self.seq_len] + self.out_size + [3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_95": {
                "variable": {
                    "value": "dep",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "im_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "im_depth + [tf.reshape(tf.to_float(tf.bitcast(data[i * 4 + 1], tf.float16)), self.in_size + [1])]",
                            "BinOp"
                        ],
                        [
                            "tf.stack(im_depth, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.slice(im_depth, [offset, 0, 0, 0], [self.seq_len] + self.in_size + [1])",
                            "Call"
                        ],
                        [
                            "im_depth[-self.seq_len:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.divide(512.0, tf.concat(tf.unstack(im_depth, axis=0), axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.stack(depth_data, axis=0), [self.seq_len] + self.out_size + [1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_96": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "rot + [tf.reshape(data[i * 4 + 2], [3])]",
                            "BinOp"
                        ],
                        [
                            "tf.stack(rot, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.slice(rot, [offset, 0], [self.seq_len, 3])",
                            "Call"
                        ],
                        [
                            "rot[-self.seq_len:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "[[-1.0, 1.0, -1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_97": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pos + [tf.reshape(data[i * 4 + 3], [3])]",
                            "BinOp"
                        ],
                        [
                            "tf.stack(pos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.slice(pos, [offset, 0], [self.seq_len, 3])",
                            "Call"
                        ],
                        [
                            "pos[-self.seq_len:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "[[1.0, -1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_105": {
                "variable": {
                    "value": "col",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "im_color",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "im_color + [tf.reshape(data[i * 4 + 0], self.in_size + [3])]",
                            "BinOp"
                        ],
                        [
                            "tf.stack(im_color, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.slice(im_color, [offset, 0, 0, 0], [self.seq_len] + self.in_size + [3])",
                            "Call"
                        ],
                        [
                            "im_color[-self.seq_len:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.divide(tf.to_float(tf.concat(tf.unstack(im_color, axis=0), axis=-1)), 255.0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.stack(color_data, axis=0), [self.seq_len] + self.out_size + [3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_106": {
                "variable": {
                    "value": "dep",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "im_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "im_depth + [tf.reshape(tf.to_float(tf.bitcast(data[i * 4 + 1], tf.float16)), self.in_size + [1])]",
                            "BinOp"
                        ],
                        [
                            "tf.stack(im_depth, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.slice(im_depth, [offset, 0, 0, 0], [self.seq_len] + self.in_size + [1])",
                            "Call"
                        ],
                        [
                            "im_depth[-self.seq_len:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.divide(512.0, tf.concat(tf.unstack(im_depth, axis=0), axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.stack(depth_data, axis=0), [self.seq_len] + self.out_size + [1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_107": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[-rot[:, 1], -rot[:, 0], -rot[:, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_108": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pos[:, 1], pos[:, 0], pos[:, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_34": {
                "values": {
                    "value": "[[local_patch_size[0]], [local_patch_size[1]], [c]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "tensor": {
                    "value": "data[i * 4 + 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.in_size + [3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "tensor": {
                    "value": "tf.to_float(tf.bitcast(data[i * 4 + 1], tf.float16))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.in_size + [1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "tensor": {
                    "value": "data[i * 4 + 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "tensor": {
                    "value": "data[i * 4 + 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_78": {
                "values": {
                    "value": "tf.unstack(im_color, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unstack_79": {
                "value": {
                    "value": "im_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "im_depth + [tf.reshape(tf.to_float(tf.bitcast(data[i * 4 + 1], tf.float16)), self.in_size + [1])]",
                            "BinOp"
                        ],
                        [
                            "tf.stack(im_depth, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.slice(im_depth, [offset, 0, 0, 0], [self.seq_len] + self.in_size + [1])",
                            "Call"
                        ],
                        [
                            "im_depth[-self.seq_len:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.divide(512.0, tf.concat(tf.unstack(im_depth, axis=0), axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.stack(depth_data, axis=0), [self.seq_len] + self.out_size + [1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_55": {
                "x": {
                    "value": "tf.bitcast(data[i * 4 + 1], tf.float16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unstack_78": {
                "value": {
                    "value": "im_color",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "im_color + [tf.reshape(data[i * 4 + 0], self.in_size + [3])]",
                            "BinOp"
                        ],
                        [
                            "tf.stack(im_color, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.slice(im_color, [offset, 0, 0, 0], [self.seq_len] + self.in_size + [3])",
                            "Call"
                        ],
                        [
                            "im_color[-self.seq_len:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.divide(tf.to_float(tf.concat(tf.unstack(im_color, axis=0), axis=-1)), 255.0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.stack(color_data, axis=0), [self.seq_len] + self.out_size + [3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bitcast_55": {
                "input": {
                    "value": "data[i * 4 + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "type": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    ".legacy/utils/custom_layers.py": {
        "tensorflow": {
            "leaky_relu_19": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "-input",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "alpha": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "identity_11": {
                "variable": {
                    "value": "feature_block",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_block",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.identity(feature_block)",
                            "Call"
                        ]
                    ]
                }
            },
            "resize_bilinear_13": {
                "variable": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "opt_flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_14": {
                "variable": {
                    "value": "scaled_flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(opt_flow, [height, width])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "[float(height), float(width)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_20": {
                "x": {
                    "value": "-tmp",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "[1 / alpha]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_31": {
                "variable": {
                    "value": "padded_lvl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c2",
                    "type": "Variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [strided_search_range, strided_search_range], [strided_search_range, strided_search_range], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_35": {
                "variable": {
                    "value": "c1_nchw",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "c1",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_36": {
                "variable": {
                    "value": "pl_nchw",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "padded_lvl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(c2, [[0, 0], [strided_search_range, strided_search_range], [strided_search_range, strided_search_range], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_38": {
                "variable": {
                    "value": "c1_nchw",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "c1_nchw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(c1, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.split(c1_nchw, num_or_size_splits=nbre_cuts, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "nbre_cuts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_39": {
                "variable": {
                    "value": "pl_nchw",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "pl_nchw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(padded_lvl, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.split(pl_nchw, num_or_size_splits=nbre_cuts, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "nbre_cuts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_50": {
                "variable": {
                    "value": "cost_vol",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "cost_vol",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(cost_vol, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(cost_vol, alpha=0.1, name=name)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_51": {
                "variable": {
                    "value": "cost_vol",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "cost_vol",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(cost_vol, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(cost_vol, alpha=0.1, name=name)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cost_volume'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_10": {
                "name_or_scope": {
                    "value": "wrap_feature_block",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_29": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cost_volume'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "slice_46": {
                "variable": {
                    "value": "slice",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pl_nchw[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, y * dilation_rate, x * dilation_rate]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_47": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "c1_nchw[k] * slice",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    ".legacy/utils/dense_image_warp.py": {
        "tensorflow": {
            "convert_to_tensor_59": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(grid)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_60": {
                "variable": {
                    "value": "query_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "query_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(query_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "meshgrid_214": {
                "variable": {
                    "value": "(grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "math_ops.range(width)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "math_ops.range(height)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_216": {
                "variable": {
                    "value": "stacked_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "array_ops.stack([grid_y, grid_x], axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "flow.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_221": {
                "variable": {
                    "value": "mesh",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "array_ops.meshgrid(h_range, w_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[2, 1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_222": {
                "variable": {
                    "value": "batched_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "stacked_grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.cast(array_ops.stack([grid_y, grid_x], axis=2), flow.dtype)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_224": {
                "variable": {
                    "value": "query_points_flattened",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "query_points_on_grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batched_grid + flow",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, height * width, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_58": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'interpolate_bilinear'",
                            "MethodArgument"
                        ],
                        [
                            "'dense_image_warp'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unstack_97": {
                "variable": {
                    "value": "unstacked_query_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "query_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(query_points)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_136": {
                "variable": {
                    "value": "flattened_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(grid)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * height * width, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_138": {
                "variable": {
                    "value": "batch_offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "math_ops.range(batch_size) * height * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_199": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'interpolate_bilinear'",
                            "MethodArgument"
                        ],
                        [
                            "'dense_image_warp'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_208": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(image, [batch_size, height, width, channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, height, width, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_230": {
                "variable": {
                    "value": "interpolated",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "interpolated",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_interpolate_bilinear(image, query_points_flattened)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(interpolated, [height, width, channels])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(interpolated, [batch_size, height, width, channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[height, width, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_233": {
                "variable": {
                    "value": "interpolated",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "interpolated",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_interpolate_bilinear(image, query_points_flattened)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(interpolated, [height, width, channels])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(interpolated, [batch_size, height, width, channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, height, width, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_75": {
                "control_inputs": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_87": {
                "control_inputs": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_107": {
                "variable": {
                    "value": "max_floor",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "size_in_indexing_dimension - 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "query_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query_points.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "constant_108": {
                "variable": {
                    "value": "min_floor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "query_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query_points.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "minimum_109": {
                "variable": {
                    "value": "floor",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.maximum(min_floor, math_ops.floor(queries))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "max_floor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.cast(size_in_indexing_dimension - 2, query_type)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_111": {
                "variable": {
                    "value": "int_floor",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "floor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.minimum(math_ops.maximum(min_floor, math_ops.floor(queries)), max_floor)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_118": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "queries - floor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grid_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grid.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "constant_119": {
                "variable": {
                    "value": "min_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grid_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grid.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "constant_120": {
                "variable": {
                    "value": "max_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grid_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grid.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "minimum_121": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.maximum(min_alpha, alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "max_alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "constant_op.constant(1.0, dtype=grid_type)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_125": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.cast(queries - floor, grid_type)",
                            "Call"
                        ],
                        [
                            "math_ops.minimum(math_ops.maximum(min_alpha, alpha), max_alpha)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(alpha, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "control_dependencies_128": {
                "control_inputs": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_148": {
                "variable": {
                    "value": "gathered_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flattened_grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(grid, [batch_size * height * width, channels])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "linear_coordinates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_offsets + y_coords * width + x_coords",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_159": {
                "name": {
                    "value": "interpolate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "range_215": {},
            "stack_217": {
                "values": {
                    "value": "[grid_y, grid_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "meshgrid_221": {
                "*args": {
                    "value": "h_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.range(height, dtype=flow.dtype)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "w_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.range(width, dtype=flow.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_66": {
                "input": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(grid)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_67": {
                "input": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(grid)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_68": {
                "input": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(grid)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_69": {
                "input": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(grid)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_85": {
                "input": {
                    "value": "query_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(query_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_100": {
                "name": {
                    "value": "'dim-' + str(dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_146": {
                "name": {
                    "value": "'gather-' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_149": {
                "tensor": {
                    "value": "gathered_values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.gather(flattened_grid, linear_coordinates)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_queries, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_110": {
                "x": {
                    "value": "min_floor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "constant_op.constant(0.0, dtype=query_type)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "math_ops.floor(queries)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_121": {
                "x": {
                    "value": "min_alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "constant_op.constant(0.0, dtype=grid_type)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.cast(queries - floor, grid_type)",
                            "Call"
                        ],
                        [
                            "math_ops.minimum(math_ops.maximum(min_alpha, alpha), max_alpha)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(alpha, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_110": {
                "x": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "unstacked_query_points[dim]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "range_139": {}
        }
    },
    "callbacks.py": {
        "tensorflow": {
            "latest_checkpoint_84": {
                "variable": {
                    "value": "latest_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Checkpoint_98": {
                "variable": {
                    "value": "self.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "root": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_99": {
                "variable": {
                    "value": "latest_ckpt_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Checkpoint_105": {
                "variable": {
                    "value": "self.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "root": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_106": {
                "variable": {
                    "value": "latest_ckpt_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_182": {
                "variable": {
                    "value": "latest_ckpt_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_47": {
                "name": {
                    "value": "batch_steps_per_second",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0 / batch_run_time",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "self._train_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dataloaders/generic.py": {
        "tensorflow": {
            "convert_to_tensor_100": {
                "variable": {
                    "value": "self.new_traj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[i == 0 for i in range(self.seq_len)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_153": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "self.db_seq_len - self.seq_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_239": {
                "variable": {
                    "value": "p_order",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_240": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_order",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape=[], minval=0.0, maxval=1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random.uniform(shape=[], minval=0.0, maxval=1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random.uniform(shape=[], minval=0.0, maxval=1.0, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cond_241": {
                "variable": {
                    "value": "(im_col, im_depth, rot, trans, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.less(p_order, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.less(p_order, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.less(p_order, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "true_flip_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "do_nothing",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "uniform_251": {
                "variable": {
                    "value": "p_order",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_252": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_order",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape=[], minval=0.0, maxval=1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random.uniform(shape=[], minval=0.0, maxval=1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random.uniform(shape=[], minval=0.0, maxval=1.0, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cond_253": {
                "variable": {
                    "value": "(im_col, im_depth, rot, trans, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.less(p_order, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.less(p_order, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.less(p_order, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "true_flip_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "do_nothing",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "convert_to_tensor_139": {
                "variable": {
                    "value": "self.new_traj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[i == 0 for i in range(self.seq_len)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_155": {
                "variable": {
                    "value": "out_data[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[offset]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.seq_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_brightness_193": {
                "variable": {
                    "value": "self.out_data[RGB_im]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "image": {
                    "value": "self.out_data['RGB_im']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_contrast_194": {
                "variable": {
                    "value": "self.out_data[RGB_im]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "image": {
                    "value": "self.out_data['RGB_im']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "lower": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_saturation_195": {
                "variable": {
                    "value": "self.out_data[RGB_im]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "image": {
                    "value": "self.out_data['RGB_im']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "lower": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_196": {
                "variable": {
                    "value": "self.out_data[RGB_im]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "image": {
                    "value": "self.out_data['RGB_im']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_brightness_198": {
                "variable": {
                    "value": "self.out_data[RGB_im]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "image": {
                    "value": "self.out_data['RGB_im']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_contrast_199": {
                "variable": {
                    "value": "self.out_data[RGB_im]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "image": {
                    "value": "self.out_data['RGB_im']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "lower": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_saturation_200": {
                "variable": {
                    "value": "self.out_data[RGB_im]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "image": {
                    "value": "self.out_data['RGB_im']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "lower": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_201": {
                "variable": {
                    "value": "self.out_data[RGB_im]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "image": {
                    "value": "self.out_data['RGB_im']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_delta": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "uniform_210": {
                "variable": {
                    "value": "p_order",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_211": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_order",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape=[], minval=0.0, maxval=1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random.uniform(shape=[], minval=0.0, maxval=1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random.uniform(shape=[], minval=0.0, maxval=1.0, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cond_212": {
                "variable": {
                    "value": "self.out_data[RGB_im]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pred": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.less(p_order, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.less(p_order, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.less(p_order, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "true_inv_col",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "do_nothing",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reverse_232": {
                "variable": {
                    "value": "col",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "im_col",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.out_data['RGB_im']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_233": {
                "variable": {
                    "value": "dep",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "im_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_sample['depth']",
                            "Subscript"
                        ],
                        [
                            "self.out_data['depth']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_234": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_sample['rot']",
                            "Subscript"
                        ],
                        [
                            "self.out_data['rot']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "[[1.0, -1.0, 1.0, -1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_235": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "trans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.out_data['trans']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "[[1.0, -1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_236": {
                "variable": {
                    "value": "c_",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[c[0], h - c[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_244": {
                "variable": {
                    "value": "col",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "im_col",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.out_data['RGB_im']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_245": {
                "variable": {
                    "value": "dep",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "im_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_sample['depth']",
                            "Subscript"
                        ],
                        [
                            "self.out_data['depth']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_246": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_sample['rot']",
                            "Subscript"
                        ],
                        [
                            "self.out_data['rot']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "[[1.0, 1.0, -1.0, -1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_247": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "trans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.out_data['trans']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "[[-1.0, 1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_248": {
                "variable": {
                    "value": "c_",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[w - c[0], c[1]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "dataloaders/kitti.py": {
        "tensorflow": {
            "convert_to_tensor_20": {
                "variable": {
                    "value": "self.eval_crop_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "crop_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(self.out_size + [1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "read_file_24": {
                "variable": {
                    "value": "file",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "tf.strings.join([self.db_path, data_sample['camera_l']], separator='/')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "decode_jpeg_25": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(tf.strings.join([self.db_path, data_sample['camera_l']], separator='/'))",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(tf.strings.join([self.db_path, data_sample['depth']], separator='/'))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_34": {
                "variable": {
                    "value": "out_data[RGB_im]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.image.resize(rgb_image, self.out_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.out_size + [3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_35": {
                "variable": {
                    "value": "out_data[rot]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([data_sample['qw'], data_sample['qx'], data_sample['qy'], data_sample['qz']], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_36": {
                "variable": {
                    "value": "out_data[trans]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([data_sample['tx'], data_sample['ty'], data_sample['tz']], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_37": {
                "variable": {
                    "value": "out_data[new_traj]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "data_sample['id']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "read_file_41": {
                "variable": {
                    "value": "file",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "tf.strings.join([self.db_path, data_sample['depth']], separator='/')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "decode_png_42": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(tf.strings.join([self.db_path, data_sample['camera_l']], separator='/'))",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(tf.strings.join([self.db_path, data_sample['depth']], separator='/'))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_44": {
                "variable": {
                    "value": "out_data[depth]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.image.resize(depth, self.out_size, method='nearest')",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.out_size + [1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "join_24": {
                "inputs": {
                    "value": "[self.db_path, data_sample['camera_l']]",
                    "type": "List",
                    "possible_values": []
                },
                "separator": {
                    "value": "/",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_26": {
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.decode_jpeg(file)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(file, dtype=tf.uint16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_29": {
                "value": {
                    "value": "[data_sample['fx'] * self.out_size[1], data_sample['fy'] * self.out_size[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_30": {
                "value": {
                    "value": "[data_sample['cx'] * self.out_size[1], data_sample['cy'] * self.out_size[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_34": {
                "images": {
                    "value": "rgb_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(image, dtype=tf.float32) / 255.0",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "self.out_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_35": {
                "values": {
                    "value": "[data_sample['qw'], data_sample['qx'], data_sample['qy'], data_sample['qz']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_36": {
                "values": {
                    "value": "[data_sample['tx'], data_sample['ty'], data_sample['tz']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "join_41": {
                "inputs": {
                    "value": "[self.db_path, data_sample['depth']]",
                    "type": "List",
                    "possible_values": []
                },
                "separator": {
                    "value": "/",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_43": {
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.decode_jpeg(file)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(file, dtype=tf.uint16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_44": {
                "images": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(image, dtype=tf.float32) / 256",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "self.out_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "method": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "dataloaders/midair.py": {
        "tensorflow": {
            "read_file_33": {
                "variable": {
                    "value": "file",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "tf.strings.join([self.db_path, data_sample['camera_l']], separator='/')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "decode_jpeg_34": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(tf.strings.join([self.db_path, data_sample['camera_l']], separator='/'))",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(tf.strings.join([self.db_path, data_sample['disp']], separator='/'))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_43": {
                "variable": {
                    "value": "out_data[RGB_im]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.image.resize(rgb_image, self.intermediate_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.intermediate_size + [3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_44": {
                "variable": {
                    "value": "out_data[rot]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([data_sample['qw'], data_sample['qx'], data_sample['qy'], data_sample['qz']], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_45": {
                "variable": {
                    "value": "out_data[trans]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([data_sample['tx'], data_sample['ty'], data_sample['tz']], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_46": {
                "variable": {
                    "value": "out_data[new_traj]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "data_sample['id']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "read_file_50": {
                "variable": {
                    "value": "file",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "tf.strings.join([self.db_path, data_sample['disp']], separator='/')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "decode_png_51": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(tf.strings.join([self.db_path, data_sample['camera_l']], separator='/'))",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(tf.strings.join([self.db_path, data_sample['disp']], separator='/'))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bitcast_52": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.decode_jpeg(file)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(file, dtype=tf.uint16)",
                            "Call"
                        ],
                        [
                            "tf.bitcast(image, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "type": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "variable": {
                    "value": "out_data[depth]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.image.resize(depth, self.intermediate_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.intermediate_size + [1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "self.out_data[RGB_im]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.out_data['RGB_im']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.seq_len, self.out_size[0], self.out_size[1], 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_106": {
                "variable": {
                    "value": "self.out_data[depth]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.out_data['depth']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.seq_len, self.out_size[0], self.out_size[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "join_33": {
                "inputs": {
                    "value": "[self.db_path, data_sample['camera_l']]",
                    "type": "List",
                    "possible_values": []
                },
                "separator": {
                    "value": "/",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_35": {
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.decode_jpeg(file)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(file, dtype=tf.uint16)",
                            "Call"
                        ],
                        [
                            "tf.bitcast(image, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_38": {
                "value": {
                    "value": "[self.fx, self.fy]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_39": {
                "value": {
                    "value": "[self.cx, self.cy]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_43": {
                "images": {
                    "value": "rgb_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(image, dtype=tf.float32) / 255.0",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "self.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_44": {
                "values": {
                    "value": "[data_sample['qw'], data_sample['qx'], data_sample['qy'], data_sample['qz']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_45": {
                "values": {
                    "value": "[data_sample['tx'], data_sample['ty'], data_sample['tz']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "uniform_82": {
                "variable": {
                    "value": "p_order",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_83": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_order",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape=[], minval=0.0, maxval=1.0, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cond_84": {
                "variable": {
                    "value": "(im_col, im_depth, rot, trans)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.less(p_order, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "true_transpose",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "do_nothing",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "uniform_95": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.intermediate_size[1] - self.out_size[1]",
                            "BinOp"
                        ],
                        [
                            "self.intermediate_size[0] - self.out_size[0]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_96": {
                "variable": {
                    "value": "self.out_data[RGB_im]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_": {
                    "value": "self.out_data['RGB_im']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, offset, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.seq_len, self.out_size[0], self.out_size[1], 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_97": {
                "variable": {
                    "value": "self.out_data[depth]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_": {
                    "value": "self.out_data['depth']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, offset, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.seq_len, self.out_size[0], self.out_size[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_98": {
                "variable": {
                    "value": "self.out_data[camera][c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "[self.out_data['camera']['c'][0] - tf.cast(offset, tf.float32), self.out_data['camera']['c'][1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_101": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.intermediate_size[1] - self.out_size[1]",
                            "BinOp"
                        ],
                        [
                            "self.intermediate_size[0] - self.out_size[0]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_102": {
                "variable": {
                    "value": "self.out_data[RGB_im]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_": {
                    "value": "self.out_data['RGB_im']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, offset, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.seq_len, self.out_size[0], self.out_size[1], 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_103": {
                "variable": {
                    "value": "self.out_data[depth]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_": {
                    "value": "self.out_data['depth']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, offset, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.seq_len, self.out_size[0], self.out_size[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_104": {
                "variable": {
                    "value": "self.out_data[camera][c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "[self.out_data['camera']['c'][0], self.out_data['camera']['c'][1] - tf.cast(offset, tf.float32)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "join_50": {
                "inputs": {
                    "value": "[self.db_path, data_sample['disp']]",
                    "type": "List",
                    "possible_values": []
                },
                "separator": {
                    "value": "/",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_53": {
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.decode_jpeg(file)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(file, dtype=tf.uint16)",
                            "Call"
                        ],
                        [
                            "tf.bitcast(image, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_55": {
                "images": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512.0 / tf.cast(image, dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "self.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_76": {
                "variable": {
                    "value": "col",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "im_col",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.out_data['RGB_im']",
                            "Subscript"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_77": {
                "variable": {
                    "value": "dep",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "im_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.out_data['depth']",
                            "Subscript"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_78": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rot[:, 0], -rot[:, 2], -rot[:, 1], -rot[:, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_79": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[trans[:, 1], trans[:, 0], trans[:, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_98": {
                "x": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape=[], minval=0, maxval=diff, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random.uniform(shape=[], minval=0, maxval=diff, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_104": {
                "x": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape=[], minval=0, maxval=diff, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random.uniform(shape=[], minval=0, maxval=diff, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dataloaders/tartanair.py": {
        "tensorflow": {
            "read_file_21": {
                "variable": {
                    "value": "file",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "tf.strings.join([self.db_path, data_sample['camera_l']], separator='/')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "decode_jpeg_22": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(tf.strings.join([self.db_path, data_sample['camera_l']], separator='/'))",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(tf.strings.join([self.db_path, data_sample['depth']], separator='/'))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_31": {
                "variable": {
                    "value": "out_data[RGB_im]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.image.resize(rgb_image, self.out_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.out_size + [3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_32": {
                "variable": {
                    "value": "out_data[rot]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([data_sample['qw'], data_sample['qx'], data_sample['qy'], data_sample['qz']], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_33": {
                "variable": {
                    "value": "out_data[trans]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([data_sample['tx'], data_sample['ty'], data_sample['tz']], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_34": {
                "variable": {
                    "value": "out_data[new_traj]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "data_sample['id']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_euclidean_norm_38": {
                "variable": {
                    "value": "im_greyscale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "out_data['RGB_im']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_39": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(im_greyscale, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "read_file_40": {
                "variable": {
                    "value": "file",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "tf.strings.join([self.db_path, data_sample['depth']], separator='/')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "decode_raw_41": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(tf.strings.join([self.db_path, data_sample['camera_l']], separator='/'))",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(tf.strings.join([self.db_path, data_sample['depth']], separator='/'))",
                            "Call"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_43": {
                "variable": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(image, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.in_size + [1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "join_21": {
                "inputs": {
                    "value": "[self.db_path, data_sample['camera_l']]",
                    "type": "List",
                    "possible_values": []
                },
                "separator": {
                    "value": "/",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_23": {
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.decode_jpeg(file)",
                            "Call"
                        ],
                        [
                            "tf.io.decode_raw(file, tf.float32)",
                            "Call"
                        ],
                        [
                            "image[-(self.in_size[0] * self.in_size[1]):]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_26": {
                "value": {
                    "value": "[self.fx, self.fy]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_27": {
                "value": {
                    "value": "[self.cx, self.cy]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_31": {
                "images": {
                    "value": "rgb_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(image, dtype=tf.float32) / 255.0",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "self.out_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_32": {
                "values": {
                    "value": "[data_sample['qw'], data_sample['qx'], data_sample['qy'], data_sample['qz']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_33": {
                "values": {
                    "value": "[data_sample['tx'], data_sample['ty'], data_sample['tz']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_39": {
                "x": {
                    "value": "im_greyscale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.reduce_euclidean_norm(out_data['RGB_im'], axis=-1, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "join_40": {
                "inputs": {
                    "value": "[self.db_path, data_sample['depth']]",
                    "type": "List",
                    "possible_values": []
                },
                "separator": {
                    "value": "/",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_43": {
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.decode_jpeg(file)",
                            "Call"
                        ],
                        [
                            "tf.io.decode_raw(file, tf.float32)",
                            "Call"
                        ],
                        [
                            "image[-(self.in_size[0] * self.in_size[1]):]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_45": {
                "tensor": {
                    "value": "tf.image.resize(depth, self.out_size, method='nearest')",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.out_size + [1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "resize_45": {
                "images": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(image, dtype=tf.float32), self.in_size + [1])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.out_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "method": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "finetune-kitti.py": {
        "tensorflow": {
            "list_physical_devices_19": {
                "variable": {
                    "value": "physical_devices",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sample_from_datasets_54": {
                "variable": {
                    "value": "joint_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[kitti_dataloader.dataset.repeat(), midair_dataloader.dataset.repeat()]",
                    "type": "List",
                    "possible_values": []
                },
                "weights": {
                    "value": "[0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "stop_on_empty_dataset": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorBoard_69": {
                "variable": {
                    "value": "tensorboard_cbk",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "cmd.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "histogram_freq": {
                    "value": "1200",
                    "type": "int",
                    "possible_values": []
                },
                "write_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "write_images": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "update_freq": {
                    "value": "1200",
                    "type": "int",
                    "possible_values": []
                },
                "profile_batch": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "embeddings_freq": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "embeddings_metadata": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Adam_76": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "set_seed_61": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_memory_growth_21": {
                "device": {
                    "value": "physical_devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_logical_device_configuration_31": {
                "device": {
                    "value": "physical_devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logical_devices": {
                    "value": "[tf.config.LogicalDeviceConfiguration(memory_limit=1200)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LogicalDeviceConfiguration_32": {
                "memory_limit": {
                    "value": "1200",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "m4depth_network.py": {
        "tensorflow": {
            "L2_41": {
                "variable": {
                    "value": "regularizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "l2": {
                    "value": "self.regularizer_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_45": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "f_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reduce_variance_46": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "f_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "l2_normalize_47": {
                "variable": {
                    "value": "normed",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(f_map - mean) / (var + 1e-12)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "HeNormal_61": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1_62": {
                "variable": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "l1": {
                    "value": "regularizer_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0004",
                            "MethodArgument"
                        ],
                        [
                            "0.0004",
                            "MethodArgument"
                        ],
                        [
                            "0.0004",
                            "MethodArgument"
                        ],
                        [
                            "0.0004",
                            "MethodArgument"
                        ],
                        [
                            "0.0004",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "HeNormal_99": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1_100": {
                "variable": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "l1": {
                    "value": "regularizer_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0004",
                            "MethodArgument"
                        ],
                        [
                            "0.0004",
                            "MethodArgument"
                        ],
                        [
                            "0.0004",
                            "MethodArgument"
                        ],
                        [
                            "0.0004",
                            "MethodArgument"
                        ],
                        [
                            "0.0004",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "identity_118": {
                "variable": {
                    "value": "prev_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_initializer_156": {
                "variable": {
                    "value": "f_maps_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_initializer_157": {
                "variable": {
                    "value": "d_maps_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_347": {
                "variable": {
                    "value": "self.step_counter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros_initializer()(shape=[], dtype='int64')",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "leaky_relu_84": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_s1(feature_maps)",
                            "Call"
                        ],
                        [
                            "dn_layer(tmp)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tmp, 0.1)",
                            "Call"
                        ],
                        [
                            "conv_s2(tmp)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gt['depth'], [b, h, h_g // h, w, w_g // w, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(gt_preprocessed, [b, h, h_g // h, w, w_g // w, 1])",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_87": {
                "variable": {
                    "value": "feature_maps",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_s1(feature_maps)",
                            "Call"
                        ],
                        [
                            "dn_layer(tmp)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tmp, 0.1)",
                            "Call"
                        ],
                        [
                            "conv_s2(tmp)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gt['depth'], [b, h, h_g // h, w, w_g // w, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(gt_preprocessed, [b, h, h_g // h, w, w_g // w, 1])",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_122": {
                "variable": {
                    "value": "prev_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "prev_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.identity(feature_map)",
                            "Call"
                        ],
                        [
                            "conv(prev_out)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(prev_out, 0.1)",
                            "Call"
                        ],
                        [
                            "self.disp_refiner(f_input)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_185": {
                "variable": {
                    "value": "curr_f_maps",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.unstack(curr_f_maps, axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_402": {
                "variable": {
                    "value": "gt_d_clipped",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "traj_samples[-1]['depth']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "200.0",
                            "Constant"
                        ],
                        [
                            "80.0",
                            "Constant"
                        ],
                        [
                            "80.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "resize_418": {
                "variable": {
                    "value": "est",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "preds[-1][0]['depth']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "gt.get_shape()[1:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "method": {
                    "value": "tf.image.ResizeMethod.NEAREST_NEIGHBOR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_422": {
                "variable": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gts[-1]['depth']",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_value(gt, 0.0, max_d)",
                            "Call"
                        ],
                        [
                            "data['depth']",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_value(gt, 0.0, max_d)",
                            "Call"
                        ],
                        [
                            "data['depth'][:, -1, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "200.0",
                            "Constant"
                        ],
                        [
                            "80.0",
                            "Constant"
                        ],
                        [
                            "80.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "clip_by_value_423": {
                "variable": {
                    "value": "est",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "est",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize(preds[-1][0]['depth'], gt.get_shape()[1:3], method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(est, 0.001, max_d)",
                            "Call"
                        ],
                        [
                            "preds['depth']",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_value(est, 0.001, max_d)",
                            "Call"
                        ],
                        [
                            "preds['depth']",
                            "Subscript"
                        ],
                        [
                            "preds",
                            "Name"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "200.0",
                            "Constant"
                        ],
                        [
                            "80.0",
                            "Constant"
                        ],
                        [
                            "80.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "clip_by_value_465": {
                "variable": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gts[-1]['depth']",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_value(gt, 0.0, max_d)",
                            "Call"
                        ],
                        [
                            "data['depth']",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_value(gt, 0.0, max_d)",
                            "Call"
                        ],
                        [
                            "data['depth'][:, -1, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "200.0",
                            "Constant"
                        ],
                        [
                            "80.0",
                            "Constant"
                        ],
                        [
                            "80.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "clip_by_value_466": {
                "variable": {
                    "value": "est",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "est",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize(preds[-1][0]['depth'], gt.get_shape()[1:3], method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(est, 0.001, max_d)",
                            "Call"
                        ],
                        [
                            "preds['depth']",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_value(est, 0.001, max_d)",
                            "Call"
                        ],
                        [
                            "preds['depth']",
                            "Subscript"
                        ],
                        [
                            "preds",
                            "Name"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "200.0",
                            "Constant"
                        ],
                        [
                            "80.0",
                            "Constant"
                        ],
                        [
                            "80.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2D_63": {
                "filters": {
                    "value": "nbre_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ks.initializers.HeNormal()",
                            "Call"
                        ],
                        [
                            "ks.initializers.HeNormal()",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ks.regularizers.L1(l1=regularizer_weight)",
                            "Call"
                        ],
                        [
                            "ks.regularizers.L1(l1=regularizer_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2D_68": {
                "filters": {
                    "value": "nbre_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ks.initializers.HeNormal()",
                            "Call"
                        ],
                        [
                            "ks.initializers.HeNormal()",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ks.regularizers.L1(l1=regularizer_weight)",
                            "Call"
                        ],
                        [
                            "ks.regularizers.L1(l1=regularizer_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2D_103": {
                "filters": {
                    "value": "nbre_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ks.initializers.HeNormal()",
                            "Call"
                        ],
                        [
                            "ks.initializers.HeNormal()",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ks.regularizers.L1(l1=regularizer_weight)",
                            "Call"
                        ],
                        [
                            "ks.regularizers.L1(l1=regularizer_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2D_109": {
                "filters": {
                    "value": "nbre_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ks.initializers.HeNormal()",
                            "Call"
                        ],
                        [
                            "ks.initializers.HeNormal()",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ks.regularizers.L1(l1=regularizer_weight)",
                            "Call"
                        ],
                        [
                            "ks.regularizers.L1(l1=regularizer_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_168": {
                "name": {
                    "value": "DepthEstimator_lvl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_188": {
                "variable": {
                    "value": "prev_f_maps",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.unstack(prev_f_maps, axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_197": {
                "variable": {
                    "value": "disp_prev_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_199": {
                "variable": {
                    "value": "other_prev_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b, h, w, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bilinear_201": {
                "variable": {
                    "value": "other_prev_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "prev_l_est['other']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bilinear_203": {
                "variable": {
                    "value": "depth_prev_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "prev_l_est['depth']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_354": {
                "name": {
                    "value": "M4Depth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_372": {
                "name": {
                    "value": "train_scope",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_400": {
                "name": {
                    "value": "summaries",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_403": {
                "name": {
                    "value": "RGB_im",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "traj_samples[-1]['RGB_im']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "self.step_counter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_406": {
                "name": {
                    "value": "camera_prev_t_reproj",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "im_reproj",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "self.step_counter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_408": {
                "name": {
                    "value": "depth_gt",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.log(gt_d_clipped) / tf.math.log(max_d)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "self.step_counter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_410": {
                "variable": {
                    "value": "d_est_clipped",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "est['depth']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "200.0",
                            "Constant"
                        ],
                        [
                            "80.0",
                            "Constant"
                        ],
                        [
                            "80.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "name_scope_416": {
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_443": {
                "variable": {
                    "value": "value_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_461": {
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_480": {
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_492": {
                "name": {
                    "value": "loss_function",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_initializer_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "leaky_relu_132": {
                "variable": {
                    "value": "prev_outs[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "features": {
                    "value": "prev_outs[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_184": {
                "tensor": {
                    "value": "curr_f_maps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vector_processing(tf.reshape(curr_f_maps, [b, h, w, nbre_cuts, -1]))",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.unstack(curr_f_maps, axis=3), axis=3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, h, w, nbre_cuts, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_185": {
                "value": {
                    "value": "curr_f_maps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vector_processing(tf.reshape(curr_f_maps, [b, h, w, nbre_cuts, -1]))",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.unstack(curr_f_maps, axis=3), axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_282": {
                "name": {
                    "value": "DepthEstimator_seq",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientTape_373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unstack_380": {
                "variable": {
                    "value": "value_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_413": {
                "name": {
                    "value": "'depth_lvl_%i' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.log(d_est_clipped) / tf.math.log(max_d)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "self.step_counter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_496": {
                "x": {
                    "value": "tf.clip_by_value(input, 0.01, 200.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_187": {
                "tensor": {
                    "value": "prev_f_maps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vector_processing(tf.reshape(prev_f_maps, [b, h, w, nbre_cuts, -1]))",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.unstack(prev_f_maps, axis=3), axis=3)",
                            "Call"
                        ],
                        [
                            "self.prev_f_maps",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, h, w, nbre_cuts, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_188": {
                "value": {
                    "value": "prev_f_maps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vector_processing(tf.reshape(prev_f_maps, [b, h, w, nbre_cuts, -1]))",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.unstack(prev_f_maps, axis=3), axis=3)",
                            "Call"
                        ],
                        [
                            "self.prev_f_maps",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_198": {
                "shape": {
                    "value": "[b, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bilinear_202": {
                "images": {
                    "value": "prev_l_est['disp']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_208": {
                "shape": {
                    "value": "self.shape[:3] + [1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_215": {
                "name": {
                    "value": "preprocessor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_241": {
                "variable": {
                    "value": "f_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "input_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[cv, tf.math.log(disp_prev_l * 2 ** self.lvl_mul)]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_243": {
                "name": {
                    "value": "depth_estimator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_initializer_347": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "resize_367": {
                "images": {
                    "value": "d_maps_pyrs[-1][0]['depth']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                },
                "method": {
                    "value": "tf.image.ResizeMethod.NEAREST_NEIGHBOR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_408": {
                "x": {
                    "value": "max_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "200.0",
                            "Constant"
                        ],
                        [
                            "80.0",
                            "Constant"
                        ],
                        [
                            "80.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "clip_by_value_496": {
                "t": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "200.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_518": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gt['depth']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b, h, h_g // h, w, w_g // w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_519": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(tmp, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_522": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gt_preprocessed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preprocess(gt['depth'])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, h, h_g // h, w, w_g // w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_526": {
                "variable": {
                    "value": "new_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(tf.reduce_sum(mask, axis=[2, 4]), 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_531": {
                "variable": {
                    "value": "gt_resized",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "gt_preprocessed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preprocess(gt['depth'])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normalize_179": {
                "tensor": {
                    "value": "f_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_222": {
                "name": {
                    "value": "input_prep",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_249": {
                "x": {
                    "value": "tf.clip_by_value(disp, -7.0, 7.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_252": {
                "input": {
                    "value": "other",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "prev_out[0][:, :, :, 1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "identity_253": {
                "input": {
                    "value": "depth_prev_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "disp2depth(disp_curr_l, rot, trans, camera)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_254": {
                "input": {
                    "value": "disp_curr_l",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.clip_by_value(disp, -7.0, 7.0)) / 2 ** self.lvl_mul",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_413": {
                "x": {
                    "value": "max_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "200.0",
                            "Constant"
                        ],
                        [
                            "80.0",
                            "Constant"
                        ],
                        [
                            "80.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "reduce_sum_505": {
                "input_tensor": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.greater(tmp, 0), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_223": {
                "x": {
                    "value": "disp_prev_l * 2 ** self.lvl_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_249": {
                "t": {
                    "value": "disp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "prev_out[0][:, :, :, :1]",
                            "Subscript"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-7.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "7.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_412": {
                "x": {
                    "value": "max_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "200.0",
                            "Constant"
                        ],
                        [
                            "80.0",
                            "Constant"
                        ],
                        [
                            "80.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "greater_519": {
                "x": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_s1(feature_maps)",
                            "Call"
                        ],
                        [
                            "dn_layer(tmp)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tmp, 0.1)",
                            "Call"
                        ],
                        [
                            "conv_s2(tmp)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gt['depth'], [b, h, h_g // h, w, w_g // w, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(gt_preprocessed, [b, h, h_g // h, w, w_g // w, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_526": {
                "x": {
                    "value": "tf.reduce_sum(mask, axis=[2, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_mean_532": {
                "input_tensor": {
                    "value": "tf.abs(gt_resized - pred_depth)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_237": {
                "x": {
                    "value": "disp_prev_t_reproj[:, :, :, 4:5] * 2 ** self.lvl_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_526": {
                "input_tensor": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.greater(tmp, 0), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_527": {
                "x": {
                    "value": "gt_resized - pred_depth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_532": {
                "x": {
                    "value": "gt_resized - pred_depth",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {
            "list_physical_devices_44": {
                "variable": {
                    "value": "physical_devices",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TensorBoard_86": {
                "variable": {
                    "value": "tensorboard_cbk",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "cmd.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "histogram_freq": {
                    "value": "1200",
                    "type": "int",
                    "possible_values": []
                },
                "write_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "write_images": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "update_freq": {
                    "value": "1200",
                    "type": "int",
                    "possible_values": []
                },
                "profile_batch": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "embeddings_freq": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "embeddings_metadata": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Adam_92": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "set_memory_growth_46": {
                "device": {
                    "value": "physical_devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_seed_76": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorBoard_122": {
                "variable": {
                    "value": "tb_callback",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "cmd.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "profile_batch": {
                    "value": "10, 25",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_logical_device_configuration_56": {
                "device": {
                    "value": "physical_devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logical_devices": {
                    "value": "[tf.config.LogicalDeviceConfiguration(memory_limit=1200)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LogicalDeviceConfiguration_57": {
                "memory_limit": {
                    "value": "1200",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "metrics.py": {
        "tensorflow": {
            "cast_4": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(gt_depth, 1e-06)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_14": {
                "variable": {
                    "value": "error",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_true - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_15": {
                "variable": {
                    "value": "error",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "masked_reduce_mean(error, y_true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_24": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(y_true, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_25": {
                "variable": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_true + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_26": {
                "variable": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_27": {
                "variable": {
                    "value": "error",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_true - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_28": {
                "variable": {
                    "value": "error",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "masked_reduce_mean(error, y_true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_61": {
                "variable": {
                    "value": "thresh",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_true / y_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "y_pred / y_true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_62": {
                "variable": {
                    "value": "error",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.less(thresh, 1.25 ** self.threshold)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_4": {
                "x": {
                    "value": "gt_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_5": {
                "input_tensor": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.greater(gt_depth, 1e-06), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.greater(y_true, 0.0), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_5": {
                "x": {
                    "value": "tf.reduce_sum(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_no_nan_5": {
                "x": {
                    "value": "err",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.greater(gt_depth, 1e-06), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.greater(y_true, 0.0), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_24": {
                "x": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.log(y_true + 1e-06)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_38": {
                "x": {
                    "value": "y_true - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squared_difference_49": {
                "x": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.log(y_true + 1e-06)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.log(y_pred + 1e-06)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_62": {
                "x": {
                    "value": "thresh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(y_true / y_pred, y_pred / y_true)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.25 ** self.threshold",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/__init__.py": {
        "tensorflow": {}
    },
    "utils/dense_image_warp.py": {
        "tensorflow": {
            "load_op_library_40": {
                "variable": {
                    "value": "_backproject_module",
                    "type": "Variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "osp.join(*[osp.dirname(__file__), 'special_ops', 'backproject.so'])",
                            "Call"
                        ]
                    ]
                }
            },
            "RegisterGradient_46": {
                "op_type": {
                    "value": "BackProject",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_87": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(grid)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_88": {
                "variable": {
                    "value": "query_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "query_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(query_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "meshgrid_238": {
                "variable": {
                    "value": "(grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "math_ops.range(width)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "math_ops.range(height)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_240": {
                "variable": {
                    "value": "stacked_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "array_ops.stack([grid_y, grid_x], axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "flow.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_243": {
                "variable": {
                    "value": "batched_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "stacked_grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.cast(array_ops.stack([grid_y, grid_x], axis=2), flow.dtype)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_86": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'interpolate_bilinear'",
                            "MethodArgument"
                        ],
                        [
                            "'dense_image_warp'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unstack_125": {
                "variable": {
                    "value": "unstacked_query_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "query_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(query_points)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_164": {
                "variable": {
                    "value": "flattened_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(grid)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * height * width, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_166": {
                "variable": {
                    "value": "batch_offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "math_ops.range(batch_size) * height * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_227": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'interpolate_bilinear'",
                            "MethodArgument"
                        ],
                        [
                            "'dense_image_warp'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_232": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(image, [batch_size, height, width, channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, height, width, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_247": {
                "variable": {
                    "value": "f_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(image, [batch_size, height, width, channels])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_value_248": {
                "variable": {
                    "value": "query_points_on_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "query_points_on_grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batched_grid + flow",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(query_points_on_grid, [0.0, 0.0], [float(height - 1), float(width - 1)])",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "[0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "[float(height - 1), float(width - 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_249": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "query_points_on_grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batched_grid + flow",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(query_points_on_grid, [0.0, 0.0], [float(height - 1), float(width - 1)])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_250": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "op.inputs[1]",
                            "Subscript"
                        ],
                        [
                            "tf.reverse(query_points_on_grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(coords, [batch_size, height, width, 1, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, height, width, 1, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_252": {
                "variable": {
                    "value": "interpolated",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "interpolated",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "back_project(f_map, coords)",
                            "Call"
                        ],
                        [
                            "tf.reshape(interpolated, [1, height, width, 1, batch_size, channels])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(interpolated)",
                            "Call"
                        ],
                        [
                            "_interpolate_bilinear(image, query_points_flattened)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(interpolated, [height, width, channels])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(interpolated, [-1, height, width, channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, height, width, 1, batch_size, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_253": {
                "variable": {
                    "value": "interpolated",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "interpolated",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "back_project(f_map, coords)",
                            "Call"
                        ],
                        [
                            "tf.reshape(interpolated, [1, height, width, 1, batch_size, channels])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(interpolated)",
                            "Call"
                        ],
                        [
                            "_interpolate_bilinear(image, query_points_flattened)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(interpolated, [height, width, channels])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(interpolated, [-1, height, width, channels])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_255": {
                "variable": {
                    "value": "query_points_flattened",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "query_points_on_grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batched_grid + flow",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(query_points_on_grid, [0.0, 0.0], [float(height - 1), float(width - 1)])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, height * width, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_262": {
                "variable": {
                    "value": "interpolated",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "interpolated",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "back_project(f_map, coords)",
                            "Call"
                        ],
                        [
                            "tf.reshape(interpolated, [1, height, width, 1, batch_size, channels])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(interpolated)",
                            "Call"
                        ],
                        [
                            "_interpolate_bilinear(image, query_points_flattened)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(interpolated, [height, width, channels])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(interpolated, [-1, height, width, channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[height, width, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_265": {
                "variable": {
                    "value": "interpolated",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "interpolated",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "back_project(f_map, coords)",
                            "Call"
                        ],
                        [
                            "tf.reshape(interpolated, [1, height, width, 1, batch_size, channels])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(interpolated)",
                            "Call"
                        ],
                        [
                            "_interpolate_bilinear(image, query_points_flattened)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(interpolated, [height, width, channels])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(interpolated, [-1, height, width, channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, height, width, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_103": {
                "control_inputs": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_115": {
                "control_inputs": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_135": {
                "variable": {
                    "value": "max_floor",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "size_in_indexing_dimension - 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "query_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query_points.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "constant_136": {
                "variable": {
                    "value": "min_floor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "query_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query_points.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "minimum_137": {
                "variable": {
                    "value": "floor",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.maximum(min_floor, math_ops.floor(queries))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "max_floor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.cast(size_in_indexing_dimension - 2, query_type)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_139": {
                "variable": {
                    "value": "int_floor",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "floor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.minimum(math_ops.maximum(min_floor, math_ops.floor(queries)), max_floor)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_146": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "queries - floor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grid_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grid.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "constant_147": {
                "variable": {
                    "value": "min_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grid_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grid.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "constant_148": {
                "variable": {
                    "value": "max_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grid_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grid.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "minimum_149": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.maximum(min_alpha, alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "max_alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "constant_op.constant(1.0, dtype=grid_type)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_153": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.cast(queries - floor, grid_type)",
                            "Call"
                        ],
                        [
                            "math_ops.minimum(math_ops.maximum(min_alpha, alpha), max_alpha)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(alpha, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "control_dependencies_156": {
                "control_inputs": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_176": {
                "variable": {
                    "value": "gathered_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flattened_grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(grid, [batch_size * height * width, channels])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "linear_coordinates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_offsets + y_coords * width + x_coords",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_187": {
                "name": {
                    "value": "interpolate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_241": {
                "values": {
                    "value": "[grid_y, grid_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_94": {
                "input": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(grid)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_95": {
                "input": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(grid)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_96": {
                "input": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(grid)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_97": {
                "input": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(grid)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_113": {
                "input": {
                    "value": "query_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(query_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_128": {
                "name": {
                    "value": "'dim-' + str(dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_174": {
                "name": {
                    "value": "'gather-' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_177": {
                "tensor": {
                    "value": "gathered_values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.gather(flattened_grid, linear_coordinates)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_queries, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_138": {
                "x": {
                    "value": "min_floor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "constant_op.constant(0.0, dtype=query_type)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "math_ops.floor(queries)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_149": {
                "x": {
                    "value": "min_alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "constant_op.constant(0.0, dtype=grid_type)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.cast(queries - floor, grid_type)",
                            "Call"
                        ],
                        [
                            "math_ops.minimum(math_ops.maximum(min_alpha, alpha), max_alpha)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(alpha, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_138": {
                "x": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "unstacked_query_points[dim]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "utils/depth_operations.py": {
        "tensorflow": {
            "meshgrid_78": {
                "variable": {
                    "value": "(grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "w_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(0.0, w, 1.0, dtype=tf.float32) + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.range(0.0, w, 1.0, dtype=tf.float32) + 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "h_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(0.0, h, 1.0, dtype=tf.float32) + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.range(0.0, h, 1.0, dtype=tf.float32) + 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_81": {
                "variable": {
                    "value": "coords_2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.divide(mesh, tf.reshape(camera['f'], [b, 1, 1, 2])), tf.ones([b, h, w, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_82": {
                "variable": {
                    "value": "coords_2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords_2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.divide(mesh, tf.reshape(camera['f'], [b, 1, 1, 2])), tf.ones([b, h, w, 1])], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(coords_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.divide(mesh, tf.reshape(camera['f'], [b, 1, 1, 2])), tf.ones([b, h, w, 1])], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_241": {
                "variable": {
                    "value": "map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(map, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(map, [nbre_copies] + [1 for i in map_shape])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_242": {
                "variable": {
                    "value": "map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(map, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(map, [nbre_copies] + [1 for i in map_shape])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[nbre_copies] + [1 for i in map_shape]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_24": {
                "variable": {
                    "value": "feature_block",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_block",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.identity(feature_block)",
                            "Call"
                        ]
                    ]
                }
            },
            "resize_bilinear_26": {
                "variable": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "opt_flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_27": {
                "variable": {
                    "value": "scaled_flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(opt_flow, [height, width])",
                            "Call"
                        ],
                        [
                            "tf.reverse(proj_coord - mesh, axis=[-1])",
                            "Call"
                        ],
                        [
                            "proj_coords + delta - start_coords",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tf.reverse(flow, axis=[-1]), [nbre_copies * b, h, w, 2])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "[float(height), float(width)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_40": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_41": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(ones, -rot[:, 2], rot[:, 1], rot[:, 2], ones, -rot[:, 0], -rot[:, 1], rot[:, 0], ones)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_45": {
                "variable": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf.shape(input=rot)[:-1], (3, 3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_104": {
                "variable": {
                    "value": "proj_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "proj_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(proj_mat)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_107": {
                "variable": {
                    "value": "transformation_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rot_mat, tf.expand_dims(trans, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_110": {
                "variable": {
                    "value": "combined_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "proj_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(proj_mat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "transformation_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([rot_mat, tf.expand_dims(trans, -1)], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_111": {
                "variable": {
                    "value": "combined_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "combined_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linalg.matmul(proj_mat, transformation_mat)",
                            "Call"
                        ],
                        [
                            "tf.reshape(combined_mat, [b, 1, 1, 3, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, 1, 1, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_115": {
                "variable": {
                    "value": "pos_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([coords[:, :, :, :, 0] * depth, tf.ones([b, h, w, 1])], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_118": {
                "variable": {
                    "value": "proj_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "combined_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linalg.matmul(proj_mat, transformation_mat)",
                            "Call"
                        ],
                        [
                            "tf.reshape(combined_mat, [b, 1, 1, 3, 4])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "pos_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.concat([coords[:, :, :, :, 0] * depth, tf.ones([b, h, w, 1])], axis=-1), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(coords_2d, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_120": {
                "variable": {
                    "value": "rot_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "combined_mat[:, :, :, :, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "pos_vec[:, :, :, :3, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reverse_123": {
                "variable": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "proj_coord - mesh",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_133": {
                "variable": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.identity(depth)",
                            "Call"
                        ],
                        [
                            "(sqrt_value / disp - scaled_t[:, :, -1:, :]) / alpha",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(depth, [b, h * w, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_137": {
                "variable": {
                    "value": "trans_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "-trans",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b, 1, 1, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_147": {
                "variable": {
                    "value": "coords_2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.divide(mesh, tf.reshape(camera['f'], [b, 1, 1, 2])), tf.ones([b, h, w, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_148": {
                "variable": {
                    "value": "pos_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords_2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.divide(mesh, tf.reshape(camera['f'], [b, 1, 1, 2])), tf.ones([b, h, w, 1])], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(coords_2d, -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.divide(mesh, tf.reshape(camera['f'], [b, 1, 1, 2])), tf.ones([b, h, w, 1])], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_151": {
                "variable": {
                    "value": "trans_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(rot_mat, [b, 1, 1, 1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "trans_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(-trans, [b, 1, 1, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(tf.reshape(rot_mat, [b, 1, 1, 1, 3]), trans_vec)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_152": {
                "variable": {
                    "value": "proj_pos_rel",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(rot_mat, [b, 1, 1, 1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "pos_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.concat([coords[:, :, :, :, 0] * depth, tf.ones([b, h, w, 1])], axis=-1), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(coords_2d, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_166": {
                "variable": {
                    "value": "disp",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(disp, [b, h * w, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_167": {
                "variable": {
                    "value": "coords2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "coords2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(coords2d, [b, h * w, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(coords2d, [b, h * w, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(coords2d, [b, h * w, 3, 1])",
                            "Call"
                        ],
                        [
                            "coords2d * f_vec",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(coords2d, [b, h * w, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, h * w, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_168": {
                "variable": {
                    "value": "rot_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "get_rot_mat(rot)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_169": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "trans",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b, 1, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_170": {
                "variable": {
                    "value": "f_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat([camera['f'], tf.ones([b, 1])], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b, 1, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_180": {
                "variable": {
                    "value": "sqrt_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.sqrt(delta_x ** 2 + delta_y ** 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b, h * w, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_195": {
                "variable": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.identity(depth)",
                            "Call"
                        ],
                        [
                            "(sqrt_value / disp - scaled_t[:, :, -1:, :]) / alpha",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(depth, [b, h * w, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, h * w, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_196": {
                "variable": {
                    "value": "coords2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "coords2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(coords2d, [b, h * w, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(coords2d, [b, h * w, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(coords2d, [b, h * w, 3, 1])",
                            "Call"
                        ],
                        [
                            "coords2d * f_vec",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(coords2d, [b, h * w, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, h * w, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_197": {
                "variable": {
                    "value": "rot_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "get_rot_mat(rot)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_198": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "trans",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b, 1, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_199": {
                "variable": {
                    "value": "f_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat([camera['f'], tf.ones([b, 1])], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b, 1, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_209": {
                "variable": {
                    "value": "sqrt_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.sqrt(delta_x ** 2 + delta_y ** 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b, h * w, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_225": {
                "variable": {
                    "value": "prev_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prev_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(prev_d, [b, h * w, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, h * w, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_226": {
                "variable": {
                    "value": "coords2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "coords2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(coords2d, [b, h * w, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(coords2d, [b, h * w, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(coords2d, [b, h * w, 3, 1])",
                            "Call"
                        ],
                        [
                            "coords2d * f_vec",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(coords2d, [b, h * w, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, h * w, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_227": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "trans",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b, 1, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_228": {
                "variable": {
                    "value": "f_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat([camera['f'], tf.ones([b, 1])], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b, 1, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_235": {
                "variable": {
                    "value": "disp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "delta[:, :, :2, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_243": {
                "tensor": {
                    "value": "map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(map, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(map, [nbre_copies] + [1 for i in map_shape])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1] + map_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_252": {
                "variable": {
                    "value": "expl_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(-search_range, search_range + 1, 1.0, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_256": {
                "variable": {
                    "value": "disp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "disp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.reshape(disp, [b, h * w, 1, 1]), 1e-05)",
                            "Call"
                        ],
                        [
                            "sqrt_value / (depth * alpha + scaled_t[:, :, -1:, :])",
                            "BinOp"
                        ],
                        [
                            "tf.norm(delta[:, :, :2, :], axis=2)",
                            "Call"
                        ],
                        [
                            "tile_in_batch(disp, nbre_copies)",
                            "Call"
                        ],
                        [
                            "tf.reshape(disp, [nbre_copies, -1, w, h, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(disp + expl_range, [-1, h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(disp, 1e-06, 1000000.0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(disp, [nbre_copies, b, h, w, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nbre_copies, -1, w, h, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_257": {
                "variable": {
                    "value": "disp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "disp + expl_range",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_258": {
                "variable": {
                    "value": "disp",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "disp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.reshape(disp, [b, h * w, 1, 1]), 1e-05)",
                            "Call"
                        ],
                        [
                            "sqrt_value / (depth * alpha + scaled_t[:, :, -1:, :])",
                            "BinOp"
                        ],
                        [
                            "tf.norm(delta[:, :, :2, :], axis=2)",
                            "Call"
                        ],
                        [
                            "tile_in_batch(disp, nbre_copies)",
                            "Call"
                        ],
                        [
                            "tf.reshape(disp, [nbre_copies, -1, w, h, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(disp + expl_range, [-1, h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(disp, 1e-06, 1000000.0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(disp, [nbre_copies, b, h, w, 1])",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_262": {
                "variable": {
                    "value": "coords2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "coords2d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(coords2d, [b, h * w, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(coords2d, [b, h * w, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(coords2d, [b, h * w, 3, 1])",
                            "Call"
                        ],
                        [
                            "coords2d * f_vec",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(coords2d, [b, h * w, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, h * w, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_264": {
                "variable": {
                    "value": "rot_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "get_rot_mat(rot)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_265": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "trans",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b, 1, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_266": {
                "variable": {
                    "value": "f_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat([camera['f'], tf.ones([b, 1])], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b, 1, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_275": {
                "variable": {
                    "value": "delta_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "delta_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scaled_t[:, :, 0, 0] - scaled_t[:, :, 2, 0] * proj_coords[:, :, 0, 0]",
                            "BinOp"
                        ],
                        [
                            "scaled_t[:, :, 0, 0] - scaled_t[:, :, 2, 0] * proj_coords[:, :, 0, 0]",
                            "BinOp"
                        ],
                        [
                            "scaled_t[:, :, 0, 0] - scaled_t[:, :, 2, 0] * proj_coords[:, :, 0, 0]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(delta_x, [1, b, h, w, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, b, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_276": {
                "variable": {
                    "value": "delta_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "delta_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scaled_t[:, :, 1, 0] - scaled_t[:, :, 2, 0] * proj_coords[:, :, 1, 0]",
                            "BinOp"
                        ],
                        [
                            "scaled_t[:, :, 1, 0] - scaled_t[:, :, 2, 0] * proj_coords[:, :, 1, 0]",
                            "BinOp"
                        ],
                        [
                            "scaled_t[:, :, 1, 0] - scaled_t[:, :, 2, 0] * proj_coords[:, :, 1, 0]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(delta_y, [1, b, h, w, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, b, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_278": {
                "variable": {
                    "value": "start_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "coords2d[:, :, :2, :] * f_vec[:, :, :2, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, b, h, w, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_279": {
                "variable": {
                    "value": "proj_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "proj_coords[:, :, :2, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, b, h, w, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_282": {
                "variable": {
                    "value": "disp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "disp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.reshape(disp, [b, h * w, 1, 1]), 1e-05)",
                            "Call"
                        ],
                        [
                            "sqrt_value / (depth * alpha + scaled_t[:, :, -1:, :])",
                            "BinOp"
                        ],
                        [
                            "tf.norm(delta[:, :, :2, :], axis=2)",
                            "Call"
                        ],
                        [
                            "tile_in_batch(disp, nbre_copies)",
                            "Call"
                        ],
                        [
                            "tf.reshape(disp, [nbre_copies, -1, w, h, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(disp + expl_range, [-1, h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(disp, 1e-06, 1000000.0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(disp, [nbre_copies, b, h, w, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nbre_copies, b, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_283": {
                "variable": {
                    "value": "sqrt_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "delta_x ** 2 + delta_y ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_285": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[delta_x / divider, delta_y / divider]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_287": {
                "variable": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reverse(flow, axis=[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbre_copies * b, h, w, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_298": {
                "variable": {
                    "value": "sub_costs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(tf.cast(c1, tf.float16) * tf.cast(c2_w, tf.float16), num_or_size_splits=nbre_cuts, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_299": {
                "variable": {
                    "value": "cv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sub_costs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(tf.split(tf.cast(c1, tf.float16) * tf.cast(c2_w, tf.float16), num_or_size_splits=nbre_cuts, axis=-1), 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_300": {
                "variable": {
                    "value": "cv",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.transpose(tf.reshape(cv, [nbre_cuts * nbre_copies, -1, h, w]), perm=[1, 2, 3, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_302": {
                "variable": {
                    "value": "prev_disp",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(prev_disp, [nbre_copies, -1, h, w])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 2, 3, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_314": {
                "variable": {
                    "value": "c1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "c1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tile_in_batch(c1, nbre_copies)",
                            "Call"
                        ],
                        [
                            "tf.cast(c1, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_315": {
                "variable": {
                    "value": "c2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "c2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(c2, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_317": {
                "variable": {
                    "value": "padded_lvl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(c2, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [strided_search_range, strided_search_range], [strided_search_range, strided_search_range], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_321": {
                "variable": {
                    "value": "c1_nchw",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "c1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tile_in_batch(c1, nbre_copies)",
                            "Call"
                        ],
                        [
                            "tf.cast(c1, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_322": {
                "variable": {
                    "value": "pl_nchw",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "padded_lvl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(c2, [[0, 0], [strided_search_range, strided_search_range], [strided_search_range, strided_search_range], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_324": {
                "variable": {
                    "value": "c1_nchw",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(c1_nchw, num_or_size_splits=nbre_cuts, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_325": {
                "variable": {
                    "value": "pl_nchw",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(pl_nchw, num_or_size_splits=nbre_cuts, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_333": {
                "variable": {
                    "value": "cost_vol",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "cost_vol",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(cost_vol, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(cost_vol, alpha=0.1, name=name)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_334": {
                "variable": {
                    "value": "cost_vol",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "cost_vol",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(cost_vol, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(cost_vol, alpha=0.1, name=name)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cost_volume'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_23": {
                "name": {
                    "value": "wrap_feature_block",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "tensor": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack((ones, -rot[:, 2], rot[:, 1], rot[:, 2], ones, -rot[:, 0], -rot[:, 1], rot[:, 0], ones), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack((1.0 - (tyy + tzz), txy - twz, txz + twy, txy + twz, 1.0 - (txx + tzz), tyz - twx, txz - twy, tyz + twx, 1.0 - (txx + tyy)), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat((tf.shape(input=rot)[:-1], (3, 3)), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat((tf.shape(input=rot)[:-1], (3, 3)), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_48": {
                "variable": {
                    "value": "(w, x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "rot",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_61": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(1.0 - (tyy + tzz), txy - twz, txz + twy, txy + twz, 1.0 - (txx + tzz), tyz - twx, txz - twy, tyz + twx, 1.0 - (txx + tyy))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_65": {
                "variable": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf.shape(input=rot)[:-1], (3, 3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "range_76": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_77": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "tensor": {
                    "value": "camera['c']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b, 1, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_90": {
                "name": {
                    "value": "reproject",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_132": {
                "name": {
                    "value": "recompute_depth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "meshgrid_144": {
                "variable": {
                    "value": "(grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "w_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(0.0, w, 1.0, dtype=tf.float32) + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.range(0.0, w, 1.0, dtype=tf.float32) + 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "h_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(0.0, h, 1.0, dtype=tf.float32) + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.range(0.0, h, 1.0, dtype=tf.float32) + 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_154": {
                "t": {
                    "value": "new_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(proj_pos_rel[:, :, :, :, 0]) * depth + tf.stop_gradient(trans_vec[:, :, :, :, 0])",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "2000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "name_scope_161": {
                "name": {
                    "value": "disp2depth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_184": {
                "tensor": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.identity(depth)",
                            "Call"
                        ],
                        [
                            "(sqrt_value / disp - scaled_t[:, :, -1:, :]) / alpha",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(depth, [b, h * w, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_190": {
                "name": {
                    "value": "depth2disp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_213": {
                "tensor": {
                    "value": "disp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.reshape(disp, [b, h * w, 1, 1]), 1e-05)",
                            "Call"
                        ],
                        [
                            "sqrt_value / (depth * alpha + scaled_t[:, :, -1:, :])",
                            "BinOp"
                        ],
                        [
                            "tf.norm(delta[:, :, :2, :], axis=2)",
                            "Call"
                        ],
                        [
                            "tile_in_batch(disp, nbre_copies)",
                            "Call"
                        ],
                        [
                            "tf.reshape(disp, [nbre_copies, -1, w, h, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(disp + expl_range, [-1, h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(disp, 1e-06, 1000000.0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(disp, [nbre_copies, b, h, w, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_220": {
                "name": {
                    "value": "prev_d2disp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_237": {
                "input": {
                    "value": "tf.reshape(disp, [b, h, w, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_249": {
                "name": {
                    "value": "DSCV",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_313": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cost_volume'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_336": {
                "x": {
                    "value": "cost_vol",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(cost_vol, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(cost_vol, alpha=0.1, name=name)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "tensor": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack((ones, -rot[:, 2], rot[:, 1], rot[:, 2], ones, -rot[:, 0], -rot[:, 1], rot[:, 0], ones), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack((1.0 - (tyy + tzz), txy - twz, txz + twy, txy + twz, 1.0 - (txx + tzz), tyz - twx, txz - twy, tyz + twx, 1.0 - (txx + tyy)), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat((tf.shape(input=rot)[:-1], (3, 3)), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat((tf.shape(input=rot)[:-1], (3, 3)), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_79": {
                "values": {
                    "value": "[grid_x, grid_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "divide_81": {
                "x": {
                    "value": "mesh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.stack([grid_x, grid_y], axis=2), [1, h, w, 2]) - tf.reshape(camera['c'], [b, 1, 1, 2])",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tf.stack([grid_x, grid_y], axis=2), [1, h, w, 2]) - tf.reshape(camera['c'], [b, 1, 1, 2])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reshape(camera['f'], [b, 1, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_81": {
                "shape": {
                    "value": "[b, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_115": {
                "values": {
                    "value": "[coords[:, :, :, :, 0] * depth, tf.ones([b, h, w, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_151": {
                "tensor": {
                    "value": "rot_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_rot_mat(rot)",
                            "Call"
                        ],
                        [
                            "get_rot_mat(rot)[:, -1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(get_rot_mat(rot), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(get_rot_mat(rot), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(get_rot_mat(rot), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, 1, 1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_152": {
                "tensor": {
                    "value": "rot_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_rot_mat(rot)",
                            "Call"
                        ],
                        [
                            "get_rot_mat(rot)[:, -1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(get_rot_mat(rot), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(get_rot_mat(rot), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(get_rot_mat(rot), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, 1, 1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_153": {
                "input": {
                    "value": "proj_pos_rel[:, :, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_166": {
                "tensor": {
                    "value": "disp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.reshape(disp, [b, h * w, 1, 1]), 1e-05)",
                            "Call"
                        ],
                        [
                            "sqrt_value / (depth * alpha + scaled_t[:, :, -1:, :])",
                            "BinOp"
                        ],
                        [
                            "tf.norm(delta[:, :, :2, :], axis=2)",
                            "Call"
                        ],
                        [
                            "tile_in_batch(disp, nbre_copies)",
                            "Call"
                        ],
                        [
                            "tf.reshape(disp, [nbre_copies, -1, w, h, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(disp + expl_range, [-1, h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(disp, 1e-06, 1000000.0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(disp, [nbre_copies, b, h, w, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, h * w, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_170": {
                "values": {
                    "value": "[camera['f'], tf.ones([b, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_180": {
                "x": {
                    "value": "delta_x ** 2 + delta_y ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_199": {
                "values": {
                    "value": "[camera['f'], tf.ones([b, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_209": {
                "x": {
                    "value": "delta_x ** 2 + delta_y ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_228": {
                "values": {
                    "value": "[camera['f'], tf.ones([b, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_237": {
                "tensor": {
                    "value": "disp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.reshape(disp, [b, h * w, 1, 1]), 1e-05)",
                            "Call"
                        ],
                        [
                            "sqrt_value / (depth * alpha + scaled_t[:, :, -1:, :])",
                            "BinOp"
                        ],
                        [
                            "tf.norm(delta[:, :, :2, :], axis=2)",
                            "Call"
                        ],
                        [
                            "tile_in_batch(disp, nbre_copies)",
                            "Call"
                        ],
                        [
                            "tf.reshape(disp, [nbre_copies, -1, w, h, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(disp + expl_range, [-1, h, w, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(disp, 1e-06, 1000000.0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(disp, [nbre_copies, b, h, w, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_252": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_266": {
                "values": {
                    "value": "[camera['f'], tf.ones([b, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reverse_287": {
                "tensor": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(opt_flow, [height, width])",
                            "Call"
                        ],
                        [
                            "tf.reverse(proj_coord - mesh, axis=[-1])",
                            "Call"
                        ],
                        [
                            "proj_coords + delta - start_coords",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tf.reverse(flow, axis=[-1]), [nbre_copies * b, h, w, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_290": {
                "values": {
                    "value": "[c2, disp_prev_t]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_298": {
                "value": {
                    "value": "tf.cast(c1, tf.float16) * tf.cast(c2_w, tf.float16)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "nbre_cuts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_300": {
                "a": {
                    "value": "tf.reshape(cv, [nbre_cuts * nbre_copies, -1, h, w])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 2, 3, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_302": {
                "tensor": {
                    "value": "prev_disp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "combined_data_w[:, :, :, -1]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(tf.reshape(prev_disp, [nbre_copies, -1, h, w]), perm=[1, 2, 3, 0])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nbre_copies, -1, h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_324": {
                "value": {
                    "value": "c1_nchw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(c1, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.stack(tf.split(c1_nchw, num_or_size_splits=nbre_cuts, axis=1), axis=4)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "nbre_cuts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_325": {
                "value": {
                    "value": "pl_nchw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(padded_lvl, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.stack(tf.split(pl_nchw, num_or_size_splits=nbre_cuts, axis=1), axis=4)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "nbre_cuts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_330": {
                "variable": {
                    "value": "slice",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pl_nchw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(padded_lvl, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.stack(tf.split(pl_nchw, num_or_size_splits=nbre_cuts, axis=1), axis=4)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, y * dilation_rate, x * dilation_rate, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, h, w, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_331": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "c1_nchw * slice",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "tensor": {
                    "value": "camera['f']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b, 1, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_107": {
                "input": {
                    "value": "trans",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "range_142": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_143": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_145": {
                "tensor": {
                    "value": "camera['c']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b, 1, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "divide_147": {
                "x": {
                    "value": "mesh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.stack([grid_x, grid_y], axis=2), [1, h, w, 2]) - tf.reshape(camera['c'], [b, 1, 1, 2])",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tf.stack([grid_x, grid_y], axis=2), [1, h, w, 2]) - tf.reshape(camera['c'], [b, 1, 1, 2])",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reshape(camera['f'], [b, 1, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_147": {
                "shape": {
                    "value": "[b, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_300": {
                "tensor": {
                    "value": "cv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(sub_costs, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.transpose(tf.reshape(cv, [nbre_cuts * nbre_copies, -1, h, w]), perm=[1, 2, 3, 0]), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nbre_cuts * nbre_copies, -1, h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_45": {
                "input": {
                    "value": "rot",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_115": {
                "shape": {
                    "value": "[b, h, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_145": {
                "values": {
                    "value": "[grid_x, grid_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_147": {
                "tensor": {
                    "value": "camera['f']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b, 1, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_170": {
                "shape": {
                    "value": "[b, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_199": {
                "shape": {
                    "value": "[b, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_228": {
                "shape": {
                    "value": "[b, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_266": {
                "shape": {
                    "value": "[b, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_298": {
                "x": {
                    "value": "c2_w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "combined_data_w[:, :, :, :-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_65": {
                "input": {
                    "value": "rot",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}