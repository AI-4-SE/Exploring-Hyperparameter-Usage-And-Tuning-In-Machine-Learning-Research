{
    "src/read_data.py": {
        "sklearn": {
            "TfidfVectorizer_262": {
                "variable": {
                    "value": "tfidf",
                    "type": "variable",
                    "possible_values": []
                },
                "strip_accents": {
                    "value": "unicode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pairwise_distances_272": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "q_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfidf.transform([' '.join(ques)])",
                            "Call"
                        ],
                        [
                            "tfidf.transform([' '.join(ques)])",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "para_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfidf.fit_transform(text)",
                            "Call"
                        ],
                        [
                            "tfidf.fit_transform(text)",
                            "Call"
                        ]
                    ]
                },
                "metric": {
                    "value": "cosine",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TfidfVectorizer_295": {
                "variable": {
                    "value": "tfidf",
                    "type": "variable",
                    "possible_values": []
                },
                "strip_accents": {
                    "value": "unicode",
                    "type": "str",
                    "possible_values": []
                },
                "stop_words": {
                    "value": "stop_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fdist.most_common(num_stop_words)",
                            "Call"
                        ],
                        [
                            "[t[0] for t in stop_words]",
                            "ListComp"
                        ],
                        [
                            "fdist.most_common(num_stop_words)",
                            "Call"
                        ],
                        [
                            "[t[0] for t in stop_words]",
                            "ListComp"
                        ],
                        [
                            "['the', ',', '.', 'of', 'and', 'in', 'is', 'a', 'to', ')', '(', \"''\", '``', 'as', 'by', 'it', 'was', 'or', 'with', 'on', 'an', 'for', \"'s\", 'from', 'are', 'its', 'city', 'that', 'which', 'also']",
                            "List"
                        ],
                        [
                            "get_stop_words(total_words, config.num_stop_words)",
                            "Call"
                        ]
                    ]
                }
            },
            "pairwise_distances_305": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "q_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfidf.transform([' '.join(ques)])",
                            "Call"
                        ],
                        [
                            "tfidf.transform([' '.join(ques)])",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "para_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfidf.fit_transform(text)",
                            "Call"
                        ],
                        [
                            "tfidf.fit_transform(text)",
                            "Call"
                        ]
                    ]
                },
                "metric": {
                    "value": "cosine",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pairwise_distances_283": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "q_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfidf.transform([' '.join(sorted_supports[0])])",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "para_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfidf.fit_transform(sorted_supports[1:])",
                            "Call"
                        ]
                    ]
                },
                "metric": {
                    "value": "cosine",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/config.py": {
        "tensorflow": {
            "run_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/elmo/elmo.py": {
        "tensorflow": {
            "cast_47": {
                "variable": {
                    "value": "mask_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilm_ops['mask']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_48": {
                "variable": {
                    "value": "broadcast_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_102": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_ELMo_gamma'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "control_dependencies_45": {
                "control_inputs": {
                    "value": "[lm_embeddings, mask]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_62": {
                "variable": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "lm_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilm_ops['lm_embeddings']",
                            "Subscript"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "n_lm_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(lm_embeddings.get_shape()[1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "sum_pieces",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "squeeze_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_68": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_ELMo_W'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_lm_layers,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "_l2_regularizer",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_77": {
                "variable": {
                    "value": "normed_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.softmax(W + 1.0 / n_lm_layers)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "n_lm_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(lm_embeddings.get_shape()[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "split_81": {
                "variable": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "lm_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilm_ops['lm_embeddings']",
                            "Subscript"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "n_lm_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(lm_embeddings.get_shape()[1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_90": {
                "variable": {
                    "value": "sum_pieces",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pieces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "batch_normalization_57": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(x_masked) / N",
                            "BinOp"
                        ]
                    ]
                },
                "variance": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(((x_masked - mean) * broadcast_mask) ** 2) / N",
                            "BinOp"
                        ]
                    ]
                },
                "offset": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scale": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "variance_epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_34": {
                "input_tensor": {
                    "value": "tf.square(weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_53": {
                "input_tensor": {
                    "value": "mask_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_54": {
                "input_tensor": {
                    "value": "x_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * broadcast_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_55": {
                "input_tensor": {
                    "value": "((x_masked - mean) * broadcast_mask) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_78": {
                "logits": {
                    "value": "W + 1.0 / n_lm_layers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_34": {
                "x": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_collection_94": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_89": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "squeeze_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_87": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "squeeze_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/elmo/model.py": {
        "tensorflow": {
            "placeholder_612": {
                "variable": {
                    "value": "ids_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, max_word_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConfigProto_623": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_648": {
                "variable": {
                    "value": "ids_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, max_word_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConfigProto_654": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_494": {
                "variable": {
                    "value": "sequence_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(mask, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "group_596": {
                "variable": {
                    "value": "self.update_state_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "concat_154": {
                "variable": {
                    "value": "lm_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(t, axis=1) for t in layers_without_bos_eos]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_162": {
                "variable": {
                    "value": "mask_wo_bos_eos",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lm_graph.mask[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reverse_sequence_163": {
                "variable": {
                    "value": "mask_wo_bos_eos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_wo_bos_eos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(lm_graph.mask[:, 1:], 'int32')",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(mask_wo_bos_eos, lm_graph.sequence_lengths - 1, seq_axis=1, batch_axis=0)",
                            "Call"
                        ],
                        [
                            "mask_wo_bos_eos[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.reverse_sequence(mask_wo_bos_eos, sequence_length_wo_bos_eos, seq_axis=1, batch_axis=0)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask_wo_bos_eos, 'bool')",
                            "Call"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "lm_graph.sequence_lengths - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reverse_sequence_170": {
                "variable": {
                    "value": "mask_wo_bos_eos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_wo_bos_eos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(lm_graph.mask[:, 1:], 'int32')",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(mask_wo_bos_eos, lm_graph.sequence_lengths - 1, seq_axis=1, batch_axis=0)",
                            "Call"
                        ],
                        [
                            "mask_wo_bos_eos[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.reverse_sequence(mask_wo_bos_eos, sequence_length_wo_bos_eos, seq_axis=1, batch_axis=0)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask_wo_bos_eos, 'bool')",
                            "Call"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "sequence_length_wo_bos_eos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_graph.sequence_lengths - 2",
                            "BinOp"
                        ]
                    ]
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_176": {
                "variable": {
                    "value": "mask_wo_bos_eos",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_wo_bos_eos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(lm_graph.mask[:, 1:], 'int32')",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(mask_wo_bos_eos, lm_graph.sequence_lengths - 1, seq_axis=1, batch_axis=0)",
                            "Call"
                        ],
                        [
                            "mask_wo_bos_eos[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.reverse_sequence(mask_wo_bos_eos, sequence_length_wo_bos_eos, seq_axis=1, batch_axis=0)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask_wo_bos_eos, 'bool')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_329": {
                "variable": {
                    "value": "self.embedding_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "char_embed",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_chars, char_embed_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Constant"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_335": {
                "variable": {
                    "value": "self.char_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.ids_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_396": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_convolutions(self.char_embedding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, n_filters])",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding, W_proj_cnn) + b_proj_cnn",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(embedding, shp)",
                            "Call"
                        ],
                        [
                            "high(embedding, W_carry, b_carry, W_transform, b_transform)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, n_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_414": {
                "variable": {
                    "value": "carry_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, ww_carry) + bb_carry",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_415": {
                "variable": {
                    "value": "transform_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(x, ww_tr) + bb_tr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_452": {
                "variable": {
                    "value": "shp",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size_n_tokens, [projection_dim]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_453": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_convolutions(self.char_embedding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, n_filters])",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding, W_proj_cnn) + b_proj_cnn",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(embedding, shp)",
                            "Call"
                        ],
                        [
                            "high(embedding, W_carry, b_carry, W_transform, b_transform)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([batch_size_n_tokens, [projection_dim]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_464": {
                "variable": {
                    "value": "self.embedding_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._n_tokens_vocab, projection_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Constant"
                        ]
                    ]
                }
            },
            "embedding_lookup_468": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.ids_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_any_491": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.ids_placeholder > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_624": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_655": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_116": {
                "control_inputs": {
                    "value": "[lm_graph.update_state_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_sequence_138": {
                "variable": {
                    "value": "layer_wo_bos_eos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer_wo_bos_eos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer[:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reverse_sequence(layer_wo_bos_eos, lm_graph.sequence_lengths - 1, seq_axis=1, batch_axis=0)",
                            "Call"
                        ],
                        [
                            "layer_wo_bos_eos[:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reverse_sequence(layer_wo_bos_eos, sequence_length_wo_bos_eos, seq_axis=1, batch_axis=0)",
                            "Call"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "lm_graph.sequence_lengths - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reverse_sequence_145": {
                "variable": {
                    "value": "layer_wo_bos_eos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer_wo_bos_eos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer[:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reverse_sequence(layer_wo_bos_eos, lm_graph.sequence_lengths - 1, seq_axis=1, batch_axis=0)",
                            "Call"
                        ],
                        [
                            "layer_wo_bos_eos[:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reverse_sequence(layer_wo_bos_eos, sequence_length_wo_bos_eos, seq_axis=1, batch_axis=0)",
                            "Call"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "sequence_length_wo_bos_eos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_graph.sequence_lengths - 2",
                            "BinOp"
                        ]
                    ]
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_276": {
                "name_or_scope": {
                    "value": "bilm",
                    "type": "str",
                    "possible_values": []
                },
                "custom_getter": {
                    "value": "custom_getter",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_328": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_384": {
                "values": {
                    "value": "convolutions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_402": {
                "variable": {
                    "value": "W_proj_cnn",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_proj",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_filters, projection_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(mean=0.0, stddev=np.sqrt(1.0 / n_filters))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Constant"
                        ]
                    ]
                }
            },
            "get_variable_407": {
                "variable": {
                    "value": "b_proj_cnn",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_proj",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[projection_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Constant"
                        ]
                    ]
                }
            },
            "device_463": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_494": {
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_any(self.ids_placeholder > 0, axis=2)",
                            "Call"
                        ],
                        [
                            "self.ids_placeholder > 0",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_495": {
                "input": {
                    "value": "sequence_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(mask, tf.int32), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reverse_sequence_508": {
                "variable": {
                    "value": "layer_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seq_lengths": {
                    "value": "sequence_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(mask, tf.int32), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_625": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_656": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_120": {
                "values": {
                    "value": "[token_embeddings, token_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_340": {
                "name_or_scope": {
                    "value": "CNN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_360": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W_cnn_%s' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, width, char_embed_dim, num]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(minval=-0.05, maxval=0.05)",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(mean=0.0, stddev=np.sqrt(1.0 / (width * char_embed_dim)))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Constant"
                        ]
                    ]
                }
            },
            "get_variable_365": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'b_cnn_%s' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Constant"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool_374": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inp, w, strides=[1, 1, 1, 1], padding='VALID') + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool(conv, [1, 1, max_chars - width + 1, 1], [1, 1, 1, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "activation(conv)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(conv, squeeze_dims=[2])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, max_chars - width + 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_380": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inp, w, strides=[1, 1, 1, 1], padding='VALID') + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool(conv, [1, 1, max_chars - width + 1, 1], [1, 1, 1, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "activation(conv)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(conv, squeeze_dims=[2])",
                            "Call"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_395": {
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_convolutions(self.char_embedding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, n_filters])",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding, W_proj_cnn) + b_proj_cnn",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(embedding, shp)",
                            "Call"
                        ],
                        [
                            "high(embedding, W_carry, b_carry, W_transform, b_transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_401": {
                "name_or_scope": {
                    "value": "CNN_proj",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_423": {
                "variable": {
                    "value": "W_carry",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_carry",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[highway_dim, highway_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(mean=0.0, stddev=np.sqrt(1.0 / highway_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Constant"
                        ]
                    ]
                }
            },
            "get_variable_429": {
                "variable": {
                    "value": "b_carry",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_carry",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[highway_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(-2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Constant"
                        ]
                    ]
                }
            },
            "get_variable_433": {
                "variable": {
                    "value": "W_transform",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_transform",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[highway_dim, highway_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(mean=0.0, stddev=np.sqrt(1.0 / highway_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Constant"
                        ]
                    ]
                }
            },
            "get_variable_438": {
                "variable": {
                    "value": "b_transform",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_transform",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[highway_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Constant"
                        ]
                    ]
                }
            },
            "matmul_448": {
                "a": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_convolutions(self.char_embedding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, n_filters])",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding, W_proj_cnn) + b_proj_cnn",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(embedding, shp)",
                            "Call"
                        ],
                        [
                            "high(embedding, W_carry, b_carry, W_transform, b_transform)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_proj_cnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_proj', [n_filters, projection_dim], initializer=tf.random_normal_initializer(mean=0.0, stddev=np.sqrt(1.0 / n_filters)), dtype=DTYPE)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMCell_518": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "lstm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.options['lstm']['dim']",
                            "Subscript"
                        ]
                    ]
                },
                "num_proj": {
                    "value": "projection_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.options['lstm']['projection_dim']",
                            "Subscript"
                        ],
                        [
                            "self.options['lstm']['projection_dim']",
                            "Subscript"
                        ],
                        [
                            "self.options['lstm']['projection_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "cell_clip": {
                    "value": "cell_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.options['lstm'].get('cell_clip')",
                            "Call"
                        ]
                    ]
                },
                "proj_clip": {
                    "value": "proj_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.options['lstm'].get('proj_clip')",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMCell_522": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "lstm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.options['lstm']['dim']",
                            "Subscript"
                        ]
                    ]
                },
                "cell_clip": {
                    "value": "cell_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.options['lstm'].get('cell_clip')",
                            "Call"
                        ]
                    ]
                },
                "proj_clip": {
                    "value": "proj_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.options['lstm'].get('proj_clip')",
                            "Call"
                        ]
                    ]
                }
            },
            "dynamic_rnn_560": {
                "variable": {
                    "value": "(layer_output, final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell(lstm_dim, num_proj=projection_dim, cell_clip=cell_clip, proj_clip=proj_clip)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.LSTMCell(lstm_dim, cell_clip=cell_clip, proj_clip=proj_clip)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.ResidualWrapper(lstm_cell)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "layer_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding",
                            "Attribute"
                        ],
                        [
                            "tf.reverse_sequence(self.embedding, sequence_lengths, seq_axis=1, batch_axis=0)",
                            "Call"
                        ],
                        [
                            "layer_output",
                            "Name"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "sequence_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(mask, tf.int32), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "tf.nn.rnn_cell.LSTMStateTuple(*batch_init_states)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_126": {
                "values": {
                    "value": "[lm_graph.lstm_outputs['forward'][i], lm_graph.lstm_outputs['backward'][i]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_155": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_332": {
                "minval": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_352": {
                "variable": {
                    "value": "w_init",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-0.05",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_414": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "ww_carry",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_415": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "ww_tr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_422": {
                "name_or_scope": {
                    "value": "'CNN_high_%s' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ResidualWrapper_534": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell(lstm_dim, num_proj=projection_dim, cell_clip=cell_clip, proj_clip=proj_clip)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.LSTMCell(lstm_dim, cell_clip=cell_clip, proj_clip=proj_clip)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.ResidualWrapper(lstm_cell)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_543": {
                "initial_value": {
                    "value": "tf.zeros([self._max_batch_size, dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_559": {
                "name_or_scope": {
                    "value": "variable_scope_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'RNN_{0}/RNN/MultiRNNCell/Cell{1}'.format(i_direction, i)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_583": {
                "control_inputs": {
                    "value": "[layer_output]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_586": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[final_state[i][:batch_size, :], init_states[i][batch_size:, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_589": {
                "variable": {
                    "value": "state_update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "init_states[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([final_state[i][:batch_size, :], init_states[i][batch_size:, :]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_356": {
                "variable": {
                    "value": "w_init",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "np.sqrt(1.0 / (width * char_embed_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_369": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_cnn_%s' % i, [1, width, char_embed_dim, num], initializer=w_init, dtype=DTYPE)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_normal_initializer_404": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "np.sqrt(1.0 / n_filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_409": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_544": {
                "shape": {
                    "value": "[self._max_batch_size, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_sequence_575": {
                "input": {
                    "value": "layer_output",
                    "type": "variable",
                    "possible_values": []
                },
                "seq_lengths": {
                    "value": "sequence_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(mask, tf.int32), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_367": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_426": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "np.sqrt(1.0 / highway_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_431": {
                "value": {
                    "value": "-2.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_435": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "np.sqrt(1.0 / highway_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_440": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_564": {
                "c": {
                    "value": "*batch_init_states",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "src/main.py": {
        "tensorflow": {
            "Session_119": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "gpu_configuration",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gpu_config()",
                            "Call"
                        ],
                        [
                            "gpu_config()",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_295": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "gpu_configuration",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gpu_config()",
                            "Call"
                        ],
                        [
                            "gpu_config()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/model_baseline_nqa.py": {
        "tensorflow": {
            "get_variable_31": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embeddings",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab.size(), vocab.emb_size()]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.encoder_input_lengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_input_lengths",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.decoder_targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_targets",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.decoder_target_lengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_target_lengths",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.decoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.decoder_input_lengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_input_lengths",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self.max_decoder_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "max_decoder_length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self.max_encoder_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "max_encoder_length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "self.memory_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "memory_vectors",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "variable": {
                    "value": "self.memory_vector_lengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "memory_vector_lengths",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "self.oov_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "oov_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "self.memory_vectors_full_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "memory_vectors_full_vocab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_65": {
                "variable": {
                    "value": "self.memory_elmo_token_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "self.query_elmo_token_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_127": {
                "variable": {
                    "value": "embedded_memory_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[embedded_memory_vectors, elmo_context_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_129": {
                "variable": {
                    "value": "embedded_input_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[embedded_input_seq, elmo_query_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_270": {
                "variable": {
                    "value": "train_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "train_state.final_dist_history.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_272": {
                "variable": {
                    "value": "pred_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pred_state.final_dist_history.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_275": {
                "variable": {
                    "value": "self.preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(pred_state.final_dist_history.stack(), [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sequence_mask_277": {
                "variable": {
                    "value": "output_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "self.decoder_target_lengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "self.max_decoder_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_295": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_296": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_297": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_298": {
                "variable": {
                    "value": "(clipped_grads, norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.loss, tvars)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.opt.clipping_threshold",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_304": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "dense_170": {
                "variable": {
                    "value": "mem_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "mem_rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedded_memory_vectors",
                            "Name"
                        ],
                        [
                            "bidaf_attention(mem_rep, ques_inp, self.memory_vector_lengths, self.encoder_input_lengths, tri_linear_attention)",
                            "Call"
                        ],
                        [
                            "mem_rep + self_attn_output_proj",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mem_rep.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self_attn_input_proj",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "elmo_encodings_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_100": {
                "name_or_scope": {
                    "value": "elmo_encodings_input",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_112": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_114": {
                "variable": {
                    "value": "embedded_input_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_116": {
                "variable": {
                    "value": "embedded_dec_input_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.decoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_118": {
                "variable": {
                    "value": "embedded_dec_target_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.decoder_targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_120": {
                "variable": {
                    "value": "embedded_memory_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.memory_vectors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_166": {
                "name_or_scope": {
                    "value": "res_self_attn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_236": {
                "variable": {
                    "value": "projection_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.vocab.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "output_projection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_96": {
                "input": {
                    "value": "self.memory_vectors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_105": {
                "input": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_137": {
                "name_or_scope": {
                    "value": "'attn_layer_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_178": {
                "name_or_scope": {
                    "value": "input_proj",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_196": {
                "name_or_scope": {
                    "value": "output_proj",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fill_223": {
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "sos_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vocab.start_token_id",
                            "Attribute"
                        ]
                    ]
                }
            },
            "variable_scope_227": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_collection_305": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_138": {
                "name_or_scope": {
                    "value": "mem_encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_148": {
                "name_or_scope": {
                    "value": "ques_encoder",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/model_baseline_wh.py": {
        "tensorflow": {
            "get_variable_32": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embeddings",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab.size(), vocab.emb_size()]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "self.encoder_input_lengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_input_lengths",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.decoder_targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_targets",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.decoder_target_lengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_target_lengths",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self.decoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self.decoder_input_lengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_input_lengths",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "self.max_decoder_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "max_decoder_length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "self.max_encoder_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "max_encoder_length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "self.memory_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "memory_vectors",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_59": {
                "variable": {
                    "value": "self.memory_vector_lengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "memory_vector_lengths",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "self.oov_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "oov_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "self.memory_vectors_full_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "memory_vectors_full_vocab",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "self.memory_elmo_token_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "self.query_elmo_token_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_125": {
                "variable": {
                    "value": "embedded_memory_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[embedded_memory_vectors, elmo_context_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_127": {
                "variable": {
                    "value": "embedded_input_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[embedded_input_seq, elmo_query_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_261": {
                "variable": {
                    "value": "train_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "train_state.final_dist_history.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sequence_mask_264": {
                "variable": {
                    "value": "output_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "self.decoder_target_lengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "self.max_decoder_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_267": {
                "variable": {
                    "value": "logical_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "self.decoder_target_lengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "self.max_decoder_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_284": {
                "variable": {
                    "value": "self.preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.log(pred_probs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_297": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_298": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_299": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_300": {
                "variable": {
                    "value": "(clipped_grads, norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.loss, tvars)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.opt.clipping_threshold",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_306": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "dense_168": {
                "variable": {
                    "value": "mem_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "mem_rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedded_memory_vectors",
                            "Name"
                        ],
                        [
                            "bidaf_attention(mem_rep, ques_inp, self.memory_vector_lengths, self.encoder_input_lengths, tri_linear_attention)",
                            "Call"
                        ],
                        [
                            "mem_rep + self_attn_output_proj",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mem_rep.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self_attn_input_proj",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "elmo_encodings_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "elmo_encodings_input",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_110": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_112": {
                "variable": {
                    "value": "embedded_input_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_114": {
                "variable": {
                    "value": "embedded_dec_input_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.decoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_116": {
                "variable": {
                    "value": "embedded_dec_target_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.decoder_targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_118": {
                "variable": {
                    "value": "embedded_memory_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.memory_vectors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_164": {
                "name_or_scope": {
                    "value": "res_self_attn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_229": {
                "variable": {
                    "value": "projection_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.vocab.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "output_projection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_282": {
                "x": {
                    "value": "tf.logical_not(logical_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_284": {
                "x": {
                    "value": "pred_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.seq2seq.sequence_loss(logits=train_logits, targets=self.decoder_targets, weights=output_mask, softmax_loss_function=sparse_gather_probs, average_across_timesteps=False, average_across_batch=False)",
                            "Call"
                        ],
                        [
                            "pred_probs + tf.cast(tf.logical_not(logical_mask), tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_94": {
                "input": {
                    "value": "self.memory_vectors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_103": {
                "input": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "'attn_layer_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_176": {
                "name_or_scope": {
                    "value": "input_proj",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_194": {
                "name_or_scope": {
                    "value": "output_proj",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_220": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "logical_not_283": {
                "x": {
                    "value": "logical_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(self.decoder_target_lengths, maxlen=self.max_decoder_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_307": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_136": {
                "name_or_scope": {
                    "value": "mem_encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_146": {
                "name_or_scope": {
                    "value": "ques_encoder",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/model_commonsense_nqa.py": {
        "tensorflow": {}
    },
    "src/model_commonsense_wh.py": {
        "tensorflow": {}
    },
    "src/summary_handler.py": {
        "tensorflow": {
            "FileWriter_8": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "summary_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_16": {
                "variable": {
                    "value": "summary_placeholders[summary_type]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_17": {
                "variable": {
                    "value": "summary_graphs[summary_type]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "summary_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "summary_list",
                            "Name"
                        ]
                    ]
                },
                "data": {
                    "value": "summary_placeholders[summary_type]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/tf_utils/attention_utils.py": {
        "tensorflow": {
            "expand_dims_58": {
                "variable": {
                    "value": "processed_query",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "processed_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.expand_dims(processed_query, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_59": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_v",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "processed_query.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "get_variable_63": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_g",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "processed_query.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "initializer": {
                    "value": "math.sqrt(1.0 / num_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_67": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "processed_query.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_ops.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_73": {
                "input_tensor": {
                    "value": "normed_v * math_ops.tanh(keys + processed_query + b)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_76": {
                "input_tensor": {
                    "value": "v * math_ops.tanh(keys + processed_query)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_56": {
                "input": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rsqrt_71": {
                "x": {
                    "value": "math_ops.reduce_sum(math_ops.square(v))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_72": {
                "input_tensor": {
                    "value": "math_ops.square(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_74": {
                "x": {
                    "value": "keys + processed_query + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_76": {
                "x": {
                    "value": "keys + processed_query",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_72": {
                "x": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_scope.get_variable('attention_v', [num_units], dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/tf_utils/attention_wrapper.py": {
        "tensorflow": {
            "map_structure_84": {
                "variable": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda m: ops.convert_to_tensor(m, name='memory')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda m: ops.convert_to_tensor(m, name='memory'), memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_292": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.expand_dims(query, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_303": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.expand_dims(query, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_304": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(query, keys, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(score, [1])",
                            "Call"
                        ],
                        [
                            "g * score",
                            "BinOp"
                        ],
                        [
                            "score + score_bias",
                            "BinOp"
                        ],
                        [
                            "_luong_score(query, self._keys, self._scale)",
                            "Call"
                        ],
                        [
                            "_bahdanau_score(processed_query, self._keys, self._normalize)",
                            "Call"
                        ],
                        [
                            "_bahdanau_score(processed_query, self._keys, self._normalize)",
                            "Call"
                        ],
                        [
                            "_luong_score(query, self._keys, self._scale)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_429": {
                "variable": {
                    "value": "processed_query",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "processed_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.expand_dims(processed_query, 1)",
                            "Call"
                        ],
                        [
                            "self.query_layer(query) if self.query_layer else query",
                            "IfExp"
                        ],
                        [
                            "self.query_layer(query) if self.query_layer else query",
                            "IfExp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_430": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_v",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.dtype",
                            "Attribute"
                        ],
                        [
                            "processed_query.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "convert_to_tensor_602": {
                "variable": {
                    "value": "p_choose_i",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "p_choose_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(p_choose_i, name='p_choose_i')",
                            "Call"
                        ],
                        [
                            "p_choose_i * math_ops.cumsum(previous_attention, axis=1)",
                            "BinOp"
                        ],
                        [
                            "math_ops.sigmoid(score)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "p_choose_i",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_603": {
                "variable": {
                    "value": "previous_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "previous_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(previous_attention, name='previous_attention')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "previous_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_682": {
                "variable": {
                    "value": "p_choose_i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(query, keys, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(score, [1])",
                            "Call"
                        ],
                        [
                            "g * score",
                            "BinOp"
                        ],
                        [
                            "score + score_bias",
                            "BinOp"
                        ],
                        [
                            "_luong_score(query, self._keys, self._scale)",
                            "Call"
                        ],
                        [
                            "_bahdanau_score(processed_query, self._keys, self._normalize)",
                            "Call"
                        ],
                        [
                            "_bahdanau_score(processed_query, self._keys, self._normalize)",
                            "Call"
                        ],
                        [
                            "_luong_score(query, self._keys, self._scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_976": {
                "variable": {
                    "value": "expanded_alignments",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mechanism(cell_output, previous_alignments=previous_alignments)",
                            "Call"
                        ],
                        [
                            "self._probability_fn(score, previous_alignments)",
                            "Call"
                        ],
                        [
                            "self._probability_fn(score, previous_alignments)",
                            "Call"
                        ],
                        [
                            "self._probability_fn(score, previous_alignments)",
                            "Call"
                        ],
                        [
                            "self._probability_fn(score, previous_alignments)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_986": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "expanded_alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.expand_dims(alignments, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "attention_mechanism.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_987": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(expanded_alignments, attention_mechanism.values)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(context, [1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_87": {
                "variable": {
                    "value": "memory_sequence_length",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "memory_sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(memory_sequence_length, name='memory_sequence_length')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "memory_sequence_length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sequence_mask_98": {
                "variable": {
                    "value": "seq_len_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "memory_sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(memory_sequence_length, name='memory_sequence_length')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "array_ops.shape(nest.flatten(memory)[0])[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "nest.flatten(memory)[0].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_108": {
                "variable": {
                    "value": "extra_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "rank - 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_structure_122": {
                "func": {
                    "value": "lambda m: _maybe_mask(m, seq_len_mask)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda m: ops.convert_to_tensor(m, name='memory'), memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "sequence_mask_131": {
                "variable": {
                    "value": "score_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "memory_sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(memory_sequence_length, name='memory_sequence_length')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "array_ops.shape(score)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_308": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_g",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.dtype",
                            "Attribute"
                        ],
                        [
                            "processed_query.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "initializer": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_434": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_g",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.dtype",
                            "Attribute"
                        ],
                        [
                            "processed_query.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "initializer": {
                    "value": "math.sqrt(1.0 / num_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_438": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.dtype",
                            "Attribute"
                        ],
                        [
                            "processed_query.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_ops.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_554": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(x, name='x')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_609": {
                "variable": {
                    "value": "shifted_1mp_choose_i",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[array_ops.ones((batch_size, 1)), 1 - p_choose_i[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_960": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(logits, name='logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_1277": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "all_attentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_structure_94": {
                "func": {
                    "value": "_check_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "*structure": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda m: ops.convert_to_tensor(m, name='memory'), memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_129": {
                "control_inputs": {
                    "value": "[check_ops.assert_positive(memory_sequence_length, message=message)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_134": {
                "condition": {
                    "value": "score_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.sequence_mask(memory_sequence_length, maxlen=array_ops.shape(score)[1])",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(query, keys, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(score, [1])",
                            "Call"
                        ],
                        [
                            "g * score",
                            "BinOp"
                        ],
                        [
                            "score + score_bias",
                            "BinOp"
                        ],
                        [
                            "_luong_score(query, self._keys, self._scale)",
                            "Call"
                        ],
                        [
                            "_bahdanau_score(processed_query, self._keys, self._normalize)",
                            "Call"
                        ],
                        [
                            "_bahdanau_score(processed_query, self._keys, self._normalize)",
                            "Call"
                        ],
                        [
                            "_luong_score(query, self._keys, self._scale)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "score_mask_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score_mask_value * array_ops.ones_like(score)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_444": {
                "input_tensor": {
                    "value": "normed_v * math_ops.tanh(keys + processed_query + b)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_447": {
                "input_tensor": {
                    "value": "v * math_ops.tanh(keys + processed_query)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_553": {
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "exp_556": {
                "x": {
                    "value": "math_ops.cumsum(math_ops.log(clip_ops.clip_by_value(x, tiny, 1)), *args, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_710": {
                "indices": {
                    "value": "array_ops.zeros((batch_size,), dtype=dtypes.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "max_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._alignments_size",
                            "Attribute"
                        ],
                        [
                            "self._alignments_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.dtype",
                            "Attribute"
                        ],
                        [
                            "processed_query.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "get_variable_805": {
                "variable": {
                    "value": "score_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_score_bias",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "processed_query.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self._score_bias_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_900": {
                "variable": {
                    "value": "score_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_score_bias",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "query.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self._score_bias_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_959": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'LuongAttention'",
                            "MethodArgument"
                        ],
                        [
                            "'BahdanauAttention'",
                            "MethodArgument"
                        ],
                        [
                            "'BahdanauMonotonicAttention'",
                            "MethodArgument"
                        ],
                        [
                            "'LuongMonotonicAttention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "one_hot_965": {
                "indices": {
                    "value": "math_ops.argmax(logits, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.get_shape()[-1]",
                            "Subscript"
                        ],
                        [
                            "logits.get_shape()[-1].value",
                            "Attribute"
                        ],
                        [
                            "array_ops.shape(logits)[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_1253": {
                "variable": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.identity(cell_output, name='checked_cell_output')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "checked_cell_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_85": {
                "value": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "memory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rank_107": {
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "seq_len_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "seq_len_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "array_ops.sequence_mask(memory_sequence_length, maxlen=array_ops.shape(nest.flatten(memory)[0])[1], dtype=nest.flatten(memory)[0].dtype)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(seq_len_mask, array_ops.concat((array_ops.shape(seq_len_mask), extra_ones), 0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "array_ops.concat((array_ops.shape(seq_len_mask), extra_ones), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_133": {
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(query, keys, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(score, [1])",
                            "Call"
                        ],
                        [
                            "g * score",
                            "BinOp"
                        ],
                        [
                            "score + score_bias",
                            "BinOp"
                        ],
                        [
                            "_luong_score(query, self._keys, self._scale)",
                            "Call"
                        ],
                        [
                            "_bahdanau_score(processed_query, self._keys, self._normalize)",
                            "Call"
                        ],
                        [
                            "_bahdanau_score(processed_query, self._keys, self._normalize)",
                            "Call"
                        ],
                        [
                            "_luong_score(query, self._keys, self._scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_197": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'LuongAttention'",
                            "MethodArgument"
                        ],
                        [
                            "'BahdanauAttention'",
                            "MethodArgument"
                        ],
                        [
                            "'BahdanauMonotonicAttention'",
                            "MethodArgument"
                        ],
                        [
                            "'LuongMonotonicAttention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_391": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "luong_attention",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[query]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_427": {
                "input": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rsqrt_442": {
                "x": {
                    "value": "math_ops.reduce_sum(math_ops.square(v))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_531": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "bahdanau_attention",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[query]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cumsum_556": {
                "x": {
                    "value": "math_ops.log(clip_ops.clip_by_value(x, tiny, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "transpose_614": {
                "a": {
                    "value": "functional_ops.scan(lambda x, yz: array_ops.reshape(yz[0] * x + yz[1], (batch_size,)), [array_ops.transpose(shifted_1mp_choose_i), array_ops.transpose(previous_attention)], array_ops.zeros((batch_size,)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_678": {
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(query, keys, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(score, [1])",
                            "Call"
                        ],
                        [
                            "g * score",
                            "BinOp"
                        ],
                        [
                            "score + score_bias",
                            "BinOp"
                        ],
                        [
                            "_luong_score(query, self._keys, self._scale)",
                            "Call"
                        ],
                        [
                            "_bahdanau_score(processed_query, self._keys, self._normalize)",
                            "Call"
                        ],
                        [
                            "_bahdanau_score(processed_query, self._keys, self._normalize)",
                            "Call"
                        ],
                        [
                            "_luong_score(query, self._keys, self._scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_711": {
                "shape": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_801": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "bahdanau_monotonic_attention",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[query]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_897": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "luong_monotonic_attention",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[query]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_966": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(logits, name='logits')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_990": {
                "values": {
                    "value": "[cell_output, context]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_1105": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'LuongAttention'",
                            "MethodArgument"
                        ],
                        [
                            "'BahdanauAttention'",
                            "MethodArgument"
                        ],
                        [
                            "'BahdanauMonotonicAttention'",
                            "MethodArgument"
                        ],
                        [
                            "'LuongMonotonicAttention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "assert_equal_1127": {
                "x": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_choose_i.shape[0].value or array_ops.shape(p_choose_i)[0]",
                            "BoolOp"
                        ]
                    ]
                },
                "y": {
                    "value": "attention_mechanism.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "message": {
                    "value": "error_message",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'When constructing AttentionWrapper %s: ' % self._base_name + 'Non-matching batch sizes between the memory (encoder output) and initial_cell_state.  Are you using the BeamSearchDecoder?  You may need to tile your initial state via the tf.contrib.seq2seq.tile_batch function with argument multiple=beam_width.'",
                            "BinOp"
                        ],
                        [
                            "'When calling zero_state of AttentionWrapper %s: ' % self._base_name + 'Non-matching batch sizes between the memory (encoder output) and the requested batch size.  Are you using the BeamSearchDecoder?  If so, make sure your encoder output has been tiled to beam_width via tf.contrib.seq2seq.tile_batch, and the batch_size= argument passed to zero_state is batch_size * beam_width.'",
                            "BinOp"
                        ],
                        [
                            "'When applying AttentionWrapper %s: ' % self.name + 'Non-matching batch sizes between the memory (encoder output) and the query (decoder output).  Are you using the BeamSearchDecoder?  You may need to tile your memory input via the tf.contrib.seq2seq.tile_batch function with argument multiple=beam_width.'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_1170": {
                "name": {
                    "value": "type(self).__name__ + 'ZeroState'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_structure_1185": {
                "variable": {
                    "value": "cell_state",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda s: array_ops.identity(s, name='checked_cell_state')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "cell_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._initial_cell_state",
                            "Attribute"
                        ],
                        [
                            "self._cell.zero_state(batch_size, dtype)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda s: array_ops.identity(s, name='checked_cell_state'), cell_state)",
                            "Call"
                        ],
                        [
                            "state.cell_state",
                            "Attribute"
                        ]
                    ]
                }
            },
            "control_dependencies_1251": {
                "control_inputs": {
                    "value": "self._batch_size_checks(cell_batch_size, error_message)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_104": {
                "input": {
                    "value": "memory_sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(memory_sequence_length, name='memory_sequence_length')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_109": {
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_113": {
                "control_inputs": {
                    "value": "[check_ops.assert_equal(seq_len_batch_size, m_batch_size, message=message)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assert_positive_130": {
                "x": {
                    "value": "memory_sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(memory_sequence_length, name='memory_sequence_length')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "message": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'memory_sequence_length and memory tensor batch sizes do not match.'",
                            "Constant"
                        ],
                        [
                            "'All values in memory_sequence_length must greater than zero.'",
                            "Constant"
                        ]
                    ]
                }
            },
            "flatten_198": {
                "structure": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda m: ops.convert_to_tensor(m, name='memory'), memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_365": {
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keys.shape[2].value or array_ops.shape(keys)[2]",
                            "BoolOp"
                        ]
                    ]
                },
                "name": {
                    "value": "memory_layer",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_initializer_440": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_443": {
                "input_tensor": {
                    "value": "math_ops.square(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_445": {
                "x": {
                    "value": "keys + processed_query + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_447": {
                "x": {
                    "value": "keys + processed_query",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_503": {
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keys.shape[2].value or array_ops.shape(keys)[2]",
                            "BoolOp"
                        ]
                    ]
                },
                "name": {
                    "value": "query_layer",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_505": {
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keys.shape[2].value or array_ops.shape(keys)[2]",
                            "BoolOp"
                        ]
                    ]
                },
                "name": {
                    "value": "memory_layer",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_557": {
                "x": {
                    "value": "clip_ops.clip_by_value(x, tiny, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_607": {
                "input": {
                    "value": "p_choose_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(p_choose_i, name='p_choose_i')",
                            "Call"
                        ],
                        [
                            "p_choose_i * math_ops.cumsum(previous_attention, axis=1)",
                            "BinOp"
                        ],
                        [
                            "math_ops.sigmoid(score)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_610": {
                "shape": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "scan_614": {
                "fn": {
                    "value": "lambda x, yz: array_ops.reshape(yz[0] * x + yz[1], (batch_size,))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "[array_ops.transpose(shifted_1mp_choose_i), array_ops.transpose(previous_attention)]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "array_ops.zeros((batch_size,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cumsum_626": {
                "x": {
                    "value": "previous_attention / clip_ops.clip_by_value(cumprod_1mp_choose_i, 1e-10, 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_632": {
                "x": {
                    "value": "previous_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(previous_attention, name='previous_attention')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_772": {
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keys.shape[2].value or array_ops.shape(keys)[2]",
                            "BoolOp"
                        ]
                    ]
                },
                "name": {
                    "value": "query_layer",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_774": {
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keys.shape[2].value or array_ops.shape(keys)[2]",
                            "BoolOp"
                        ]
                    ]
                },
                "name": {
                    "value": "memory_layer",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_868": {
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keys.shape[2].value or array_ops.shape(keys)[2]",
                            "BoolOp"
                        ]
                    ]
                },
                "name": {
                    "value": "query_layer",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_870": {
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keys.shape[2].value or array_ops.shape(keys)[2]",
                            "BoolOp"
                        ]
                    ]
                },
                "name": {
                    "value": "memory_layer",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_964": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(logits, name='logits')",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1072": {
                "values": {
                    "value": "[inputs, attention]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "map_structure_1122": {
                "variable": {
                    "value": "self._initial_cell_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda s: array_ops.identity(s, name='check_initial_cell_state')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "initial_cell_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TensorShape_1162": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_1183": {
                "control_inputs": {
                    "value": "self._batch_size_checks(batch_size, error_message)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_1243": {
                "input": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.identity(cell_output, name='checked_cell_output')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_100": {
                "input": {
                    "value": "nest.flatten(memory)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_118": {
                "values": {
                    "value": "(array_ops.shape(seq_len_mask), extra_ones)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_132": {
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(query, keys, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(score, [1])",
                            "Call"
                        ],
                        [
                            "g * score",
                            "BinOp"
                        ],
                        [
                            "score + score_bias",
                            "BinOp"
                        ],
                        [
                            "_luong_score(query, self._keys, self._scale)",
                            "Call"
                        ],
                        [
                            "_bahdanau_score(processed_query, self._keys, self._normalize)",
                            "Call"
                        ],
                        [
                            "_bahdanau_score(processed_query, self._keys, self._normalize)",
                            "Call"
                        ],
                        [
                            "_luong_score(query, self._keys, self._scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_206": {
                "input": {
                    "value": "self._keys",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_208": {
                "input": {
                    "value": "self._keys",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_443": {
                "x": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_scope.get_variable('attention_v', [num_units], dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_557": {
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(x, name='x')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "tiny",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.finfo(x.dtype.as_numpy_dtype).tiny",
                            "Attribute"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_621": {
                "shape": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cumprod_638": {
                "x": {
                    "value": "1 - p_choose_i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "exclusive": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_1090": {
                "units": {
                    "value": "attention_layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "attention_layer",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "flatten_1109": {
                "structure": {
                    "value": "initial_cell_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "control_dependencies_1120": {
                "control_inputs": {
                    "value": "self._batch_size_checks(state_batch_size, error_message)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_1190": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_101": {
                "structure": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda m: ops.convert_to_tensor(m, name='memory'), memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "assert_equal_114": {
                "x": {
                    "value": "seq_len_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory_sequence_length.shape[0].value or array_ops.shape(memory_sequence_length)[0]",
                            "BoolOp"
                        ]
                    ]
                },
                "y": {
                    "value": "m_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.shape[0].value or array_ops.shape(m)[0]",
                            "BoolOp"
                        ]
                    ]
                },
                "message": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'memory_sequence_length and memory tensor batch sizes do not match.'",
                            "Constant"
                        ],
                        [
                            "'All values in memory_sequence_length must greater than zero.'",
                            "Constant"
                        ]
                    ]
                }
            },
            "reshape_616": {
                "tensor": {
                    "value": "yz[0] * x + yz[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_618": {
                "a": {
                    "value": "shifted_1mp_choose_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.concat([array_ops.ones((batch_size, 1)), 1 - p_choose_i[:, :-1]], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_619": {
                "a": {
                    "value": "previous_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(previous_attention, name='previous_attention')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_629": {
                "t": {
                    "value": "cumprod_1mp_choose_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "safe_cumprod(1 - p_choose_i, axis=1, exclusive=True)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_1112": {
                "input": {
                    "value": "final_state_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.flatten(initial_cell_state)[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "identity_1186": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "checked_cell_state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_100": {
                "structure": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda m: ops.convert_to_tensor(m, name='memory'), memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_118": {
                "input": {
                    "value": "seq_len_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "array_ops.sequence_mask(memory_sequence_length, maxlen=array_ops.shape(nest.flatten(memory)[0])[1], dtype=nest.flatten(memory)[0].dtype)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(seq_len_mask, array_ops.concat((array_ops.shape(seq_len_mask), extra_ones), 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_1123": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "check_initial_cell_state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TensorArray_1197": {
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.dtype",
                            "Attribute"
                        ],
                        [
                            "processed_query.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/tf_utils/hierarchical_ptr_wrapper.py": {
        "tensorflow": {
            "reshape_54": {
                "variable": {
                    "value": "mem_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b * k, -1, h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_56": {
                "variable": {
                    "value": "query_expand_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.identity(cell_output, name='checked_cell_output')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_60": {
                "variable": {
                    "value": "query_expand_dims_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(query_expand_dims, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, k, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "variable": {
                    "value": "query_expand_dims_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "query_expand_dims_tiled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(query_expand_dims, 1), [1, k, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(query_expand_dims_tiled, [b * k, -1, q_dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b * k, -1, q_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "variable": {
                    "value": "attn_logits_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attn_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "first_lv_sim_func(query_expand_dims_tiled, mem_reshaped)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, k, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_74": {
                "variable": {
                    "value": "alignments",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attn_logits_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(attn_logits, [b, k, -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_76": {
                "variable": {
                    "value": "expanded_alignments",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "first_lv_sim_func(query_expand_dims_tiled, mem_reshaped)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_77": {
                "variable": {
                    "value": "w_lv_context",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "expanded_alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(attn_logits, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "mem_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(values, [b * k, -1, h])",
                            "Call"
                        ],
                        [
                            "tf.reshape(memory, [b * k, -1, h])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_78": {
                "variable": {
                    "value": "w_lv_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_lv_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(expanded_alignments, mem_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(w_lv_context, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "w_lv_context_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_lv_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(expanded_alignments, mem_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(w_lv_context, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, k, h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_85": {
                "variable": {
                    "value": "second_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "second_attn_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "second_lv_sim_func(query_expand_dims, w_lv_context_expanded)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_86": {
                "variable": {
                    "value": "expanded_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "second_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(second_attn_logits, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_88": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "expanded_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(second_probs, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_lv_context_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(w_lv_context, [b, k, h])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_89": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(expanded_probs, w_lv_context_expanded)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(context, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_91": {
                "variable": {
                    "value": "ptr_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[context, cell_state.c, cell_state.h, input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "ptr_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_93": {
                "variable": {
                    "value": "p_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "ptr_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([context, cell_state.c, cell_state.h, input], -1, name='ptr_inputs')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "pointer_generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "range_124": {
                "variable": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": []
                },
                "limit": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(full_vocab_dist)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_125": {
                "variable": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, limit=batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [1, enc_seq_len])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_126": {
                "variable": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, limit=batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [1, enc_seq_len])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, enc_seq_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_129": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(batch_nums, enc_batch_extended_vocab)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scatter_nd_134": {
                "variable": {
                    "value": "P_copy_projected",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack((batch_nums, enc_batch_extended_vocab), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "attn_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "scatter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size, extended_vsize]",
                            "List"
                        ],
                        [
                            "[batch_size, vocab_size]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_160": {
                "variable": {
                    "value": "extra_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_source_OOVs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_162": {
                "variable": {
                    "value": "weighted_P_vocab_extended",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[weighted_P_vocab, extra_zeros]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_186": {
                "variable": {
                    "value": "extra_unk_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "extra_unk_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "full_vocab_dist[:, vocab_size:]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(extra_unk_probs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_189": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "limit": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(full_vocab_dist)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "fill_190": {
                "variable": {
                    "value": "unk_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "unk_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_191": {
                "variable": {
                    "value": "scatter_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(batch_idx, unk_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scatter_nd_194": {
                "variable": {
                    "value": "unk_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "scatter_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack((batch_idx, unk_idx), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "extra_unk_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "full_vocab_dist[:, vocab_size:]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(extra_unk_probs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "scatter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size, extended_vsize]",
                            "List"
                        ],
                        [
                            "[batch_size, vocab_size]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_282": {
                "variable": {
                    "value": "mem_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b * k, -1, h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_284": {
                "variable": {
                    "value": "mem_mask_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "memory_sequence_length",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_286": {
                "variable": {
                    "value": "self._memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "_prepare_memory(mem_reshaped, mem_mask_reshaped, False)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b, k, -1, h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_465": {
                "variable": {
                    "value": "vocab_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self._output_layer(cell_output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_508": {
                "variable": {
                    "value": "full_vocab_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self._memory_full_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_509": {
                "variable": {
                    "value": "alignments_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "this_alignment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "alignments",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_527": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "all_attentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_60": {
                "input": {
                    "value": "query_expand_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(cell_output, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "first_lv_sim",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "second_lv_sim",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_123": {
                "input": {
                    "value": "enc_batch_extended_vocab",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_188": {
                "input": {
                    "value": "full_vocab_dist",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "identity_451": {
                "variable": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.identity(cell_output, name='checked_cell_output')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "checked_cell_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_98": {
                "values": {
                    "value": "[cell_output, context]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_293": {
                "name_or_scope": {
                    "value": "first_lv_attn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_296": {
                "name_or_scope": {
                    "value": "second_lv_attn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_311": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "assert_equal_334": {
                "x": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(full_vocab_dist)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(full_vocab_dist)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "message": {
                    "value": "error_message",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'When constructing AttnPointerWrapper %s: ' % self._base_name + 'Non-matching batch sizes between the memory (encoder output) and initial_cell_state.  Are you using the BeamSearchDecoder?  You may need to tile your initial state via the tf.contrib.seq2seq.tile_batch function with argument multiple=beam_width.'",
                            "BinOp"
                        ],
                        [
                            "'When calling zero_state of AttentionWrapper %s: ' % self._base_name + 'Non-matching batch sizes between the memory (encoder output) and the requested batch size.  Are you using the BeamSearchDecoder?  If so, make sure your encoder output has been tiled to beam_width via tf.contrib.seq2seq.tile_batch, and the batch_size= argument passed to zero_state is batch_size * beam_width.'",
                            "BinOp"
                        ],
                        [
                            "'When applying AttentionWrapper %s: ' % self.name + 'Non-matching batch sizes between the memory (encoder output) and the query (decoder output).  Are you using the BeamSearchDecoder?  You may need to tile your memory input via the tf.contrib.seq2seq.tile_batch function with argument multiple=beam_width.'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_383": {
                "name": {
                    "value": "type(self).__name__ + 'ZeroState'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_structure_398": {
                "variable": {
                    "value": "cell_state",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda s: array_ops.identity(s, name='checked_cell_state')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "cell_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._initial_cell_state",
                            "Attribute"
                        ],
                        [
                            "self._cell.zero_state(batch_size, dtype)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda s: array_ops.identity(s, name='checked_cell_state'), cell_state)",
                            "Call"
                        ],
                        [
                            "state.cell_state",
                            "Attribute"
                        ]
                    ]
                }
            },
            "control_dependencies_449": {
                "control_inputs": {
                    "value": "self._batch_size_checks(cell_batch_size, error_message)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_235": {
                "values": {
                    "value": "[inputs, attention]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "map_structure_328": {
                "variable": {
                    "value": "self._initial_cell_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda s: array_ops.identity(s, name='check_initial_cell_state')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "initial_cell_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TensorShape_372": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_396": {
                "control_inputs": {
                    "value": "self._batch_size_checks(batch_size, error_message)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_441": {
                "input": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.identity(cell_output, name='checked_cell_output')",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_254": {
                "units": {
                    "value": "attention_layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "attention_layer",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "flatten_315": {
                "structure": {
                    "value": "initial_cell_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "control_dependencies_326": {
                "control_inputs": {
                    "value": "self._batch_size_checks(state_batch_size, error_message)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_404": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_415": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_417": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_419": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_318": {
                "input": {
                    "value": "final_state_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.flatten(initial_cell_state)[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "identity_399": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "checked_cell_state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_329": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "check_initial_cell_state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TensorArray_413": {
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_408": {
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/tf_utils/nested_multilevel_attn.py": {
        "tensorflow": {
            "reshape_30": {
                "variable": {
                    "value": "mem_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b * k, -1, h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_31": {
                "variable": {
                    "value": "mem_mask_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "memory_sequence_length",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_35": {
                "variable": {
                    "value": "self.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_prepare_memory(mem_reshaped, mem_mask_reshaped)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, k, -1, h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "variable": {
                    "value": "mem_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[b * k, -1, h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_55": {
                "variable": {
                    "value": "query_expand_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "attn_logits_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attn_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.first_lv_sim_func(query_expand_dims, mem_reshaped)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, k, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_61": {
                "variable": {
                    "value": "alignments",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attn_logits_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(attn_logits, [b, k, -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_63": {
                "variable": {
                    "value": "expanded_alignments",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.first_lv_sim_func(query_expand_dims, mem_reshaped)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_64": {
                "variable": {
                    "value": "w_lv_context",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "expanded_alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(attn_logits, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "mem_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(memory, [b * k, -1, h])",
                            "Call"
                        ],
                        [
                            "tf.reshape(memory, [b * k, -1, h])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_65": {
                "variable": {
                    "value": "w_lv_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_lv_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(expanded_alignments, mem_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(w_lv_context, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_67": {
                "variable": {
                    "value": "w_lv_context_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_lv_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(expanded_alignments, mem_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(w_lv_context, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b, k, h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_26": {
                "input": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_27": {
                "input": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_28": {
                "input": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "first_lv_attn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "second_lv_attn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_49": {
                "input": {
                    "value": "self.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_50": {
                "input": {
                    "value": "self.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_51": {
                "input": {
                    "value": "self.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/tf_utils/ops.py": {
        "tensorflow": {
            "cast_10": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sequence_mask(mask, tf.shape(val)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "variable": {
                    "value": "dots",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tensor1",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tensor2",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_67": {
                "variable": {
                    "value": "key_w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "key_w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "keys.shape.as_list()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensordot_68": {
                "variable": {
                    "value": "key_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "key_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('key_w', shape=keys.shape.as_list()[-1], initializer=init, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[[2], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_70": {
                "variable": {
                    "value": "x_w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "input_w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "x.shape.as_list()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensordot_71": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "x_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('input_w', shape=x.shape.as_list()[-1], initializer=init, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[[2], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_73": {
                "variable": {
                    "value": "dot_w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dot_w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "x.shape.as_list()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_77": {
                "variable": {
                    "value": "dot_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_dots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * tf.expand_dims(tf.expand_dims(dot_w, 0), 0)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_92": {
                "variable": {
                    "value": "Wq",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Wq",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hq, num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "query.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_97": {
                "variable": {
                    "value": "aq",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,jk->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "Wq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Wq', [hq, num_units], query.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_100": {
                "variable": {
                    "value": "Wk",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Wk",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hk, num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "keys.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_102": {
                "variable": {
                    "value": "ak",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,jk->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "Wk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Wk', [hk, num_units], keys.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_110": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pre_tanh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aq + ak",
                            "BinOp"
                        ],
                        [
                            "pre_tanh + b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_112": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "V",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_units, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_124": {
                "variable": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(x_mask, x_word_dim)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "x_word_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sequence_mask_125": {
                "variable": {
                    "value": "mem_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "mem_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(mem_mask, key_word_dim)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "key_word_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logical_and_126": {
                "variable": {
                    "value": "join_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(x_mask, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(mem_mask, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_152": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "dist_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim_func(x, a)",
                            "Call"
                        ],
                        [
                            "dist_matrix + VERY_NEGATIVE_NUMBER * (1 - tf.cast(joint_mask, dist_matrix.dtype))",
                            "BinOp"
                        ],
                        [
                            "sim_func(context_h, query_h)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_156": {
                "variable": {
                    "value": "attention_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(dist_matrix)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(dotted)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_181": {
                "variable": {
                    "value": "query_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "dist_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim_func(x, a)",
                            "Call"
                        ],
                        [
                            "dist_matrix + VERY_NEGATIVE_NUMBER * (1 - tf.cast(joint_mask, dist_matrix.dtype))",
                            "BinOp"
                        ],
                        [
                            "sim_func(context_h, query_h)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_185": {
                "variable": {
                    "value": "select_query",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "query_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(dist_matrix)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "query_h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_188": {
                "variable": {
                    "value": "context_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dist_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim_func(x, a)",
                            "Call"
                        ],
                        [
                            "dist_matrix + VERY_NEGATIVE_NUMBER * (1 - tf.cast(joint_mask, dist_matrix.dtype))",
                            "BinOp"
                        ],
                        [
                            "sim_func(context_h, query_h)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_189": {
                "variable": {
                    "value": "context_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "context_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(dist_matrix, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_190": {
                "variable": {
                    "value": "select_context",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ai,aik->ak",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "context_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(context_dist)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "context_h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_191": {
                "variable": {
                    "value": "select_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "select_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('ai,aik->ak', context_probs, context_h)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(select_context, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_193": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[context_h, select_query, context_h * select_query, context_h * select_context]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_210": {
                "variable": {
                    "value": "u_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(u_k, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_211": {
                "variable": {
                    "value": "dotted",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "memories * u_temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_214": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "dotted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(memories * u_temp, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_215": {
                "variable": {
                    "value": "probs_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(probs, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_216": {
                "variable": {
                    "value": "c_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "memories",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_217": {
                "variable": {
                    "value": "o_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "c_temp * probs_temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_230": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "input_pos_enc * input",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_239": {
                "variable": {
                    "value": "lhs1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "lhs",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lhs.shape.as_list()[-1]",
                            "Subscript"
                        ],
                        [
                            "lhs.shape.as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "lhs1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_240": {
                "variable": {
                    "value": "rhs1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "rhs",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lhs.shape.as_list()[-1]",
                            "Subscript"
                        ],
                        [
                            "lhs.shape.as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "rhs1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_244": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lhs1 + rhs1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_253": {
                "variable": {
                    "value": "lhs1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "lhs",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lhs.shape.as_list()[-1]",
                            "Subscript"
                        ],
                        [
                            "lhs.shape.as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "lhs1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_254": {
                "variable": {
                    "value": "rhs1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "rhs",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lhs.shape.as_list()[-1]",
                            "Subscript"
                        ],
                        [
                            "lhs.shape.as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "rhs1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_258": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lhs1 + rhs1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_260": {
                "variable": {
                    "value": "lhs2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "lhs",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lhs.shape.as_list()[-1]",
                            "Subscript"
                        ],
                        [
                            "lhs.shape.as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "lhs2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_261": {
                "variable": {
                    "value": "rhs2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "rhs",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lhs.shape.as_list()[-1]",
                            "Subscript"
                        ],
                        [
                            "lhs.shape.as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "rhs2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_263": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lhs2 + rhs2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_267": {
                "variable": {
                    "value": "lhs3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "lhs",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lhs.shape.as_list()[-1]",
                            "Subscript"
                        ],
                        [
                            "lhs.shape.as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "lhs3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_268": {
                "variable": {
                    "value": "rhs3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "rhs",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lhs.shape.as_list()[-1]",
                            "Subscript"
                        ],
                        [
                            "lhs.shape.as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "rhs3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_270": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lhs3 + rhs3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_303": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim_func(x, x)",
                            "Call"
                        ],
                        [
                            "dist + VERY_NEGATIVE_NUMBER * (1 - tf.cast(joint_mask, dist.dtype))",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(dist)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_307": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim_func(x, x)",
                            "Call"
                        ],
                        [
                            "dist + VERY_NEGATIVE_NUMBER * (1 - tf.cast(joint_mask, dist.dtype))",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(dist)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_329": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(outputs, axis=2)",
                            "Call"
                        ],
                        [
                            "output_layer(outputs)",
                            "Call"
                        ],
                        [
                            "output_layer(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(is_train, inputs, input_lengths)",
                            "Call"
                        ],
                        [
                            "output_layer(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dynamic_rnn_339": {
                "variable": {
                    "value": "(outputs, final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda : create_cell(num_units=hidden_size)",
                            "Lambda"
                        ],
                        [
                            "create_multi_rnn(cell_type, hidden_size, num_layers, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs, dropout_rate, training=is_train)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_363": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs, dropout_rate, training=is_train)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_392": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(outputs, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_58": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_82": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_107": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_114": {
                "input": {
                    "value": "tf.einsum('bij,jk->bik', out, v)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_281": {
                "values": {
                    "value": "[t1, t2, t1 * t2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(t1.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_325": {
                "variable": {
                    "value": "(outputs, final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "fw_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_multi_rnn(cell_type, hidden_size, num_layers, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "bw_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_multi_rnn(cell_type, hidden_size, num_layers, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs, dropout_rate, training=is_train)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_327": {
                "variable": {
                    "value": "(outputs, final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "fw_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_multi_rnn(cell_type, hidden_size, num_layers, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "bw_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_multi_rnn(cell_type, hidden_size, num_layers, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs, dropout_rate, training=is_train)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_10": {
                "lengths": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.sequence_mask(mask, tf.shape(val)[1]), tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "tf.shape(val)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DropoutWrapper_42": {
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda : create_cell(num_units=hidden_size)",
                            "Lambda"
                        ],
                        [
                            "create_multi_rnn(cell_type, hidden_size, num_layers, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "11235",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultiRNNCell_51": {
                "cells": {
                    "value": "cells",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[cell() for _ in range(layers)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "expand_dims_76": {
                "input": {
                    "value": "dot_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('dot_w', shape=x.shape.as_list()[-1], initializer=init, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_79": {
                "input": {
                    "value": "key_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(keys, key_w, axes=[[2], [0]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_114": {
                "equation": {
                    "value": "bij,jk->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dot_logits + tf.expand_dims(key_logits, 1) + tf.expand_dims(x_logits, 2)",
                            "BinOp"
                        ],
                        [
                            "out + bias",
                            "BinOp"
                        ],
                        [
                            "math_ops.tanh(pre_tanh)",
                            "Call"
                        ],
                        [
                            "f * lhs + r * z",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(dist, x)",
                            "Call"
                        ],
                        [
                            "merge_function(x, out)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(tf.stack(outputs, -1), -1)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('V', [num_units, 1], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_126": {
                "input": {
                    "value": "mem_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(mem_mask, key_word_dim)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_140": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_141": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_172": {
                "input": {
                    "value": "context_h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_173": {
                "input": {
                    "value": "query_h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_210": {
                "input": {
                    "value": "u_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "u_k + o_k",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_215": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(dist_matrix)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(dotted)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_295": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_392": {
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(outputs, axis=2)",
                            "Call"
                        ],
                        [
                            "output_layer(outputs)",
                            "Call"
                        ],
                        [
                            "output_layer(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(is_train, inputs, input_lengths)",
                            "Call"
                        ],
                        [
                            "output_layer(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_379": {
                "name_or_scope": {
                    "value": "'worker_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_10": {
                "input": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_150": {
                "x": {
                    "value": "joint_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_attention_mask(x_mask, a_mask, n, m)",
                            "Call"
                        ],
                        [
                            "compute_attention_mask(context_mask, query_mask, context_word_dim, query_word_dim)",
                            "Call"
                        ],
                        [
                            "compute_attention_mask(mask, mask, x_dim, x_dim)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dist_matrix.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_180": {
                "x": {
                    "value": "joint_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_attention_mask(x_mask, a_mask, n, m)",
                            "Call"
                        ],
                        [
                            "compute_attention_mask(context_mask, query_mask, context_word_dim, query_word_dim)",
                            "Call"
                        ],
                        [
                            "compute_attention_mask(mask, mask, x_dim, x_dim)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dist_matrix.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_300": {
                "x": {
                    "value": "joint_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_attention_mask(x_mask, a_mask, n, m)",
                            "Call"
                        ],
                        [
                            "compute_attention_mask(context_mask, query_mask, context_word_dim, query_word_dim)",
                            "Call"
                        ],
                        [
                            "compute_attention_mask(mask, mask, x_dim, x_dim)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dist.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/tf_utils/pointer_wrapper.py": {
        "tensorflow": {
            "concat_41": {
                "variable": {
                    "value": "ptr_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(context, cell_state.c, cell_state.h, input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "ptr_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_43": {
                "variable": {
                    "value": "p_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "ptr_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((context, cell_state.c, cell_state.h, input), -1, name='ptr_inputs')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "out_choices",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "pointer_generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_55": {
                "variable": {
                    "value": "expanded_alignments",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_mechanism(cell_output, previous_alignments=previous_alignments)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_56": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "expanded_alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.expand_dims(alignments, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "attention_mechanism.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_57": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(expanded_alignments, attention_mechanism.values)",
                            "Call"
                        ],
                        [
                            "array_ops.squeeze(context, [1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_86": {
                "variable": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": []
                },
                "limit": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(full_vocab_dist)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_87": {
                "variable": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, limit=batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [1, enc_seq_len])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_88": {
                "variable": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, limit=batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [1, enc_seq_len])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, enc_seq_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_91": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(batch_nums, enc_batch_extended_vocab)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scatter_nd_96": {
                "variable": {
                    "value": "P_copy_projected",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack((batch_nums, enc_batch_extended_vocab), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "attn_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "scatter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size, extended_vsize]",
                            "List"
                        ],
                        [
                            "[batch_size, vocab_size]",
                            "List"
                        ]
                    ]
                }
            },
            "expand_dims_117": {
                "variable": {
                    "value": "p_generate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_gen[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_119": {
                "variable": {
                    "value": "p_copies",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_gen[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_124": {
                "variable": {
                    "value": "copy_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "copy_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_137": {
                "variable": {
                    "value": "weighted_P_copy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weighted_P_copy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_copies * copy_dist",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(weighted_P_copy, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_146": {
                "variable": {
                    "value": "extra_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_source_OOVs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_148": {
                "variable": {
                    "value": "weighted_P_vocab_extended",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[weighted_P_vocab, extra_zeros]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_172": {
                "variable": {
                    "value": "extra_unk_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "extra_unk_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "full_vocab_dist[:, vocab_size:]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(extra_unk_probs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_175": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "limit": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(full_vocab_dist)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "fill_176": {
                "variable": {
                    "value": "unk_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "unk_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_177": {
                "variable": {
                    "value": "scatter_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(batch_idx, unk_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scatter_nd_180": {
                "variable": {
                    "value": "unk_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "scatter_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack((batch_idx, unk_idx), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "extra_unk_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "full_vocab_dist[:, vocab_size:]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(extra_unk_probs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "scatter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size, extended_vsize]",
                            "List"
                        ],
                        [
                            "[batch_size, vocab_size]",
                            "List"
                        ]
                    ]
                }
            },
            "softmax_47": {
                "logits": {
                    "value": "p_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(ptr_inputs, out_choices, activation=tf.sigmoid, use_bias=True, name='pointer_generator')",
                            "Call"
                        ],
                        [
                            "_compute_pgen(cell_output, last_out_state, inputs, attention_vect, len(self._attention_mechanisms) + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_458": {
                "variable": {
                    "value": "vocab_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self._output_layer(cell_output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_496": {
                "variable": {
                    "value": "attention_vect",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "all_attentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_515": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "all_attentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_85": {
                "input": {
                    "value": "enc_batch_extended_vocab",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_174": {
                "input": {
                    "value": "full_vocab_dist",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "identity_442": {
                "variable": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.identity(cell_output, name='checked_cell_output')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "checked_cell_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_60": {
                "values": {
                    "value": "[cell_output, context]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_297": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "assert_equal_319": {
                "x": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(full_vocab_dist)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "attention_mechanism.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "message": {
                    "value": "error_message",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'When constructing AttnPointerWrapper %s: ' % self._base_name + 'Non-matching batch sizes between the memory (encoder output) and initial_cell_state.  Are you using the BeamSearchDecoder?  You may need to tile your initial state via the tf.contrib.seq2seq.tile_batch function with argument multiple=beam_width.'",
                            "BinOp"
                        ],
                        [
                            "'When calling zero_state of AttentionWrapper %s: ' % self._base_name + 'Non-matching batch sizes between the memory (encoder output) and the requested batch size.  Are you using the BeamSearchDecoder?  If so, make sure your encoder output has been tiled to beam_width via tf.contrib.seq2seq.tile_batch, and the batch_size= argument passed to zero_state is batch_size * beam_width.'",
                            "BinOp"
                        ],
                        [
                            "'When applying AttentionWrapper %s: ' % self.name + 'Non-matching batch sizes between the memory (encoder output) and the query (decoder output).  Are you using the BeamSearchDecoder?  You may need to tile your memory input via the tf.contrib.seq2seq.tile_batch function with argument multiple=beam_width.'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_372": {
                "name": {
                    "value": "type(self).__name__ + 'ZeroState'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_structure_387": {
                "variable": {
                    "value": "cell_state",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda s: array_ops.identity(s, name='checked_cell_state')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "cell_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._initial_cell_state",
                            "Attribute"
                        ],
                        [
                            "self._cell.zero_state(batch_size, dtype)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda s: array_ops.identity(s, name='checked_cell_state'), cell_state)",
                            "Call"
                        ],
                        [
                            "state.cell_state",
                            "Attribute"
                        ]
                    ]
                }
            },
            "control_dependencies_440": {
                "control_inputs": {
                    "value": "self._batch_size_checks(cell_batch_size, error_message)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_233": {
                "values": {
                    "value": "[inputs, attention]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "map_structure_314": {
                "variable": {
                    "value": "self._initial_cell_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda s: array_ops.identity(s, name='check_initial_cell_state')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "initial_cell_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TensorShape_358": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_364": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_385": {
                "control_inputs": {
                    "value": "self._batch_size_checks(batch_size, error_message)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_432": {
                "input": {
                    "value": "cell_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.identity(cell_output, name='checked_cell_output')",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_251": {
                "units": {
                    "value": "attention_layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "attention_layer",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "flatten_301": {
                "structure": {
                    "value": "initial_cell_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "control_dependencies_312": {
                "control_inputs": {
                    "value": "self._batch_size_checks(state_batch_size, error_message)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_392": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_403": {
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_405": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_410": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_304": {
                "input": {
                    "value": "final_state_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.flatten(initial_cell_state)[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "identity_388": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "checked_cell_state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_315": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "check_initial_cell_state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TensorArray_408": {
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_399": {
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/tf_utils/recurrent_layers.py": {
        "tensorflow": {
            "get_28": {
                "identifier": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cond_35": {
                "pred": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.nn.dropout(x, keep_prob, noise_shape=noise_shape, seed=seed)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "get_variable_111": {
                "variable": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gru_parameters",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "n_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cell.params_size().eval()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_149": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_164": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cell(x, initial_state_h, initial_state_c, parameters, True)",
                            "Call"
                        ],
                        [
                            "cell(x, initial_state, parameters, True)",
                            "Call"
                        ],
                        [
                            "cell.canonical_to_params(init_weights, init_biases)",
                            "Call"
                        ],
                        [
                            "self._apply_transposed(is_train, x)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(out, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "out * tf.expand_dims(tf.cast(tf.sequence_mask(mask, tf.shape(out)[1]), tf.float32), 2)",
                            "BinOp"
                        ],
                        [
                            "tf.concat([fw, bw], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_24": {
                "identifier": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cond_124": {
                "variable": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.floor(tf.random_uniform((n_params,)) + recurrent_mask) * parameters",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : parameters",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "concat_161": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw, bw]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_35": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "noise_shape": {
                    "value": "noise_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_84": {
                "shape": {
                    "value": "[n_params]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_132": {
                "variable": {
                    "value": "initial_state_h",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.n_layers, tf.shape(x)[1], self.n_units)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_133": {
                "variable": {
                    "value": "initial_state_c",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.n_layers, tf.shape(x)[1], self.n_units)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_137": {
                "variable": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "initial_state",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.n_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_139": {
                "variable": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(initial_state, 0), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.n_layers, tf.shape(x)[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "variable": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.n_layers, tf.shape(x)[1], self.n_units)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_166": {
                "input": {
                    "value": "tf.cast(tf.sequence_mask(mask, tf.shape(out)[1]), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "forward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_154": {
                "name_or_scope": {
                    "value": "backward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reverse_sequence_157": {
                "variable": {
                    "value": "bw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._apply_transposed(is_train, tf.reverse_sequence(x, mask, 0, 1))[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reverse_sequence(bw, mask, 0, 1)",
                            "Call"
                        ],
                        [
                            "self._apply_transposed(is_train, tf.reverse(x, 0))[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reverse(bw, 0)",
                            "Call"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "seq_axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "batch_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reverse_160": {
                "variable": {
                    "value": "bw",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._apply_transposed(is_train, tf.reverse_sequence(x, mask, 0, 1))[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reverse_sequence(bw, mask, 0, 1)",
                            "Call"
                        ],
                        [
                            "self._apply_transposed(is_train, tf.reverse(x, 0))[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reverse(bw, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_166": {
                "x": {
                    "value": "tf.sequence_mask(mask, tf.shape(out)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_97": {
                "value": {
                    "value": "self.lstm_bias / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.n_units,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "shape": {
                    "value": "self.n_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_121": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_initializer_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_139": {
                "input": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('initial_state', self.n_units, tf.float32, tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(initial_state, 0), 0), [self.n_layers, tf.shape(x)[1], 1])",
                            "Call"
                        ],
                        [
                            "tf.zeros((self.n_layers, tf.shape(x)[1], self.n_units), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sequence_mask_166": {
                "lengths": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "tf.shape(out)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_103": {
                "tensor": {
                    "value": "r_init((self.n_units, self.n_units), w.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_125": {
                "x": {
                    "value": "tf.random_uniform((n_params,)) + recurrent_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_103": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_105": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_132": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_133": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_140": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_142": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "reverse_sequence_156": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "seq_axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "batch_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reverse_159": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_166": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cell(x, initial_state_h, initial_state_c, parameters, True)",
                            "Call"
                        ],
                        [
                            "cell(x, initial_state, parameters, True)",
                            "Call"
                        ],
                        [
                            "cell.canonical_to_params(init_weights, init_biases)",
                            "Call"
                        ],
                        [
                            "self._apply_transposed(is_train, x)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(out, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "out * tf.expand_dims(tf.cast(tf.sequence_mask(mask, tf.shape(out)[1]), tf.float32), 2)",
                            "BinOp"
                        ],
                        [
                            "tf.concat([fw, bw], axis=2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/tf_utils/span_ops.py": {
        "tensorflow": {
            "top_k_13": {
                "variable": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits + end_logits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_17": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[indices, tf.fill((b,), 0)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "while_loop_37": {
                "variable": {
                    "value": "(_, values, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda ix, values, indices: ix < n_lengths",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "compute",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[1, values, indices]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_43": {
                "variable": {
                    "value": "spans",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[indices[:, 0], indices[:, 0] + indices[:, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_26": {
                "variable": {
                    "value": "n_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.shape(start_logits)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "top_k_29": {
                "variable": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits[:, :-i] + end_logits[:, i:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_32": {
                "variable": {
                    "value": "b_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[b_indices, tf.fill((b,), i)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_33": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "b_values > values",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "b_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([b_indices, tf.fill((b,), i)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([indices, tf.fill((b,), 0)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(b_values > values, b_indices, indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_34": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(values, b_values)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "b_values",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_9": {
                "input": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_14": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_17": {
                "dims": {
                    "value": "(b,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_23": {
                "input": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_30": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_26": {
                "input": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "fill_32": {
                "dims": {
                    "value": "(b,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/tf_utils/utils.py": {
        "tensorflow": {
            "cond_6": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.constant(1.0 - dropout_rate)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "range_26": {
                "variable": {
                    "value": "items_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "limit": {
                    "value": "tf.shape(logits)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_27": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(items_idx, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_46": {
                "variable": {
                    "value": "items_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "limit": {
                    "value": "tf.shape(logits)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_47": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(items_idx, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_48": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack((items_idx, labels), 1)",
                            "Call"
                        ],
                        [
                            "tf.stack((items_idx, labels), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_28": {
                "params": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack((items_idx, labels), 1)",
                            "Call"
                        ],
                        [
                            "tf.stack((items_idx, labels), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_29": {
                "x": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(logits, indices) + epsilon",
                            "BinOp"
                        ],
                        [
                            "tf.gather_nd(logits, indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_8": {
                "value": {
                    "value": "1.0 - dropout_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_9": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_26": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_46": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils.py": {
        "tensorflow": {
            "ConfigProto_259": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}