{
    "Malignancy_binary_classification/main.py": {
        "sklearn": {
            "TSNE_611": {
                "variable": {
                    "value": "embedding_sampled",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TSNE_638": {
                "variable": {
                    "value": "embedding_sampled",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "DEFINE_string_29": {
                "name": {
                    "value": "dataset",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "pathology_binary",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "set the dataset",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_75": {
                "name": {
                    "value": "WEIGHTS_PATH",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "local_roots['WEIGHTS_PATH']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "path for the AlexNet pre-trained weights.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_83": {
                "name": {
                    "value": "train_iterations",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "number of training iterations.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_84": {
                "name": {
                    "value": "meta_batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "24",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "number of images sampled per source domain (in MASF)",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_85": {
                "name": {
                    "value": "deep_all_batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "24",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "number of images sampled per source domain (in DeepAll)",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_86": {
                "name": {
                    "value": "inner_lr",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "step size alpha for inner gradient update on meta-train",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_87": {
                "name": {
                    "value": "outer_lr",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "learning rate for outer updates with (task-loss + meta-loss)",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_88": {
                "name": {
                    "value": "metric_lr",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "learning rate for the metric embedding nn with AdamOptimizer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_89": {
                "name": {
                    "value": "deep_all_lr",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "learning rate for the deep_all network with AdamOptimizer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_90": {
                "name": {
                    "value": "margin",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "distance margin in metric loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_91": {
                "name": {
                    "value": "clipNorm",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "if True, gradients clip by Norm, otherwise, gradients clip by value",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_92": {
                "name": {
                    "value": "gradients_clip_value",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "clip_by_value for SGD computing new theta at meta loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_93": {
                "name": {
                    "value": "feature_space_dimension",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4096",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "feature space dimensionality in neural network (one-to-last layer)",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_95": {
                "name": {
                    "value": "masf_mode",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "if True, it trains MASF; otherwise, it trains the DeepAll",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_98": {
                "name": {
                    "value": "log",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "if false, do not log summaries, for debugging code.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_99": {
                "name": {
                    "value": "logdir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "./log/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "directory for summaries and checkpoints.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_100": {
                "name": {
                    "value": "train",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "True to train, False to test.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_101": {
                "name": {
                    "value": "resume",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "resume training if there is a model available",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_102": {
                "name": {
                    "value": "which_checkpoint_to_load",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "2300",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "the checkpoint to be loaded for resuming training or the test phase",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_104": {
                "name": {
                    "value": "summary_interval",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "frequency for logging training summaries",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_105": {
                "name": {
                    "value": "save_interval",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "intervals to save model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_106": {
                "name": {
                    "value": "print_interval",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "intervals to print out training info",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_107": {
                "name": {
                    "value": "test_print_interval",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "intervals to test the model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_108": {
                "name": {
                    "value": "val_print_interval",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "intervals to test the model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "merge_all_143": {
                "variable": {
                    "value": "model.summ_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_144": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InteractiveSession_146": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_692": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "FLAGS.logdir + '/' + FLAGS.dataset + '/' + exp_string + '/' + str(FLAGS.which_checkpoint_to_load) + '/'",
                            "BinOp"
                        ],
                        [
                            "FLAGS.logdir + '/' + FLAGS.dataset + '/' + exp_string + '/' + str(itr) + '/'",
                            "BinOp"
                        ],
                        [
                            "FLAGS.logdir + '/' + FLAGS.dataset + '/' + exp_string + '/' + str(itr) + '/'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DEFINE_string_31": {
                "name": {
                    "value": "target_domain",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "art_painting",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "set the target domain",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_32": {
                "name": {
                    "value": "num_classes",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "number of classes used in classification.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_61": {
                "name": {
                    "value": "dataroot",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "local_roots['dataroot_pacs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "Root folder where PACS dataset (Raw images) is stored",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_63": {
                "name": {
                    "value": "filelist_root",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "local_roots['filelist_root_pacs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "path to .txt files (e.g., art_painting.txt, cartoon.txt) where images are listed line by line",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_182": {
                "variable": {
                    "value": "train_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.logdir + '/' + FLAGS.dataset + '/' + exp_string",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_333": {
                "variable": {
                    "value": "train_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.logdir + '/' + FLAGS.dataset + '/' + exp_string",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DEFINE_string_42": {
                "name": {
                    "value": "target_domain",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "set the target domain",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_43": {
                "name": {
                    "value": "num_classes",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "number of classes used in classification.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_66": {
                "name": {
                    "value": "dataroot",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "local_roots['dataroot_pathology']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "Root folder where PACS dataset (Raw images) is stored",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_68": {
                "name": {
                    "value": "filelist_root",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "local_roots['filelist_root_pathology']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "path to .txt files (e.g., art_painting.txt, cartoon.txt) where images are listed line by line",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_144": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_186": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_337": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_505": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_54": {
                "name": {
                    "value": "target_domain",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "set the target domain",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_55": {
                "name": {
                    "value": "num_classes",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "number of classes used in classification.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_71": {
                "name": {
                    "value": "dataroot",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "local_roots['dataroot_pathology']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "Root folder where PACS dataset (Raw images) is stored",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_73": {
                "name": {
                    "value": "filelist_root",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "local_roots['filelist_root_pathology_binary']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "path to .txt files (e.g., art_painting.txt, cartoon.txt) where images are listed line by line",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Tumor_type_classification/main.py": {
        "sklearn": {
            "TSNE_599": {
                "variable": {
                    "value": "embedding_sampled",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TSNE_626": {
                "variable": {
                    "value": "embedding_sampled",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "DEFINE_string_29": {
                "name": {
                    "value": "dataset",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "pathology",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "set the dataset",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_64": {
                "name": {
                    "value": "WEIGHTS_PATH",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "local_roots['WEIGHTS_PATH']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "path for the AlexNet pre-trained weights.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_71": {
                "name": {
                    "value": "train_iterations",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4001",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "number of training iterations.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_72": {
                "name": {
                    "value": "meta_batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "24",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "number of images sampled per source domain (in MASF)",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_73": {
                "name": {
                    "value": "deep_all_batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "24",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "number of images sampled per source domain (in DeepAll)",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_74": {
                "name": {
                    "value": "inner_lr",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "step size alpha for inner gradient update on meta-train",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_75": {
                "name": {
                    "value": "outer_lr",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "learning rate for outer updates with (task-loss + meta-loss)",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_76": {
                "name": {
                    "value": "metric_lr",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "learning rate for the metric embedding nn with AdamOptimizer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_77": {
                "name": {
                    "value": "deep_all_lr",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "learning rate for the deep_all network with AdamOptimizer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_78": {
                "name": {
                    "value": "margin",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "distance margin in metric loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_79": {
                "name": {
                    "value": "clipNorm",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "if True, gradients clip by Norm, otherwise, gradients clip by value",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_80": {
                "name": {
                    "value": "gradients_clip_value",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "clip_by_value for SGD computing new theta at meta loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_81": {
                "name": {
                    "value": "feature_space_dimension",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4096",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "feature space dimensionality in neural network (one-to-last layer)",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_83": {
                "name": {
                    "value": "masf_mode",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "if True, it trains MASF; otherwise, it trains the DeepAll",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_86": {
                "name": {
                    "value": "log",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "if false, do not log summaries, for debugging code.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_87": {
                "name": {
                    "value": "logdir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "./log/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "directory for summaries and checkpoints.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_88": {
                "name": {
                    "value": "train",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "True to train, False to test.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_89": {
                "name": {
                    "value": "resume",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "resume training if there is a model available",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_90": {
                "name": {
                    "value": "which_checkpoint_to_load",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "650",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "the checkpoint to be loaded for resuming training or the test phase",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_92": {
                "name": {
                    "value": "summary_interval",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "frequency for logging training summaries",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_93": {
                "name": {
                    "value": "save_interval",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "intervals to save model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_94": {
                "name": {
                    "value": "print_interval",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "intervals to print out training info",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_95": {
                "name": {
                    "value": "test_print_interval",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "intervals to test the model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_96": {
                "name": {
                    "value": "val_print_interval",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "intervals to test the model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "merge_all_131": {
                "variable": {
                    "value": "model.summ_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_132": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InteractiveSession_134": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_674": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "FLAGS.logdir + '/' + FLAGS.dataset + '/' + exp_string + '/' + str(FLAGS.which_checkpoint_to_load) + '/'",
                            "BinOp"
                        ],
                        [
                            "FLAGS.logdir + '/' + FLAGS.dataset + '/' + exp_string + '/' + str(itr) + '/'",
                            "BinOp"
                        ],
                        [
                            "FLAGS.logdir + '/' + FLAGS.dataset + '/' + exp_string + '/' + str(itr) + '/'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DEFINE_string_31": {
                "name": {
                    "value": "target_domain",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "art_painting",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "set the target domain",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_32": {
                "name": {
                    "value": "num_classes",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "number of classes used in classification.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_55": {
                "name": {
                    "value": "dataroot",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "local_roots['dataroot_pacs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "Root folder where PACS dataset (Raw images) is stored",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_57": {
                "name": {
                    "value": "filelist_root",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "local_roots['filelist_root_pacs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "path to .txt files (e.g., art_painting.txt, cartoon.txt) where images are listed line by line",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_170": {
                "variable": {
                    "value": "train_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.logdir + '/' + FLAGS.dataset + '/' + exp_string",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_321": {
                "variable": {
                    "value": "train_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.logdir + '/' + FLAGS.dataset + '/' + exp_string",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DEFINE_string_42": {
                "name": {
                    "value": "target_domain",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "40",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "set the target domain",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_43": {
                "name": {
                    "value": "num_classes",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "number of classes used in classification.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_60": {
                "name": {
                    "value": "dataroot",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "local_roots['dataroot_pathology']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "Root folder where PACS dataset (Raw images) is stored",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_62": {
                "name": {
                    "value": "filelist_root",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "local_roots['filelist_root_pathology']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "help": {
                    "value": "path to .txt files (e.g., art_painting.txt, cartoon.txt) where images are listed line by line",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_132": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_174": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_325": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_493": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Malignancy_binary_classification/data_generator.py": {
        "tensorflow": {
            "constant_11": {
                "variable": {
                    "value": "IMAGENET_MEAN",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[123.68, 116.779, 103.939]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_49": {
                "variable": {
                    "value": "self.img_paths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.img_paths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_50": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_99": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "read_file_102": {
                "variable": {
                    "value": "img_string",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "decode_png_103": {
                "variable": {
                    "value": "img_decoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "img_string",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ],
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "subtract_106": {
                "variable": {
                    "value": "img_centered",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img_resized",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img_decoded, [227, 227])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(img_decoded, [227, 227])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "IMAGENET_MEAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([123.68, 116.779, 103.939], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_112": {
                "variable": {
                    "value": "img_bgr",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.random_uniform([], 0, 1) < 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.augment(img_bgr)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : img_bgr",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "one_hot_119": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "read_file_122": {
                "variable": {
                    "value": "img_string",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "decode_png_123": {
                "variable": {
                    "value": "img_decoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "img_string",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ],
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "subtract_126": {
                "variable": {
                    "value": "img_centered",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img_resized",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img_decoded, [227, 227])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(img_decoded, [227, 227])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "IMAGENET_MEAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([123.68, 116.779, 103.939], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_flip_left_right_148": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cond(tf.random_uniform([], 0, 1) < 0.25, lambda : f(x), lambda : x)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_137": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.random_uniform([], 0, 1) < 0.25",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : f(x)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : x",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "Malignancy_binary_classification/deep_all.py": {
        "tensorflow": {
            "placeholder_28": {
                "variable": {
                    "value": "self.inputa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "self.labela",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "self.inputa1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "self.labela1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "self.inputb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.labelb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.bool_indicator_b_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(FLAGS.num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.bool_indicator_b_a1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(FLAGS.num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.KEEP_PROB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_95": {
                "variable": {
                    "value": "self.test_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_96": {
                "variable": {
                    "value": "self.test_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_220": {
                "variable": {
                    "value": "flattened",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool5",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max_pool(conv5, 3, 3, 2, 2, padding='VALID')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 6 * 6 * 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_66": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_74": {
                "variable": {
                    "value": "self.lossa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.lossa_raw",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_75": {
                "variable": {
                    "value": "self.lossa1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.lossa1_raw",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_76": {
                "variable": {
                    "value": "self.lossb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.lossb_raw",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_78": {
                "variable": {
                    "value": "self.task_train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.deep_all_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_86": {
                "name": {
                    "value": "prefix + 'source_1 loss'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lossa",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_87": {
                "name": {
                    "value": "prefix + 'source_2 loss'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lossa1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_88": {
                "name": {
                    "value": "prefix + 'source_3 loss'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lossb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_89": {
                "name": {
                    "value": "prefix + 'source_1 accuracy'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracya",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_90": {
                "name": {
                    "value": "prefix + 'source_2 accuracy'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracya1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_91": {
                "name": {
                    "value": "prefix + 'source_3 accuracy'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracyb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "accuracy_107": {
                "variable": {
                    "value": "accuracies",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.argmax(tf.nn.softmax(outputs), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.argmax(self.test_label, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_108": {
                "variable": {
                    "value": "self.pred_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_152": {
                "variable": {
                    "value": "weights[conv1_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[11, 11, 3, 96]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_153": {
                "variable": {
                    "value": "weights[conv1_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[96]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_156": {
                "variable": {
                    "value": "weights[conv2_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[5, 5, 48, 256]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_157": {
                "variable": {
                    "value": "weights[conv2_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_160": {
                "variable": {
                    "value": "weights[conv3_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 256, 384]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_161": {
                "variable": {
                    "value": "weights[conv3_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[384]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_164": {
                "variable": {
                    "value": "weights[conv4_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 192, 384]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_165": {
                "variable": {
                    "value": "weights[conv4_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[384]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_168": {
                "variable": {
                    "value": "weights[conv5_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 192, 256]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_169": {
                "variable": {
                    "value": "weights[conv5_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_176": {
                "variable": {
                    "value": "weights[fc6_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[9216, self.feature_space_dimension]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_177": {
                "variable": {
                    "value": "weights[fc6_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.feature_space_dimension]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_184": {
                "variable": {
                    "value": "weights[fc7_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.feature_space_dimension, self.feature_space_dimension]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_185": {
                "variable": {
                    "value": "weights[fc7_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.feature_space_dimension]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_192": {
                "variable": {
                    "value": "weights[fc8_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.feature_space_dimension, FLAGS.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "fc_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_193": {
                "variable": {
                    "value": "weights[fc8_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "accuracy_59": {
                "variable": {
                    "value": "task_accuracya",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.argmax(tf.nn.softmax(task_outputa), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.argmax(labela, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_60": {
                "variable": {
                    "value": "task_accuracya1",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.argmax(tf.nn.softmax(task_outputa1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.argmax(labela1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_61": {
                "variable": {
                    "value": "task_accuracyb",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.argmax(tf.nn.softmax(task_outputb), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.argmax(labelb, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_155": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "conv3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_163": {
                "name_or_scope": {
                    "value": "conv4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_167": {
                "name_or_scope": {
                    "value": "conv5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_175": {
                "name_or_scope": {
                    "value": "fc6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "fc7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "fc8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_107": {
                "input": {
                    "value": "self.test_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_59": {
                "input": {
                    "value": "labela",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_60": {
                "input": {
                    "value": "labela1",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_61": {
                "input": {
                    "value": "labelb",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_107": {
                "logits": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_132": {
                "name_or_scope": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_59": {
                "logits": {
                    "value": "task_outputa",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_60": {
                "logits": {
                    "value": "task_outputa1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_61": {
                "logits": {
                    "value": "task_outputb",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "op_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weights_dict",
                            "Name"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_138": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_142": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Malignancy_binary_classification/masf_func.py": {
        "tensorflow": {
            "placeholder_33": {
                "variable": {
                    "value": "self.inputa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.labela",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.inputa1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "self.labela1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.inputb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "self.labelb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.bool_indicator_b_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(FLAGS.num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.bool_indicator_b_a1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(FLAGS.num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.input_group",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self.label_group",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(meta_sample_num,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self.KEEP_PROB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_150": {
                "variable": {
                    "value": "self.test_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_151": {
                "variable": {
                    "value": "self.test_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_289": {
                "variable": {
                    "value": "flattened",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool5",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max_pool(conv5, 3, 3, 2, 2, padding='VALID')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 6 * 6 * 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_95": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_107": {
                "variable": {
                    "value": "self.lossa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.lossa_raw",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_108": {
                "variable": {
                    "value": "self.lossa1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.lossa1_raw",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_110": {
                "variable": {
                    "value": "self.task_train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.outer_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_120": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.outer_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_138": {
                "variable": {
                    "value": "self.metric_train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.metric_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_141": {
                "name": {
                    "value": "prefix + 'source_1 loss'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lossa",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_142": {
                "name": {
                    "value": "prefix + 'source_2 loss'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lossa1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_143": {
                "name": {
                    "value": "prefix + 'source_1 accuracy'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracya",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_144": {
                "name": {
                    "value": "prefix + 'source_2 accuracy'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracya1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_145": {
                "name": {
                    "value": "prefix + 'global loss'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.global_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_146": {
                "name": {
                    "value": "prefix + 'metric loss'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.metric_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "accuracy_163": {
                "variable": {
                    "value": "accuracies",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.argmax(tf.nn.softmax(outputs), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.argmax(self.test_label, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_164": {
                "variable": {
                    "value": "self.pred_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_205": {
                "variable": {
                    "value": "w1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4096, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_206": {
                "variable": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_208": {
                "variable": {
                    "value": "w2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1024, 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_209": {
                "variable": {
                    "value": "b2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_221": {
                "variable": {
                    "value": "weights[conv1_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[11, 11, 3, 96]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_222": {
                "variable": {
                    "value": "weights[conv1_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[96]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_225": {
                "variable": {
                    "value": "weights[conv2_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[5, 5, 48, 256]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_226": {
                "variable": {
                    "value": "weights[conv2_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_229": {
                "variable": {
                    "value": "weights[conv3_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 256, 384]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_230": {
                "variable": {
                    "value": "weights[conv3_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[384]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_233": {
                "variable": {
                    "value": "weights[conv4_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 192, 384]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_234": {
                "variable": {
                    "value": "weights[conv4_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[384]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_237": {
                "variable": {
                    "value": "weights[conv5_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 192, 256]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_238": {
                "variable": {
                    "value": "weights[conv5_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_245": {
                "variable": {
                    "value": "weights[fc6_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[9216, self.feature_space_dimension]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_246": {
                "variable": {
                    "value": "weights[fc6_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.feature_space_dimension]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_253": {
                "variable": {
                    "value": "weights[fc7_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.feature_space_dimension, self.feature_space_dimension]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_254": {
                "variable": {
                    "value": "weights[fc7_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.feature_space_dimension]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_261": {
                "variable": {
                    "value": "weights[fc8_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.feature_space_dimension, FLAGS.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "fc_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_262": {
                "variable": {
                    "value": "weights[fc8_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_70": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "(task_lossa + task_lossa1) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "xs": {
                    "value": "list(weights.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_89": {
                "variable": {
                    "value": "task_accuracya",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.argmax(tf.nn.softmax(task_outputa), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.argmax(labela, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_90": {
                "variable": {
                    "value": "task_accuracya1",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.argmax(tf.nn.softmax(task_outputa1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.argmax(labela1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_203": {
                "name_or_scope": {
                    "value": "metric",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_220": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_228": {
                "name_or_scope": {
                    "value": "conv3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_232": {
                "name_or_scope": {
                    "value": "conv4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_236": {
                "name_or_scope": {
                    "value": "conv5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_244": {
                "name_or_scope": {
                    "value": "fc6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_252": {
                "name_or_scope": {
                    "value": "fc7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_260": {
                "name_or_scope": {
                    "value": "fc8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_124": {
                "x": {
                    "value": "tf.reduce_sum(tf.pow(t, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_126": {
                "name": {
                    "value": "'gradients_norm/' + var.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "l2_norm(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_127": {
                "name": {
                    "value": "'feature_extractor_var_norm/' + var.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "l2_norm(var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_128": {
                "name": {
                    "value": "'gradients/' + var.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_129": {
                "name": {
                    "value": "'feature_extractor_var/' + var.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_134": {
                "name": {
                    "value": "'gradients_norm_clipped/' + var.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "l2_norm(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_135": {
                "name": {
                    "value": "'gradients_clipped/' + var.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_163": {
                "input": {
                    "value": "self.test_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_71": {
                "input": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "argmax_89": {
                "input": {
                    "value": "labela",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_90": {
                "input": {
                    "value": "labela1",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trainable_variables_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_124": {
                "input_tensor": {
                    "value": "tf.pow(t, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_norm_131": {
                "t": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.clip_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_163": {
                "logits": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_89": {
                "logits": {
                    "value": "task_outputa",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_90": {
                "logits": {
                    "value": "task_outputa1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pow_124": {
                "x": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "op_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weights_dict",
                            "Name"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_194": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_198": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_norm_73": {
                "t": {
                    "value": "gradients[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.clip_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Malignancy_binary_classification/medical/data_generator_brain.py": {
        "tensorflow": {
            "py_func_53": {
                "func": {
                    "value": "self._extract_patch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[filename]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_54": {
                "func": {
                    "value": "self._extract_patch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[filename]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "Malignancy_binary_classification/medical/lib.py": {
        "tensorflow": {
            "conv2d_95": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "weights['output_weights']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_97": {
                "variable": {
                    "value": "self.pred_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_98": {
                "variable": {
                    "value": "self.pred_compact",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pred_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_106": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "cweight",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bias_add_107": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inp, cweight, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, bweight)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bweight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "leaky_relu_108": {
                "variable": {
                    "value": "relu",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inp, cweight, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, bweight)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_115": {
                "variable": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_shape[0], x_shape[1] * 2, x_shape[2] * 2, x_shape[3] // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_116": {
                "variable": {
                    "value": "deconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "cweight",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([x_shape[0], x_shape[1] * 2, x_shape[2] * 2, x_shape[3] // 2])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_13": {
                "variable": {
                    "value": "weights[conv1_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[5, 5, 3, 16]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_14": {
                "variable": {
                    "value": "weights[conv1_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[16]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_17": {
                "variable": {
                    "value": "weights[conv2_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[5, 5, 16, 32]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_18": {
                "variable": {
                    "value": "weights[conv2_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "weights[conv3_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 32, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_24": {
                "variable": {
                    "value": "weights[conv3_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_27": {
                "variable": {
                    "value": "weights[conv4_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 64, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_28": {
                "variable": {
                    "value": "weights[conv4_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_33": {
                "variable": {
                    "value": "weights[conv5_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 64, 128]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_34": {
                "variable": {
                    "value": "weights[conv5_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_41": {
                "variable": {
                    "value": "weights[deconv1_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 64, 128]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_44": {
                "variable": {
                    "value": "weights[conv7_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 64, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_45": {
                "variable": {
                    "value": "weights[conv7_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_48": {
                "variable": {
                    "value": "weights[conv8_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 64, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_49": {
                "variable": {
                    "value": "weights[conv8_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_52": {
                "variable": {
                    "value": "weights[deconv2_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 32, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_59": {
                "variable": {
                    "value": "weights[conv10_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 32, 32]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_60": {
                "variable": {
                    "value": "weights[conv10_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_63": {
                "variable": {
                    "value": "weights[output_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 32, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_12": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_16": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "conv3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "conv4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "conv5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "deconv1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "conv7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "conv8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "deconv2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "conv10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Malignancy_binary_classification/utils.py": {
        "tensorflow": {
            "relu_42": {
                "variable": {
                    "value": "relu",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(convolve(inp, cweight), bweight)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, bweight)",
                            "Call"
                        ]
                    ]
                }
            },
            "xw_plus_b_64": {
                "variable": {
                    "value": "act",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "wweight",
                    "type": "Variable",
                    "possible_values": []
                },
                "biases": {
                    "value": "bweight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(pred, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_78": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(label, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_154": {
                "variable": {
                    "value": "l1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label1",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_155": {
                "variable": {
                    "value": "l2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label2",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_156": {
                "variable": {
                    "value": "pair",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(l1, l2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_161": {
                "variable": {
                    "value": "delta_sqrt",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "delta + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_162": {
                "variable": {
                    "value": "mismatch_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(margin - delta_sqrt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_175": {
                "variable": {
                    "value": "l1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label1",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_176": {
                "variable": {
                    "value": "l2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label2",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_177": {
                "variable": {
                    "value": "pair",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(l1, l2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_179": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(feature1 - feature2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_180": {
                "variable": {
                    "value": "delta_sqrt",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "delta + 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bias_add_33": {
                "variable": {
                    "value": "conv_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "convolve(inp, cweight)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "bweight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "split_35": {
                "variable": {
                    "value": "input_groups",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "split_36": {
                "variable": {
                    "value": "weight_groups",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "cweight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_39": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "output_groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[convolve(i, k) for (i, k) in zip(input_groups, weight_groups)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "bias_add_40": {
                "variable": {
                    "value": "conv_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(axis=3, values=output_groups)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bweight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_pool_51": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, filter_height, filter_width, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_y, stride_x, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "local_response_normalization_55": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth_radius": {
                    "value": "radius",
                    "type": "Variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_59": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_79": {
                "input_tensor": {
                    "value": "tf.square(pred - label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_82": {
                "logits": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(pred, [-1])",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(label, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_93": {
                "variable": {
                    "value": "mask1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(label1[:, cls], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, n_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_94": {
                "variable": {
                    "value": "logits_sum1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(data1, mask1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_95": {
                "variable": {
                    "value": "num1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "label1[:, cls]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_97": {
                "variable": {
                    "value": "prob1",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "activations1 / temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_98": {
                "variable": {
                    "value": "prob1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "prob1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.softmax(activations1 / temperature)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(prob1, clip_value_min=1e-08, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activations1 / temperature)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(prob1, clip_value_min=1e-08, clip_value_max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_100": {
                "variable": {
                    "value": "mask2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(label2[:, cls], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, n_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_101": {
                "variable": {
                    "value": "logits_sum2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(data2, mask2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_102": {
                "variable": {
                    "value": "num2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "label2[:, cls]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_104": {
                "variable": {
                    "value": "prob2",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "activations2 / temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_105": {
                "variable": {
                    "value": "prob2",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "prob2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.softmax(activations2 / temperature)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(prob2, clip_value_min=1e-08, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activations2 / temperature)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(prob2, clip_value_min=1e-08, clip_value_max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_126": {
                "variable": {
                    "value": "mask1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(label1[:, cls], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, n_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_127": {
                "variable": {
                    "value": "logits_sum1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(data1, mask1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_128": {
                "variable": {
                    "value": "num1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "label1[:, cls]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_130": {
                "variable": {
                    "value": "prob1",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "activations1 / temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_131": {
                "variable": {
                    "value": "prob1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "prob1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.softmax(activations1 / temperature)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(prob1, clip_value_min=1e-08, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activations1 / temperature)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(prob1, clip_value_min=1e-08, clip_value_max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_133": {
                "variable": {
                    "value": "mask2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(label2[:, cls], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, n_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_134": {
                "variable": {
                    "value": "logits_sum2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(data2, mask2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_135": {
                "variable": {
                    "value": "num2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "label2[:, cls]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_137": {
                "variable": {
                    "value": "prob2",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "activations2 / temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_138": {
                "variable": {
                    "value": "prob2",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "prob2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.softmax(activations2 / temperature)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(prob2, clip_value_min=1e-08, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activations2 / temperature)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(prob2, clip_value_min=1e-08, clip_value_max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_165": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "0.5 * (pair * match_loss + (1 - pair) * mismatch_loss)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_30": {
                "input": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, stride_y, stride_x, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_67": {
                "features": {
                    "value": "act",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(x, wweight, bweight)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_79": {
                "x": {
                    "value": "pred - label",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_156": {
                "x": {
                    "value": "l1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(label1, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(label1, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "l2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(label2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(label2, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_158": {
                "input_tensor": {
                    "value": "tf.square(feature1 - feature2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_162": {
                "features": {
                    "value": "margin - delta_sqrt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_169": {
                "input_tensor": {
                    "value": "pair",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(l1, l2))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.equal(l1, l2))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_170": {
                "input_tensor": {
                    "value": "1 - pair",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_177": {
                "x": {
                    "value": "l1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(label1, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(label1, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "l2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(label2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(label2, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_179": {
                "x": {
                    "value": "feature1 - feature2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_182": {
                "input_tensor": {
                    "value": "pair",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(l1, l2))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.equal(l1, l2))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_183": {
                "input_tensor": {
                    "value": "1 - pair",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "leaky_relu_69": {
                "features": {
                    "value": "act",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(x, wweight, bweight)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_93": {
                "input": {
                    "value": "label1[:, cls]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_94": {
                "x": {
                    "value": "data1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "mask1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(label1[:, cls], -1), [1, n_class])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(label1[:, cls], -1), [1, n_class])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_100": {
                "input": {
                    "value": "label2[:, cls]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_101": {
                "x": {
                    "value": "data2",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "mask2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(label2[:, cls], -1), [1, n_class])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(label2[:, cls], -1), [1, n_class])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_126": {
                "input": {
                    "value": "label1[:, cls]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_127": {
                "x": {
                    "value": "data1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "mask1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(label1[:, cls], -1), [1, n_class])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(label1[:, cls], -1), [1, n_class])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_133": {
                "input": {
                    "value": "label2[:, cls]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_134": {
                "x": {
                    "value": "data2",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "mask2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(label2[:, cls], -1), [1, n_class])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(label2[:, cls], -1), [1, n_class])",
                            "Call"
                        ]
                    ]
                }
            },
            "square_158": {
                "x": {
                    "value": "feature1 - feature2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_167": {
                "input_tensor": {
                    "value": "match_loss * pair",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_107": {
                "input_tensor": {
                    "value": "prob2 * tf.log(prob2 / prob1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_142": {
                "input_tensor": {
                    "value": "prob2 * tf.log(prob2 / mean_prob)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_107": {
                "x": {
                    "value": "prob2 / prob1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_142": {
                "x": {
                    "value": "prob2 / mean_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Tumor_type_classification/data_generator.py": {
        "tensorflow": {
            "constant_11": {
                "variable": {
                    "value": "IMAGENET_MEAN",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[123.68, 116.779, 103.939]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_49": {
                "variable": {
                    "value": "self.img_paths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.img_paths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_50": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_99": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "read_file_102": {
                "variable": {
                    "value": "img_string",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "decode_png_103": {
                "variable": {
                    "value": "img_decoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "img_string",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ],
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "subtract_106": {
                "variable": {
                    "value": "img_centered",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img_resized",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img_decoded, [227, 227])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(img_decoded, [227, 227])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "IMAGENET_MEAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([123.68, 116.779, 103.939], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_112": {
                "variable": {
                    "value": "img_bgr",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.random_uniform([], 0, 1) < 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.augment(img_bgr)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : img_bgr",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "one_hot_119": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "read_file_122": {
                "variable": {
                    "value": "img_string",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "decode_png_123": {
                "variable": {
                    "value": "img_decoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "img_string",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ],
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "subtract_126": {
                "variable": {
                    "value": "img_centered",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img_resized",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img_decoded, [227, 227])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(img_decoded, [227, 227])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "IMAGENET_MEAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([123.68, 116.779, 103.939], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_flip_left_right_148": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cond(tf.random_uniform([], 0, 1) < 0.25, lambda : f(x), lambda : x)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_137": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.random_uniform([], 0, 1) < 0.25",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : f(x)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : x",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "Tumor_type_classification/deep_all.py": {
        "tensorflow": {
            "placeholder_28": {
                "variable": {
                    "value": "self.inputa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "self.labela",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "self.inputa1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "self.labela1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "self.inputb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.labelb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.bool_indicator_b_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(FLAGS.num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.bool_indicator_b_a1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(FLAGS.num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.KEEP_PROB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_95": {
                "variable": {
                    "value": "self.test_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_96": {
                "variable": {
                    "value": "self.test_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_220": {
                "variable": {
                    "value": "flattened",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool5",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max_pool(conv5, 3, 3, 2, 2, padding='VALID')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 6 * 6 * 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_66": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_74": {
                "variable": {
                    "value": "self.lossa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.lossa_raw",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_75": {
                "variable": {
                    "value": "self.lossa1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.lossa1_raw",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_76": {
                "variable": {
                    "value": "self.lossb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.lossb_raw",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_78": {
                "variable": {
                    "value": "self.task_train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.deep_all_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_86": {
                "name": {
                    "value": "prefix + 'source_1 loss'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lossa",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_87": {
                "name": {
                    "value": "prefix + 'source_2 loss'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lossa1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_88": {
                "name": {
                    "value": "prefix + 'source_3 loss'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lossb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_89": {
                "name": {
                    "value": "prefix + 'source_1 accuracy'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracya",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_90": {
                "name": {
                    "value": "prefix + 'source_2 accuracy'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracya1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_91": {
                "name": {
                    "value": "prefix + 'source_3 accuracy'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracyb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "accuracy_107": {
                "variable": {
                    "value": "accuracies",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.argmax(tf.nn.softmax(outputs), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.argmax(self.test_label, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_108": {
                "variable": {
                    "value": "self.pred_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_152": {
                "variable": {
                    "value": "weights[conv1_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[11, 11, 3, 96]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_153": {
                "variable": {
                    "value": "weights[conv1_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[96]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_156": {
                "variable": {
                    "value": "weights[conv2_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[5, 5, 48, 256]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_157": {
                "variable": {
                    "value": "weights[conv2_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_160": {
                "variable": {
                    "value": "weights[conv3_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 256, 384]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_161": {
                "variable": {
                    "value": "weights[conv3_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[384]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_164": {
                "variable": {
                    "value": "weights[conv4_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 192, 384]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_165": {
                "variable": {
                    "value": "weights[conv4_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[384]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_168": {
                "variable": {
                    "value": "weights[conv5_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 192, 256]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_169": {
                "variable": {
                    "value": "weights[conv5_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_176": {
                "variable": {
                    "value": "weights[fc6_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[9216, self.feature_space_dimension]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_177": {
                "variable": {
                    "value": "weights[fc6_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.feature_space_dimension]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_184": {
                "variable": {
                    "value": "weights[fc7_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.feature_space_dimension, self.feature_space_dimension]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_185": {
                "variable": {
                    "value": "weights[fc7_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.feature_space_dimension]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_192": {
                "variable": {
                    "value": "weights[fc8_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.feature_space_dimension, FLAGS.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "fc_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_193": {
                "variable": {
                    "value": "weights[fc8_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "accuracy_59": {
                "variable": {
                    "value": "task_accuracya",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.argmax(tf.nn.softmax(task_outputa), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.argmax(labela, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_60": {
                "variable": {
                    "value": "task_accuracya1",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.argmax(tf.nn.softmax(task_outputa1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.argmax(labela1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_61": {
                "variable": {
                    "value": "task_accuracyb",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.argmax(tf.nn.softmax(task_outputb), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.argmax(labelb, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_155": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "conv3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_163": {
                "name_or_scope": {
                    "value": "conv4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_167": {
                "name_or_scope": {
                    "value": "conv5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_175": {
                "name_or_scope": {
                    "value": "fc6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "fc7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "fc8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_107": {
                "input": {
                    "value": "self.test_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_59": {
                "input": {
                    "value": "labela",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_60": {
                "input": {
                    "value": "labela1",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_61": {
                "input": {
                    "value": "labelb",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_107": {
                "logits": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_132": {
                "name_or_scope": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_59": {
                "logits": {
                    "value": "task_outputa",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_60": {
                "logits": {
                    "value": "task_outputa1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_61": {
                "logits": {
                    "value": "task_outputb",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "op_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weights_dict",
                            "Name"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_138": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_142": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Tumor_type_classification/masf_func.py": {
        "tensorflow": {
            "placeholder_33": {
                "variable": {
                    "value": "self.inputa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.labela",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.inputa1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "self.labela1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.inputb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "self.labelb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.bool_indicator_b_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(FLAGS.num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.bool_indicator_b_a1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(FLAGS.num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.input_group",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self.label_group",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(meta_sample_num,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self.KEEP_PROB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_150": {
                "variable": {
                    "value": "self.test_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_151": {
                "variable": {
                    "value": "self.test_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_289": {
                "variable": {
                    "value": "flattened",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool5",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max_pool(conv5, 3, 3, 2, 2, padding='VALID')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 6 * 6 * 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_95": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_107": {
                "variable": {
                    "value": "self.lossa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.lossa_raw",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_108": {
                "variable": {
                    "value": "self.lossa1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.lossa1_raw",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_110": {
                "variable": {
                    "value": "self.task_train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.outer_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_120": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.outer_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_138": {
                "variable": {
                    "value": "self.metric_train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.metric_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_141": {
                "name": {
                    "value": "prefix + 'source_1 loss'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lossa",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_142": {
                "name": {
                    "value": "prefix + 'source_2 loss'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lossa1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_143": {
                "name": {
                    "value": "prefix + 'source_1 accuracy'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracya",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_144": {
                "name": {
                    "value": "prefix + 'source_2 accuracy'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracya1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_145": {
                "name": {
                    "value": "prefix + 'global loss'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.global_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_146": {
                "name": {
                    "value": "prefix + 'metric loss'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.metric_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "accuracy_163": {
                "variable": {
                    "value": "accuracies",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.argmax(tf.nn.softmax(outputs), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.argmax(self.test_label, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_164": {
                "variable": {
                    "value": "self.pred_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_205": {
                "variable": {
                    "value": "w1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4096, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_206": {
                "variable": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_208": {
                "variable": {
                    "value": "w2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1024, 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_209": {
                "variable": {
                    "value": "b2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_221": {
                "variable": {
                    "value": "weights[conv1_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[11, 11, 3, 96]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_222": {
                "variable": {
                    "value": "weights[conv1_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[96]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_225": {
                "variable": {
                    "value": "weights[conv2_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[5, 5, 48, 256]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_226": {
                "variable": {
                    "value": "weights[conv2_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_229": {
                "variable": {
                    "value": "weights[conv3_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 256, 384]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_230": {
                "variable": {
                    "value": "weights[conv3_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[384]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_233": {
                "variable": {
                    "value": "weights[conv4_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 192, 384]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_234": {
                "variable": {
                    "value": "weights[conv4_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[384]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_237": {
                "variable": {
                    "value": "weights[conv5_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 192, 256]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_238": {
                "variable": {
                    "value": "weights[conv5_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_245": {
                "variable": {
                    "value": "weights[fc6_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[9216, self.feature_space_dimension]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_246": {
                "variable": {
                    "value": "weights[fc6_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.feature_space_dimension]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_253": {
                "variable": {
                    "value": "weights[fc7_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.feature_space_dimension, self.feature_space_dimension]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_254": {
                "variable": {
                    "value": "weights[fc7_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.feature_space_dimension]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_261": {
                "variable": {
                    "value": "weights[fc8_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.feature_space_dimension, FLAGS.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "fc_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_262": {
                "variable": {
                    "value": "weights[fc8_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_70": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "(task_lossa + task_lossa1) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "xs": {
                    "value": "list(weights.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_89": {
                "variable": {
                    "value": "task_accuracya",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.argmax(tf.nn.softmax(task_outputa), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.argmax(labela, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_90": {
                "variable": {
                    "value": "task_accuracya1",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.argmax(tf.nn.softmax(task_outputa1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.argmax(labela1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_203": {
                "name_or_scope": {
                    "value": "metric",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_220": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_228": {
                "name_or_scope": {
                    "value": "conv3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_232": {
                "name_or_scope": {
                    "value": "conv4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_236": {
                "name_or_scope": {
                    "value": "conv5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_244": {
                "name_or_scope": {
                    "value": "fc6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_252": {
                "name_or_scope": {
                    "value": "fc7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_260": {
                "name_or_scope": {
                    "value": "fc8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_124": {
                "x": {
                    "value": "tf.reduce_sum(tf.pow(t, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_126": {
                "name": {
                    "value": "'gradients_norm/' + var.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "l2_norm(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_127": {
                "name": {
                    "value": "'feature_extractor_var_norm/' + var.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "l2_norm(var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_128": {
                "name": {
                    "value": "'gradients/' + var.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_129": {
                "name": {
                    "value": "'feature_extractor_var/' + var.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_134": {
                "name": {
                    "value": "'gradients_norm_clipped/' + var.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "l2_norm(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_135": {
                "name": {
                    "value": "'gradients_clipped/' + var.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_163": {
                "input": {
                    "value": "self.test_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_71": {
                "input": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "argmax_89": {
                "input": {
                    "value": "labela",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_90": {
                "input": {
                    "value": "labela1",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trainable_variables_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_124": {
                "input_tensor": {
                    "value": "tf.pow(t, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_norm_131": {
                "t": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.clip_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_163": {
                "logits": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_89": {
                "logits": {
                    "value": "task_outputa",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_90": {
                "logits": {
                    "value": "task_outputa1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pow_124": {
                "x": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "op_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weights_dict",
                            "Name"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_194": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_198": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_norm_73": {
                "t": {
                    "value": "gradients[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.clip_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Tumor_type_classification/medical/data_generator_brain.py": {
        "tensorflow": {
            "py_func_53": {
                "func": {
                    "value": "self._extract_patch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[filename]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_54": {
                "func": {
                    "value": "self._extract_patch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[filename]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "Tumor_type_classification/medical/lib.py": {
        "tensorflow": {
            "conv2d_95": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "weights['output_weights']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_97": {
                "variable": {
                    "value": "self.pred_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_98": {
                "variable": {
                    "value": "self.pred_compact",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pred_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_106": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "cweight",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bias_add_107": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inp, cweight, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, bweight)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bweight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "leaky_relu_108": {
                "variable": {
                    "value": "relu",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inp, cweight, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, bweight)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_115": {
                "variable": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_shape[0], x_shape[1] * 2, x_shape[2] * 2, x_shape[3] // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_116": {
                "variable": {
                    "value": "deconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "cweight",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([x_shape[0], x_shape[1] * 2, x_shape[2] * 2, x_shape[3] // 2])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_13": {
                "variable": {
                    "value": "weights[conv1_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[5, 5, 3, 16]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_14": {
                "variable": {
                    "value": "weights[conv1_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[16]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_17": {
                "variable": {
                    "value": "weights[conv2_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[5, 5, 16, 32]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_18": {
                "variable": {
                    "value": "weights[conv2_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "weights[conv3_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 32, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_24": {
                "variable": {
                    "value": "weights[conv3_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_27": {
                "variable": {
                    "value": "weights[conv4_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 64, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_28": {
                "variable": {
                    "value": "weights[conv4_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_33": {
                "variable": {
                    "value": "weights[conv5_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 64, 128]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_34": {
                "variable": {
                    "value": "weights[conv5_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_41": {
                "variable": {
                    "value": "weights[deconv1_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 64, 128]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_44": {
                "variable": {
                    "value": "weights[conv7_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 64, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_45": {
                "variable": {
                    "value": "weights[conv7_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_48": {
                "variable": {
                    "value": "weights[conv8_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 64, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_49": {
                "variable": {
                    "value": "weights[conv8_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_52": {
                "variable": {
                    "value": "weights[deconv2_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 32, 64]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_59": {
                "variable": {
                    "value": "weights[conv10_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 32, 32]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_60": {
                "variable": {
                    "value": "weights[conv10_biases]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_63": {
                "variable": {
                    "value": "weights[output_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 32, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "conv_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer_conv2d(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_12": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_16": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "conv3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "conv4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "conv5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "deconv1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "conv7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "conv8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "deconv2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "conv10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Tumor_type_classification/utils.py": {
        "tensorflow": {
            "relu_42": {
                "variable": {
                    "value": "relu",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(convolve(inp, cweight), bweight)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, bweight)",
                            "Call"
                        ]
                    ]
                }
            },
            "xw_plus_b_64": {
                "variable": {
                    "value": "act",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "wweight",
                    "type": "Variable",
                    "possible_values": []
                },
                "biases": {
                    "value": "bweight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(pred, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_78": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(label, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_154": {
                "variable": {
                    "value": "l1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label1",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_155": {
                "variable": {
                    "value": "l2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label2",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_156": {
                "variable": {
                    "value": "pair",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(l1, l2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_161": {
                "variable": {
                    "value": "delta_sqrt",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "delta + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_162": {
                "variable": {
                    "value": "mismatch_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(margin - delta_sqrt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_175": {
                "variable": {
                    "value": "l1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label1",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_176": {
                "variable": {
                    "value": "l2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label2",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_177": {
                "variable": {
                    "value": "pair",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(l1, l2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_179": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(feature1 - feature2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_180": {
                "variable": {
                    "value": "delta_sqrt",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "delta + 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bias_add_33": {
                "variable": {
                    "value": "conv_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "convolve(inp, cweight)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "bweight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "split_35": {
                "variable": {
                    "value": "input_groups",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "split_36": {
                "variable": {
                    "value": "weight_groups",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "cweight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_39": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "output_groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[convolve(i, k) for (i, k) in zip(input_groups, weight_groups)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "bias_add_40": {
                "variable": {
                    "value": "conv_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(axis=3, values=output_groups)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bweight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_pool_51": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, filter_height, filter_width, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_y, stride_x, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "local_response_normalization_55": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth_radius": {
                    "value": "radius",
                    "type": "Variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_59": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_79": {
                "input_tensor": {
                    "value": "tf.square(pred - label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_82": {
                "logits": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(pred, [-1])",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(label, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_93": {
                "variable": {
                    "value": "mask1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(label1[:, cls], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, n_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_94": {
                "variable": {
                    "value": "logits_sum1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(data1, mask1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_95": {
                "variable": {
                    "value": "num1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "label1[:, cls]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_97": {
                "variable": {
                    "value": "prob1",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "activations1 / temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_98": {
                "variable": {
                    "value": "prob1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "prob1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.softmax(activations1 / temperature)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(prob1, clip_value_min=1e-08, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activations1 / temperature)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(prob1, clip_value_min=1e-08, clip_value_max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_100": {
                "variable": {
                    "value": "mask2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(label2[:, cls], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, n_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_101": {
                "variable": {
                    "value": "logits_sum2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(data2, mask2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_102": {
                "variable": {
                    "value": "num2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "label2[:, cls]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_104": {
                "variable": {
                    "value": "prob2",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "activations2 / temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_105": {
                "variable": {
                    "value": "prob2",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "prob2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.softmax(activations2 / temperature)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(prob2, clip_value_min=1e-08, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activations2 / temperature)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(prob2, clip_value_min=1e-08, clip_value_max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_126": {
                "variable": {
                    "value": "mask1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(label1[:, cls], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, n_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_127": {
                "variable": {
                    "value": "logits_sum1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(data1, mask1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_128": {
                "variable": {
                    "value": "num1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "label1[:, cls]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_130": {
                "variable": {
                    "value": "prob1",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "activations1 / temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_131": {
                "variable": {
                    "value": "prob1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "prob1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.softmax(activations1 / temperature)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(prob1, clip_value_min=1e-08, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activations1 / temperature)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(prob1, clip_value_min=1e-08, clip_value_max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_133": {
                "variable": {
                    "value": "mask2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(label2[:, cls], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, n_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_134": {
                "variable": {
                    "value": "logits_sum2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(data2, mask2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_135": {
                "variable": {
                    "value": "num2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "label2[:, cls]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_137": {
                "variable": {
                    "value": "prob2",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "activations2 / temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_138": {
                "variable": {
                    "value": "prob2",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "prob2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.softmax(activations2 / temperature)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(prob2, clip_value_min=1e-08, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(activations2 / temperature)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(prob2, clip_value_min=1e-08, clip_value_max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_165": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "0.5 * (pair * match_loss + (1 - pair) * mismatch_loss)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_30": {
                "input": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, stride_y, stride_x, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_67": {
                "features": {
                    "value": "act",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(x, wweight, bweight)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_79": {
                "x": {
                    "value": "pred - label",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_156": {
                "x": {
                    "value": "l1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(label1, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(label1, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "l2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(label2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(label2, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_158": {
                "input_tensor": {
                    "value": "tf.square(feature1 - feature2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_162": {
                "features": {
                    "value": "margin - delta_sqrt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_169": {
                "input_tensor": {
                    "value": "pair",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(l1, l2))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.equal(l1, l2))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_170": {
                "input_tensor": {
                    "value": "1 - pair",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_177": {
                "x": {
                    "value": "l1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(label1, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(label1, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "l2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(label2, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(label2, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_179": {
                "x": {
                    "value": "feature1 - feature2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_182": {
                "input_tensor": {
                    "value": "pair",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(l1, l2))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.equal(l1, l2))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_183": {
                "input_tensor": {
                    "value": "1 - pair",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "leaky_relu_69": {
                "features": {
                    "value": "act",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(x, wweight, bweight)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_93": {
                "input": {
                    "value": "label1[:, cls]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_94": {
                "x": {
                    "value": "data1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "mask1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(label1[:, cls], -1), [1, n_class])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(label1[:, cls], -1), [1, n_class])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_100": {
                "input": {
                    "value": "label2[:, cls]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_101": {
                "x": {
                    "value": "data2",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "mask2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(label2[:, cls], -1), [1, n_class])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(label2[:, cls], -1), [1, n_class])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_126": {
                "input": {
                    "value": "label1[:, cls]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_127": {
                "x": {
                    "value": "data1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "mask1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(label1[:, cls], -1), [1, n_class])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(label1[:, cls], -1), [1, n_class])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_133": {
                "input": {
                    "value": "label2[:, cls]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_134": {
                "x": {
                    "value": "data2",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "mask2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(label2[:, cls], -1), [1, n_class])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(label2[:, cls], -1), [1, n_class])",
                            "Call"
                        ]
                    ]
                }
            },
            "square_158": {
                "x": {
                    "value": "feature1 - feature2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_167": {
                "input_tensor": {
                    "value": "match_loss * pair",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_107": {
                "input_tensor": {
                    "value": "prob2 * tf.log(prob2 / prob1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_142": {
                "input_tensor": {
                    "value": "prob2 * tf.log(prob2 / mean_prob)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_107": {
                "x": {
                    "value": "prob2 / prob1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_142": {
                "x": {
                    "value": "prob2 / mean_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}