{
    "dataloader.py": {
        "torch": {}
    },
    "discriminator.py": {
        "torch": {
            "device_6": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_12": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=7, out_channels=32, kernel_size=3, padding=1, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_96": {
                "variable": {
                    "value": "self.lstm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_98": {
                "variable": {
                    "value": "self.leaky_relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_101": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_107": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output[widths[index] // 16 - 1] for (index, output) in enumerate(net_out)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sigmoid_111": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(net)",
                            "Call"
                        ],
                        [
                            "net.view(net.size(0), -1, net.size(1))",
                            "Call"
                        ],
                        [
                            "torch.stack([output[widths[index] // 16 - 1] for (index, output) in enumerate(net_out)])",
                            "Call"
                        ],
                        [
                            "self.fc1(net)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu1(net)",
                            "Call"
                        ],
                        [
                            "self.fc2(net)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_24": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_39": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_65": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_92": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "generator.py": {
        "torch": {
            "device_6": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "LSTM_17": {
                "variable": {
                    "value": "self.lstm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_18": {
                "variable": {
                    "value": "self.lstm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "512 + self.lstm1.input_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_19": {
                "variable": {
                    "value": "self.lstm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "256 + self.lstm1.input_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.lstm1.hidden_size + self.lstm2.hidden_size + self.lstm3.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_27": {
                "variable": {
                    "value": "self.rnn_cell1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "3 + self.c_dimension",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_28": {
                "variable": {
                    "value": "self.rnn_cell2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "3 + self.c_dimension + 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.h2k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.K * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_30": {
                "variable": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_30": {
                "variable": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.fc_output_syn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_37": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unbind_94": {
                "variable": {
                    "value": "(y1, y2, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "y.view(-1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_97": {
                "variable": {
                    "value": "(pi_hat, mu1, mu2, sigma1_hat, sigma2_hat, rho_hat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.num_gaussians",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_101": {
                "variable": {
                    "value": "sigma1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigma1_hat - self.bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_102": {
                "variable": {
                    "value": "sigma2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigma2_hat - self.bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_103": {
                "variable": {
                    "value": "rho",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rho_hat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_109": {
                "input": {
                    "value": "gaussian",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pi * self._bivariate_gaussian(y1.unsqueeze(1).repeat(1, self.num_gaussians), y2.unsqueeze(1).repeat(1, self.num_gaussians), mu1, mu2, sigma1, sigma2, rho)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_110": {
                "variable": {
                    "value": "loss_bernoulli",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.log((e + eps) * s + (1 - e + eps) * (1 - s))",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_121": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, 1, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "strokes",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, length, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_170": {
                "variable": {
                    "value": "(pi_hat, mu1, mu2, sigma1_hat, sigma2_hat, rho_hat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.num_gaussians",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_171": {
                "variable": {
                    "value": "pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi_hat * (1 + self.bias)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_173": {
                "variable": {
                    "value": "sigma1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigma1_hat - self.bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_174": {
                "variable": {
                    "value": "sigma2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigma2_hat - self.bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_175": {
                "variable": {
                    "value": "rho",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rho_hat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_177": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, 1, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_189": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_49": {
                "input": {
                    "value": "-z / (2 * (1 - torch.pow(rho, 2)))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.c_dimension",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "kappa_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.batch_size, self.K, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "output_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_131": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.c_dimension",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_132": {
                "variable": {
                    "value": "kappa_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_179": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sigma1.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_183": {
                "variable": {
                    "value": "means",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sigma1.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultivariateNormal_186": {
                "variable": {
                    "value": "mn",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "means",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(sigma1.shape[0], 2).to(device)",
                            "Call"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(sigma1.shape[0], 2, 2).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_47": {
                "input": {
                    "value": "(x2 - mu2) / sigma2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_50": {
                "input": {
                    "value": "1 - torch.pow(rho, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_60": {
                "tensors": {
                    "value": "[x, outputs1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_61": {
                "tensors": {
                    "value": "[x, outputs2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_63": {
                "tensors": {
                    "value": "[outputs1, outputs2, outputs3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_63": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.fc_output.in_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_74": {
                "variable": {
                    "value": "(alpha_hat, beta_hat, kappa_hat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "k_gaussian",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.h2k(cell1_state[0])",
                            "Call"
                        ],
                        [
                            "self.h2k(cell1_state[0])",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_76": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_hat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_76": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_77": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta_hat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_77": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_82": {
                "variable": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(torch.pow(-self.u + self.kappa, 2) * -beta) * alpha",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_84": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(self.phi, torch.Tensor(c_vec).to(device))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_96": {
                "input": {
                    "value": "outputs[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_109": {
                "input": {
                    "value": "torch.sum(gaussian, 1) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_110": {
                "input": {
                    "value": "(e + eps) * s + (1 - e + eps) * (1 - s)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_147": {
                "variable": {
                    "value": "(alpha_hat, beta_hat, kappa_hat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "k_gaussian",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.h2k(cell1_state[0])",
                            "Call"
                        ],
                        [
                            "self.h2k(cell1_state[0])",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_149": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_hat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_149": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_150": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta_hat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_150": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_155": {
                "variable": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(torch.pow(-self.u + self.kappa, 2) * -beta) * alpha",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_157": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(self.phi, torch.Tensor(s).to(device))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_139": {
                "tensors": {
                    "value": "[x, outputs1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_140": {
                "tensors": {
                    "value": "[x, outputs2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_142": {
                "tensors": {
                    "value": "[outputs1, outputs2, outputs3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_142": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.fc_output.in_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_169": {
                "input": {
                    "value": "outputs[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_50": {
                "input": {
                    "value": "rho",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tanh(rho_hat)",
                            "Call"
                        ],
                        [
                            "torch.tanh(rho_hat)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_71": {
                "tensors": {
                    "value": "[x[:, t, :], w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_79": {
                "input": {
                    "value": "kappa_hat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_79": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_84": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.Tensor(c_vec).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_86": {
                "tensors": {
                    "value": "[x[:, t, :], cell1_state[0], w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_144": {
                "tensors": {
                    "value": "[x[:, 0, :], w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_152": {
                "input": {
                    "value": "kappa_hat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_152": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_157": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.Tensor(s).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_159": {
                "tensors": {
                    "value": "[x[:, 0, :], cell1_state[0], w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_49": {
                "input": {
                    "value": "rho",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tanh(rho_hat)",
                            "Call"
                        ],
                        [
                            "torch.tanh(rho_hat)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_82": {
                "input": {
                    "value": "torch.pow(-self.u + self.kappa, 2) * -beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_84": {},
            "exp_155": {
                "input": {
                    "value": "torch.pow(-self.u + self.kappa, 2) * -beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_157": {},
            "pow_82": {
                "input": {
                    "value": "-self.u + self.kappa",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_155": {
                "input": {
                    "value": "-self.u + self.kappa",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "interpolation.py": {
        "torch": {
            "norm_62": {
                "variable": {
                    "value": "diagonal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_left - bottom_right",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_78": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points_l[i - 1][:-1] - points_l[i][:-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "point",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_59": {
                "input": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_60": {
                "input": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "psf.py": {
        "torch": {
            "device_153": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_168": {
                "variable": {
                    "value": "psf",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(int(shape[0]), int(shape[1]), int(channel))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "variable": {
                    "value": "point_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(stroke), int(channel))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_199": {
                "variable": {
                    "value": "point_features_normalized",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(stroke), int(channel))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_134": {
                "input": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_resample(points, S=S)",
                            "Call"
                        ],
                        [
                            "_resample_torch(points, S=S, S_scalar=S_scalar)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_135": {
                "input": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_resample(points, S=S)",
                            "Call"
                        ],
                        [
                            "_resample_torch(points, S=S, S_scalar=S_scalar)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_184": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "int(channel)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_202": {
                "variable": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_features[:, c]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_203": {
                "variable": {
                    "value": "min_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_features[:, c]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sample.py": {
        "torch": {
            "device_14": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_69": {
                "f": {
                    "value": "args.g_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stack_32": {
                "variable": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "padded_imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCELoss_66": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_144": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ExponentialLR_145": {
                "variable": {
                    "value": "g_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "generator.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_146": {
                "variable": {
                    "value": "d_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "discriminator.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_198": {
                "variable": {
                    "value": "true_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand(args.batch_size).to(device) * 0.4 + 0.7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_31": {
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, max_width - img.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_118": {
                "obj": {
                    "value": "discriminator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "d_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'models/discriminator_%d.pt' % step",
                            "BinOp"
                        ],
                        [
                            "'models/ad_discriminator_%d.pt' % (step + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_139": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'models/%s_generator_%d.pt' % (mode, epoch + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_191": {
                "input": {
                    "value": "torch.log(D_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__205": {
                "parameters": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_211": {
                "obj": {
                    "value": "discriminator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "d_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'models/discriminator_%d.pt' % step",
                            "BinOp"
                        ],
                        [
                            "'models/ad_discriminator_%d.pt' % (step + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_214": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "g_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'models/ad_%s_generator_%d.pt' % (args.mode, step + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_238": {
                "f": {
                    "value": "args.g_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_253": {
                "f": {
                    "value": "args.d_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_191": {
                "input": {
                    "value": "D_real",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "discriminator.predict(real_psf, real_widths)",
                            "Call"
                        ],
                        [
                            "discriminator.predict(real_psf, real_widths)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_155": {},
            "Tensor_77": {},
            "Tensor_168": {},
            "rand_198": {
                "*size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_90": {}
        }
    },
    "utils.py": {
        "torch": {
            "clone_52": {
                "variable": {
                    "value": "data_clone",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_57": {
                "input": {
                    "value": "data_clone",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clone(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_58": {
                "input": {
                    "value": "data_clone",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clone(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}