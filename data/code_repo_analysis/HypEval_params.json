{
    "hypeval/evaluator.py": {
        "sklearn": {
            "average_precision_score_179": {
                "variable": {
                    "value": "avg_prec_all",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*dataset)",
                            "Call"
                        ],
                        [
                            "np.array(labels) == 'True'",
                            "Compare"
                        ],
                        [
                            "np.array([True] * len(pos_pairs) + [False] * len(neg_pairs))",
                            "Call"
                        ],
                        [
                            "all_labels[found_ix]",
                            "Subscript"
                        ],
                        [
                            "all_labels[found_ix]",
                            "Subscript"
                        ],
                        [
                            "np.concatenate((labels, missing_labels))",
                            "Call"
                        ],
                        [
                            "zip(*sorted(zip(scores, labels), key=lambda x: x[0])[::-1])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty(len(all_pairs))",
                            "Call"
                        ],
                        [
                            "score_fct(all_pairs)",
                            "Call"
                        ],
                        [
                            "scores[found_ix]",
                            "Subscript"
                        ],
                        [
                            "np.concatenate((scores, dummy_scores))",
                            "Call"
                        ],
                        [
                            "zip(*sorted(zip(scores, labels), key=lambda x: x[0])[::-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_184": {
                "variable": {
                    "value": "avg_prec_all_top_k",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels[:at_k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "scores[:at_k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "average_precision_score_194": {
                "variable": {
                    "value": "res_dict[category][AP@all]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_by_category",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[ix]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores_by_category",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores[ix]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "average_precision_score_196": {
                "variable": {
                    "value": "res_dict[category][AP@%d % at_k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_by_category[:at_k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "scores_by_category[:at_k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}