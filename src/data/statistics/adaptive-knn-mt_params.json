{
    "examples/byte_level_bpe/gru_transformer.py": {
        "torch": {
            "GRU_27": {
                "variable": {
                    "value": "self.emb_ctx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embed_tokens.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "embed_tokens.embedding_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/criss/save_encoder.py": {
        "torch": {
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/latent_depth/latent_depth_src/loss/latent_depth.py": {
        "torch": {
            "stack_62": {
                "variable": {
                    "value": "layer_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "layer_samples_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_78": {
                "variable": {
                    "value": "layer_utilization",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(layer_samples_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_26": {
                "variable": {
                    "value": "y_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.detach() for x in layer_samples]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_27": {
                "variable": {
                    "value": "agged_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack([x.detach() for x in layer_samples], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_23": {
                "input": {
                    "value": "samples + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_31": {
                "input": {
                    "value": "normed_agg_q + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/latent_depth/latent_depth_src/models/latent_transformer.py": {
        "torch": {
            "ModuleList_28": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._build_encoder_layer(args, idx) for idx in range(args.encoder_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_79": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._build_decoder_layer(args, no_encoder_attn, idx) for idx in range(args.decoder_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/latent_depth/latent_depth_src/modules/latent_layers.py": {
        "torch": {
            "Parameter_19": {
                "variable": {
                    "value": "self.layer_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_logits, num_layers)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_79": {
                "variable": {
                    "value": "y_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.legacy_contiguous_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_like_65": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.legacy_contiguous_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_like_70": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.legacy_contiguous_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/linformer/linformer_src/modules/linformer_sentence_encoder.py": {
        "torch": {
            "Linear_120": {
                "variable": {
                    "value": "compress_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.max_seq_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.max_seq_len // self.compressed",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/linformer/linformer_src/modules/multihead_linear_attention.py": {
        "torch": {
            "bmm_332": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.q_proj(query)",
                            "Call"
                        ],
                        [
                            "self.q_proj(query)",
                            "Call"
                        ],
                        [
                            "self.q_proj(query)",
                            "Call"
                        ],
                        [
                            "q * self.scaling",
                            "BinOp"
                        ],
                        [
                            "q.contiguous().view(tgt_len, bsz * self.num_heads, self.head_dim).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_352": {
                "variable": {
                    "value": "attn_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "MultiheadLinearAttention.apply_sparse_mask(attn_weights, tgt_len, src_len, bsz)",
                            "Call"
                        ],
                        [
                            "attn_weights + attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_weights_float.type_as(attn_weights)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "attn_weights_float.view(bsz, self.num_heads, tgt_len, src_len).transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "attn_weights.mean(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_358": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.dropout(attn_weights, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.v_proj(v_input)",
                            "Call"
                        ],
                        [
                            "self.v_proj(key)",
                            "Call"
                        ],
                        [
                            "self.v_proj(value)",
                            "Call"
                        ],
                        [
                            "torch.cat([v, self.bias_v.repeat(1, bsz, 1)])",
                            "Call"
                        ],
                        [
                            "v.contiguous().view(-1, bsz * self.num_heads, self.head_dim).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([v, v.new_zeros((v.size(0), 1) + v.size()[2:])], dim=1)",
                            "Call"
                        ],
                        [
                            "prev_value",
                            "Name"
                        ],
                        [
                            "torch.cat([prev_value, v], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.compress_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "max_seq_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.compress_seq_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_99": {
                "variable": {
                    "value": "self.bias_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_100": {
                "variable": {
                    "value": "self.bias_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_209": {
                "variable": {
                    "value": "k_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "query.permute(1, 2, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "F.linear(k_input, self.compress_k.weight[:, 0:tgt_len]).permute(2, 0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.compress_k.weight[:, 0:tgt_len]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "permute_209": {
                "variable": {
                    "value": "k_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, self.bias_k.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_249": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, self.bias_v.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_325": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, k.new_zeros((k.size(0), 1) + k.size()[2:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_326": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, v.new_zeros((v.size(0), 1) + v.size()[2:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "in_features": {
                    "value": "self.kdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_72": {
                "in_features": {
                    "value": "self.vdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_75": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.compress_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "max_seq_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.compress_seq_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linear_218": {
                "variable": {
                    "value": "v_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "query.permute(1, 2, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "F.linear(v_input, self.compress_v.weight[:, 0:tgt_len]).permute(2, 0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.linear(v_input, self.compress_k.weight[:, 0:tgt_len]).permute(2, 0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.compress_v.weight[:, 0:tgt_len]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "permute_218": {
                "variable": {
                    "value": "v_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linear_224": {
                "variable": {
                    "value": "v_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "query.permute(1, 2, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "F.linear(v_input, self.compress_v.weight[:, 0:tgt_len]).permute(2, 0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.linear(v_input, self.compress_k.weight[:, 0:tgt_len]).permute(2, 0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.compress_k.weight[:, 0:tgt_len]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "permute_224": {
                "variable": {
                    "value": "v_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_251": {
                "variable": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask, attn_mask.new_zeros(attn_mask.size(0), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "key_padding_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[key_padding_mask, key_padding_mask.new_zeros(key_padding_mask.size(0), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_328": {
                "variable": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask, attn_mask.new_zeros(attn_mask.size(0), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_390": {
                "variable": {
                    "value": "new_key_padding_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_key_padding_mask.float(), key_padding_mask.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_291": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_key, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_value, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_397": {
                "variable": {
                    "value": "filler",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, src_len - prev_key_padding_mask.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "prev_key_padding_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_401": {
                "variable": {
                    "value": "new_key_padding_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_key_padding_mask.float(), filler.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_405": {
                "variable": {
                    "value": "filler",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, src_len - key_padding_mask.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "key_padding_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_409": {
                "variable": {
                    "value": "new_key_padding_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[filler.float(), key_padding_mask.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/pointer_generator/pointer_generator_src/transformer_pg.py": {
        "torch": {
            "Linear_225": {
                "variable": {
                    "value": "self.project_p_gens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "p_gen_input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_embed_dim + self.output_embed_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_312": {
                "variable": {
                    "value": "gen_dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gen_dists",
                    "type": "Call",
                    "possible_values": [
                        [
                            "super().get_normalized_probs((logits, None), log_probs=False, sample=None)",
                            "Call"
                        ],
                        [
                            "torch.mul(gen_dists, p_gens)",
                            "Call"
                        ],
                        [
                            "torch.cat((gen_dists, padding), 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "p_gens",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.project_p_gens(predictors)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(p_gens)",
                            "Call"
                        ],
                        [
                            "self.force_p_gen",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_315": {
                "variable": {
                    "value": "gen_dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gen_dists, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_323": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mul(attn, 1 - p_gens)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1 - p_gens",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_385": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "input >= self.num_embeddings",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(input) * self.unk_idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.where(input >= self.num_embeddings, torch.ones_like(input) * self.unk_idx, input)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_284": {
                "variable": {
                    "value": "predictors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_output_embed, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_286": {
                "variable": {
                    "value": "p_gens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_gens",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.project_p_gens(predictors)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(p_gens)",
                            "Call"
                        ],
                        [
                            "self.force_p_gen",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_like_386": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.where(input >= self.num_embeddings, torch.ones_like(input) * self.unk_idx, input)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/roberta/commonsense_qa/commonsense_qa_task.py": {
        "torch": {
            "cat_93": {
                "variable": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tokens.new([self.args.init_token]), tokens]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "src_bin",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[question_toks, binarize(src)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "examples/roberta/wsc/wsc_criterion.py": {
        "torch": {
            "log_softmax_51": {
                "variable": {
                    "value": "lprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_59": {
                "input": {
                    "value": "torch.cat([query_lprobs, cand_lprobs]).unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "query_lprobs.new([0]).long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_60": {
                "tensors": {
                    "value": "[query_lprobs, cand_lprobs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_60": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/roberta/wsc/wsc_task.py": {
        "torch": {
            "zeros_like_104": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "toks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.binarize(prefix + leading_space + txt + trailing_space + suffix, append_eos=True)",
                            "Call"
                        ],
                        [
                            "full_cand[mask.bool()]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tokens.new([self.args.init_token]), tokens]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_softmax_249": {
                "variable": {
                    "value": "lprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/rxf/rxf_src/label_smoothed_cross_entropy_r3f.py": {
        "torch": {
            "Normal_27": {
                "variable": {
                    "value": "self.noise_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Uniform_31": {
                "variable": {
                    "value": "self.noise_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "-self.eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "kl_div_54": {
                "input": {
                    "value": "F.log_softmax(noised_logits, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "F.softmax(input_logits, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "size_average": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "reduce": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kl_div_61": {
                "input": {
                    "value": "F.log_softmax(input_logits, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "F.softmax(noised_logits, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "size_average": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "reduce": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_55": {
                "input": {
                    "value": "noised_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_56": {
                "input": {
                    "value": "input_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_62": {
                "input": {
                    "value": "input_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_63": {
                "input": {
                    "value": "noised_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/rxf/rxf_src/sentence_prediction_r3f.py": {
        "torch": {
            "Normal_32": {
                "variable": {
                    "value": "self.noise_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_117": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(input_logits, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [input_logits]).view(-1)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mse_loss_128": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_logits.squeeze().float()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [input_logits]).view(-1)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Uniform_36": {
                "variable": {
                    "value": "self.noise_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "-self.eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "kl_div_59": {
                "input": {
                    "value": "F.log_softmax(noised_logits, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "F.softmax(input_logits, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "size_average": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "reduce": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kl_div_66": {
                "input": {
                    "value": "F.log_softmax(input_logits, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "F.softmax(noised_logits, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "size_average": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "reduce": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_118": {
                "input": {
                    "value": "input_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_60": {
                "input": {
                    "value": "noised_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_61": {
                "input": {
                    "value": "input_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_67": {
                "input": {
                    "value": "input_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_68": {
                "input": {
                    "value": "noised_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/simultaneous_translation/eval/eval_latency.py": {
        "torch": {
            "unsqueeze_31": {
                "variable": {
                    "value": "delays",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_32": {
                "variable": {
                    "value": "src_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_66": {
                "variable": {
                    "value": "delays",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_68": {
                "variable": {
                    "value": "src_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/simultaneous_translation/models/transformer_monotonic_attention.py": {
        "torch": {
            "ModuleList_125": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_148": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_265": {
                "variable": {
                    "value": "incremental_state[fastest_step]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[incremental_state['fastest_step'], fastest_step]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_261": {
                "input": {
                    "value": "torch.cat(step_list, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_261": {
                "tensors": {
                    "value": "step_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/simultaneous_translation/modules/monotonic_multihead_attention.py": {
        "torch": {
            "clamp_118": {
                "variable": {
                    "value": "cumprod_1mp_clamp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cumprod_1mp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "exclusive_cumprod(1 - p_choose, dim=2, eps=self.eps)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "previous_attn[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_291": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights.type_as(v_proj)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "v_proj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.v_proj_output(value)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_458": {
                "variable": {
                    "value": "p_choose",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_energy + noise",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_482": {
                "variable": {
                    "value": "self.k_proj_soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.kdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_483": {
                "variable": {
                    "value": "self.q_proj_soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tril_597": {
                "variable": {
                    "value": "p_choose",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_choose",
                    "type": "Call",
                    "possible_values": [
                        [
                            "p_choose[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "p_choose.view(bsz, num_heads, src_len)",
                            "Call"
                        ],
                        [
                            "self.p_choose(query, key, key_padding_mask)",
                            "Call"
                        ],
                        [
                            "p_choose.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(attn_energy + noise)",
                            "Call"
                        ],
                        [
                            "query.new_ones(bsz, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "torch.tril(p_choose, diagonal=self.waitk_lagging - 1)",
                            "Call"
                        ],
                        [
                            "torch.triu(p_choose, diagonal=self.waitk_lagging - 1)",
                            "Call"
                        ],
                        [
                            "p_choose.masked_fill(key_padding_mask.float().flip(1).unsqueeze(1).bool(), -1)",
                            "Call"
                        ],
                        [
                            "convert_padding_direction(p_choose.view(-1, src_len).long(), padding_idx=-1, right_to_left=True)",
                            "Call"
                        ],
                        [
                            "p_choose.view(bsz, tgt_len, src_len).type_as(query)",
                            "Call"
                        ],
                        [
                            "p_choose.contiguous().unsqueeze(1).expand(-1, self.num_heads, -1, -1).contiguous().view(-1, tgt_len, src_len)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "self.waitk_lagging - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "triu_598": {
                "variable": {
                    "value": "p_choose",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_choose",
                    "type": "Call",
                    "possible_values": [
                        [
                            "p_choose[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "p_choose.view(bsz, num_heads, src_len)",
                            "Call"
                        ],
                        [
                            "self.p_choose(query, key, key_padding_mask)",
                            "Call"
                        ],
                        [
                            "p_choose.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(attn_energy + noise)",
                            "Call"
                        ],
                        [
                            "query.new_ones(bsz, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "torch.tril(p_choose, diagonal=self.waitk_lagging - 1)",
                            "Call"
                        ],
                        [
                            "torch.triu(p_choose, diagonal=self.waitk_lagging - 1)",
                            "Call"
                        ],
                        [
                            "p_choose.masked_fill(key_padding_mask.float().flip(1).unsqueeze(1).bool(), -1)",
                            "Call"
                        ],
                        [
                            "convert_padding_direction(p_choose.view(-1, src_len).long(), padding_idx=-1, right_to_left=True)",
                            "Call"
                        ],
                        [
                            "p_choose.view(bsz, tgt_len, src_len).type_as(query)",
                            "Call"
                        ],
                        [
                            "p_choose.contiguous().unsqueeze(1).expand(-1, self.num_heads, -1, -1).contiguous().view(-1, tgt_len, src_len)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "self.waitk_lagging - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_346": {
                "variable": {
                    "value": "buffer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_choose",
                    "type": "Call",
                    "possible_values": [
                        [
                            "p_choose[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "p_choose.view(bsz, num_heads, src_len)",
                            "Call"
                        ],
                        [
                            "self.p_choose(query, key, key_padding_mask)",
                            "Call"
                        ],
                        [
                            "p_choose.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(attn_energy + noise)",
                            "Call"
                        ],
                        [
                            "query.new_ones(bsz, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "torch.tril(p_choose, diagonal=self.waitk_lagging - 1)",
                            "Call"
                        ],
                        [
                            "torch.triu(p_choose, diagonal=self.waitk_lagging - 1)",
                            "Call"
                        ],
                        [
                            "p_choose.masked_fill(key_padding_mask.float().flip(1).unsqueeze(1).bool(), -1)",
                            "Call"
                        ],
                        [
                            "convert_padding_direction(p_choose.view(-1, src_len).long(), padding_idx=-1, right_to_left=True)",
                            "Call"
                        ],
                        [
                            "p_choose.view(bsz, tgt_len, src_len).type_as(query)",
                            "Call"
                        ],
                        [
                            "p_choose.contiguous().unsqueeze(1).expand(-1, self.num_heads, -1, -1).contiguous().view(-1, tgt_len, src_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_453": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "self.noise_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "self.noise_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "generator": {
                    "value": "attn_energy.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_529": {
                "variable": {
                    "value": "exp_soft_energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_energy",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attn_energy(q, k, key_padding_mask)",
                            "Call"
                        ],
                        [
                            "soft_energy.view(bsz * self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "soft_energy - soft_energy.max(dim=2, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "soft_energy.masked_fill(~mask.bool(), float('-inf'))",
                            "Call"
                        ],
                        [
                            "soft_energy - soft_energy.max(dim=2, keepdim=True)[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_536": {
                "variable": {
                    "value": "exp_soft_energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_energy",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attn_energy(q, k, key_padding_mask)",
                            "Call"
                        ],
                        [
                            "soft_energy.view(bsz * self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "soft_energy - soft_energy.max(dim=2, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "soft_energy.masked_fill(~mask.bool(), float('-inf'))",
                            "Call"
                        ],
                        [
                            "soft_energy - soft_energy.max(dim=2, keepdim=True)[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cumsum_537": {
                "variable": {
                    "value": "exp_soft_energy_cumsum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "exp_soft_energy",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.exp(soft_energy)",
                            "Call"
                        ],
                        [
                            "torch.exp(soft_energy)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "data": {
                    "value": "self.energy_bias_init * torch.ones([1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_85": {
                "input": {
                    "value": "q_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "k_proj.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_144": {
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(previous_attn[1:], dim=1)",
                            "Call"
                        ],
                        [
                            "p_choose.new_zeros([bsz * self.num_heads, src_len]).scatter(1, (step_offset + new_monotonic_step).view(bsz * self.num_heads, 1).clamp(0, src_len - 1), 1)",
                            "Call"
                        ],
                        [
                            "alpha.masked_fill((new_monotonic_step == max_steps).view(bsz * self.num_heads, 1), 0)",
                            "Call"
                        ],
                        [
                            "alpha.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.expected_alignment_infer(p_choose, key_padding_mask, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.expected_alignment_train(p_choose, key_padding_mask)",
                            "Call"
                        ],
                        [
                            "alpha.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_559": {
                "input": {
                    "value": "beta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.expected_attention(alpha, query, key, value, key_padding_mask, incremental_state)",
                            "Call"
                        ],
                        [
                            "beta.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "exp_soft_energy / exp_soft_energy_sum.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "exp_soft_energy * torch.cumsum(inner_items.flip(dims=[2]), dim=2).flip(dims=[2])",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_559": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cumsum_553": {
                "input": {
                    "value": "inner_items.flip(dims=[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flip_553": {
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_38": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cumsum_133": {
                "input": {
                    "value": "previous_attn[i][:, 0] / cumprod_1mp_clamp[:, i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/simultaneous_translation/utils/functions.py": {
        "torch": {
            "log_49": {
                "variable": {
                    "value": "log_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cumsum_50": {
                "variable": {
                    "value": "cumsum_log_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.log(tensor + eps)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_51": {
                "variable": {
                    "value": "exp_cumsum_log_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cumsum_log_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cumsum(log_tensor, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv1d_138": {
                "variable": {
                    "value": "moving_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.t().unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "moving_sum_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.new_ones([1, 1, end_idx + start_idx - 1])",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "start_idx + end_idx - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_138": {
                "variable": {
                    "value": "moving_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "t_138": {
                "variable": {
                    "value": "moving_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_19": {
                "tensors": {
                    "value": "[torch.ones(tensor_size).type_as(tensor), tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_79": {
                "start": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_19": {
                "*size": {
                    "value": "tensor_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(tensor.size())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/simultaneous_translation/utils/latency.py": {
        "torch": {
            "zeros_like_167": {
                "variable": {
                    "value": "new_delays",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delays",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "delays + 1",
                            "BinOp"
                        ],
                        [
                            "delays.t()",
                            "Call"
                        ],
                        [
                            "delays.masked_fill(target_padding_mask, 0)",
                            "Call"
                        ],
                        [
                            "delays + 1",
                            "BinOp"
                        ],
                        [
                            "delays.masked_fill(target_padding_mask.unsqueeze(1), 0)",
                            "Call"
                        ],
                        [
                            "monotonic_step.view(monotonic_step.size(0), -1, monotonic_step.size(-1)).max(dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "delays.masked_fill(delays >= src_lens, 0) + (src_lens - 1).expand_as(delays).masked_fill(delays < src_lens, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_343": {
                "variable": {
                    "value": "steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1 + src_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_343": {
                "variable": {
                    "value": "steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_92": {
                "variable": {
                    "value": "AP",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delays.masked_fill(target_padding_mask, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_96": {
                "variable": {
                    "value": "AP",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delays",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "delays + 1",
                            "BinOp"
                        ],
                        [
                            "delays.t()",
                            "Call"
                        ],
                        [
                            "delays.masked_fill(target_padding_mask, 0)",
                            "Call"
                        ],
                        [
                            "delays + 1",
                            "BinOp"
                        ],
                        [
                            "delays.masked_fill(target_padding_mask.unsqueeze(1), 0)",
                            "Call"
                        ],
                        [
                            "monotonic_step.view(monotonic_step.size(0), -1, monotonic_step.size(-1)).max(dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "delays.masked_fill(delays >= src_lens, 0) + (src_lens - 1).expand_as(delays).masked_fill(delays < src_lens, 0)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_327": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attention",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(attention, dim=1)",
                            "Call"
                        ],
                        [
                            "attention.view(-1, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attention.view(-1, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "torch.cat([attention[:, :, :-1], residual_attention], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_339": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attention[:, :, :-1], residual_attention]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_124": {
                "input": {
                    "value": "lagging_padding_mask.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "t_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_392": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expected_delays",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(steps * attention).sum(dim=2).view(bsz, num_heads_x_layers, tgt_len)",
                            "Call"
                        ],
                        [
                            "expected_delays.mean(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(expected_delays * weights, dim=1)",
                            "Call"
                        ],
                        [
                            "expected_delays.max(dim=1)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_393": {
                "variable": {
                    "value": "expected_delays",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expected_delays * weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_130": {
                "start": {
                    "value": "delays.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_130": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_183": {
                "start": {
                    "value": "delays.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_183": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_173": {
                "tensors": {
                    "value": "[new_delays[i - 1].unsqueeze(0) + 1 / gamma, delays[i].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_173": {
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/speech_recognition/criterions/ASG_loss.py": {
        "torch": {
            "Parameter_63": {
                "variable": {
                    "value": "self.asg.trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "asg_transitions_init * torch.eye(num_labels)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.linseg_progress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([0], dtype=torch.int)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_144": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.asg.forward(emissions, target.to(device), target_size.to(device))",
                            "Call"
                        ],
                        [
                            "torch.sum(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_68": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_64": {
                "n": {
                    "value": "num_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(self.tgt_dict)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/speech_recognition/criterions/cross_entropy_acc.py": {
        "torch": {
            "nll_loss_41": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.get_normalized_probs(net_output, log_probs=log_probs)",
                            "Call"
                        ],
                        [
                            "lprobs.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "lprobs.view(-1, lprobs.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "target.view(-1)",
                            "Call"
                        ],
                        [
                            "target.view(-1)",
                            "Call"
                        ],
                        [
                            "model.get_targets(sample, net_output)",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'sum'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_49": {
                "variable": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs.argmax(1).masked_select(mask) == target.masked_select(mask)",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_52": {
                "variable": {
                    "value": "total",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target != self.padding_idx",
                            "Compare"
                        ]
                    ]
                }
            },
            "sum_64": {
                "input": {
                    "value": "sample['net_input']['src_lengths']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "examples/speech_recognition/data/collaters.py": {
        "torch": {
            "index_select_107": {
                "variable": {
                    "value": "target_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "sort_order",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "source",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "source",
                    "type": "Name",
                    "possible_values": [
                        [
                            "s['data'][self.feature_index]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(source)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "fairseq_data_utils.collate_tokens([s['target'] for s in samples], self.pad_index, self.eos_index, left_pad=False, move_eos_to_beginning=False)",
                            "Call"
                        ],
                        [
                            "target.index_select(0, sort_order)",
                            "Call"
                        ],
                        [
                            "s['data'][self.label_index]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(target).long()",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(target)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/speech_recognition/data/data_utils.py": {
        "torch": {
            "max_46": {
                "variable": {
                    "value": "max_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_48": {
                "start": {
                    "value": "max_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.max(lengths).item()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_100": {
                "input": {
                    "value": "encoder_padding_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(max_lengths).to(lengths.device).view(1, max_lengths).expand(bsz, -1) >= lengths.view(bsz, 1).expand(-1, max_lengths)",
                            "Compare"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_18": {
                "input": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feature.var(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_17": {
                "input": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feature.var(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/speech_recognition/infer.py": {
        "torch": {
            "from_numpy_245": {
                "variable": {
                    "value": "emissions",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "emissions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "np.stack(self.emissions[ids])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(emissions)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_292": {
                "variable": {
                    "value": "args.asg_transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "trans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "criterions[0].asg.trans.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "is_available_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_366": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_374": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/speech_recognition/models/vggtransformer.py": {
        "torch": {
            "Embedding_863": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_871": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_888": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_256": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_296": {
                "variable": {
                    "value": "self.transformer_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_393": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sample_bsz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sample_seq_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "200",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_527": {
                "variable": {
                    "value": "maxT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_lengths",
                    "type": "Call",
                    "possible_values": [
                        [
                            "src_lengths.clone()",
                            "Call"
                        ],
                        [
                            "(input_lengths.float() / s).ceil().long()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_528": {
                "variable": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "maxT",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.max(input_lengths).item()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "maxT",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.max(input_lengths).item()",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_588": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_607": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "weight_norm_884": {
                "module": {
                    "value": "m",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.Embedding(num_embeddings, embedding_dim, padding_idx=padding_idx)",
                            "Call"
                        ],
                        [
                            "nn.Linear(in_features, out_features, bias=bias)",
                            "Call"
                        ],
                        [
                            "LinearizedConvolution(in_channels, out_channels, kernel_size, **kwargs)",
                            "Call"
                        ],
                        [
                            "nn.LayerNorm(embedding_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "triu_706": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(tensor.new(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "triu_710": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(self._future_mask.resize_(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_605": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_604": {
                "normalized_shape": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/speech_recognition/models/w2l_conv_glu_enc.py": {
        "torch": {
            "ModuleList_101": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_102": {
                "variable": {
                    "value": "self.linear_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "glu_139": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "src_tokens.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv_layers[layer_idx](x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.dropouts[layer_idx](x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.linear_layers[0](x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "self.dropouts[-1](x)",
                            "Call"
                        ],
                        [
                            "self.linear_layers[1](x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_107": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cur_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_feat_per_channel",
                            "Name"
                        ],
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[2 * cur_channels, vocab_size]",
                            "List"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cur_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_feat_per_channel",
                            "Name"
                        ],
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[2 * cur_channels, vocab_size]",
                            "List"
                        ]
                    ]
                }
            },
            "glu_134": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "src_tokens.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv_layers[layer_idx](x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.dropouts[layer_idx](x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.linear_layers[0](x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "self.dropouts[-1](x)",
                            "Call"
                        ],
                        [
                            "self.linear_layers[1](x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_109": {
                "module": {
                    "value": "layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.Conv1d(cur_channels, out_channels, kernel_size, padding=padding)",
                            "Call"
                        ],
                        [
                            "nn.Linear(cur_channels, out_channels)",
                            "Call"
                        ]
                    ]
                }
            },
            "weight_norm_120": {
                "module": {
                    "value": "layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.Conv1d(cur_channels, out_channels, kernel_size, padding=padding)",
                            "Call"
                        ],
                        [
                            "nn.Linear(cur_channels, out_channels)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_150": {
                "start": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/speech_recognition/tasks/speech_recognition.py": {
        "torch": {}
    },
    "examples/speech_recognition/w2l_decoder.py": {
        "torch": {
            "load_350": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.kenlm_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_285": {
                "ndarray": {
                    "value": "curr_state.prefix",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/speech_to_text/prep_covost_data.py": {
        "torch": {}
    },
    "examples/speech_to_text/prep_mustc_data.py": {
        "torch": {}
    },
    "examples/translation_moe/translation_moe_src/logsumexp_moe.py": {
        "torch": {
            "logsumexp_20": {
                "input": {
                    "value": "logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "examples/translation_moe/translation_moe_src/mean_pool_gating_network.py": {
        "torch": {
            "Linear_23": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_experts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_46": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_41": {
                "variable": {
                    "value": "ntokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "~encoder_padding_mask",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_44": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "encoder_out.encoder_out.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "encoder_out.clone()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_50": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(encoder_out, dim=1) / ntokens.type_as(encoder_out)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(encoder_out, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_42": {
                "input": {
                    "value": "encoder_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "encoder_out.encoder_out.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "encoder_out.clone()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/translation_moe/translation_moe_src/translation_moe.py": {
        "torch": {
            "cat_155": {
                "variable": {
                    "value": "lprob_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lprob_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "get_lprob_y(encoder_out, prev_output_tokens_k)",
                            "Call"
                        ],
                        [
                            "torch.cat(lprob_y, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_175": {
                "variable": {
                    "value": "prob_z_xy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprob_yz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_lprob_yz()",
                            "Call"
                        ],
                        [
                            "get_lprob_yz()",
                            "Call"
                        ],
                        [
                            "lprob_y",
                            "Name"
                        ],
                        [
                            "lprob_y + lprob_z.type_as(lprob_y)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/wav2vec/vq-wav2vec_featurize.py": {
        "torch": {
            "from_numpy_49": {
                "variable": {
                    "value": "wav",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "wav",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(wav).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_208": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FilesDataset(fnames, self.args.labels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_214": {
                "variable": {
                    "value": "cp",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda x, _: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataParallel_225": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Wav2VecModel.build_model(cp['args'], None)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_163": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_246": {
                "obj": {
                    "value": "vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model.feature_extractor.vars.view(self.model.feature_extractor.banks, self.model.feature_extractor.num_vars, -1).cpu().detach()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.var_file()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/wav2vec/wav2vec_featurize.py": {
        "torch": {
            "load_38": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tqdm.tqdm(labels)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_90": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(x).float().cuda(self.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experimental_generate.py": {
        "torch": {
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_296": {
                "variable": {
                    "value": "avg_distance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hypo['knn_distance']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/benchmark/dummy_lm.py": {
        "torch": {
            "arange_39": {
                "start": {
                    "value": "args.tokens_per_sample + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_71": {
                "tensors": {
                    "value": "[self.dummy_tgt for _ in range(bsz)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_66": {
                "tensors": {
                    "value": "[self.dummy_src for _ in range(bsz)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "full_67": {
                "size": {
                    "value": "(bsz,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.args.tokens_per_sample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/benchmark/dummy_masked_lm.py": {
        "torch": {
            "arange_43": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "args.tokens_per_sample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_like_46": {
                "variable": {
                    "value": "tgt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(args.tokens_per_sample) + pad_idx + 1",
                            "BinOp"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "pad_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "arange_42": {
                "start": {
                    "value": "args.tokens_per_sample",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_79": {
                "tensors": {
                    "value": "[self.dummy_tgt for _ in range(bsz)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_74": {
                "tensors": {
                    "value": "[self.dummy_src for _ in range(bsz)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "full_75": {
                "size": {
                    "value": "(bsz,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.args.tokens_per_sample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/benchmark/dummy_model.py": {
        "torch": {
            "Embedding_44": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "50000",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_47": {
                "variable": {
                    "value": "self.layers_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.LayerNorm(embed_dim), nn.Linear(embed_dim, 3 * embed_dim), nn.Linear(3 * embed_dim, embed_dim), nn.Linear(embed_dim, embed_dim), nn.Dropout()) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_59": {
                "variable": {
                    "value": "self.layers_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.LayerNorm(embed_dim), nn.Linear(embed_dim, 4 * embed_dim), nn.ReLU(), nn.Linear(4 * embed_dim, embed_dim), nn.Dropout(0.1)) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "50000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_softmax_89": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_output[0].float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_91": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_output[0].float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "*args": {
                    "value": "nn.LayerNorm(embed_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "*args": {
                    "value": "nn.LayerNorm(embed_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_50": {
                "normalized_shape": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_51": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "3 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "3 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_62": {
                "normalized_shape": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "4 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_66": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/benchmark/dummy_mt.py": {
        "torch": {
            "stack_60": {
                "variable": {
                    "value": "tgt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.dummy_tgt for _ in range(bsz)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_34": {
                "start": {
                    "value": "args.src_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_35": {
                "start": {
                    "value": "args.tgt_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_65": {
                "tensors": {
                    "value": "[self.dummy_src for _ in range(bsz)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "full_66": {
                "size": {
                    "value": "(bsz,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.args.src_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/binarizer.py": {
        "torch": {}
    },
    "fairseq/checkpoint_utils.py": {
        "torch": {
            "load_230": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda s, l: default_restore_location(s, 'cpu')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_325": {
                "obj": {
                    "value": "obj",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/criterions/adaptive_loss.py": {
        "torch": {
            "cross_entropy_74": {
                "input": {
                    "value": "logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "target[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum if reduce else none",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/criterions/composite_loss.py": {
        "torch": {}
    },
    "fairseq/criterions/cross_entropy.py": {
        "torch": {
            "nll_loss_52": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.get_normalized_probs(net_output, log_probs=True)",
                            "Call"
                        ],
                        [
                            "lprobs.view(-1, lprobs.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.get_targets(sample, net_output).view(-1)",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum if reduce else none",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/criterions/ctc.py": {
        "torch": {
            "ctc_loss_94": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_probs": {
                    "value": "lprobs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.get_normalized_probs(net_output, log_probs=True).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "targets": {
                    "value": "targets_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample['target'].masked_select(pad_mask)",
                            "Call"
                        ]
                    ]
                },
                "input_lengths": {
                    "value": "input_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample['net_input']['src_lengths']",
                            "Subscript"
                        ],
                        [
                            "non_padding_mask.long().sum(-1)",
                            "Call"
                        ]
                    ]
                },
                "target_lengths": {
                    "value": "target_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample['target_lengths']",
                            "Subscript"
                        ]
                    ]
                },
                "blank": {
                    "value": "self.blank_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                },
                "zero_infinity": {
                    "value": "self.zero_infinity",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/criterions/fairseq_criterion.py": {
        "torch": {}
    },
    "fairseq/criterions/label_smoothed_cross_entropy.py": {
        "torch": {
            "sum_113": {
                "variable": {
                    "value": "n_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs.argmax(1).masked_select(mask).eq(target.masked_select(mask))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_116": {
                "variable": {
                    "value": "total",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target.ne(self.padding_idx)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/criterions/legacy_masked_lm.py": {
        "torch": {
            "nll_loss_24": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(logits, -1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_softmax_25": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/criterions/masked_lm.py": {
        "torch": {
            "where_45": {
                "variable": {
                    "value": "masked_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "masked_tokens.any()",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "masked_tokens",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample['target'].ne(self.padding_idx)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.where(masked_tokens.any(), masked_tokens, masked_tokens.new([True]))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "masked_tokens.new([True])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_41": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/criterions/nat_loss.py": {
        "torch": {
            "tensor_55": {
                "variable": {
                    "value": "nll_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_58": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(src_tokens, src_lengths, prev_output_tokens, tgt_tokens)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_60": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.log_softmax(outputs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets.to(logits.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kl_div_63": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.log_softmax(outputs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets.to(logits.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/criterions/sentence_prediction.py": {
        "torch": {
            "log_softmax_51": {
                "variable": {
                    "value": "lprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits.view(-1).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_52": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.log_softmax(logits, dim=-1, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [logits]).view(-1)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mse_loss_56": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits.view(-1).float()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [logits]).view(-1)",
                            "Call"
                        ],
                        [
                            "targets.float()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/criterions/sentence_ranking.py": {
        "torch": {
            "cat_60": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_65": {
                "variable": {
                    "value": "lprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(scores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_66": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.log_softmax(logits, dim=-1, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.get_targets(sample, [logits]).view(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/criterions/wav2vec_criterion.py": {
        "torch": {
            "cross_entropy_56": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.get_logits(net_output).float()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.get_targets(sample, net_output)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum if reduce else none",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_62": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.get_logits(net_output).float()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "model.get_target_weights(target, net_output)",
                            "Call"
                        ],
                        [
                            "weights.float()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum if reduce else none",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_tensor_50": {
                "obj": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "model.get_target_weights(target, net_output)",
                            "Call"
                        ],
                        [
                            "weights.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_75": {
                "obj": {
                    "value": "extra_losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.get_extra_losses(net_output)",
                            "Call"
                        ],
                        [
                            "[extra_losses]",
                            "List"
                        ]
                    ]
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/add_target_dataset.py": {
        "torch": {
            "cat_65": {
                "variable": {
                    "value": "collated[target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target, eos]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "collated[net_input][prev_output_tokens]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[eos, target]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/append_token_dataset.py": {
        "torch": {
            "cat_24": {
                "variable": {
                    "value": "item",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item, item.new([self.token])]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/audio/audio_utils.py": {
        "torch": {
            "from_numpy_60": {
                "variable": {
                    "value": "waveform",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "waveform",
                    "type": "Name",
                    "possible_values": [
                        [
                            "waveform * 2 ** 15",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(waveform).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_60": {
                "variable": {
                    "value": "waveform",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/audio/raw_audio_dataset.py": {
        "torch": {
            "from_numpy_176": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "wav",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "layer_norm_62": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats",
                    "type": "Call",
                    "possible_values": [
                        [
                            "feats.mean(-1)",
                            "Call"
                        ],
                        [
                            "F.layer_norm(feats, feats.shape)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wav).float()",
                            "Call"
                        ],
                        [
                            "self.postprocess(feats, curr_sample_rate)",
                            "Call"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "feats.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "collated_sources[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[source, source.new_full((-diff,), 0.0)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/audio/speech_to_text_dataset.py": {
        "torch": {
            "from_numpy_307": {
                "variable": {
                    "value": "source",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "source",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_features_or_waveform(self.audio_paths[index], need_waveform=self.data_cfg.use_audio_input)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(source).float()",
                            "Call"
                        ],
                        [
                            "self.feature_transforms(source)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_327": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[i for (i, _, _) in samples]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_332": {
                "variable": {
                    "value": "n_frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[s.size(0) for (_, s, _) in samples]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_349": {
                "variable": {
                    "value": "target_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[t.size(0) for (_, _, t) in samples]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_349": {
                "variable": {
                    "value": "target_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "order",
                    "type": "List",
                    "possible_values": [
                        [
                            "[np.random.permutation(len(self))]",
                            "List"
                        ],
                        [
                            "[np.arange(len(self))]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_318": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.LongTensor([lang_tag_idx]), target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/backtranslation_dataset.py": {
        "torch": {
            "is_available_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/base_wrapper_dataset.py": {
        "torch": {}
    },
    "fairseq/data/bucket_pad_length_dataset.py": {
        "torch": {
            "pad_62": {
                "input": {
                    "value": "item",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dataset[index]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "(num_pad if self.left_pad else 0, 0 if self.left_pad else num_pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.pad_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/colorize_dataset.py": {
        "torch": {
            "tensor_21": {
                "variable": {
                    "value": "base_collate[net_input][colors]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "list((self.color_getter(self.dataset, s['id']) for s in samples))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/concat_dataset.py": {
        "torch": {}
    },
    "fairseq/data/concat_sentences_dataset.py": {
        "torch": {
            "cat_20": {
                "tensors": {
                    "value": "[ds[index] for ds in self.datasets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/data_utils.py": {
        "torch": {
            "arange_493": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_lens",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_492": {
                "input": {
                    "value": "lens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.fromiter((e - s if e - s >= length + min_space else 0 for (s, e) in parts), np.int)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/data/denoising_dataset.py": {
        "torch": {
            "arange_230": {
                "variable": {
                    "value": "ordering",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "num_sentences",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sentence_ends.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_299": {
                "variable": {
                    "value": "to_keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "source_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "source.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_366": {
                "variable": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tokens[0:1], tokens[offset:-1], tokens[1:offset], tokens[-1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_380": {
                "variable": {
                    "value": "noise_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_tokens + n,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_386": {
                "variable": {
                    "value": "result[noise_indices[:num_random]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "len(self.vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_random,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Categorical_172": {
                "variable": {
                    "value": "self.mask_span_distribution",
                    "type": "Attribute",
                    "possible_values": []
                },
                "probs": {
                    "value": "ps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.FloatTensor(ps)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_245": {
                "variable": {
                    "value": "is_word_start",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "source.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cumsum_261": {
                "variable": {
                    "value": "cum_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mask_span_distribution.sample(sample_shape=(num_to_mask,))",
                            "Call"
                        ],
                        [
                            "torch.ones((num_to_mask,)).long()",
                            "Call"
                        ],
                        [
                            "torch.cat([lengths, self.mask_span_distribution.sample(sample_shape=(num_to_mask,))], dim=0)",
                            "Call"
                        ],
                        [
                            "lengths[:num_to_mask]",
                            "Subscript"
                        ],
                        [
                            "lengths[lengths > 0]",
                            "Subscript"
                        ],
                        [
                            "lengths - is_word_start[indices + 1].long()",
                            "BinOp"
                        ],
                        [
                            "lengths[uncompleted]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_289": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_to_mask,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_308": {
                "variable": {
                    "value": "source[indices[mask_random]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "len(self.vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(mask_random.sum(),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randperm_229": {
                "n": {
                    "value": "num_sentences",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sentence_ends.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_231": {
                "n": {
                    "value": "num_to_permute",
                    "type": "Call",
                    "possible_values": [
                        [
                            "math.ceil(num_sentences * 2 * p / 2.0)",
                            "Call"
                        ],
                        [
                            "math.ceil(num_words * 2 * p / 2.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_263": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lengths, self.mask_span_distribution.sample(sample_shape=(num_to_mask,))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cumsum_270": {
                "variable": {
                    "value": "cum_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mask_span_distribution.sample(sample_shape=(num_to_mask,))",
                            "Call"
                        ],
                        [
                            "torch.ones((num_to_mask,)).long()",
                            "Call"
                        ],
                        [
                            "torch.cat([lengths, self.mask_span_distribution.sample(sample_shape=(num_to_mask,))], dim=0)",
                            "Call"
                        ],
                        [
                            "lengths[:num_to_mask]",
                            "Subscript"
                        ],
                        [
                            "lengths[lengths > 0]",
                            "Subscript"
                        ],
                        [
                            "lengths - is_word_start[indices + 1].long()",
                            "BinOp"
                        ],
                        [
                            "lengths[uncompleted]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randint_329": {
                "variable": {
                    "value": "source[indices[mask_random]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "len(self.vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(mask_random.sum(),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_344": {
                "variable": {
                    "value": "source[indices[mask_random]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "len(self.vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(mask_random.sum(),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randperm_360": {
                "n": {
                    "value": "num_words - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_361": {
                "n": {
                    "value": "num_to_permute",
                    "type": "Call",
                    "possible_values": [
                        [
                            "math.ceil(num_sentences * 2 * p / 2.0)",
                            "Call"
                        ],
                        [
                            "math.ceil(num_words * 2 * p / 2.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_379": {
                "n": {
                    "value": "num_tokens + n - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_293": {
                "n": {
                    "value": "word_starts.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/dictionary.py": {
        "torch": {
            "Tensor_292": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_78": {
                "obj": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/encoders/utils.py": {
        "torch": {}
    },
    "fairseq/data/fairseq_dataset.py": {
        "torch": {}
    },
    "fairseq/data/fasta_dataset.py": {
        "torch": {}
    },
    "fairseq/data/id_dataset.py": {
        "torch": {
            "tensor_19": {
                "data": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/indexed_dataset.py": {
        "torch": {
            "from_numpy_170": {
                "variable": {
                    "value": "item",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.empty(n, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty(tensor_size, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "self.cache[ptx:ptx + size]",
                            "Subscript"
                        ],
                        [
                            "np.empty(tensor_size, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_236": {
                "variable": {
                    "value": "item",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.empty(n, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.empty(tensor_size, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "self.cache[ptx:ptx + size]",
                            "Subscript"
                        ],
                        [
                            "np.empty(tensor_size, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_503": {
                "ndarray": {
                    "value": "np_array",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.frombuffer(self._bin_buffer, dtype=self._index.dtype, count=size, offset=ptr)",
                            "Call"
                        ],
                        [
                            "np_array.astype(np.int64)",
                            "Call"
                        ],
                        [
                            "np.array(tensor.numpy(), dtype=self._dtype)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/data/iterators.py": {
        "torch": {
            "DataLoader_429": {
                "variable": {
                    "value": "itr",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "batches[offset:]",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.frozen_batches",
                            "Attribute"
                        ],
                        [
                            "shuffle_batches(list(batches), self.seed + epoch)",
                            "Call"
                        ],
                        [
                            "list(ShardedIterator(batches, self.num_shards, self.shard_id, fill_value=[]))",
                            "Call"
                        ],
                        [
                            "shuffle_batches(list(self.frozen_batches), self.seed + epoch)",
                            "Call"
                        ],
                        [
                            "self.frozen_batches",
                            "Attribute"
                        ],
                        [
                            "shuffle_batches(batches, self.seed + epoch + self.shard_id)",
                            "Call"
                        ],
                        [
                            "list(ShardedIterator(batches, self.num_shards, self.shard_id, fill_value=[]))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "timeout": {
                    "value": "self.timeout",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/language_pair_dataset.py": {
        "torch": {
            "unique_61": {
                "variable": {
                    "value": "(_, align_tgt_i, align_tgt_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "align_tgt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "alignments[:, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "return_inverse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_92": {
                "variable": {
                    "value": "tgt_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "sort_order",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_132": {
                "variable": {
                    "value": "offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(sort_order), 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_160": {
                "variable": {
                    "value": "constraints",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(samples), max(lens))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "alignments",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "alignments",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[alignment + offset for (align_idx, offset, src_len, tgt_len) in zip(sort_order, offsets, src_lengths, tgt_lengths) for alignment in [samples[align_idx]['alignment'].view(-1, 2)] if check_alignment(alignment, src_len, tgt_len)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(alignments, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_133": {
                "start": {
                    "value": "len(sort_order)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_314": {
                "variable": {
                    "value": "tgt_item",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.tgt[index], torch.LongTensor([eos])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_319": {
                "variable": {
                    "value": "tgt_item",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor([bos]), self.tgt[index]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_323": {
                "variable": {
                    "value": "src_item",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor([bos]), self.src[index]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/legacy/block_pair_dataset.py": {
        "torch": {
            "cat_284": {
                "variable": {
                    "value": "buffer",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.dataset[idx] for idx in range(start_ds_idx, end_ds_idx + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/legacy/masked_lm_dataset.py": {
        "torch": {}
    },
    "fairseq/data/lm_context_window_dataset.py": {
        "torch": {
            "from_numpy_58": {
                "variable": {
                    "value": "sample[net_input][src_tokens]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_toks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.empty([bsz, tsz + self.context_window], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "sample[target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_tgt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.full([bsz, tsz + self.context_window], pad, dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/data/mask_tokens_dataset.py": {
        "torch": {
            "from_numpy_178": {
                "ndarray": {
                    "value": "new_item",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.full(len(mask), self.pad_idx)",
                            "Call"
                        ],
                        [
                            "np.copy(item)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_137": {
                "ndarray": {
                    "value": "new_item",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.full(len(mask), self.pad_idx)",
                            "Call"
                        ],
                        [
                            "np.copy(item)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_136": {
                "ndarray": {
                    "value": "mask.astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/monolingual_dataset.py": {
        "torch": {
            "cat_163": {
                "variable": {
                    "value": "source",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[source.new([self.vocab.bos()]), source]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "source",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[source, source.new([self.vocab.eos()])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target.new([self.tgt_vocab.bos()]), target]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "future_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[future_target, future_target.new([self.vocab.pad()])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "past_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[past_target.new([self.vocab.pad()]), past_target[1:], source[-2, None]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/multilingual/multilingual_utils.py": {
        "torch": {}
    },
    "fairseq/data/multilingual/sampled_multi_dataset.py": {
        "torch": {
            "is_initialized_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/nested_dictionary_dataset.py": {
        "torch": {}
    },
    "fairseq/data/noising.py": {
        "torch": {
            "t_65": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.t(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_311": {
                "variable": {
                    "value": "src_tokens_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.src_dataset[index]",
                            "Subscript"
                        ],
                        [
                            "src_tokens.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_318": {
                "variable": {
                    "value": "noisy_src_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "noisy_src_tokens",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.noiser.noising(src_tokens_t, src_lengths)",
                            "Call"
                        ],
                        [
                            "torch.t(noisy_src_tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_194": {
                "ndarray": {
                    "value": "permutation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scores.argsort()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/data/numel_dataset.py": {
        "torch": {
            "is_tensor_19": {
                "obj": {
                    "value": "item",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dataset[index]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "numel_20": {
                "input": {
                    "value": "item",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dataset[index]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_31": {
                "data": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/prepend_dataset.py": {
        "torch": {}
    },
    "fairseq/data/prepend_token_dataset.py": {
        "torch": {
            "cat_24": {
                "variable": {
                    "value": "item",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item.new([self.token]), item]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/raw_label_dataset.py": {
        "torch": {
            "tensor_23": {
                "data": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/roll_dataset.py": {
        "torch": {
            "roll_18": {
                "input": {
                    "value": "item",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dataset[index]",
                            "Subscript"
                        ]
                    ]
                },
                "shifts": {
                    "value": "self.shifts",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/token_block_dataset.py": {
        "torch": {
            "cat_124": {
                "variable": {
                    "value": "buffer",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.dataset[idx] for idx in range(start_ds_idx, end_ds_idx + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "is_tensor_68": {
                "obj": {
                    "value": "sizes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(sizes, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "sizes.numpy()",
                            "Call"
                        ],
                        [
                            "sizes.astype(np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_138": {
                "variable": {
                    "value": "source",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item.new([self.eos]), buffer[0:e - 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "past_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item.new([self.pad, self.eos]), buffer[0:e - 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "past_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item.new([self.eos]), buffer[0:e - 2]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/transform_eos_dataset.py": {
        "torch": {
            "cat_82": {
                "variable": {
                    "value": "item[source]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item['source'], self.eos]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "item[target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item['target'], self.eos]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/data/transform_eos_lang_pair_dataset.py": {
        "torch": {
            "arange_63": {
                "start": {
                    "value": "eos_idx.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/dataclass/data_class.py": {
        "torch": {
            "device_count_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/distributed_utils.py": {
        "torch": {
            "device_count_67": {
                "variable": {
                    "value": "gpus_per_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_429": {
                "variable": {
                    "value": "buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t.view(-1) for t in data.values()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "split_431": {
                "variable": {
                    "value": "split_buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "buf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([t.view(-1) for t in data.values()]).to(device=device)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[t.numel() for t in data.values()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "is_initialized_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_260": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_420": {
                "variable": {
                    "value": "cpu_data[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data[k]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_180": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_419": {
                "obj": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data[k]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_count_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_112": {
                "variable": {
                    "value": "gpus_per_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_222": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/file_utils.py": {
        "torch": {}
    },
    "fairseq/hub_utils.py": {
        "torch": {
            "ModuleList_92": {
                "variable": {
                    "value": "self.models",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "models",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_153": {
                "obj": {
                    "value": "tokenized_sentences",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[self.encode(sentence) for sentence in sentences]",
                            "ListComp"
                        ],
                        [
                            "[self.encode(sentence) for sentence in sentences]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/incremental_decoding_utils.py": {
        "torch": {}
    },
    "fairseq/iterative_refinement_generator.py": {
        "torch": {
            "arange_157": {
                "variable": {
                    "value": "sent_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bsz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bsz * self.beam_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y, x.new_zeros(b, l_x - l_y).fill_(self.pad)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_169": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s, s.new_zeros(b, l_x - l_y)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a, a.new_zeros(b, l_x - l_y, a.size(2))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y.new_zeros(b, l_y - l_x).fill_(self.pad)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/legacy_distributed_data_parallel.py": {
        "torch": {
            "zeros_like_116": {
                "variable": {
                    "value": "buffer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params[0]",
                            "Subscript"
                        ],
                        [
                            "params",
                            "Name"
                        ],
                        [
                            "params",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_like_149": {
                "variable": {
                    "value": "param.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.module.parameters()",
                            "Call"
                        ],
                        [
                            "params",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/logging/meters.py": {
        "torch": {
            "is_tensor_16": {
                "obj": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_59": {
                "obj": {
                    "value": "number",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/logging/progress_bar.py": {
        "torch": {
            "is_tensor_101": {
                "obj": {
                    "value": "stat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "'{:g}'.format(stat)",
                            "Call"
                        ],
                        [
                            "'{:.3f}'.format(stat.avg)",
                            "Call"
                        ],
                        [
                            "'{:g}'.format(round(stat.avg))",
                            "Call"
                        ],
                        [
                            "'{:g}'.format(round(stat.sum))",
                            "Call"
                        ],
                        [
                            "stat.tolist()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/model_parallel/models/pipeline_parallel_transformer/layers.py": {
        "torch": {
            "Embedding_589": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embed_tokens[0].padding_idx if isinstance(embed_tokens, nn.ModuleList) else embed_tokens.padding_idx",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_596": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_79": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "embed + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.embed_scale * torch.cat(x_embed_list, dim=-1)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_206": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "embed + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.embed_scale * torch.cat(x_embed_list, dim=-1)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_372": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "embed + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.embed_scale * torch.cat(x_embed_list, dim=-1)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_379": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "embed + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.embed_scale * torch.cat(x_embed_list, dim=-1)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_381": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "embed + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.embed_scale * torch.cat(x_embed_list, dim=-1)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_522": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "embed + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.embed_scale * torch.cat(x_embed_list, dim=-1)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_551": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "embed + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.embed_scale * torch.cat(x_embed_list, dim=-1)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_553": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "embed + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.embed_scale * torch.cat(x_embed_list, dim=-1)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "embedded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_embed_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_544": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "embed + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.embed_scale * torch.cat(x_embed_list, dim=-1)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.self_attn_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.activation_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "triu_568": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(tensor.new(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "triu_572": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(self._future_mask.resize_(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_241": {
                "variable": {
                    "value": "self.embed_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(len(dictionary), self.output_embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_197": {
                "tensors": {
                    "value": "x_embed_list",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linear_292": {
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.embed_tokens",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_290": {
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.embed_tokens.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_284": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features[:, :, sidx:eidx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "emb.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_286": {
                "input": {
                    "value": "features[:, :, sidx:eidx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "emb.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/model_parallel/models/pipeline_parallel_transformer/model.py": {
        "torch": {
            "zeros_487": {
                "variable": {
                    "value": "dummy_prev_output_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "src_tokens.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "src_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_462": {
                "variable": {
                    "value": "self.encoder_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*encoder_module_list[1:-1]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_604": {
                "variable": {
                    "value": "self.decoder_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*decoder_module_list[1:-1]",
                    "type": null,
                    "possible_values": []
                }
            },
            "triu_669": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(tensor.new(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "*args": {
                    "value": "*module_list",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_211": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linear_646": {
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.embed_tokens.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_648": {
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_454": {
                "*args": {
                    "value": "*encoder_module_list",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_596": {
                "*args": {
                    "value": "*decoder_module_list",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_701": {}
        }
    },
    "fairseq/model_parallel/models/roberta/model.py": {
        "torch": {
            "ModuleDict_47": {
                "variable": {
                    "value": "self.classification_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_126": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_140": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.classification_heads[classification_head_name](x)",
                            "Call"
                        ],
                        [
                            "self.dense(features)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(x)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "copy_to_model_parallel_region(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.weight)",
                            "Call"
                        ],
                        [
                            "gather_from_model_parallel_region(x).contiguous()",
                            "Call"
                        ],
                        [
                            "x + self.bias",
                            "BinOp"
                        ],
                        [
                            "features[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x, masked_tokens=masked_tokens)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_155": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "pooler_dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_156": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inner_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_126": {
                "*size": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/model_parallel/models/transformer.py": {
        "torch": {}
    },
    "fairseq/model_parallel/models/transformer_lm.py": {
        "torch": {}
    },
    "fairseq/model_parallel/modules/multihead_attention.py": {
        "torch": {
            "bmm_236": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.q_proj(query)",
                            "Call"
                        ],
                        [
                            "q * self.scaling",
                            "BinOp"
                        ],
                        [
                            "q.contiguous().view(tgt_len, bsz * self.num_heads_partition, self.head_dim).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.q_proj(query)",
                            "Call"
                        ],
                        [
                            "self.q_proj(query)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_273": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dropout_module(attn_weights)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.v_proj(query)",
                            "Call"
                        ],
                        [
                            "self.v_proj(key)",
                            "Call"
                        ],
                        [
                            "self.v_proj(value)",
                            "Call"
                        ],
                        [
                            "v.contiguous().view(-1, bsz * self.num_heads_partition, self.head_dim).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "prev_value",
                            "Name"
                        ],
                        [
                            "torch.cat([prev_value, v], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_300": {
                "variable": {
                    "value": "new_key_padding_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_key_padding_mask.float(), key_padding_mask.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_key, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_199": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_value, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_308": {
                "variable": {
                    "value": "filler",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "src_len - prev_key_padding_mask.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_311": {
                "variable": {
                    "value": "new_key_padding_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_key_padding_mask.float(), filler.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_315": {
                "variable": {
                    "value": "filler",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "src_len - key_padding_mask.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_318": {
                "variable": {
                    "value": "new_key_padding_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[filler.float(), key_padding_mask.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/model_parallel/modules/transformer_sentence_encoder.py": {
        "torch": {}
    },
    "fairseq/model_parallel/modules/transformer_sentence_encoder_layer.py": {
        "torch": {}
    },
    "fairseq/models/bart/hub_interface.py": {
        "torch": {
            "log_softmax_201": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model.classification_heads[head](sentence_representation)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/bart/model.py": {
        "torch": {
            "ModuleDict_43": {
                "variable": {
                    "value": "self.classification_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_281": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "inner_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.dense.weight'].size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_283": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "pooler_dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_284": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inner_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.dense.weight'].size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.out_proj.weight'].size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_233": {
                "variable": {
                    "value": "new_lang_embed_to_add",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_langids_to_add",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(self.encoder.dictionary) - loaded_dict_size",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state_dict['encoder.embed_tokens.weight'].size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_239": {
                "variable": {
                    "value": "state_dict[encoder.embed_tokens.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state_dict['encoder.embed_tokens.weight'][:loaded_dict_size - 1, :], new_lang_embed_to_add, loaded_mask_token_embedding.unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "state_dict[decoder.embed_tokens.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state_dict['decoder.embed_tokens.weight'][:loaded_dict_size - 1, :], new_lang_embed_to_add, loaded_mask_token_embedding.unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "spectral_norm_287": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/distributed_fairseq_model.py": {
        "torch": {}
    },
    "fairseq/models/fairseq_decoder.py": {
        "torch": {}
    },
    "fairseq/models/fairseq_encoder.py": {
        "torch": {}
    },
    "fairseq/models/fairseq_incremental_decoder.py": {
        "torch": {}
    },
    "fairseq/models/fairseq_model.py": {
        "torch": {
            "ModuleDict_375": {
                "variable": {
                    "value": "self.models",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{key: FairseqEncoderDecoderModel(encoders[key], decoders[key]) for key in self.keys}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "is_tensor_543": {
                "obj": {
                    "value": "encoder_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.encoder(src_tokens, src_lengths=src_lengths, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.encoder(src_tokens, src_lengths=src_lengths, **kwargs)",
                            "Call"
                        ],
                        [
                            "net_output['encoder_out']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_tensor_71": {
                "obj": {
                    "value": "net_output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "remove_weight_norm_162": {
                "module": {
                    "value": "module",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_546": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net_output.float()",
                            "Call"
                        ],
                        [
                            "encoder_out.float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_548": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net_output.float()",
                            "Call"
                        ],
                        [
                            "encoder_out.float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_76": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net_output.float()",
                            "Call"
                        ],
                        [
                            "encoder_out.float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_78": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net_output.float()",
                            "Call"
                        ],
                        [
                            "encoder_out.float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/fconv.py": {
        "torch": {
            "Embedding_658": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "len(dictionary)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dictionary.pad()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_673": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_191": {
                "variable": {
                    "value": "self.projections",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_192": {
                "variable": {
                    "value": "self.convolutions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_352": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(sz[0] * sz[1], sz[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_435": {
                "variable": {
                    "value": "self.projections",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_436": {
                "variable": {
                    "value": "self.convolutions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_437": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "weight_norm_676": {
                "module": {
                    "value": "m",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.Embedding(num_embeddings, embedding_dim, padding_idx=padding_idx)",
                            "Call"
                        ],
                        [
                            "LearnedPositionalEmbedding(num_embeddings, embedding_dim, padding_idx)",
                            "Call"
                        ],
                        [
                            "nn.Linear(in_features, out_features)",
                            "Call"
                        ],
                        [
                            "LinearizedConvolution(in_channels, out_channels, kernel_size, **kwargs)",
                            "Call"
                        ],
                        [
                            "ConvTBC(in_channels, out_channels, kernel_size, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "weight_norm_685": {
                "module": {
                    "value": "m",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.Embedding(num_embeddings, embedding_dim, padding_idx=padding_idx)",
                            "Call"
                        ],
                        [
                            "LearnedPositionalEmbedding(num_embeddings, embedding_dim, padding_idx)",
                            "Call"
                        ],
                        [
                            "nn.Linear(in_features, out_features)",
                            "Call"
                        ],
                        [
                            "LinearizedConvolution(in_channels, out_channels, kernel_size, **kwargs)",
                            "Call"
                        ],
                        [
                            "ConvTBC(in_channels, out_channels, kernel_size, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_696": {
                "module": {
                    "value": "m",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.Embedding(num_embeddings, embedding_dim, padding_idx=padding_idx)",
                            "Call"
                        ],
                        [
                            "LearnedPositionalEmbedding(num_embeddings, embedding_dim, padding_idx)",
                            "Call"
                        ],
                        [
                            "nn.Linear(in_features, out_features)",
                            "Call"
                        ],
                        [
                            "LinearizedConvolution(in_channels, out_channels, kernel_size, **kwargs)",
                            "Call"
                        ],
                        [
                            "ConvTBC(in_channels, out_channels, kernel_size, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "glu_281": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "(self.in_projection(x) + target_embedding) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.bmm(x, encoder_out[0])",
                            "Call"
                        ],
                        [
                            "x.float().masked_fill(encoder_padding_mask.unsqueeze(1), float('-inf')).type_as(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x.view(sz[0] * sz[1], sz[2]), dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(sz)",
                            "Call"
                        ],
                        [
                            "self.bmm(x, encoder_out[1])",
                            "Call"
                        ],
                        [
                            "x * (s * math.sqrt(1.0 / s))",
                            "BinOp"
                        ],
                        [
                            "x * (s * s.rsqrt())",
                            "BinOp"
                        ],
                        [
                            "(self.out_projection(x) + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self._embed_tokens(prev_output_tokens, incremental_state)",
                            "Call"
                        ],
                        [
                            "x + pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "conv(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "glu_537": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "(self.in_projection(x) + target_embedding) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.bmm(x, encoder_out[0])",
                            "Call"
                        ],
                        [
                            "x.float().masked_fill(encoder_padding_mask.unsqueeze(1), float('-inf')).type_as(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x.view(sz[0] * sz[1], sz[2]), dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(sz)",
                            "Call"
                        ],
                        [
                            "self.bmm(x, encoder_out[1])",
                            "Call"
                        ],
                        [
                            "x * (s * math.sqrt(1.0 / s))",
                            "BinOp"
                        ],
                        [
                            "x * (s * s.rsqrt())",
                            "BinOp"
                        ],
                        [
                            "(self.out_projection(x) + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self._embed_tokens(prev_output_tokens, incremental_state)",
                            "Call"
                        ],
                        [
                            "x + pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "conv(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_279": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "(self.in_projection(x) + target_embedding) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.bmm(x, encoder_out[0])",
                            "Call"
                        ],
                        [
                            "x.float().masked_fill(encoder_padding_mask.unsqueeze(1), float('-inf')).type_as(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x.view(sz[0] * sz[1], sz[2]), dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(sz)",
                            "Call"
                        ],
                        [
                            "self.bmm(x, encoder_out[1])",
                            "Call"
                        ],
                        [
                            "x * (s * math.sqrt(1.0 / s))",
                            "BinOp"
                        ],
                        [
                            "x * (s * s.rsqrt())",
                            "BinOp"
                        ],
                        [
                            "(self.out_projection(x) + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self._embed_tokens(prev_output_tokens, incremental_state)",
                            "Call"
                        ],
                        [
                            "x + pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "conv(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "self._transpose_if_training(x, incremental_state)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, 0, padding_l, padding_r)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_485": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_embeddings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "len(dictionary)",
                            "Call"
                        ]
                    ]
                }
            },
            "weight_norm_597": {
                "variable": {
                    "value": "self.convolutions[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "module": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "remove_weight_norm_596": {
                "module": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_592": {}
        }
    },
    "fairseq/models/fconv_self_att.py": {
        "torch": {
            "Embedding_594": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "len(dictionary)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dictionary.pad()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_607": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_211": {
                "variable": {
                    "value": "self.projections",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_212": {
                "variable": {
                    "value": "self.convolutions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_213": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_214": {
                "variable": {
                    "value": "self.attproj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_371": {
                "variable": {
                    "value": "self.projections",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_372": {
                "variable": {
                    "value": "self.convolutions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_373": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_374": {
                "variable": {
                    "value": "self.selfattention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_375": {
                "variable": {
                    "value": "self.attproj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_262": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "attention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens) + positions",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "x + r",
                            "BinOp"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "selfattention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, 0, padding_l, padding_r)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "glu_264": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "attention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens) + positions",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "x + r",
                            "BinOp"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "selfattention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_430": {
                "variable": {
                    "value": "self.gate1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(out_embed_dim * 2, out_embed_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_433": {
                "variable": {
                    "value": "self.gate2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(out_embed_dim * 2, out_embed_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_437": {
                "variable": {
                    "value": "self.joining",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(out_embed_dim * 2, out_embed_dim * 2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "glu_493": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens) + self.embed_positions(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, padding_r))",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.unsqueeze(-1), 0)",
                            "Call"
                        ],
                        [
                            "GradMultiply.apply(x, 1.0 / (2.0 * self.num_attention_layers))",
                            "Call"
                        ],
                        [
                            "attention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens) + positions",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "F.glu(x, dim=2)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "x + r",
                            "BinOp"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "selfattention(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_527": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, self.pretrained_outputs['out']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_532": {
                "variable": {
                    "value": "fusion",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gated_x1, gated_x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sigmoid_431": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_434": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GLU_440": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GLU_443": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/huggingface/hf_gpt2.py": {
        "torch": {
            "arange_112": {
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1 + prev_output_tokens.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/lightconv.py": {
        "torch": {
            "Embedding_891": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dictionary.pad()",
                            "Call"
                        ],
                        [
                            "embed_tokens.padding_idx",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_898": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_344": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_474": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_673": {
                "variable": {
                    "value": "self.layer_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[LayerNorm(self.embed_dim) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "relu_701": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_861": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "triu_605": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(tensor.new(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "triu_609": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(self._future_mask.resize_(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GLU_635": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GLU_743": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_503": {
                "variable": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(len(dictionary), output_embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_586": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embed_scale * self.embed_tokens(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_out)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.input_dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.transpose(0, 1).unsqueeze(2), 0)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.relu_dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.input_dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x, incremental_state=incremental_state)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.relu_dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_tokens.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_588": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embed_scale * self.embed_tokens(src_tokens)",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.project_out_dim(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_out)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.input_dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(encoder_padding_mask.transpose(0, 1).unsqueeze(2), 0)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.relu_dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.input_dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x, incremental_state=incremental_state)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.conv_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.relu_dropout_module(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.final_layer_norm, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(self.encoder_attn_layer_norm, x, after=True)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/lstm.py": {
        "torch": {
            "Embedding_667": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(task.source_dictionary)",
                            "Call"
                        ],
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "len(dictionary)",
                            "Call"
                        ],
                        [
                            "len(dictionary)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dictionary.pad()",
                            "Call"
                        ],
                        [
                            "dictionary.pad()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTM_674": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTMCell_682": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_691": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_293": {
                "variable": {
                    "value": "packed_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "self.dropout_in_module(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout_out_module(x)",
                            "Call"
                        ],
                        [
                            "self.input_proj(input)",
                            "Call"
                        ],
                        [
                            "(attn_scores.unsqueeze(2) * source_hids).sum(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.output_proj(torch.cat((x, input), dim=1)))",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "self.dropout_in_module(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(outs, dim=0).view(seqlen, bsz, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.additional_fc(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_out_module(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "src_lengths.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "enforce_sorted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_307": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.padding_idx * 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_374": {
                "variable": {
                    "value": "attn_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(source_hids * x.unsqueeze(0)).sum(dim=2)",
                            "Call"
                        ],
                        [
                            "attn_scores.float().masked_fill_(encoder_padding_mask, float('-inf')).type_as(attn_scores)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_scores, dim=0)",
                            "Call"
                        ],
                        [
                            "x.new_zeros(srclen, seqlen, bsz) if self.attention is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "attn_scores.transpose(0, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_379": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_proj(torch.cat((x, input), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_435": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[LSTMCell(input_size=input_feed_size + embed_dim if layer == 0 else hidden_size, hidden_size=hidden_size) for layer in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_580": {
                "variable": {
                    "value": "prev_hiddens_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "prev_hiddens",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[encoder_hiddens[i] for i in range(self.num_layers)]",
                            "ListComp"
                        ],
                        [
                            "[zero_state for i in range(self.num_layers)]",
                            "ListComp"
                        ],
                        [
                            "[self.encoder_hidden_proj(y) for y in prev_hiddens]",
                            "ListComp"
                        ],
                        [
                            "[prev_hiddens_[i] for i in range(self.num_layers)]",
                            "ListComp"
                        ],
                        [
                            "[p.index_select(0, new_order) for p in prev_hiddens]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "stack_581": {
                "variable": {
                    "value": "prev_cells_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "prev_cells",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[encoder_cells[i] for i in range(self.num_layers)]",
                            "ListComp"
                        ],
                        [
                            "[zero_state for i in range(self.num_layers)]",
                            "ListComp"
                        ],
                        [
                            "[self.encoder_cell_proj(y) for y in prev_cells]",
                            "ListComp"
                        ],
                        [
                            "[prev_cells_[j] for j in range(self.num_layers)]",
                            "ListComp"
                        ],
                        [
                            "[p.index_select(0, new_order) for p in prev_cells]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "annotate_582": {
                "variable": {
                    "value": "cache_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "the_type": {
                    "value": "Dict[str, Optional[Tensor]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "{'prev_hiddens': prev_hiddens_tensor, 'prev_cells': prev_cells_tensor, 'input_feed': input_feed}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "cat_593": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "annotate_647": {
                "variable": {
                    "value": "cached_state_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "the_type": {
                    "value": "Dict[str, Optional[Tensor]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "{'prev_hiddens': torch.stack(prev_hiddens), 'prev_cells': torch.stack(prev_cells), 'input_feed': input_feed}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "empty_497": {
                "variable": {
                    "value": "encoder_outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_498": {
                "variable": {
                    "value": "encoder_hiddens",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_499": {
                "variable": {
                    "value": "encoder_cells",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_500": {
                "variable": {
                    "value": "encoder_padding_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_545": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x[j, :, :], input_feed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linear_613": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embed_tokens(src_tokens)",
                            "Call"
                        ],
                        [
                            "self.dropout_in_module(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout_out_module(x)",
                            "Call"
                        ],
                        [
                            "self.input_proj(input)",
                            "Call"
                        ],
                        [
                            "(attn_scores.unsqueeze(2) * source_hids).sum(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.output_proj(torch.cat((x, input), dim=1)))",
                            "Call"
                        ],
                        [
                            "self.embed_tokens(prev_output_tokens)",
                            "Call"
                        ],
                        [
                            "self.dropout_in_module(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(outs, dim=0).view(seqlen, bsz, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "self.additional_fc(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_out_module(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "self.fc_out(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_tokens.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_279": {
                "input": {
                    "value": "src_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "utils.convert_padding_direction(src_tokens, torch.zeros_like(src_tokens).fill_(self.padding_idx), left_to_right=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_379": {
                "tensors": {
                    "value": "(x, input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_650": {
                "tensors": {
                    "value": "prev_hiddens",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[encoder_hiddens[i] for i in range(self.num_layers)]",
                            "ListComp"
                        ],
                        [
                            "[zero_state for i in range(self.num_layers)]",
                            "ListComp"
                        ],
                        [
                            "[self.encoder_hidden_proj(y) for y in prev_hiddens]",
                            "ListComp"
                        ],
                        [
                            "[prev_hiddens_[i] for i in range(self.num_layers)]",
                            "ListComp"
                        ],
                        [
                            "[p.index_select(0, new_order) for p in prev_hiddens]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "stack_651": {
                "tensors": {
                    "value": "prev_cells",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[encoder_cells[i] for i in range(self.num_layers)]",
                            "ListComp"
                        ],
                        [
                            "[zero_state for i in range(self.num_layers)]",
                            "ListComp"
                        ],
                        [
                            "[self.encoder_cell_proj(y) for y in prev_cells]",
                            "ListComp"
                        ],
                        [
                            "[prev_cells_[j] for j in range(self.num_layers)]",
                            "ListComp"
                        ],
                        [
                            "[p.index_select(0, new_order) for p in prev_cells]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/models/masked_lm.py": {
        "torch": {
            "Linear_210": {
                "variable": {
                    "value": "self.masked_lm_pooler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_215": {
                "variable": {
                    "value": "self.lm_head_transform_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_223": {
                "variable": {
                    "value": "self.lm_output_learned_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_276": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inner_states[-1].transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x[masked_tokens, :]",
                            "Subscript"
                        ],
                        [
                            "self.layer_norm(self.activation_fn(self.lm_head_transform_weight(x)))",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.sentence_encoder.embed_tokens.weight)",
                            "Call"
                        ],
                        [
                            "self.embed_out(x)",
                            "Call"
                        ],
                        [
                            "x + self.lm_output_learned_bias",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.sentence_encoder.embed_tokens.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_226": {
                "variable": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_231": {
                "variable": {
                    "value": "self.sentence_projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.sentence_out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_223": {
                "*size": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/model_utils.py": {
        "torch": {
            "cat_52": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, torch.zeros(dims).to(x).fill_(padding_idx)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "x[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "padding_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "*size": {
                    "value": "dims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x.size(0), trg_dim - x.size(1)]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/models/nat/fairseq_nat_model.py": {
        "torch": {
            "stack_26": {
                "tensors": {
                    "value": "outs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[getattr(e, key) for e in encoder_outs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_66": {
                "input": {
                    "value": "torch.stack([a[i] for a in action_outs], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_72": {
                "tensors": {
                    "value": "[a[i] for a in action_outs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_67": {
                "tensors": {
                    "value": "[a[i] for a in action_outs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/nat/insertion_transformer.py": {
        "torch": {
            "cat_115": {
                "variable": {
                    "value": "out_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[in_tokens, word_ins_pred]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_115": {
                "variable": {
                    "value": "out_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "out_coords",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(in_coords[:, 1:] - 0.5).masked_fill(word_ins_pred.eq(padding_idx), float('inf'))",
                            "Call"
                        ],
                        [
                            "torch.cat([in_coords, out_coords], 1).sort(-1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_116": {
                "variable": {
                    "value": "out_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[in_scores, word_ins_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_116": {
                "variable": {
                    "value": "out_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "out_coords",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(in_coords[:, 1:] - 0.5).masked_fill(word_ins_pred.eq(padding_idx), float('inf'))",
                            "Call"
                        ],
                        [
                            "torch.cat([in_coords, out_coords], 1).sort(-1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_of_68": {
                "obj": {
                    "value": "in_tokens",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "data": {
                    "value": "list(a)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "in_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_114": {
                "tensors": {
                    "value": "[in_coords, out_coords]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_114": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_228": {
                "tensors": {
                    "value": "[features[:, :-1, :], features[:, 1:, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_231": {
                "input": {
                    "value": "decoder_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.output_layer(features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/nat/iterative_nonautoregressive_transformer.py": {
        "torch": {
            "randint_14": {
                "variable": {
                    "value": "rand_words",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "s.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "s.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_15": {
                "variable": {
                    "value": "choices",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "s.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "s.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "word_ins_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "word_ins_outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "word_ins_tgt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "word_ins_tgts",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "word_ins_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "word_ins_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_136": {
                "size": {
                    "value": "(B,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "prev_output_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/nat/levenshtein_transformer.py": {
        "torch": {
            "cat_387": {
                "variable": {
                    "value": "features_cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features[:, :-1, :], features[:, 1:, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linear_388": {
                "variable": {
                    "value": "decoder_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_cat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([features[:, :-1, :], features[:, 1:, :]], 2)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_mask_ins.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_416": {
                "variable": {
                    "value": "decoder_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.embed_word_del.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_99": {
                "variable": {
                    "value": "word_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(word_ins_out, -1).view(-1, word_ins_out.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_150": {
                "variable": {
                    "value": "max_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_tokens",
                    "type": "Call",
                    "possible_values": [
                        [
                            "decoder_out.output_tokens",
                            "Attribute"
                        ],
                        [
                            "_fill(output_tokens, can_del_word, _tokens, self.pad)",
                            "Call"
                        ],
                        [
                            "_fill(output_tokens, can_ins_mask, _tokens, self.pad)",
                            "Call"
                        ],
                        [
                            "_fill(output_tokens, can_ins_word, _tokens, self.pad)",
                            "Call"
                        ],
                        [
                            "output_tokens[:, :cut_off]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_197": {
                "variable": {
                    "value": "mask_ins_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_ins_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mask_ins_score.max(-1)[1]",
                            "Subscript"
                        ],
                        [
                            "torch.min(mask_ins_pred, max_lens[can_ins_mask, None].expand_as(mask_ins_pred))",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_291": {
                "variable": {
                    "value": "self.layers_msk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerDecoderLayer(args, no_encoder_attn) for _ in range(self.early_exit[1])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_299": {
                "variable": {
                    "value": "self.layers_del",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerDecoderLayer(args, no_encoder_attn) for _ in range(self.early_exit[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "log_softmax_103": {
                "input": {
                    "value": "word_ins_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_103": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_390": {
                "input": {
                    "value": "decoder_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.linear(features_cat, self.embed_mask_ins.weight)",
                            "Call"
                        ],
                        [
                            "self.output_layer(features)",
                            "Call"
                        ],
                        [
                            "F.linear(features, self.embed_word_del.weight)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_404": {
                "input": {
                    "value": "decoder_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.linear(features_cat, self.embed_mask_ins.weight)",
                            "Call"
                        ],
                        [
                            "self.output_layer(features)",
                            "Call"
                        ],
                        [
                            "F.linear(features, self.embed_word_del.weight)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_418": {
                "input": {
                    "value": "decoder_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.linear(features_cat, self.embed_mask_ins.weight)",
                            "Call"
                        ],
                        [
                            "self.output_layer(features)",
                            "Call"
                        ],
                        [
                            "F.linear(features, self.embed_word_del.weight)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_100": {
                "input": {
                    "value": "word_ins_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/nat/levenshtein_utils.py": {
        "torch": {
            "tensor_92": {
                "variable": {
                    "value": "masked_tgt_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "masked_tgt_masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "masked_tgt_masks.bool() & out_masks",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(masked_tgt_masks, device=out_tokens.device).bool()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "out_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "mask_ins_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask_ins_targets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mask_ins_targets.type_as(in_tokens)[:, 1:in_masks.size(1)].masked_fill_(~in_masks[:, 1:], 0)",
                            "Call"
                        ],
                        [
                            "[mask_input[1:-1] + [0 for _ in range(in_seq_len - 1 - len(mask_input[1:-1]))] for mask_input in mask_inputs]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(mask_ins_targets, device=in_tokens.device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "in_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_147": {
                "variable": {
                    "value": "word_del_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "word_del_targets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "libnat.generate_deletion_labels(in_tokens.int(), libnat.levenshtein_distance(in_tokens.int(), out_tokens.int(), in_masks.sum(1).int(), out_masks.sum(1).int()))",
                            "Call"
                        ],
                        [
                            "word_del_targets.type_as(in_tokens).masked_fill_(~in_masks, 0)",
                            "Call"
                        ],
                        [
                            "[b[-1] for b in full_labels]",
                            "ListComp"
                        ],
                        [
                            "[labels + [0 for _ in range(out_seq_len - len(labels))] for labels in word_del_targets]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(word_del_targets, device=out_tokens.device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "out_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x.new_zeros(*dims).fill_(padding_idx)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_of_127": {
                "obj": {
                    "value": "in_tokens",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/nat/nonautoregressive_ensembles.py": {
        "torch": {
            "ModuleList_37": {
                "variable": {
                    "value": "self.models",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "models",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_202": {
                "variable": {
                    "value": "mask_ins_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_ins_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mask_ins_score_avg.max(-1)[1]",
                            "Subscript"
                        ],
                        [
                            "torch.min(mask_ins_pred, max_lens[can_ins_mask, None].expand_as(mask_ins_pred))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_153": {
                "variable": {
                    "value": "word_del_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_del_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_194": {
                "variable": {
                    "value": "mask_ins_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_ins_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_227": {
                "variable": {
                    "value": "word_ins_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_ins_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logsumexp_156": {
                "input": {
                    "value": "torch.stack(word_del_score_avg, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logsumexp_198": {
                "input": {
                    "value": "torch.stack(mask_ins_score_avg, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logsumexp_230": {
                "input": {
                    "value": "torch.stack(word_ins_score_avg, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_157": {
                "tensors": {
                    "value": "word_del_score_avg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.logsumexp(torch.stack(word_del_score_avg, dim=0), dim=0) - math.log(len(self.models))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_161": {
                "tensors": {
                    "value": "word_del_attn_avg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(word_del_attn_avg, dim=0) / len(self.models)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_199": {
                "tensors": {
                    "value": "mask_ins_score_avg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.logsumexp(torch.stack(mask_ins_score_avg, dim=0), dim=0) - math.log(len(self.models))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_231": {
                "tensors": {
                    "value": "word_ins_score_avg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.logsumexp(torch.stack(word_ins_score_avg, dim=0), dim=0) - math.log(len(self.models))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_234": {
                "tensors": {
                    "value": "word_ins_attn_avg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(word_ins_attn_avg, dim=0) / len(self.models)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/nat/nonautoregressive_transformer.py": {
        "torch": {
            "round_39": {
                "variable": {
                    "value": "index_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "index_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "utils.new_arange(trg_lens, max_trg_len).float()",
                            "Call"
                        ],
                        [
                            "steps[:, None] * index_t[None, :]",
                            "BinOp"
                        ],
                        [
                            "torch.round(index_t).long().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_241": {
                "variable": {
                    "value": "length_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_feats",
                    "type": "Call",
                    "possible_values": [
                        [
                            "enc_feats.mean(0)",
                            "Call"
                        ],
                        [
                            "(enc_feats / src_masks.sum(0)[None, :, None] * src_masks[:, :, None]).sum(0)",
                            "Call"
                        ],
                        [
                            "encoder_out.encoder_out",
                            "Attribute"
                        ],
                        [
                            "_mean_pooling(enc_feats, src_masks)",
                            "Call"
                        ],
                        [
                            "enc_feats.detach()",
                            "Call"
                        ],
                        [
                            "encoder_out.encoder_out",
                            "Attribute"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embed_length.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_346": {
                "variable": {
                    "value": "copied_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "mapped_inputs.unsqueeze(-1).expand(*mapped_inputs.size(), src_embeds.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_232": {
                "input": {
                    "value": "decoder_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.output_layer(features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_242": {
                "input": {
                    "value": "length_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.decoder.forward_length(normalize=False, encoder_out=encoder_out)",
                            "Call"
                        ],
                        [
                            "F.linear(enc_feats, self.embed_length.weight)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/roberta/alignment_utils.py": {
        "torch": {
            "stack_95": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[weighted_features[0]]",
                            "List"
                        ],
                        [
                            "torch.stack(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_96": {
                "input": {
                    "value": "torch.abs(output.sum(dim=0) - features.sum(dim=0)) < 0.0001",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "abs_96": {
                "input": {
                    "value": "output.sum(dim=0) - features.sum(dim=0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/roberta/hub_interface.py": {
        "torch": {
            "log_softmax_117": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model.classification_heads[head](features)",
                            "Call"
                        ],
                        [
                            "features[0, masked_index, :].squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/roberta/model.py": {
        "torch": {
            "ModuleDict_49": {
                "variable": {
                    "value": "self.classification_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_331": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_338": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_369": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "inner_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.dense.weight'].size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_371": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "pooler_dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "spectral_norm_380": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_200": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_output[0].float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_202": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_output[0].float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_338": {
                "*size": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linear_350": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.classification_heads[classification_head_name](x)",
                            "Call"
                        ],
                        [
                            "hub_utils.from_pretrained(model_name_or_path, checkpoint_file, data_name_or_path, archive_map=cls.hub_models(), bpe=bpe, load_checkpoint_heads=True, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.dense(features)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(x)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "features[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x, masked_tokens=masked_tokens)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_373": {
                "in_features": {
                    "value": "inner_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.dense.weight'].size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state_dict[prefix + 'classification_heads.' + head_name + '.out_proj.weight'].size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_336": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/speech_to_text/berard.py": {
        "torch": {
            "ModuleList_203": {
                "variable": {
                    "value": "self.input_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_219": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_239": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "lstm_input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_layers[-1]",
                            "Subscript"
                        ],
                        [
                            "lstm_input_dim * conv_layers[-1][0]",
                            "BinOp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "lstm_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_blstm_layers",
                    "type": "Variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_285": {
                "variable": {
                    "value": "packed_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "src_tokens.view(bsz, max_seq_len, self.in_channels, self.input_dim).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "input_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "conv_layer(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).transpose(0, 1).contiguous().view(output_seq_len, bsz, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "embeddings",
                            "Name"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(outs, dim=0).view(seqlen, bsz, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, attention_outs_concat, embeddings), dim=2)",
                            "Call"
                        ],
                        [
                            "self.deep_output_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.output_projection(x)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lengths",
                    "type": "Call",
                    "possible_values": [
                        [
                            "src_lengths.clone()",
                            "Call"
                        ],
                        [
                            "(input_lengths.float() + 2 * p - k) / s + 1",
                            "BinOp"
                        ],
                        [
                            "input_lengths.floor().long()",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_292": {
                "variable": {
                    "value": "(x, output_lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_outs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_329": {
                "variable": {
                    "value": "self.encoder_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "context_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.attention_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_331": {
                "variable": {
                    "value": "self.decoder_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "decoder_hidden_state_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.attention_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_335": {
                "variable": {
                    "value": "self.to_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.attention_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_354": {
                "variable": {
                    "value": "hidden_att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(decoder_component + encoder_component).view(-1, self.attention_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_368": {
                "variable": {
                    "value": "normalized_masked_attn_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.to_scores(hidden_att).view(src_len, bsz)",
                            "Call"
                        ],
                        [
                            "attn_scores.float().masked_fill_(encoder_padding_mask, float('-inf')).type_as(attn_scores)",
                            "Call"
                        ],
                        [
                            "x.new_zeros(bsz, srclen)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_409": {
                "variable": {
                    "value": "self.embed_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dictionary.pad()",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_415": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_429": {
                "variable": {
                    "value": "self.deep_output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size + encoder_output_dim + embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_layer_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_432": {
                "variable": {
                    "value": "self.output_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_layer_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_505": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_506": {
                "variable": {
                    "value": "attention_outs_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attention_outs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_516": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, attention_outs_concat, embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_518": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "src_tokens.view(bsz, max_seq_len, self.in_channels, self.input_dim).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "input_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "conv_layer(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).transpose(0, 1).contiguous().view(output_seq_len, bsz, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "embeddings",
                            "Name"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(outs, dim=0).view(seqlen, bsz, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, attention_outs_concat, embeddings), dim=2)",
                            "Call"
                        ],
                        [
                            "self.deep_output_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.output_projection(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_248": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_268": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "src_tokens.view(bsz, max_seq_len, self.in_channels, self.input_dim).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "input_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "conv_layer(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).transpose(0, 1).contiguous().view(output_seq_len, bsz, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "embeddings",
                            "Name"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(outs, dim=0).view(seqlen, bsz, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, attention_outs_concat, embeddings), dim=2)",
                            "Call"
                        ],
                        [
                            "self.deep_output_layer(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.output_projection(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_411": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_224": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv_kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv_stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "conv_kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LSTMCell_419": {
                "input_size": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embed_dim if layer_id == 0 else encoder_output_dim",
                            "IfExp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_208": {
                "*args": {
                    "value": "nn.Linear(in_features, out_features)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_213": {
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_feat_per_channel",
                            "Name"
                        ],
                        [
                            "out_features",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_layers",
                            "Name"
                        ]
                    ]
                }
            },
            "Linear_209": {
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_feat_per_channel",
                            "Name"
                        ],
                        [
                            "out_features",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_layers",
                            "Name"
                        ]
                    ]
                }
            },
            "Dropout_209": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/speech_to_text/s2t_transformer.py": {
        "torch": {
            "ModuleList_52": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(nn.Conv1d(in_channels if i == 0 else mid_channels // 2, mid_channels if i < self.n_layers - 1 else out_channels * 2, k, stride=2, padding=k // 2) for (i, k) in enumerate(kernel_sizes))",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "ModuleList_286": {
                "variable": {
                    "value": "self.transformer_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerEncoderLayer(args) for _ in range(args.encoder_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "glu_74": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "src_tokens.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.glu(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.embed_scale * x",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.dropout_module(x)",
                            "Call"
                        ],
                        [
                            "layer(x, encoder_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_53": {
                "in_channels": {
                    "value": "in_channels if i == 0 else mid_channels // 2",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_channels if i < self.n_layers - 1 else out_channels * 2",
                    "type": "IfExp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "k // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/transformer.py": {
        "torch": {
            "Embedding_1242": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dictionary.pad()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_1249": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_657": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_463": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_713": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_779": {
                "variable": {
                    "value": "self.retrieve_result_to_k_and_lambda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(args.max_k if not self.label_count_as_feature else args.max_k * 2, args.k_lambda_net_hid_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "triu_1143": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(torch.zeros([dim, dim]))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_748": {
                "variable": {
                    "value": "self.output_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed_tokens.weight.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_tokens.weight.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_755": {
                "variable": {
                    "value": "self.output_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.output_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(dictionary)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_796": {
                "variable": {
                    "value": "self.knn_distances_to_lambda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(args.k if not self.label_count_as_feature else args.k * 2, args.knn_lambda_net_hid_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_816": {
                "variable": {
                    "value": "self.knn_distance_to_temperature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(args.k + 2, args.knn_temperature_net_hid_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_828": {
                "variable": {
                    "value": "self.knn_distance_to_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(args.max_k * 2 if self.label_count_as_feature else args.max_k, args.knn_k_net_hid_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_906": {
                "variable": {
                    "value": "network_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(knn_dists.detach(), label_counts.detach().float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_453": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "args.decoder_embed_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "args.decoder_embed_dim",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_679": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "args.decoder_embed_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "embed_tokens.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "args.decoder_embed_dim",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_780": {
                "in_features": {
                    "value": "args.max_k if not self.label_count_as_feature else args.max_k * 2",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.k_lambda_net_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_782": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_783": {
                "p": {
                    "value": "args.k_lambda_net_dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_784": {
                "in_features": {
                    "value": "args.k_lambda_net_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 + int(math.log(args.max_k, 2))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_785": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_925": {
                "variable": {
                    "value": "k_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_outputs",
                            "Name"
                        ],
                        [
                            "torch.zeros_like(k_prob).fill_(1.0 / k_prob.size(-1))",
                            "Call"
                        ],
                        [
                            "self.knn_distance_to_k(network_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_1231": {
                "input": {
                    "value": "probs",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "network_probs * (1 - knn_lambda) + knn_probs * knn_lambda",
                            "BinOp"
                        ],
                        [
                            "network_probs * (1 - knn_lambda) + knn_probs",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_797": {
                "in_features": {
                    "value": "args.k if not self.label_count_as_feature else args.k * 2",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.knn_lambda_net_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_798": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_799": {
                "p": {
                    "value": "args.knn_net_dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_800": {
                "in_features": {
                    "value": "args.knn_lambda_net_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_801": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_817": {
                "in_features": {
                    "value": "args.k + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.knn_temperature_net_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_818": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_819": {
                "in_features": {
                    "value": "args.knn_temperature_net_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_820": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_829": {
                "in_features": {
                    "value": "args.max_k * 2 if self.label_count_as_feature else args.max_k",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.knn_k_net_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_831": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_832": {
                "p": {
                    "value": "args.knn_k_net_dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_834": {
                "in_features": {
                    "value": "args.knn_k_net_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.max_k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_835": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_950": {
                "variable": {
                    "value": "k_log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_outputs",
                            "Name"
                        ],
                        [
                            "torch.zeros_like(k_prob).fill_(1.0 / k_prob.size(-1))",
                            "Call"
                        ],
                        [
                            "self.knn_distance_to_k(network_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "gumbel_softmax_951": {
                "variable": {
                    "value": "k_soft_one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "k_log_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.log(k_prob)",
                            "Call"
                        ]
                    ]
                },
                "tau": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "hard": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_956": {
                "variable": {
                    "value": "(_, max_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "k_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_outputs",
                            "Name"
                        ],
                        [
                            "torch.zeros_like(k_prob).fill_(1.0 / k_prob.size(-1))",
                            "Call"
                        ],
                        [
                            "self.knn_distance_to_k(network_inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_957": {
                "variable": {
                    "value": "k_one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_outputs",
                            "Name"
                        ],
                        [
                            "torch.zeros_like(k_prob).fill_(1.0 / k_prob.size(-1))",
                            "Call"
                        ],
                        [
                            "self.knn_distance_to_k(network_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_960": {
                "variable": {
                    "value": "knn_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_one_hot",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(k_prob)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.knn_datastore.mask_for_distance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1144": {
                "*size": {
                    "value": "[dim, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_632": {},
            "Tensor_1188": {}
        }
    },
    "fairseq/models/wav2vec/wav2vec.py": {
        "torch": {
            "Dropout_340": {
                "variable": {
                    "value": "self.dropout_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_341": {
                "variable": {
                    "value": "self.dropout_agg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout_agg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_408": {
                "variable": {
                    "value": "mod",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "TransposeLast()",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_443": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_516": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_517": {
                "variable": {
                    "value": "self.residual_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_526": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.conv_layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_560": {
                "variable": {
                    "value": "self.project_to_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, prediction_steps)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_563": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_578": {
                "variable": {
                    "value": "neg_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "high",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tsz if self.sample_distance is None else min(tsz, self.sample_distance)",
                            "IfExp"
                        ]
                    ]
                },
                "size": {
                    "value": "(bsz, self.n_negatives * tsz)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_635": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y, negatives]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_227": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_480": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.dropout_feats(features)",
                            "Call"
                        ],
                        [
                            "self.feature_aggregator(x)",
                            "Call"
                        ],
                        [
                            "self.dropout_agg(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * self.residual_scale",
                            "BinOp"
                        ],
                        [
                            "x.abs()",
                            "Call"
                        ],
                        [
                            "x + 1",
                            "BinOp"
                        ],
                        [
                            "x.log()",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) * self.residual_scale",
                            "BinOp"
                        ],
                        [
                            "x.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.project_to_steps(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.pad_left, self.pad_right)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_616": {
                "variable": {
                    "value": "neg_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[neg_idxs, cross_neg_idxs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_650": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.new(bsz * copies * (tsz - self.offset + 1) * steps - (steps + 1) * steps // 2 * copies * bsz)",
                            "Call"
                        ],
                        [
                            "predictions.view(-1, copies)",
                            "Call"
                        ]
                    ]
                }
            },
            "GELU_229": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_433": {
                "*args": {
                    "value": "nn.Conv1d(n_in, n_out, k, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_507": {
                "*args": {
                    "value": "pad",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_580": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randint_589": {
                "variable": {
                    "value": "neg_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "high - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(bsz, self.n_negatives * tsz)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_602": {
                "variable": {
                    "value": "cross_neg_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "cross_high - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(bsz, self.cross_sample_negatives * tsz)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "full_like_652": {
                "input": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "predictions.new_full((predictions.shape[0] // copies,), 0, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(predictions)",
                            "Call"
                        ],
                        [
                            "(labels, weights)",
                            "Tuple"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "1 / self.n_negatives",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_662": {
                "variable": {
                    "value": "predictions[start:end]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "bct,nbct->tbn",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x[..., :-offset, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_662": {
                "variable": {
                    "value": "predictions[start:end]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_667": {
                "variable": {
                    "value": "predictions[start:end]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "equation": {
                    "value": "bct,nbct->nbt",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x[..., :-offset, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_667": {
                "variable": {
                    "value": "predictions[start:end]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_310": {
                "variable": {
                    "value": "feature_aggregator",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "TransposeLast()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_434": {
                "in_channels": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q_res.keys()",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_435": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReplicationPad1d_504": {
                "padding": {
                    "value": "(ka + kb, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_509": {
                "in_channels": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q_res.keys()",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "conv_bias",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_510": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv1d_520": {
                "in_channels": {
                    "value": "in_d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "dim",
                            "Name"
                        ],
                        [
                            "embed",
                            "Name"
                        ],
                        [
                            "dim",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRU_312": {
                "input_size": {
                    "value": "embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feature_enc_layers[-1][0]",
                            "Subscript"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "agg_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "agg_layers[-1][0]",
                            "Subscript"
                        ],
                        [
                            "args.gru_dim",
                            "Attribute"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/wav2vec/wav2vec2.py": {
        "torch": {
            "Dropout_334": {
                "variable": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_335": {
                "variable": {
                    "value": "self.dropout_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_385": {
                "variable": {
                    "value": "self.mask_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(args.encoder_embed_dim).uniform_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_398": {
                "variable": {
                    "value": "self.final_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "final_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.final_dim if args.final_dim > 0 else args.encoder_embed_dim",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_516": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y, negatives]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cosine_similarity_518": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "x.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "targets.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_737": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_773": {
                "variable": {
                    "value": "self.pos_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "args.conv_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "args.conv_pos // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "args.conv_pos_groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_785": {
                "variable": {
                    "value": "self.pos_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.pos_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_786": {
                "variable": {
                    "value": "self.pos_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.pos_conv",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_788": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerSentenceEncoderLayer(embedding_dim=self.embedding_dim, ffn_embedding_dim=args.encoder_ffn_embed_dim, num_attention_heads=args.encoder_attention_heads, dropout=self.dropout, attention_dropout=args.attention_dropout, activation_dropout=args.activation_dropout, activation_fn=args.activation_fn, layer_norm_first=args.layer_norm_first) for _ in range(args.encoder_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dropout_830": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.encoder(x, padding_mask=padding_mask)",
                            "Call"
                        ],
                        [
                            "x[mask_indices].view(x.size(0), -1, x.size(-1))",
                            "Call"
                        ],
                        [
                            "self.final_proj(x)",
                            "Call"
                        ],
                        [
                            "self.compute_preds(x, y, negs)",
                            "Call"
                        ],
                        [
                            "self.feature_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "net_output['x']",
                            "Subscript"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "self.extract_features(x, padding_mask)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x + x_conv",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout3(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.self_attn_layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout3(x)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.final_layer_norm(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_889": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "Dropout_890": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.activation_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_891": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_897": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ffn_embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_898": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ffn_embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_362": {
                "variable": {
                    "value": "self.project_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "vq_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.latent_dim if args.latent_dim > 0 else final_dim",
                            "IfExp"
                        ],
                        [
                            "final_dim",
                            "Name"
                        ],
                        [
                            "args.latent_dim if args.latent_dim > 0 else args.encoder_embed_dim",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "final_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.final_dim if args.final_dim > 0 else args.encoder_embed_dim",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_364": {
                "variable": {
                    "value": "self.project_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "final_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.final_dim if args.final_dim > 0 else args.encoder_embed_dim",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_383": {
                "variable": {
                    "value": "self.project_inp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "vq_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.latent_dim if args.latent_dim > 0 else final_dim",
                            "IfExp"
                        ],
                        [
                            "final_dim",
                            "Name"
                        ],
                        [
                            "args.latent_dim if args.latent_dim > 0 else args.encoder_embed_dim",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "args.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_394": {
                "variable": {
                    "value": "self.target_glu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(final_dim, final_dim * 2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_428": {
                "variable": {
                    "value": "mask_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_indices",
                    "type": "Call",
                    "possible_values": [
                        [
                            "compute_mask_indices((B, T), padding_mask, self.mask_prob, self.mask_length, self.mask_selection, self.mask_other, min_masks=2, no_overlap=self.no_mask_overlap, min_space=self.mask_min_space)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask_indices).to(x.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "from_numpy_445": {
                "variable": {
                    "value": "mask_channel_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_channel_indices",
                    "type": "Call",
                    "possible_values": [
                        [
                            "compute_mask_indices((B, C), None, self.mask_channel_prob, self.mask_channel_length, self.mask_channel_selection, self.mask_channel_other, no_overlap=self.no_mask_channel_overlap, min_space=self.mask_channel_min_space)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask_channel_indices).to(x.device).unsqueeze(1).expand(-1, T, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_445": {
                "variable": {
                    "value": "mask_channel_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_502": {
                "variable": {
                    "value": "neg_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[neg_idxs, cross_neg_idxs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_315": {
                "in_features": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.encoder_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_464": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randint_475": {
                "variable": {
                    "value": "neg_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "high - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(bsz, self.n_negatives * num)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_488": {
                "variable": {
                    "value": "cross_neg_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "cross_high - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(bsz, self.cross_sample_negatives * num)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_614": {
                "variable": {
                    "value": "negs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[negs, cb_negs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_707": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "conv_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GELU_786": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_395": {
                "in_features": {
                    "value": "final_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.final_dim if args.final_dim > 0 else args.encoder_embed_dim",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "final_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GLU_395": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_534": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_716": {
                "*args": {
                    "value": "make_conv()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_718": {
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "Sequential_719": {
                "*args": {
                    "value": "TransposeLast()",
                    "type": null,
                    "possible_values": []
                }
            },
            "GELU_724": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_727": {
                "*args": {
                    "value": "make_conv()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_734": {
                "*args": {
                    "value": "make_conv()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_729": {
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "GELU_731": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_734": {
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "GELU_734": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/models/wav2vec/wav2vec2_asr.py": {
        "torch": {
            "Embedding_616": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(dictionary)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dictionary.pad()",
                            "Call"
                        ],
                        [
                            "embed_tokens.padding_idx",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_623": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_355": {
                "variable": {
                    "value": "self.final_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.final_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_472": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_551": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.w2v_encoder(**kwargs)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.final_dropout(x)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.output_layer(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(prev_output_tokens)",
                            "BinOp"
                        ],
                        [
                            "self.project_in_dim(x)",
                            "Call"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_481": {
                "variable": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(len(dictionary), self.output_embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "triu_606": {
                "variable": {
                    "value": "self._future_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.fill_with_neg_inf(tensor.new(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linear_588": {
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.embed_tokens.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_590": {
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.embed_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_381": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/adaptive_input.py": {
        "torch": {
            "ModuleList_39": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Embedding(size, dim, self.padding_idx)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_45": {
                "num_embeddings": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.cutoff[i] - prev",
                            "BinOp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(initial_dim // factor ** i)",
                            "Call"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(initial_dim // factor ** i)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/adaptive_softmax.py": {
        "torch": {
            "LogSoftmax_98": {
                "variable": {
                    "value": "self.lsm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_130": {
                "variable": {
                    "value": "self.tail",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linear_23": {
                "input": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input.contiguous().view(-1, input.size(-1))",
                            "Call"
                        ],
                        [
                            "self.dropout_module(input)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, dim)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight.t() if self.transpose else self.weight",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.word_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "quant_noise(nn.Linear(input_dim, emb_dim, bias=False), q_noise, qn_block_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_167": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "proj",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "out_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.input_dim // self.factor ** (i + 1))",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.cutoff[i + 1] - self.cutoff[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cutoff[0] + len(cutoff) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_169": {
                "p": {
                    "value": "self.dropout_module.p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_155": {
                "in_features": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.input_dim // self.factor ** (i + 1))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "in_features": {
                    "value": "tied_proj.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "tied_proj.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/beamable_mm.py": {
        "torch": {
            "mm_41": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input1[0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "input2[0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/character_token_embedder.py": {
        "torch": {
            "Embedding_38": {
                "variable": {
                    "value": "self.char_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "257",
                    "type": "Constant",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "char_embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.symbol_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(2, word_embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_43": {
                "variable": {
                    "value": "self.convolutions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sum((f[1] for f in filters))",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "word_embed_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "conv_result",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_188": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(input_dim, input_dim * 2) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ReLU_191": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_166": {
                "variable": {
                    "value": "(x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "conv(char_embs)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(conv_result, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.highway(x)",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "gate * x + (gate.new_tensor([1]) - gate) * proj_x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_167": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "conv(char_embs)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(conv_result, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.highway(x)",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "gate * x + (gate.new_tensor([1]) - gate) * proj_x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_212": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_134": {
                "variable": {
                    "value": "word_embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "pads.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "word_embs.new_zeros(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "word_embs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._convolve(chars)",
                            "Call"
                        ],
                        [
                            "torch.where(pads.unsqueeze(1), word_embs.new_zeros(1), word_embs)",
                            "Call"
                        ],
                        [
                            "torch.where(eos.unsqueeze(1), self.symbol_embeddings[self.eos_idx], word_embs)",
                            "Call"
                        ],
                        [
                            "torch.where(unk.unsqueeze(1), self.symbol_embeddings[self.unk_idx], word_embs)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_138": {
                "variable": {
                    "value": "word_embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "eos.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "self.symbol_embeddings[self.eos_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "word_embs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._convolve(chars)",
                            "Call"
                        ],
                        [
                            "torch.where(pads.unsqueeze(1), word_embs.new_zeros(1), word_embs)",
                            "Call"
                        ],
                        [
                            "torch.where(eos.unsqueeze(1), self.symbol_embeddings[self.eos_idx], word_embs)",
                            "Call"
                        ],
                        [
                            "torch.where(unk.unsqueeze(1), self.symbol_embeddings[self.unk_idx], word_embs)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_142": {
                "variable": {
                    "value": "word_embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "unk.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "self.symbol_embeddings[self.unk_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "word_embs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._convolve(chars)",
                            "Call"
                        ],
                        [
                            "torch.where(pads.unsqueeze(1), word_embs.new_zeros(1), word_embs)",
                            "Call"
                        ],
                        [
                            "torch.where(eos.unsqueeze(1), self.symbol_embeddings[self.eos_idx], word_embs)",
                            "Call"
                        ],
                        [
                            "torch.where(unk.unsqueeze(1), self.symbol_embeddings[self.unk_idx], word_embs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_46": {
                "in_channels": {
                    "value": "char_embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "where_117": {
                "variable": {
                    "value": "chars",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "eos.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "chars.new_zeros(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "chars",
                    "type": "Call",
                    "possible_values": [
                        [
                            "vocab[i].encode()",
                            "Call"
                        ],
                        [
                            "input.view(-1, self.max_char_len)",
                            "Call"
                        ],
                        [
                            "self.word_to_char[flat_words.type_as(self.word_to_char)].type_as(input)",
                            "Call"
                        ],
                        [
                            "torch.where(eos.unsqueeze(1), chars.new_zeros(1), chars)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_189": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/conv_tbc.py": {
        "torch": {
            "Parameter_24": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.kernel_size[0], in_channels, out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/cross_entropy.py": {
        "torch": {
            "log_softmax_16": {
                "variable": {
                    "value": "lprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_17": {
                "input": {
                    "value": "lprobs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.log_softmax(logits, dim=-1, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "-100",
                            "MethodArgument"
                        ],
                        [
                            "-100",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_32": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/downsampled_multihead_attention.py": {
        "torch": {
            "Linear_302": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.in_proj_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*k_layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.in_proj_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*v_layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_123": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "query",
                            "Name"
                        ],
                        [
                            "self.in_proj_q(q)",
                            "Call"
                        ],
                        [
                            "q * self.scaling",
                            "BinOp"
                        ],
                        [
                            "q.view(tgt_len, size, self.head_dim)",
                            "Call"
                        ],
                        [
                            "q.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_156": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights + torch.triu(attn_weights.data.new([-math.inf]).expand(tgt_len, tgt_len).clone(), diagonal=0)[:, ::self.head_index + 1 if self.downsample else 1].unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "scalar_bias(attn_weights, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(attn_weights)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, 1, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(size, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), -math.inf)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(size, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_159": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights + torch.triu(attn_weights.data.new([-math.inf]).expand(tgt_len, tgt_len).clone(), diagonal=0)[:, ::self.head_index + 1 if self.downsample else 1].unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "scalar_bias(attn_weights, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(attn_weights)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, 1, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(size, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), -math.inf)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(size, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "self.in_proj_v(v)",
                            "Call"
                        ],
                        [
                            "v.view(src_len, size, self.head_dim)",
                            "Call"
                        ],
                        [
                            "v.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "scalar_bias(v, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "weight_norm_305": {
                "module": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.Linear(in_features, out_features, bias=bias)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_310": {
                "*args": {
                    "value": "Linear(in_features, out_features * 4, dropout, bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_264": {
                "variable": {
                    "value": "full_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(attn_weights, v)",
                            "Call"
                        ],
                        [
                            "attn.transpose(0, 1).contiguous().view(tgt_len, bsz, self.head_dim)",
                            "Call"
                        ],
                        [
                            "attn.transpose(0, 1).contiguous().view(tgt_len, bsz, self.embed_dim)",
                            "Call"
                        ],
                        [
                            "self.out_proj(attn)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_278": {
                "variable": {
                    "value": "full_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(attn_weights, v)",
                            "Call"
                        ],
                        [
                            "attn.transpose(0, 1).contiguous().view(tgt_len, bsz, self.head_dim)",
                            "Call"
                        ],
                        [
                            "attn.transpose(0, 1).contiguous().view(tgt_len, bsz, self.embed_dim)",
                            "Call"
                        ],
                        [
                            "self.out_proj(attn)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_279": {
                "variable": {
                    "value": "full_attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attn_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights + torch.triu(attn_weights.data.new([-math.inf]).expand(tgt_len, tgt_len).clone(), diagonal=0)[:, ::self.head_index + 1 if self.downsample else 1].unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "scalar_bias(attn_weights, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout_module(attn_weights)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, 1, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(size, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), -math.inf)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(size, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "GLU_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GLU_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_128": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_132": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tril_128": {
                "input": {
                    "value": "attn_weights.data.new([1]).expand(tgt_len, tgt_len).clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "triu_132": {
                "input": {
                    "value": "attn_weights.data.new([-math.inf]).expand(tgt_len, tgt_len).clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/dynamic_convolution.py": {
        "torch": {
            "Linear_56": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_218": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_unfold",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([input_buffer, x.unsqueeze(3)], dim=3)",
                            "Call"
                        ],
                        [
                            "unfold1d(x, K, padding_l, 0)",
                            "Call"
                        ],
                        [
                            "x_unfold.view(T * B * H, R, K)",
                            "Call"
                        ],
                        [
                            "x_unfold.view(T * B * H, R, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weight.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_270": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_expanded",
                    "type": "Call",
                    "possible_values": [
                        [
                            "weight.new(B * H, T, T + K - 1).fill_(float('-inf'))",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, self.padding_l, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight_expanded, dim=2)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight_expanded, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.new_zeros(B * H, T, T + K - 1, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, P, T)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "proj.narrow(2, 0, self.input_size).contiguous()",
                            "Call"
                        ],
                        [
                            "proj.narrow(2, 0, self.input_size).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(T, B * H, R).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_124": {
                "variable": {
                    "value": "self.conv_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "x_unfold",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_buffer, x.unsqueeze(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_206": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "proj.narrow(2, self.input_size, H * K).contiguous().view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, K - T, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "proj.narrow(2, self.input_size, H * K).contiguous().view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_214": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "proj.narrow(2, self.input_size, H * K).contiguous().view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, K - T, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "proj.narrow(2, self.input_size, H * K).contiguous().view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_256": {
                "variable": {
                    "value": "weight_expanded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_expanded",
                    "type": "Call",
                    "possible_values": [
                        [
                            "weight.new(B * H, T, T + K - 1).fill_(float('-inf'))",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, self.padding_l, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight_expanded, dim=2)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight_expanded, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.new_zeros(B * H, T, T + K - 1, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, P, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_242": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "proj.narrow(2, self.input_size, H * K).contiguous().view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, K - T, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "proj.narrow(2, self.input_size, H * K).contiguous().view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/dynamic_crf_layer.py": {
        "torch": {
            "logsumexp_25": {
                "input": {
                    "value": "x.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_45": {
                "variable": {
                    "value": "self.E1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "low_rank",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_46": {
                "variable": {
                    "value": "self.E2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "low_rank",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bmm_115": {
                "variable": {
                    "value": "beam_transition_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beam_transition_score1.view(-1, beam, self.rank)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "beam_transition_score2.view(-1, beam, self.rank).transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_143": {
                "variable": {
                    "value": "beam_transition_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beam_transition_score1.view(-1, beam, self.rank)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "beam_transition_score2.view(-1, beam, self.rank).transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_155": {
                "variable": {
                    "value": "dummy",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "beam",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "beam if beam is not None else self.beam",
                            "IfExp"
                        ],
                        [
                            "beam if beam is not None else self.beam",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "score.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "finalized_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "finalized_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(finalized_tokens, 1)",
                            "Call"
                        ],
                        [
                            "beam_targets.gather(2, finalized_tokens[:, :, None])[:, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "finalized_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "finalized_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(finalized_scores, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_128": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "masks[:, i:i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "next_score",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "score[:, :, None] + beam_transition_matrix[:, i - 1]",
                            "BinOp"
                        ],
                        [
                            "logsumexp(next_score, dim=1) + beam_emission_scores[:, i]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "beam_emission_scores[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(masks[:, i:i + 1], next_score, score)",
                            "Call"
                        ],
                        [
                            "next_score",
                            "Name"
                        ],
                        [
                            "beam_emission_scores[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(masks[:, i:i + 1], _score, score)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_165": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "masks[:, i:i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "_score",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "score[:, :, None] + beam_transition_matrix[:, i - 1]",
                            "BinOp"
                        ],
                        [
                            "_score + beam_emission_scores[:, i]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "beam_emission_scores[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(masks[:, i:i + 1], next_score, score)",
                            "Call"
                        ],
                        [
                            "next_score",
                            "Name"
                        ],
                        [
                            "beam_emission_scores[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(masks[:, i:i + 1], _score, score)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_166": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "masks[:, i:i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "dummy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(beam, device=score.device).expand(*score.size()).contiguous()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/modules/dynamicconv_layer/dynamicconv_layer.py": {
        "torch": {
            "Linear_64": {
                "variable": {
                    "value": "self.weight_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_heads * kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bmm_180": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_unfold",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([input_buffer, x.unsqueeze(3)], dim=3)",
                            "Call"
                        ],
                        [
                            "unfold1d(x, K, padding_l, 0)",
                            "Call"
                        ],
                        [
                            "x_unfold.view(T * B * H, R, K)",
                            "Call"
                        ],
                        [
                            "x_unfold.view(T * B * H, R, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weight.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_225": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_expanded",
                    "type": "Call",
                    "possible_values": [
                        [
                            "weight.new(B * H, T, T + K - 1).fill_(float('-inf'))",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, self.padding_l, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight_expanded, dim=2)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight_expanded, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.new_zeros(B * H, T, T + K - 1, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, P, T)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.permute(1, 2, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(T, B * H, R).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_66": {
                "variable": {
                    "value": "self.conv_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "x_unfold",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_buffer, x.unsqueeze(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_168": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight_linear(x).view(T, B, H, K)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight)",
                            "Call"
                        ],
                        [
                            "weight.permute(1, 2, 3, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, K - T, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_176": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight_linear(x).view(T, B, H, K)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight)",
                            "Call"
                        ],
                        [
                            "weight.permute(1, 2, 3, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, K - T, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_211": {
                "variable": {
                    "value": "weight_expanded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_expanded",
                    "type": "Call",
                    "possible_values": [
                        [
                            "weight.new(B * H, T, T + K - 1).fill_(float('-inf'))",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, self.padding_l, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight_expanded, dim=2)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight_expanded, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.new_zeros(B * H, T, T + K - 1, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, P, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_107": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight_linear(x).view(T, B, H, K)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight)",
                            "Call"
                        ],
                        [
                            "weight.permute(1, 2, 3, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, K - T, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_197": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight_linear(x).view(T, B, H, K)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight)",
                            "Call"
                        ],
                        [
                            "weight.permute(1, 2, 3, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, K - T, T)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.weight_linear(query).view(T * B * H, -1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(1, 0, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight, inplace=False)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/dynamicconv_layer/setup.py": {
        "torch": {}
    },
    "fairseq/modules/fairseq_dropout.py": {
        "torch": {
            "dropout_25": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/fp32_group_norm.py": {
        "torch": {
            "group_norm_18": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "self.num_groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight.float() if self.weight is not None else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias.float() if self.bias is not None else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/gelu.py": {
        "torch": {
            "gelu_25": {
                "input": {
                    "value": "x.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_20": {
                "input": {
                    "value": "gelu_accurate._a * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_20": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/grad_multiply.py": {
        "torch": {}
    },
    "fairseq/modules/gumbel_vector_quantizer.py": {
        "torch": {
            "Parameter_55": {
                "variable": {
                    "value": "self.vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, num_groups * num_vars, var_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_121": {
                "variable": {
                    "value": "sample_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "cb_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "indices.size(0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(b * n,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_156": {
                "variable": {
                    "value": "hard_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hard_x.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_157": {
                "variable": {
                    "value": "result[code_perplexity]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.sum(hard_probs * torch.log(hard_probs + 1e-07), dim=-1)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_157": {
                "variable": {
                    "value": "result[code_perplexity]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_161": {
                "variable": {
                    "value": "avg_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(bsz * tsz, self.groups, -1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_161": {
                "variable": {
                    "value": "avg_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_164": {
                "variable": {
                    "value": "result[prob_perplexity]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.sum(avg_probs * torch.log(avg_probs + 1e-07), dim=-1)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_164": {
                "variable": {
                    "value": "result[prob_perplexity]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GELU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.weight_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[block(self.input_dim if i == 0 else inner_dim, inner_dim) for i in range(weight_proj_depth - 1)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.weight_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "groups * num_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "self.codebook_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(product(*p))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.vars.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_93": {
                "variable": {
                    "value": "self.codebook_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gumbel_softmax_171": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "x.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "tau": {
                    "value": "self.curr_temp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hard": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "*args": {
                    "value": "nn.Linear(input_dim, output_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_69": {
                "in_features": {
                    "value": "inner_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.input_dim * weight_proj_factor",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "groups * num_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_158": {
                "input": {
                    "value": "hard_probs * torch.log(hard_probs + 1e-07)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_165": {
                "input": {
                    "value": "avg_probs * torch.log(avg_probs + 1e-07)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_158": {
                "input": {
                    "value": "hard_probs + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_165": {
                "input": {
                    "value": "avg_probs + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/kmeans_vector_quantizer.py": {
        "torch": {
            "Parameter_42": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.01 * torch.randn(num_vars, num_groups, self.var_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(dim, dim, kernel_size=1, groups=groups, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_50": {
                "variable": {
                    "value": "self.mse_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_90": {
                "variable": {
                    "value": "zq",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.expand_embedding[idx[..., group], group] for group in range(self.groups)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_90": {
                "variable": {
                    "value": "zq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_108": {
                "variable": {
                    "value": "hard_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hard_x.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_109": {
                "variable": {
                    "value": "result[code_perplexity]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.sum(hard_probs * torch.log(hard_probs + 1e-07), dim=-1)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_109": {
                "variable": {
                    "value": "result[code_perplexity]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_46": {
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_43": {
                "*size": {
                    "value": "num_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "groups if not combine_groups else 1",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.var_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_110": {
                "input": {
                    "value": "hard_probs * torch.log(hard_probs + 1e-07)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_110": {
                "input": {
                    "value": "hard_probs + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/knn_datastore.py": {
        "torch": {
            "randn_427": {
                "variable": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "32 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_64": {
                "variable": {
                    "value": "k_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_k, max_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "power_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[pow(2, i) - 1 for i in range(0, int(math.log(self.max_k, 2)) + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "empty_88": {
                "variable": {
                    "value": "mask_for_label_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_k, max_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "triu_89": {
                "variable": {
                    "value": "mask_for_label_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_for_label_count",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.empty((max_k, max_k)).fill_(1)",
                            "Call"
                        ],
                        [
                            "torch.triu(mask_for_label_count, diagonal=1).bool()",
                            "Call"
                        ],
                        [
                            "mask_for_label_count.cuda()",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_319": {
                "variable": {
                    "value": "knn_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaled_dists",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "re_compute_dists / temperature",
                            "BinOp"
                        ],
                        [
                            "re_compute_dists / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_320": {
                "variable": {
                    "value": "weight_sum_knn_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "knn_select_prob.unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "knn_weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.softmax(scaled_dists, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(scaled_dists, dim=-1).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_320": {
                "variable": {
                    "value": "weight_sum_knn_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_320": {
                "variable": {
                    "value": "weight_sum_knn_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_323": {
                "variable": {
                    "value": "knn_tgt_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_366": {
                "variable": {
                    "value": "knn_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaled_dists",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "re_compute_dists / temperature",
                            "BinOp"
                        ],
                        [
                            "re_compute_dists / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_366": {
                "variable": {
                    "value": "knn_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_369": {
                "variable": {
                    "value": "knn_tgt_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "Call",
                    "possible_values": [
                        [
                            "queries.size(0)",
                            "Call"
                        ],
                        [
                            "queries.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "seq_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "queries.size(1)",
                            "Call"
                        ],
                        [
                            "queries.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "triu_65": {
                "input": {
                    "value": "k_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.empty((max_k, max_k)).fill_(999.0)",
                            "Call"
                        ],
                        [
                            "torch.triu(k_mask, diagonal=1) + 1",
                            "BinOp"
                        ],
                        [
                            "k_mask[power_index]",
                            "Subscript"
                        ],
                        [
                            "k_mask.cuda()",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_225": {
                "variable": {
                    "value": "self.vals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.vals",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_241": {
                "variable": {
                    "value": "knns_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.keys[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_245": {
                "variable": {
                    "value": "l2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(query_vecs - knns_vecs.detach()) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_251": {
                "ndarray": {
                    "value": "self.keys[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/layer_drop.py": {
        "torch": {
            "empty_41": {
                "variable": {
                    "value": "dropout_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/layer_norm.py": {
        "torch": {
            "LayerNorm_35": {
                "normalized_shape": {
                    "value": "normalized_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "elementwise_affine": {
                    "value": "elementwise_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "layer_norm_43": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.normalized_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight.float() if self.weight is not None else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias.float() if self.bias is not None else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_22": {
                "type": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/learned_positional_embedding.py": {
        "torch": {
            "embedding_53": {
                "input": {
                    "value": "positions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros((1, 1), device=input.device, dtype=input.dtype).fill_(int(self.padding_idx + input.size(1)))",
                            "Call"
                        ],
                        [
                            "utils.make_positions(input, self.padding_idx, onnx_trace=self.onnx_trace)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "self.norm_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "self.scale_grad_by_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "self.sparse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/lightconv_layer/lightconv_layer.py": {
        "torch": {
            "Parameter_56": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_heads, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "x_unfold",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_buffer, x.unsqueeze(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_108": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_unfold",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([input_buffer, x.unsqueeze(3)], dim=3)",
                            "Call"
                        ],
                        [
                            "x_unfold.view(T * B * H, R, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.softmax(self.weight, -1)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight_dropout_module(weight)",
                            "Call"
                        ],
                        [
                            "F.softmax(weight.float(), dim=1).type_as(weight)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "weight.view(1, H, K).expand(T * B, H, K).contiguous().view(T * B * H, K, 1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_94": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_117": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/lightconv_layer/setup.py": {
        "torch": {}
    },
    "fairseq/modules/lightweight_convolution.py": {
        "torch": {
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_89": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_heads, 1, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv1d_123": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input.view(-1, H, T)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.softmax(weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight)",
                            "Call"
                        ],
                        [
                            "self.weight.view(H, K)",
                            "Call"
                        ],
                        [
                            "utils.softmax(weight, dim=1, onnx_trace=self.onnx_trace).type_as(weight)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "weight.view(1, H, K).expand(T * B, H, K).contiguous().view(T * B * H, K, 1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight)",
                            "Call"
                        ],
                        [
                            "self.weight.view(H, K)",
                            "Call"
                        ],
                        [
                            "utils.softmax(weight, dim=1, onnx_trace=self.onnx_trace).type_as(weight)",
                            "Call"
                        ],
                        [
                            "weight.view(1, H, K).expand(T * B, H, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.num_heads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_173": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_heads, 1, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_246": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_unfold",
                    "type": "Call",
                    "possible_values": [
                        [
                            "unfold1d(x, self.kernel_size, self.padding_l, 0)",
                            "Call"
                        ],
                        [
                            "x_unfold.view(T * B * H, R, K)",
                            "Call"
                        ],
                        [
                            "torch.cat([input_buffer, x.unsqueeze(3)], dim=3)",
                            "Call"
                        ],
                        [
                            "x_unfold.view(T * B * H, R, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.softmax(weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight)",
                            "Call"
                        ],
                        [
                            "self.weight.view(H, K)",
                            "Call"
                        ],
                        [
                            "utils.softmax(weight, dim=1, onnx_trace=self.onnx_trace).type_as(weight)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "weight.view(1, H, K).expand(T * B, H, K).contiguous().view(T * B * H, K, 1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight)",
                            "Call"
                        ],
                        [
                            "self.weight.view(H, K)",
                            "Call"
                        ],
                        [
                            "utils.softmax(weight, dim=1, onnx_trace=self.onnx_trace).type_as(weight)",
                            "Call"
                        ],
                        [
                            "weight.view(1, H, K).expand(T * B, H, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_281": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_expanded",
                    "type": "Call",
                    "possible_values": [
                        [
                            "weight.new_zeros(B * H, T, T + K - 1, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "weight_expanded.narrow(2, P, T)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight_expanded)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(T, B * H, R).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_92": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_115": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "F.softmax(weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight)",
                            "Call"
                        ],
                        [
                            "self.weight.view(H, K)",
                            "Call"
                        ],
                        [
                            "utils.softmax(weight, dim=1, onnx_trace=self.onnx_trace).type_as(weight)",
                            "Call"
                        ],
                        [
                            "weight[:, -x_unfold.size(2):]",
                            "Subscript"
                        ],
                        [
                            "weight.view(1, H, K).expand(T * B, H, K).contiguous().view(T * B * H, K, 1)",
                            "Call"
                        ],
                        [
                            "self.weight_dropout_module(weight)",
                            "Call"
                        ],
                        [
                            "self.weight.view(H, K)",
                            "Call"
                        ],
                        [
                            "utils.softmax(weight, dim=1, onnx_trace=self.onnx_trace).type_as(weight)",
                            "Call"
                        ],
                        [
                            "weight.view(1, H, K).expand(T * B, H, K).contiguous()",
                            "Call"
                        ],
                        [
                            "weight.view(T, B * H, K).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "weight.narrow(2, K - T, T)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_175": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_221": {
                "variable": {
                    "value": "x_unfold",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_buffer, x.unsqueeze(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/linearized_convolution.py": {
        "torch": {
            "linear_76": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.view(bsz, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._get_linearized_weight()",
                            "Call"
                        ],
                        [
                            "self.weight.transpose(2, 1).transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_98": {
                "variable": {
                    "value": "self._linearized_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight.view(self.out_channels, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/multihead_attention.py": {
        "torch": {
            "bmm_326": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.q_proj(query)",
                            "Call"
                        ],
                        [
                            "q * self.scaling",
                            "BinOp"
                        ],
                        [
                            "self.q_proj(query)",
                            "Call"
                        ],
                        [
                            "q.contiguous().view(tgt_len, bsz * self.num_heads, self.head_dim).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.q_proj(query)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_361": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dropout_module(attn_weights)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.v_proj(query)",
                            "Call"
                        ],
                        [
                            "self.v_proj(key)",
                            "Call"
                        ],
                        [
                            "self.v_proj(value)",
                            "Call"
                        ],
                        [
                            "torch.cat([v, self.bias_v.repeat(1, bsz, 1)])",
                            "Call"
                        ],
                        [
                            "v.contiguous().view(-1, bsz * self.num_heads, self.head_dim).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "prev_value",
                            "Name"
                        ],
                        [
                            "torch.cat([prev_value, v], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([v, v.new_zeros((v.size(0), 1) + v.size()[2:])], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.bias_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_81": {
                "variable": {
                    "value": "self.bias_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, self.bias_k.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, self.bias_v.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_309": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, k.new_zeros((k.size(0), 1) + k.size()[2:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_310": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, v.new_zeros((v.size(0), 1) + v.size()[2:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "in_features": {
                    "value": "self.kdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_69": {
                "in_features": {
                    "value": "self.vdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_72": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_76": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_226": {
                "variable": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask, attn_mask.new_zeros(attn_mask.size(0), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "key_padding_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[key_padding_mask, key_padding_mask.new_zeros(key_padding_mask.size(0), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_312": {
                "variable": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask, attn_mask.new_zeros(attn_mask.size(0), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_316": {
                "variable": {
                    "value": "key_padding_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[key_padding_mask, torch.zeros(key_padding_mask.size(0), 1).type_as(key_padding_mask)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_393": {
                "variable": {
                    "value": "new_key_padding_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_key_padding_mask.float(), key_padding_mask.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_171": {
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_172": {
                "tensors": {
                    "value": "(self.q_proj.bias, self.k_proj.bias, self.v_proj.bias)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_266": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_key, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_275": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_value, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_400": {
                "variable": {
                    "value": "filler",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, src_len - prev_key_padding_mask.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "prev_key_padding_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_404": {
                "variable": {
                    "value": "new_key_padding_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_key_padding_mask.float(), filler.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_408": {
                "variable": {
                    "value": "filler",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, src_len - key_padding_mask.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "key_padding_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_412": {
                "variable": {
                    "value": "new_key_padding_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[filler.float(), key_padding_mask.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_319": {
                "*size": {
                    "value": "key_padding_mask.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/positional_embedding.py": {
        "torch": {}
    },
    "fairseq/modules/quant_noise.py": {
        "torch": {
            "zeros_68": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "in_features // block_size * out_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "int(in_channels // block_size * out_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "weight.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/quantization/pq/em.py": {
        "torch": {
            "Tensor_43": {
                "variable": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_44": {
                "variable": {
                    "value": "self.assignments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randint_53": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.n_centroids,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmin_75": {
                "variable": {
                    "value": "self.assignments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "distances",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.compute_distances()",
                            "Call"
                        ],
                        [
                            "self.compute_distances()",
                            "Call"
                        ],
                        [
                            "self.compute_distances()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmin_175": {
                "variable": {
                    "value": "self.assignments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "distances",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.compute_distances()",
                            "Call"
                        ],
                        [
                            "self.compute_distances()",
                            "Call"
                        ],
                        [
                            "self.compute_distances()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_199": {
                "variable": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, '{}_centroids.pth'.format(layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_202": {
                "variable": {
                    "value": "self.assignments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, '{}_assignments.pth'.format(layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_205": {
                "variable": {
                    "value": "self.objective",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, '{}_objective.pth'.format(layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmin_117": {
                "variable": {
                    "value": "self.assignments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "distances",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.compute_distances()",
                            "Call"
                        ],
                        [
                            "self.compute_distances()",
                            "Call"
                        ],
                        [
                            "self.compute_distances()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_185": {
                "obj": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, '{}_centroids.pth'.format(layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "self.assignments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, '{}_assignments.pth'.format(layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_189": {
                "obj": {
                    "value": "self.objective",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, '{}_objective.pth'.format(layer))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_like_110": {
                "input": {
                    "value": "self.centroids[m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_152": {
                "tensors": {
                    "value": "[(self.W[None, :, :] - centroids_c[:, :, None]).norm(p=2, dim=1) for centroids_c in self.centroids.chunk(nb_centroids_chunks, dim=0)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/quantization/pq/modules/qconv.py": {
        "torch": {
            "Parameter_70": {
                "variable": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "centroids",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_74": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_92": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bincount_72": {
                "input": {
                    "value": "assignments",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/quantization/pq/modules/qemb.py": {
        "torch": {
            "Parameter_69": {
                "variable": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "centroids",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_83": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "self.norm_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "self.scale_grad_by_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "self.sparse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bincount_71": {
                "input": {
                    "value": "assignments",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/quantization/pq/modules/qlinear.py": {
        "torch": {
            "Parameter_42": {
                "variable": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "centroids",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_46": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linear_60": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bincount_44": {
                "input": {
                    "value": "assignments",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/quantization/pq/utils.py": {
        "torch": {
            "is_initialized_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "broadcast_101": {
                "tensor": {
                    "value": "centroids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "quantizer.centroids.contiguous()",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "broadcast_102": {
                "tensor": {
                    "value": "assignments",
                    "type": "Name",
                    "possible_values": [
                        [
                            "quantizer.assignments.contiguous()",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_initialized_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/quantization/scalar/modules/qact.py": {
        "torch": {
            "zeros_like_78": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_85": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "clamp_low.item()",
                    "type": "Call",
                    "possible_values": []
                },
                "max": {
                    "value": "clamp_high.item()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/quantization/scalar/modules/qconv.py": {
        "torch": {
            "zeros_like_116": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_86": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.clamp(self.weight, clamp_low.item(), clamp_high.item()) + noise.detach()",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_77": {
                "input": {
                    "value": "F.pad(input, self._padding_repeated_twice, mode=self.padding_mode)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.clamp(self.weight, clamp_low.item(), clamp_high.item()) + noise.detach()",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_124": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "clamp_low.item()",
                    "type": "Call",
                    "possible_values": []
                },
                "max": {
                    "value": "clamp_high.item()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_78": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "self._padding_repeated_twice",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.padding_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/quantization/scalar/modules/qemb.py": {
        "torch": {
            "zeros_like_110": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_123": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.clamp(self.weight, clamp_low.item(), clamp_high.item()) + noise.detach()",
                            "BinOp"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "self.norm_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "self.scale_grad_by_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "self.sparse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_embeddings, embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_74": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_118": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "clamp_low.item()",
                    "type": "Call",
                    "possible_values": []
                },
                "max": {
                    "value": "clamp_high.item()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/quantization/scalar/modules/qlinear.py": {
        "torch": {
            "Parameter_48": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_89": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_102": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.clamp(self.weight, clamp_low.item(), clamp_high.item()) + noise.detach()",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_51": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_97": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "clamp_low.item()",
                    "type": "Call",
                    "possible_values": []
                },
                "max": {
                    "value": "clamp_high.item()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/quantization/scalar/ops.py": {
        "torch": {
            "clamp_16": {
                "input": {
                    "value": "torch.round(w / scale + zero_point)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "255",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "round_16": {
                "input": {
                    "value": "w / scale + zero_point",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/quantization/scalar/utils.py": {
        "torch": {
            "is_initialized_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/same_pad.py": {
        "torch": {}
    },
    "fairseq/modules/scalar_bias.py": {
        "torch": {}
    },
    "fairseq/modules/sinusoidal_positional_embedding.py": {
        "torch": {
            "exp_46": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(half_dim, dtype=torch.float) * -emb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(emb), torch.cos(emb)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb, torch.zeros(num_embeddings, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "embedding_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bsz.view(1), seq_len.view(1), torch.tensor([-1], dtype=torch.long))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_47": {
                "start": {
                    "value": "num_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_47": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_46": {
                "start": {
                    "value": "half_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embedding_dim // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "*size": {
                    "value": "num_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "data": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_50": {
                "input": {
                    "value": "emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "math.log(10000) / (half_dim - 1)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(torch.arange(half_dim, dtype=torch.float) * -emb)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_embeddings, dtype=torch.float).unsqueeze(1) * emb.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(emb), torch.cos(emb)], dim=1).view(num_embeddings, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([emb, torch.zeros(num_embeddings, 1)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_50": {
                "input": {
                    "value": "emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "math.log(10000) / (half_dim - 1)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(torch.arange(half_dim, dtype=torch.float) * -emb)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_embeddings, dtype=torch.float).unsqueeze(1) * emb.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(emb), torch.cos(emb)], dim=1).view(num_embeddings, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([emb, torch.zeros(num_embeddings, 1)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/modules/sparse_multihead_attention.py": {
        "torch": {
            "empty_121": {
                "variable": {
                    "value": "sparse_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(tgt_len, src_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/sparse_transformer_sentence_encoder.py": {
        "torch": {
            "ModuleList_71": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SparseTransformerSentenceEncoderLayer(embedding_dim=self.embedding_dim, ffn_embedding_dim=ffn_embedding_dim, num_attention_heads=num_attention_heads, dropout=dropout, attention_dropout=attention_dropout, activation_dropout=activation_dropout, activation_fn=activation_fn, export=export, is_bidirectional=is_bidirectional, stride=stride, expressivity=expressivity) for _ in range(num_encoder_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/transformer_layer.py": {
        "torch": {
            "Linear_419": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_341": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(encoder_out, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_241": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_244": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_328": {
                "variable": {
                    "value": "self_attn_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x.new_zeros(x.size(0), encoder_out.size(0)), self_attn_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_337": {
                "variable": {
                    "value": "self_attn_padding_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(encoder_padding_mask, self_attn_padding_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/transformer_sentence_encoder.py": {
        "torch": {
            "ModuleList_152": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Embedding_195": {
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_133": {
                "num_embeddings": {
                    "value": "self.num_segments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "in_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_284": {
                "tensors": {
                    "value": "inner_states",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[x]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/modules/transformer_sentence_encoder_layer.py": {
        "torch": {
            "Linear_81": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/modules/transpose_last.py": {
        "torch": {}
    },
    "fairseq/modules/unfold.py": {
        "torch": {
            "pad_13": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.pad(x, (0, 0, 0, 0, padding_l, kernel_size - 1 - padding_l), value=pad_value)",
                            "Call"
                        ],
                        [
                            "x.as_strided((T, B, C, kernel_size), (B * C, C, 1, B * C))",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, 0, padding_l, kernel_size - 1 - padding_l)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "pad_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/modules/vggblock.py": {
        "torch": {
            "randn_25": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sample_bsz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "sample_inchannel",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "sample_seq_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "200",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "per_channel_dim",
                            "Name"
                        ]
                    ]
                }
            },
            "ModuleList_88": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels if layer == 0 else out_channels",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.conv_kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.conv_stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPool2d_107": {
                "variable": {
                    "value": "pool_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.pooling_kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_102": {
                "normalized_shape": {
                    "value": "per_channel_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size()[3]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/nan_detector.py": {
        "torch": {
            "is_tensor_78": {
                "obj": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "norm_40": {
                "variable": {
                    "value": "grad_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_floating_point_64": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_69": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "any_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_42": {
                "input": {
                    "value": "grad_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.norm(param.grad.data, p=2, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isinf_42": {
                "input": {
                    "value": "grad_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.norm(param.grad.data, p=2, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "isinf_71": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "any_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_83": {
                "obj": {
                    "value": "inp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/optim/adadelta.py": {
        "torch": {}
    },
    "fairseq/optim/adafactor.py": {
        "torch": {
            "mul_166": {
                "input": {
                    "value": "r_factor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(exp_avg_sq_row / exp_avg_sq_row.mean(dim=-1, keepdim=True)).rsqrt_().unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "c_factor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "exp_avg_sq_col.unsqueeze(-2).rsqrt()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_199": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_201": {
                "variable": {
                    "value": "state[exp_avg_sq_row]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "grad_shape[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_202": {
                "variable": {
                    "value": "state[exp_avg_sq_col]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "grad_shape[:-2] + grad_shape[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_206": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/optim/adagrad.py": {
        "torch": {}
    },
    "fairseq/optim/adam.py": {
        "torch": {
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_177": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p.data",
                            "Attribute"
                        ],
                        [
                            "p_data_fp32.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_179": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p.data",
                            "Attribute"
                        ],
                        [
                            "p_data_fp32.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_182": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p.data",
                            "Attribute"
                        ],
                        [
                            "p_data_fp32.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_203": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/optim/adamax.py": {
        "torch": {
            "zeros_like_135": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p.data",
                            "Attribute"
                        ],
                        [
                            "p_data_fp32.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_136": {
                "variable": {
                    "value": "state[exp_inf]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p.data",
                            "Attribute"
                        ],
                        [
                            "p_data_fp32.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_151": {
                "input": {
                    "value": "exp_inf.mul_(beta2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "exp_inf",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/optim/bmuf.py": {
        "torch": {
            "no_grad_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "broadcast_146": {
                "tensor": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "src": {
                    "value": "root_rank",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_180": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/optim/fairseq_optimizer.py": {
        "torch": {}
    },
    "fairseq/optim/fp16_optimizer.py": {
        "torch": {
            "is_tensor_23": {
                "obj": {
                    "value": "self.fp32_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_57": {
                "variable": {
                    "value": "fp32_params[device]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "fp32_params[device]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "p32",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "p.data.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_66": {
                "variable": {
                    "value": "p32.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "p32.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_208": {
                "obj": {
                    "value": "self.fp32_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_131": {
                "variable": {
                    "value": "p32.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_25": {
                "obj": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/optim/fused_adam.py": {
        "torch": {
            "zeros_like_184": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_186": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_198": {
                "type": {
                    "value": "p.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_285": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_287": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_312": {
                "type": {
                    "value": "p.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/optim/lr_scheduler/reduce_lr_on_plateau.py": {
        "torch": {}
    },
    "fairseq/optim/nag.py": {
        "torch": {
            "zeros_like_88": {
                "variable": {
                    "value": "param_state[momentum_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p.grad.data.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/optim/sgd.py": {
        "torch": {}
    },
    "fairseq/options.py": {
        "torch": {
            "device_count_371": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/scoring/bleu.py": {
        "torch": {}
    },
    "fairseq/search.py": {
        "torch": {
            "tensor_26": {
                "variable": {
                    "value": "self.src_lengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_128": {
                "variable": {
                    "value": "top_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs.view(bsz, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "min(beam_size * 2, lprobs.view(bsz, -1).size(1) - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_like_160": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-math.inf",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_194": {
                "variable": {
                    "value": "top_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs.view(bsz, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "min(beam_size, lprobs.view(bsz, -1).size(1) - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_332": {
                "variable": {
                    "value": "top_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs.view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "self.num_cands",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_360": {
                "variable": {
                    "value": "new_scores_buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 2 * beam_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "lprobs.device",
                            "Attribute"
                        ],
                        [
                            "lprobs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_361": {
                "variable": {
                    "value": "new_indices_buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 2 * beam_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "lprobs.device",
                            "Attribute"
                        ],
                        [
                            "lprobs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_362": {
                "variable": {
                    "value": "new_beams_buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 2 * beam_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "lprobs.device",
                            "Attribute"
                        ],
                        [
                            "lprobs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_432": {
                "variable": {
                    "value": "banks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[state.bank for state in constraint_states]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "lprobs.device",
                            "Attribute"
                        ],
                        [
                            "lprobs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "masked_select_470": {
                "variable": {
                    "value": "scores_buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_buf",
                    "type": "Call",
                    "possible_values": [
                        [
                            "top_prediction[0]",
                            "Subscript"
                        ],
                        [
                            "top_prediction[0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((scores_buf, top_scores), dim=1)",
                            "Call"
                        ],
                        [
                            "scores_buf[sort_indices]",
                            "Subscript"
                        ],
                        [
                            "torch.masked_select(scores_buf, uniques_mask)",
                            "Call"
                        ],
                        [
                            "torch.cat((scores_buf, next_values))",
                            "Call"
                        ],
                        [
                            "scores_buf[sort_indices]",
                            "Subscript"
                        ],
                        [
                            "scores_buf[:self.num_cands]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(scores_G, dim=2).view(bsz, -1)",
                            "Call"
                        ],
                        [
                            "torch.gather(probs, dim=2, index=indices_buf.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "scores_buf.log_().view(bsz, -1)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "uniques_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "beams_buf * (self.vocab_size + 1) + indices_buf",
                            "BinOp"
                        ],
                        [
                            "roll(uniques_mask) != uniques_mask",
                            "Compare"
                        ]
                    ]
                }
            },
            "masked_select_471": {
                "variable": {
                    "value": "indices_buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices_buf",
                    "type": "Call",
                    "possible_values": [
                        [
                            "top_prediction[1]",
                            "Subscript"
                        ],
                        [
                            "indices_buf.fmod(vocab_size)",
                            "Call"
                        ],
                        [
                            "top_prediction[1]",
                            "Subscript"
                        ],
                        [
                            "indices_buf.fmod(vocab_size)",
                            "Call"
                        ],
                        [
                            "indices_buf.fmod(vocab_size)",
                            "Call"
                        ],
                        [
                            "torch.cat((indices_buf, top_indices), dim=1)",
                            "Call"
                        ],
                        [
                            "indices_buf[sort_indices]",
                            "Subscript"
                        ],
                        [
                            "torch.masked_select(indices_buf, uniques_mask)",
                            "Call"
                        ],
                        [
                            "torch.cat((indices_buf, next_tokens))",
                            "Call"
                        ],
                        [
                            "indices_buf[sort_indices]",
                            "Subscript"
                        ],
                        [
                            "indices_buf[:self.num_cands]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(indices_G, dim=2).view(bsz, -1)",
                            "Call"
                        ],
                        [
                            "torch.multinomial(probs.view(bsz, -1), beam_size, replacement=True).view(bsz, beam_size)",
                            "Call"
                        ],
                        [
                            "torch.multinomial(probs.view(bsz * beam_size, -1), 1, replacement=True).view(bsz, beam_size)",
                            "Call"
                        ],
                        [
                            "torch.gather(top_indices.expand(bsz, beam_size, -1), dim=2, index=indices_buf.unsqueeze(-1)).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "uniques_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "beams_buf * (self.vocab_size + 1) + indices_buf",
                            "BinOp"
                        ],
                        [
                            "roll(uniques_mask) != uniques_mask",
                            "Compare"
                        ]
                    ]
                }
            },
            "masked_select_472": {
                "variable": {
                    "value": "beams_buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beams_buf",
                    "type": "Call",
                    "possible_values": [
                        [
                            "indices_buf // vocab_size",
                            "BinOp"
                        ],
                        [
                            "indices_buf // vocab_size",
                            "BinOp"
                        ],
                        [
                            "indices_buf // vocab_size",
                            "BinOp"
                        ],
                        [
                            "torch.cat((beams_buf, new_beams), dim=1)",
                            "Call"
                        ],
                        [
                            "beams_buf[sort_indices]",
                            "Subscript"
                        ],
                        [
                            "torch.masked_select(beams_buf, uniques_mask)",
                            "Call"
                        ],
                        [
                            "torch.cat((beams_buf, next_beams))",
                            "Call"
                        ],
                        [
                            "beams_buf[sort_indices]",
                            "Subscript"
                        ],
                        [
                            "beams_buf[:self.num_cands]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(beams_G, dim=2).view(bsz, -1)",
                            "Call"
                        ],
                        [
                            "indices_buf.new_zeros(bsz, beam_size)",
                            "Call"
                        ],
                        [
                            "torch.arange(0, beam_size).to(indices_buf).repeat(bsz, 1)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "uniques_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "beams_buf * (self.vocab_size + 1) + indices_buf",
                            "BinOp"
                        ],
                        [
                            "roll(uniques_mask) != uniques_mask",
                            "Compare"
                        ]
                    ]
                }
            },
            "masked_select_473": {
                "variable": {
                    "value": "banks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "banks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([state.bank for state in constraint_states], device=device)",
                            "Call"
                        ],
                        [
                            "banks[sort_indices]",
                            "Subscript"
                        ],
                        [
                            "torch.masked_select(banks, uniques_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "uniques_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "beams_buf * (self.vocab_size + 1) + indices_buf",
                            "BinOp"
                        ],
                        [
                            "roll(uniques_mask) != uniques_mask",
                            "Compare"
                        ]
                    ]
                }
            },
            "zeros_like_500": {
                "variable": {
                    "value": "stripes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "banks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([state.bank for state in constraint_states], device=device)",
                            "Call"
                        ],
                        [
                            "banks[sort_indices]",
                            "Subscript"
                        ],
                        [
                            "torch.masked_select(banks, uniques_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_583": {
                "variable": {
                    "value": "diversity_buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "lprobs[:, 0, :].size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_615": {
                "variable": {
                    "value": "scores_buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores_G",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_616": {
                "variable": {
                    "value": "indices_buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "indices_G",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_617": {
                "variable": {
                    "value": "beams_buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "beams_G",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_722": {
                "variable": {
                    "value": "scores_buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lprobs.exp_()",
                            "Call"
                        ],
                        [
                            "lprobs.exp_()",
                            "Call"
                        ],
                        [
                            "lprobs.exp_()",
                            "Call"
                        ],
                        [
                            "probs.expand(bsz, beam_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "indices_buf.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_799": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "i_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.LongTensor().to(device=lprobs.device) for i in range(beam_size)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_801": {
                "variable": {
                    "value": "final_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_804": {
                "variable": {
                    "value": "(final_scores, final_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(s_list, dim=1).view(bsz, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(beam_size * 2, lprobs.view(bsz, -1).size(1) - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_317": {
                "variable": {
                    "value": "not_finished_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "not_finished_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(not_finished_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_347": {
                "variable": {
                    "value": "(top_scores, top_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs.view(batch_size * beam_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "each_k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_354": {
                "variable": {
                    "value": "scores_buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(scores_buf, top_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_355": {
                "variable": {
                    "value": "indices_buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(indices_buf, top_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_356": {
                "variable": {
                    "value": "new_beams",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "beam_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape[0] // original_batch_idxs.shape[0]",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "lprobs.device",
                            "Attribute"
                        ],
                        [
                            "lprobs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_357": {
                "variable": {
                    "value": "beams_buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(beams_buf, new_beams)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_400": {
                "variable": {
                    "value": "next_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(state.next_tokens())",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "lprobs.device",
                            "Attribute"
                        ],
                        [
                            "lprobs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "multinomial_705": {
                "variable": {
                    "value": "indices_buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs.view(bsz, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "beam_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape[0] // original_batch_idxs.shape[0]",
                            "BinOp"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multinomial_711": {
                "variable": {
                    "value": "indices_buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs.view(bsz * beam_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_727": {
                "variable": {
                    "value": "indices_buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_indices.expand(bsz, beam_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "indices_buf.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_727": {
                "variable": {
                    "value": "indices_buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_736": {
                "variable": {
                    "value": "beams_buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "beam_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape[0] // original_batch_idxs.shape[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_402": {
                "variable": {
                    "value": "indices_buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(indices_buf, next_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_404": {
                "variable": {
                    "value": "next_beams",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "beamno",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "lprobs.device",
                            "Attribute"
                        ],
                        [
                            "lprobs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_408": {
                "variable": {
                    "value": "beams_buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(beams_buf, next_beams)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_410": {
                "variable": {
                    "value": "scores_buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(scores_buf, next_values)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_460": {
                "tensors": {
                    "value": "(t[-1].unsqueeze(0), t[0:-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_592": {
                "variable": {
                    "value": "lprobs_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs_g",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lprobs[:, g::self.num_groups, :]",
                            "Subscript"
                        ],
                        [
                            "torch.add(lprobs_g, other=diversity_buf.unsqueeze(1), alpha=self.diversity_strength)",
                            "Call"
                        ],
                        [
                            "lprobs_g.contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "diversity_buf.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "alpha": {
                    "value": "self.diversity_strength",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_702": {
                "variable": {
                    "value": "top_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_782": {
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_784": {
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "k + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "topk_792": {
                "input": {
                    "value": "lprobs[:, i, :].view(bsz, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(beam_size * 2, lprobs.view(bsz, -1).size(1) - 1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "(s_list[i], i_list[i])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_805": {
                "tensors": {
                    "value": "s_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.empty(0).to(lprobs) for i in range(beam_size)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_611": {
                "*size": {
                    "value": "indices_buf.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_739": {
                "input": {
                    "value": "scores[:, :, step - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "beams_buf",
                    "type": "Call",
                    "possible_values": [
                        [
                            "indices_buf // vocab_size",
                            "BinOp"
                        ],
                        [
                            "indices_buf // vocab_size",
                            "BinOp"
                        ],
                        [
                            "indices_buf // vocab_size",
                            "BinOp"
                        ],
                        [
                            "torch.cat((beams_buf, new_beams), dim=1)",
                            "Call"
                        ],
                        [
                            "beams_buf[sort_indices]",
                            "Subscript"
                        ],
                        [
                            "torch.masked_select(beams_buf, uniques_mask)",
                            "Call"
                        ],
                        [
                            "torch.cat((beams_buf, next_beams))",
                            "Call"
                        ],
                        [
                            "beams_buf[sort_indices]",
                            "Subscript"
                        ],
                        [
                            "beams_buf[:self.num_cands]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(beams_G, dim=2).view(bsz, -1)",
                            "Call"
                        ],
                        [
                            "indices_buf.new_zeros(bsz, beam_size)",
                            "Call"
                        ],
                        [
                            "torch.arange(0, beam_size).to(indices_buf).repeat(bsz, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/sequence_generator.py": {
        "torch": {
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "annotate_202": {
                "variable": {
                    "value": "incremental_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "the_type": {
                    "value": "List[Dict[str, Dict[str, Optional[Tensor]]]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "[torch.jit.annotate(Dict[str, Dict[str, Optional[Tensor]]], {}) for i in range(self.model.models_size)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_256": {
                "variable": {
                    "value": "new_order",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bsz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "new_bsz",
                            "Name"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_265": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "max_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_268": {
                "variable": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "max_len + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_290": {
                "variable": {
                    "value": "cands_to_ignore",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "new_bsz",
                            "Name"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "beam_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.beam_size",
                            "Attribute"
                        ],
                        [
                            "self.beam_size",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eq_290": {
                "variable": {
                    "value": "cands_to_ignore",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "annotate_294": {
                "variable": {
                    "value": "finalized",
                    "type": "Variable",
                    "possible_values": []
                },
                "the_type": {
                    "value": "List[List[Dict[str, Tensor]]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "[torch.jit.annotate(List[Dict[str, Tensor]], []) for i in range(bsz)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_309": {
                "variable": {
                    "value": "cand_offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "cand_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * beam_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_677": {
                "variable": {
                    "value": "lprobs[prefix_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "-math.inf",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_961": {
                "variable": {
                    "value": "self.models",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "models",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_1126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_318": {
                "variable": {
                    "value": "original_batch_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "bsz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "new_bsz",
                            "Name"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_366": {
                "variable": {
                    "value": "lprobs[lprobs != lprobs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "-math.inf",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_429": {
                "variable": {
                    "value": "eos_bbsz_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_432": {
                "variable": {
                    "value": "eos_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_459": {
                "variable": {
                    "value": "eos_mask[:, :beam_size][cands_to_ignore]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "masked_select_464": {
                "variable": {
                    "value": "eos_bbsz_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cand_bbsz_idx[:, :beam_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "eos_mask[:, :beam_size]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "cand_indices.eq(self.eos) & cand_scores.ne(-math.inf)",
                            "BinOp"
                        ],
                        [
                            "eos_mask[batch_idxs]",
                            "Subscript"
                        ],
                        [
                            "prefix_toks.eq(self.eos)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_580": {
                "variable": {
                    "value": "active_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eos_mask.type_as(cand_offsets) * cand_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "cand_offsets[:eos_mask.size(1)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "topk_590": {
                "variable": {
                    "value": "(new_cands_to_ignore, active_hypos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "active_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.add(eos_mask.type_as(cand_offsets) * cand_size, cand_offsets[:eos_mask.size(1)])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.beam_size",
                            "Attribute"
                        ],
                        [
                            "self.beam_size",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_603": {
                "variable": {
                    "value": "active_bbsz_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cand_bbsz_idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cand_beams.add(bbsz_offsets)",
                            "Call"
                        ],
                        [
                            "cand_beams.add(bbsz_offsets)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "active_hypos",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_604": {
                "variable": {
                    "value": "active_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cand_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cand_scores[batch_idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "active_hypos",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_612": {
                "variable": {
                    "value": "tokens[:, :step + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tokens[:, :step + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "active_bbsz_idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.gather(cand_bbsz_idx, dim=1, index=active_hypos)",
                            "Call"
                        ],
                        [
                            "active_bbsz_idx.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_616": {
                "variable": {
                    "value": "tokens.view(bsz, beam_size, -1)[:, :, step + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "cand_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cand_indices[batch_idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "active_hypos",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_623": {
                "variable": {
                    "value": "scores.view(bsz, beam_size, -1)[:, :, step]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "cand_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cand_scores[batch_idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "active_hypos",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_660": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[float(elem['score'].item()) for elem in finalized[sent]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sort_663": {
                "variable": {
                    "value": "(_, sorted_scores_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(bsz * beam_size, max_len + 1).to(src_tokens).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor([float(elem['score'].item()) for elem in finalized[sent]])",
                            "Call"
                        ],
                        [
                            "scores.type_as(lprobs)",
                            "Call"
                        ],
                        [
                            "scores.view(bsz, -1)[batch_idxs].view(new_bsz * beam_size, -1)",
                            "Call"
                        ],
                        [
                            "self.replicate_first_beam(scores, eos_mask_batch_dim, beam_size)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "annotate_665": {
                "variable": {
                    "value": "finalized[sent]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_type": {
                    "value": "List[Dict[str, Tensor]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "finalized[sent]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_949": {
                "variable": {
                    "value": "lprobs[bbsz_idx][torch.tensor(banned_tokens[bbsz_idx]).long()]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "-math.inf",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "masked_select_470": {
                "variable": {
                    "value": "eos_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cand_scores[:, :beam_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "eos_mask[:, :beam_size]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "cand_indices.eq(self.eos) & cand_scores.ne(-math.inf)",
                            "BinOp"
                        ],
                        [
                            "eos_mask[batch_idxs]",
                            "Subscript"
                        ],
                        [
                            "prefix_toks.eq(self.eos)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_520": {
                "variable": {
                    "value": "batch_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "new_bsz",
                            "Name"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cand_indices.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_525": {
                "variable": {
                    "value": "batch_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bsz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "new_bsz",
                            "Name"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "cand_indices.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "masked_select_525": {
                "variable": {
                    "value": "batch_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(bsz, dtype=torch.bool, device=cand_indices.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_620": {
                "variable": {
                    "value": "scores[:, :step]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "scores[:, :step]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "active_bbsz_idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.gather(cand_bbsz_idx, dim=1, index=active_hypos)",
                            "Call"
                        ],
                        [
                            "active_bbsz_idx.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_632": {
                "variable": {
                    "value": "attn[:, :, :step + 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "attn[:, :, :step + 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "active_bbsz_idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.gather(cand_bbsz_idx, dim=1, index=active_hypos)",
                            "Call"
                        ],
                        [
                            "active_bbsz_idx.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_815": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "-math.inf",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "annotate_909": {
                "the_type": {
                    "value": "List[int]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "annotate_920": {
                "the_type": {
                    "value": "Dict[str, List[int]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "{}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "logsumexp_1067": {
                "input": {
                    "value": "torch.stack(log_probs, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "annotate_205": {
                "the_type": {
                    "value": "Dict[str, Dict[str, Optional[Tensor]]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "{}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "annotate_296": {
                "the_type": {
                    "value": "List[Dict[str, Tensor]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "empty_392": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "avg_attn_scores.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "max_len + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_400": {
                "variable": {
                    "value": "knn_index_record",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "step_knn_index.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "max_len + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_405": {
                "variable": {
                    "value": "knn_distance_record",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "step_knn_distance.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "max_len + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_410": {
                "variable": {
                    "value": "knn_lambda_record",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "step_knn_lambda.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "max_len + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_415": {
                "variable": {
                    "value": "knn_label_counts_record",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "step_knn_label_counts.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "max_len + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "index_select_639": {
                "variable": {
                    "value": "knn_index_record[:, :, :step + 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "knn_index_record[:, :, :step + 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "active_bbsz_idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.gather(cand_bbsz_idx, dim=1, index=active_hypos)",
                            "Call"
                        ],
                        [
                            "active_bbsz_idx.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_643": {
                "variable": {
                    "value": "knn_distance_record[:, :, :step + 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "knn_distance_record[:, :, :step + 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "active_bbsz_idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.gather(cand_bbsz_idx, dim=1, index=active_hypos)",
                            "Call"
                        ],
                        [
                            "active_bbsz_idx.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_647": {
                "variable": {
                    "value": "knn_lambda_record[:, :, :step + 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "knn_lambda_record[:, :, :step + 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "active_bbsz_idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.gather(cand_bbsz_idx, dim=1, index=active_hypos)",
                            "Call"
                        ],
                        [
                            "active_bbsz_idx.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_651": {
                "variable": {
                    "value": "knn_label_counts_record[:, :, :step + 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "knn_label_counts_record[:, :, :step + 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "active_bbsz_idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.gather(cand_bbsz_idx, dim=1, index=active_hypos)",
                            "Call"
                        ],
                        [
                            "active_bbsz_idx.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_824": {
                "variable": {
                    "value": "hypo_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_830": {
                "variable": {
                    "value": "hypo_knn_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_835": {
                "variable": {
                    "value": "hypo_knn_distance",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_840": {
                "variable": {
                    "value": "hypo_knn_lambda",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_845": {
                "variable": {
                    "value": "hypo_knn_label_counts",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "annotate_944": {
                "the_type": {
                    "value": "List[int]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_948": {
                "data": {
                    "value": "banned_tokens[bbsz_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_1067": {
                "tensors": {
                    "value": "log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_222": {
                "data": {
                    "value": "src_tokens.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_326": {
                "start": {
                    "value": "batch_idxs.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_858": {
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "annotate_931": {
                "the_type": {
                    "value": "List[int]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_308": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "bsz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "new_bsz",
                            "Name"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ],
                        [
                            "src_tokens.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/sequence_scorer.py": {
        "torch": {
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_101": {
                "obj": {
                    "value": "attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decoder_out[1] if len(decoder_out) > 1 else None",
                            "IfExp"
                        ],
                        [
                            "attn.get('attn', None)",
                            "Call"
                        ],
                        [
                            "attn.data",
                            "Attribute"
                        ],
                        [
                            "attn[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "fairseq/tasks/fairseq_task.py": {
        "torch": {
            "no_grad_425": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_432": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/tasks/language_modeling.py": {
        "torch": {
            "no_grad_294": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/tasks/multilingual_masked_lm.py": {
        "torch": {}
    },
    "fairseq/tasks/multilingual_translation.py": {
        "torch": {
            "no_grad_372": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_397": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/tasks/translation_from_pretrained_bart.py": {
        "torch": {
            "cat_123": {
                "variable": {
                    "value": "s_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s_t, s_t.new(1).fill_(src_lang_id)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/tasks/translation_lev.py": {
        "torch": {
            "no_grad_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/tasks/translation_multi_simple_epoch.py": {
        "torch": {
            "no_grad_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/token_generation_constraints.py": {
        "torch": {
            "zeros_82": {
                "variable": {
                    "value": "constraints_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_constraints_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/trainer.py": {
        "torch": {
            "device_48": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_73": {
                "variable": {
                    "value": "self.last_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "args.pipeline_devices[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_tensor_530": {
                "obj": {
                    "value": "sample_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample_size * 0.0",
                            "BinOp"
                        ],
                        [
                            "sample_size.float()",
                            "Call"
                        ],
                        [
                            "float(sample_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_52": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_tensor_525": {
                "obj": {
                    "value": "sample_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample_size * 0.0",
                            "BinOp"
                        ],
                        [
                            "sample_size.float()",
                            "Call"
                        ],
                        [
                            "float(sample_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_614": {
                "variable": {
                    "value": "grad_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_716": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_927": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_1025": {
                "variable": {
                    "value": "max_abs_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(tensor - tensor[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_750": {
                "obj": {
                    "value": "sample_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample_size * 0.0",
                            "BinOp"
                        ],
                        [
                            "sample_size.float()",
                            "Call"
                        ],
                        [
                            "float(sample_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_928": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_496": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_590": {
                "input": {
                    "value": "grad_norm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(0.0).cuda()",
                            "Call"
                        ],
                        [
                            "self.clip_grad_norm(self.args.clip_norm)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "all_590": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_693": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "memory_summary_929": {
                "device": {
                    "value": "device_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(torch.cuda.device_count())",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_1025": {
                "input": {
                    "value": "tensor - tensor[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isfinite_1027": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "all_1027": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_1057": {
                "condition": {
                    "value": "grad_norm > self.args.clip_norm",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "grad_norm.new_tensor(100)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "grad_norm.new_tensor(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_device_capability_205": {
                "device": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_device_capability_217": {
                "device": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_tensor_997": {
                "obj": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sum((log[k] for log in logging_outputs if k in log))",
                            "Call"
                        ],
                        [
                            "logging_outputs[0][k]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(v) if torch.is_tensor(v) else 0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_like_997": {
                "input": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sum((log[k] for log in logging_outputs if k in log))",
                            "Call"
                        ],
                        [
                            "logging_outputs[0][k]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(v) if torch.is_tensor(v) else 0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "empty_cache_508": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_744": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq/utils.py": {
        "torch": {
            "empty_276": {
                "variable": {
                    "value": "buffered",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_318": {
                "variable": {
                    "value": "total_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(norms)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_322": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_552": {
                "variable": {
                    "value": "rng_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_553": {
                "variable": {
                    "value": "cuda_rng_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "remainder_282": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "range - num_pads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "src_tokens.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "remainder_284": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "range + num_pads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "src_tokens.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_335": {
                "variable": {
                    "value": "total_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grads[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_545": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_546": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "set_rng_state_556": {
                "new_state": {
                    "value": "rng_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.get_rng_state()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_rng_state_557": {
                "new_state": {
                    "value": "cuda_rng_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cuda.get_rng_state()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_620": {
                "start": {
                    "value": "size[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_645": {
                "variable": {
                    "value": "cur_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_properties_646": {
                "variable": {
                    "value": "prop",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "'cuda:{}'.format(cur_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_82": {
                "obj": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "eval(x)",
                            "Call"
                        ],
                        [
                            "eval(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "current_device_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_183": {
                "variable": {
                    "value": "embed_dict[pieces[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_257": {
                "start": {
                    "value": "max",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "buffered_arange.buf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_278": {
                "start": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "src_tokens.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "buffered",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.empty(0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_310": {
                "variable": {
                    "value": "has_inf",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Call",
                    "possible_values": [
                        [
                            "device or torch.cuda.current_device()",
                            "BoolOp"
                        ],
                        [
                            "grad.device",
                            "Attribute"
                        ],
                        [
                            "per_device_grads.keys()",
                            "Call"
                        ],
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ],
                        [
                            "grads[0].device",
                            "Attribute"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "xm.xla_device()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_318": {
                "tensors": {
                    "value": "norms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "norms + [torch.norm(g, p=2, dtype=torch.float32) for g in cur_device_grads]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_350": {
                "variable": {
                    "value": "total_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack([torch.norm(g, p=2, dtype=torch.float32).to(device) for g in grads])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_467": {
                "input": {
                    "value": "x.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_469": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "eval(x)",
                            "Call"
                        ],
                        [
                            "eval(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_474": {
                "input": {
                    "value": "x.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_476": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "eval(x)",
                            "Call"
                        ],
                        [
                            "eval(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_332": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_345": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_311": {
                "type": {
                    "value": "device",
                    "type": "Call",
                    "possible_values": [
                        [
                            "device or torch.cuda.current_device()",
                            "BoolOp"
                        ],
                        [
                            "grad.device",
                            "Attribute"
                        ],
                        [
                            "per_device_grads.keys()",
                            "Call"
                        ],
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ],
                        [
                            "grads[0].device",
                            "Attribute"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "xm.xla_device()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "norm_317": {
                "input": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grads",
                            "Name"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_349": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_351": {
                "tensors": {
                    "value": "[torch.norm(g, p=2, dtype=torch.float32).to(device) for g in grads]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cumsum_245": {
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensor.ne(padding_idx).int()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "current_device_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_352": {
                "input": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grads",
                            "Name"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairseq_cli/eval_lm.py": {
        "torch": {
            "is_available_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_67": {
                "device": {
                    "value": "parsed_args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq_cli/generate.py": {
        "torch": {
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq_cli/interactive.py": {
        "torch": {
            "is_available_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq_cli/train.py": {
        "torch": {
            "profile_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "emit_nvtx_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fairseq_cli/validate.py": {
        "torch": {
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_38": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "knn_generate.py": {
        "torch": {
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "save_datastore.py": {
        "torch": {
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_43": {
                "device": {
                    "value": "args.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/average_checkpoints.py": {
        "torch": {
            "load_34": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "files",
                            "Name"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda s, _: torch.serialization.default_restore_location(s, 'cpu')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_153": {
                "obj": {
                    "value": "new_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "average_checkpoints(args.inputs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "files",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "setup.py": {
        "torch": {}
    },
    "tests/gpu/test_binaries_gpu.py": {
        "torch": {
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/speech_recognition/asr_test_base.py": {
        "torch": {
            "randn_76": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "T",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "D",
                    "type": "Name",
                    "possible_values": [
                        [
                            "80",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_79": {
                "variable": {
                    "value": "src_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randint(low=1, high=T, size=B, dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_111": {
                "variable": {
                    "value": "encoder_out[encoder_out]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randn(*encoder_out_shape).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_114": {
                "variable": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randint(low=1, high=T, size=B)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_116": {
                "start": {
                    "value": "T",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_483": {
                "input": {
                    "value": "torch.div(net_output['encoder_out'], 1 - net_output['encoder_out'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_531": {
                "variable": {
                    "value": "src_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_535": {
                "variable": {
                    "value": "src_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 10, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_543": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_547": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "ndarray": {
                    "value": "tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randint(low=0, high=K, size=token_length, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "div_484": {
                "input": {
                    "value": "net_output['encoder_out']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - net_output['encoder_out']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_tensor_312": {
                "obj": {
                    "value": "logprob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=True)",
                            "Call"
                        ],
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_313": {
                "obj": {
                    "value": "prob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=False)",
                            "Call"
                        ],
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_380": {
                "obj": {
                    "value": "logprob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=True)",
                            "Call"
                        ],
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_381": {
                "obj": {
                    "value": "prob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=False)",
                            "Call"
                        ],
                        [
                            "self.model.get_normalized_probs(forward_output, log_probs=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_555": {
                "data": {
                    "value": "[L]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/speech_recognition/test_collaters.py": {
        "torch": {
            "tensor_33": {
                "data": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [pad_idx, pad_idx]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "[[eos_idx, 3, 2, pad_idx], [eos_idx, 4, 2, 3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "data": {
                    "value": "[3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "data": {
                    "value": "[[3, 2, eos_idx, pad_idx], [4, 2, 3, eos_idx]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/speech_recognition/test_data_utils.py": {
        "torch": {
            "tensor_14": {
                "variable": {
                    "value": "sample_len1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-0.7661, -1.3889, -2.0972, -0.9134, -0.7071, -0.9765, -0.87, -0.8283, 0.7512, 1.3211, 2.1532, 2.1174, 1.28, 1.2633, 1.6147, 1.6322, 2.0723, 3.1522, 3.2852, 2.2309, 2.5569, 2.2183, 2.2862, 1.5886, 0.8773, 0.8725, 1.2662, 0.9899, 1.1069, 1.3926, 1.2795, 1.1199, 1.1477, 1.2687, 1.3843, 1.1903, 0.8355, 1.1367, 1.2639, 1.4707]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "isnan_61": {
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_utils.apply_mv_norm(sample_len1)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_average_checkpoints.py": {
        "torch": {
            "Embedding_21": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.FC1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.FC2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.FC2.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.FC1.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.FC2.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.FC1.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_61": {
                "obj": {
                    "value": "collections.OrderedDict([('model', params_0)])",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path_0",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_62": {
                "obj": {
                    "value": "collections.OrderedDict([('model', params_1)])",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_92": {
                "obj": {
                    "value": "{'model': m.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(tmpdir, 'm1.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(tmpdir, 'm2.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(tmpdir, 'm3.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_111": {
                "input": {
                    "value": "new_model['model']['embedding.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "(m1.embedding.weight + m2.embedding.weight + m3.embedding.weight) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_118": {
                "input": {
                    "value": "new_model['model']['FC1.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "(m1.FC1.weight + m2.FC1.weight + m3.FC1.weight) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_125": {
                "input": {
                    "value": "new_model['model']['FC2.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "(m1.FC2.weight + m2.FC2.weight + m3.FC2.weight) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_backtranslation_dataset.py": {
        "torch": {
            "is_available_32": {
                "variable": {
                    "value": "self.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "backtranslation_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BacktranslationDataset(tgt_dataset=TransformEosDataset(dataset=tgt_dataset, eos=self.tgt_dict.eos(), remove_eos_from_src=remove_eos_from_input_src), src_dict=self.tgt_dict, backtranslation_fn=lambda sample: generator.generate([self.model], sample), output_collater=TransformEosDataset(dataset=tgt_dataset, eos=self.tgt_dict.eos(), append_eos_to_tgt=remove_eos_from_input_src, remove_eos_from_src=remove_eos_from_output_src).collater, cuda=self.cuda)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "backtranslation_dataset.collater",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_binaries.py": {
        "torch": {
            "rand_1318": {
                "variable": {
                    "value": "random_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_examples * maxlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_1321": {
                "variable": {
                    "value": "output_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_examples, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "floor_1319": {
                "input": {
                    "value": "26 * random_data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_1323": {
                "input": {
                    "value": "num_classes * torch.rand(num_examples)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_1323": {
                "*size": {
                    "value": "num_examples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_bmuf.py": {
        "torch": {
            "CrossEntropyLoss_35": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_57": {
                "variable": {
                    "value": "is_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_33": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_64": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "args.input_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_65": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_59": {
                "device": {
                    "value": "rank",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(args.distributed_world_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_77": {
                "variable": {
                    "value": "results",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(results, param.flatten().cpu().data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_count_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_character_token_embedder.py": {
        "torch": {}
    },
    "tests/test_concat_dataset.py": {
        "torch": {}
    },
    "tests/test_constraints.py": {
        "torch": {
            "tensor_14": {
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "equal_47": {
                "input": {
                    "value": "packed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pack_constraints(batch_constraints)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "[[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_21": {
                "data": {
                    "value": "[[0], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "data": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "data": {
                    "value": "[[3, 3, 1, 2, 0, 3, 0, 4, 5, 6, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 8, 9, 10, 1, 4, 11, 12, 0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "data": {
                    "value": "[3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "data": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "data": {
                    "value": "[4, 5, 6, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "data": {
                    "value": "[1, 8, 9, 10, 1, 4, 11, 12]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_convtbc.py": {
        "torch": {
            "Conv1d_18": {
                "variable": {
                    "value": "conv1d",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_23": {
                "variable": {
                    "value": "input_tbc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_34": {
                "variable": {
                    "value": "grad_tbc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output_tbc.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_dictionary.py": {
        "torch": {}
    },
    "tests/test_export.py": {
        "torch": {
            "script_70": {
                "variable": {
                    "value": "scripted",
                    "type": "Variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "module",
                    "type": "Call",
                    "possible_values": [
                        [
                            "multihead_attention.MultiheadAttention(embed_dim=8, num_heads=2)",
                            "Call"
                        ],
                        [
                            "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding(embedding_dim=8, padding_idx=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "script_75": {
                "variable": {
                    "value": "module1",
                    "type": "Variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "module1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "multihead_attention.MultiheadAttention(embed_dim=8, num_heads=2)",
                            "Call"
                        ],
                        [
                            "torch.jit.script(module1)",
                            "Call"
                        ]
                    ]
                }
            },
            "script_77": {
                "variable": {
                    "value": "module2",
                    "type": "Variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "module2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "multihead_attention.MultiheadAttention(embed_dim=8, num_heads=2)",
                            "Call"
                        ],
                        [
                            "torch.jit.script(module2)",
                            "Call"
                        ]
                    ]
                }
            },
            "script_92": {
                "variable": {
                    "value": "scripted",
                    "type": "Variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "module",
                    "type": "Call",
                    "possible_values": [
                        [
                            "multihead_attention.MultiheadAttention(embed_dim=8, num_heads=2)",
                            "Call"
                        ],
                        [
                            "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding(embedding_dim=8, padding_idx=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "script_103": {
                "variable": {
                    "value": "scripted",
                    "type": "Variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TransformerModel.build_model(args, task)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_64": {
                "f": {
                    "value": "f.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "data": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_fp16_optimizer.py": {
        "torch": {
            "tensor_17": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_21": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.x * weight + bias + self.error]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "L1Loss_22": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "variable": {
                    "value": "self.model.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[weight]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "variable": {
                    "value": "self.model.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[bias]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_48": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "[[3.0996]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float16",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "data": {
                    "value": "[5.1016]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float16",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "all_76": {
                "input": {
                    "value": "fp32_params.eq(torch.tensor([3.1, 5.1], device='cuda:0', requires_grad=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "data": {
                    "value": "[3.1, 5.1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_label_smoothing.py": {
        "torch": {
            "unsqueeze_48": {
                "variable": {
                    "value": "self.args.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_lstm_jitable.py": {
        "torch": {
            "script_80": {
                "variable": {
                    "value": "scripted_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "LSTMModel.build_model(args, task)",
                            "Call"
                        ],
                        [
                            "LSTMModel.build_model(args, task)",
                            "Call"
                        ]
                    ]
                }
            },
            "script_90": {
                "variable": {
                    "value": "scripted_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "LSTMModel.build_model(args, task)",
                            "Call"
                        ],
                        [
                            "LSTMModel.build_model(args, task)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_95": {
                "variable": {
                    "value": "seq_len_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(iter,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_96": {
                "variable": {
                    "value": "num_samples_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(iter,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_101": {
                "variable": {
                    "value": "src_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "seq_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sort_102": {
                "variable": {
                    "value": "(src_lengths, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "src_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randint(1, seq_len + 1, (num_samples,))",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_66": {
                "f": {
                    "value": "f.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_69": {
                "input": {
                    "value": "t1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "t1[~torch.isnan(t1)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "isnan_70": {
                "input": {
                    "value": "t2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "t2[~torch.isnan(t2)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randint_100": {
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(task.source_dictionary)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(num_samples, seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_105": {
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(task.source_dictionary)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(num_samples, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_memory_efficient_fp16.py": {
        "torch": {
            "Linear_25": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_61": {
                "obj": {
                    "value": "v_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "v.values()",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_51": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_multi_corpus_sampled_dataset.py": {
        "torch": {}
    },
    "tests/test_multihead_attention.py": {
        "torch": {
            "tensor_22": {
                "data": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "data": {
                    "value": "[[0, 0, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "[[0, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "data": {
                    "value": "[[0, 1, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "data": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "data": {
                    "value": "[[0, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "data": {
                    "value": "[[0, 1, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "all_50": {
                "input": {
                    "value": "torch.eq(key_padding_mask, c[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_50": {
                "input": {
                    "value": "key_padding_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MultiheadAttention._append_prev_key_padding_mask(c[0], c[1], batch_size=bsz, src_len=src_len, static_kv=False)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "c[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_noising.py": {
        "torch": {
            "DataLoader_444": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "language_pair_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "LanguagePairDataset(src=noising_dataset, tgt=tgt, src_sizes=None, src_dict=src_dict)",
                            "Call"
                        ],
                        [
                            "TransformEosDataset(language_pair_dataset, src_dict.eos(), append_eos_to_tgt=append_eos_to_tgt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "language_pair_dataset.collater",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_458": {
                "variable": {
                    "value": "src_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_tokens",
                    "type": "List",
                    "possible_values": [
                        [
                            "[['he@@', 'llo', 'n@@', 'ew', 'y@@', 'or@@', 'k'], ['how', 'are', 'y@@', 'ou']]",
                            "List"
                        ],
                        [
                            "[['he', 'llo_EOW', 'n', 'ew_EOW', 'y', 'or', 'k_EOW'], ['how_EOW', 'are_EOW', 'y', 'ou_EOW']]",
                            "List"
                        ],
                        [
                            "[['hello', 'new', 'york', 'you'], ['how', 'are', 'you', 'new', 'york']]",
                            "List"
                        ],
                        [
                            "torch.t(src_tokens)",
                            "Call"
                        ],
                        [
                            "torch.t(src_tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_495": {
                "variable": {
                    "value": "src_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_tokens",
                    "type": "List",
                    "possible_values": [
                        [
                            "[['he@@', 'llo', 'n@@', 'ew', 'y@@', 'or@@', 'k'], ['how', 'are', 'y@@', 'ou']]",
                            "List"
                        ],
                        [
                            "[['he', 'llo_EOW', 'n', 'ew_EOW', 'y', 'or', 'k_EOW'], ['how_EOW', 'are_EOW', 'y', 'ou_EOW']]",
                            "List"
                        ],
                        [
                            "[['hello', 'new', 'york', 'you'], ['how', 'are', 'you', 'new', 'york']]",
                            "List"
                        ],
                        [
                            "torch.t(src_tokens)",
                            "Call"
                        ],
                        [
                            "torch.t(src_tokens)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_reproducibility.py": {
        "torch": {
            "is_available_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_sequence_generator.py": {
        "torch": {
            "randint_69": {
                "variable": {
                    "value": "src_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "src_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_tokens, torch.LongTensor([[eos], [eos]]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_82": {
                "variable": {
                    "value": "pos_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "script_126": {
                "variable": {
                    "value": "scripted_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "generator",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequenceGenerator([model], self.task.tgt_dict, beam_size=2, no_repeat_ngram_size=2)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, normalize_scores=False)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, len_penalty=lenpen)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, len_penalty=lenpen)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, max_len_b=2)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([reshaping_model], self.tgt_dict, beam_size=2, max_len_b=2)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([add_input_model], self.tgt_dict, beam_size=2)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, search_strategy=search_strategy)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, search_strategy=search_strategy)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, search_strategy=search_strategy)",
                            "Call"
                        ],
                        [
                            "SequenceGenerator([self.model], self.tgt_dict, beam_size=2, search_strategy=search_strategy)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_171": {
                "variable": {
                    "value": "pos_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_430": {
                "variable": {
                    "value": "pos_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_629": {
                "variable": {
                    "value": "pos_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "script_116": {
                "obj": {
                    "value": "model",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.transformer_model",
                            "Attribute"
                        ],
                        [
                            "self.transformer_model",
                            "Attribute"
                        ],
                        [
                            "self.transformer_model",
                            "Attribute"
                        ]
                    ]
                }
            },
            "script_137": {
                "obj": {
                    "value": "ensemble_models",
                    "type": "Name",
                    "possible_values": [
                        [
                            "EnsembleModel([model])",
                            "Call"
                        ]
                    ]
                }
            },
            "script_150": {
                "obj": {
                    "value": "search_strategy",
                    "type": "Call",
                    "possible_values": [
                        [
                            "search.DiverseBeamSearch(self.tgt_dict, num_groups=2, diversity_strength=0.0)",
                            "Call"
                        ],
                        [
                            "search.Sampling(self.tgt_dict, sampling_topp=low_sampling_topp)",
                            "Call"
                        ],
                        [
                            "search.DiverseSiblingsSearch(self.tgt_dict, diversity_rate=0.5)",
                            "Call"
                        ],
                        [
                            "search.DiverseBeamSearch(self.tgt_dict, num_groups=2, diversity_strength=0.0)",
                            "Call"
                        ],
                        [
                            "search.DiverseSiblingsSearch(self.tgt_dict, diversity_rate=0.5)",
                            "Call"
                        ],
                        [
                            "search.Sampling(self.tgt_dict, sampling_topp=low_sampling_topp)",
                            "Call"
                        ],
                        [
                            "search.Sampling(self.tgt_dict, sampling_topp=high_sampling_topp)",
                            "Call"
                        ]
                    ]
                }
            },
            "script_157": {
                "obj": {
                    "value": "search_strategy",
                    "type": "Call",
                    "possible_values": [
                        [
                            "search.DiverseBeamSearch(self.tgt_dict, num_groups=2, diversity_strength=0.0)",
                            "Call"
                        ],
                        [
                            "search.Sampling(self.tgt_dict, sampling_topp=low_sampling_topp)",
                            "Call"
                        ],
                        [
                            "search.DiverseSiblingsSearch(self.tgt_dict, diversity_rate=0.5)",
                            "Call"
                        ],
                        [
                            "search.DiverseBeamSearch(self.tgt_dict, num_groups=2, diversity_strength=0.0)",
                            "Call"
                        ],
                        [
                            "search.DiverseSiblingsSearch(self.tgt_dict, diversity_rate=0.5)",
                            "Call"
                        ],
                        [
                            "search.Sampling(self.tgt_dict, sampling_topp=low_sampling_topp)",
                            "Call"
                        ],
                        [
                            "search.Sampling(self.tgt_dict, sampling_topp=high_sampling_topp)",
                            "Call"
                        ]
                    ]
                }
            },
            "script_163": {
                "obj": {
                    "value": "search_strategy",
                    "type": "Call",
                    "possible_values": [
                        [
                            "search.DiverseBeamSearch(self.tgt_dict, num_groups=2, diversity_strength=0.0)",
                            "Call"
                        ],
                        [
                            "search.Sampling(self.tgt_dict, sampling_topp=low_sampling_topp)",
                            "Call"
                        ],
                        [
                            "search.DiverseSiblingsSearch(self.tgt_dict, diversity_rate=0.5)",
                            "Call"
                        ],
                        [
                            "search.DiverseBeamSearch(self.tgt_dict, num_groups=2, diversity_strength=0.0)",
                            "Call"
                        ],
                        [
                            "search.DiverseSiblingsSearch(self.tgt_dict, diversity_rate=0.5)",
                            "Call"
                        ],
                        [
                            "search.Sampling(self.tgt_dict, sampling_topp=low_sampling_topp)",
                            "Call"
                        ],
                        [
                            "search.Sampling(self.tgt_dict, sampling_topp=high_sampling_topp)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_107": {
                "f": {
                    "value": "f.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_sequence_scorer.py": {
        "torch": {
            "log_102": {
                "variable": {
                    "value": "pos_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_sparse_multihead_attention.py": {
        "torch": {
            "randn_14": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_15": {
                "variable": {
                    "value": "bidirectional_sparse_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "variable": {
                    "value": "sparse_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, float('-inf'), float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "all_34": {
                "input": {
                    "value": "torch.eq(bidirectional_attention_sparse_mask, bidirectional_sparse_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_110": {
                "input": {
                    "value": "torch.eq(attention_sparse_mask, sparse_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_35": {
                "input": {
                    "value": "bidirectional_attention_sparse_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bidirectional_attention.buffered_sparse_mask(attn_weights, 8, 8)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bidirectional_sparse_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_110": {
                "input": {
                    "value": "attention_sparse_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention.buffered_sparse_mask(attn_weights, 8, 8)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "sparse_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor([[0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, 0, float('-inf'), float('-inf'), float('-inf'), float('-inf')], [0, 0, 0, 0, 0, float('-inf'), float('-inf'), float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, float('-inf'), float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, float('-inf')], [float('-inf'), float('-inf'), float('-inf'), 0, 0, 0, 0, 0]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_token_block_dataset.py": {
        "torch": {
            "tensor_21": {
                "data": {
                    "value": "[5, 4, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "data": {
                    "value": "[8, 7, 6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "data": {
                    "value": "[5, 4, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "data": {
                    "value": "[8, 7, 6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "data": {
                    "value": "[5, 4, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "[8, 7, 6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "data": {
                    "value": "[9, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "data": {
                    "value": "[5, 4, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "[8, 7, 6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "[9, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "data": {
                    "value": "[4, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "data": {
                    "value": "[5, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "data": {
                    "value": "[6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_train.py": {
        "torch": {}
    },
    "tests/test_utils.py": {
        "torch": {
            "Parameter_88": {
                "variable": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_97": {
                "variable": {
                    "value": "exp_grad_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(15,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_97": {
                "variable": {
                    "value": "exp_grad_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_95": {
                "variable": {
                    "value": "p.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(5,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_tensor_90": {
                "obj": {
                    "value": "grad_norm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "utils.clip_grad_norm_(params, 1.0)",
                            "Call"
                        ],
                        [
                            "utils.clip_grad_norm_(params, 1.0)",
                            "Call"
                        ],
                        [
                            "utils.clip_grad_norm_(params, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_93": {
                "data": {
                    "value": "torch.zeros(5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_98": {
                "obj": {
                    "value": "grad_norm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "utils.clip_grad_norm_(params, 1.0)",
                            "Call"
                        ],
                        [
                            "utils.clip_grad_norm_(params, 1.0)",
                            "Call"
                        ],
                        [
                            "utils.clip_grad_norm_(params, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_102": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/utils.py": {
        "torch": {
            "DataLoader_52": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TestDataset(samples)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(samples)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "lambda samples: collate(samples, padding_idx, eos_idx)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "rand_164": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_examples * maxlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_504": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bbsz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prev_output_tokens.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "tgt_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(tgt.split())",
                            "Call"
                        ],
                        [
                            "prev_output_tokens.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "src_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(src.split())",
                            "Call"
                        ],
                        [
                            "encoder_out.encoder_out.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_532": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "src_tokens",
                            "Name"
                        ],
                        [
                            "F.pad(x, (0, padding_needed))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, padding_needed)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "floor_165": {
                "input": {
                    "value": "26 * data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_183": {
                "variable": {
                    "value": "src_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand(num_alignments) * src_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_184": {
                "variable": {
                    "value": "tgt_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand(num_alignments) * tgt_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_183": {
                "*size": {
                    "value": "num_alignments",
                    "type": "Name",
                    "possible_values": [
                        [
                            "random.randint(avg_len // 2, 2 * avg_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_184": {
                "*size": {
                    "value": "num_alignments",
                    "type": "Name",
                    "possible_values": [
                        [
                            "random.randint(avg_len // 2, 2 * avg_len)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}