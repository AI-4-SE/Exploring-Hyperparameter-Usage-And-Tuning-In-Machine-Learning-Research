{
    "experiments/ami/adapt_pfstar_40_flat_speaker.py": {
        "tensorflow": {
            "ConfigProto_19": {
                "variable": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_22": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/ami/train_sinc_40_flat_6epochs.py": {
        "tensorflow": {
            "ConfigProto_16": {
                "variable": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_19": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "layers.py": {
        "tensorflow": {
            "linspace_94": {
                "variable": {
                    "value": "n_lin",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stop": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_101": {
                "variable": {
                    "value": "self.n_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "n_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(-n, n + 1, dtype='float') / self.sample_rate",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_108": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.abs(x) < 1e-20",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "1e-20 * tf.ones_like(x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.abs(x) < 1e-20, 1e-20 * tf.ones_like(x), x)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_119": {
                "variable": {
                    "value": "f_times_t",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "low",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.min_low_hz / self.sample_rate + tf.abs(self.low_hz_)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.n_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_124": {
                "variable": {
                    "value": "f_times_t",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "high",
                    "type": "Name",
                    "possible_values": [
                        [
                            "low + self.min_band_hz / self.sample_rate + tf.abs(self.band_hz_)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.n_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_131": {
                "variable": {
                    "value": "max_",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "band_pass",
                    "type": "Name",
                    "possible_values": [
                        [
                            "low_pass2 - low_pass1",
                            "BinOp"
                        ],
                        [
                            "band_pass / max_",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_135": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_136": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "range_99": {
                "dtype": {
                    "value": "float",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sin_109": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.abs(x) < 1e-20, 1e-20 * tf.ones_like(x), x)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_115": {
                "x": {
                    "value": "self.low_hz_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_116": {
                "x": {
                    "value": "self.band_hz_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_95": {
                "x": {
                    "value": "2 * math.pi * n_lin / self.kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_108": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.abs(x) < 1e-20, 1e-20 * tf.ones_like(x), x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_108": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.abs(x) < 1e-20, 1e-20 * tf.ones_like(x), x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "learning_to_adapt/model/layers.py": {
        "tensorflow": {}
    },
    "learning_to_adapt/utils/data_generator.py": {
        "tensorflow": {
            "unbatch_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shuffle_and_repeat_61": {
                "buffer_size": {
                    "value": "10000",
                    "type": "Constant",
                    "possible_values": []
                },
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 3200, chunk_size - left_context + right_context]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "tensor": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "tensor": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, chunk_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_58": {
                "func": {
                    "value": "_map_fn",
                    "type": "Name",
                    "possible_values": []
                },
                "inp": {
                    "value": "[path]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.int32, tf.int32]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "local/nnet3_forward.py": {
        "tensorflow": {
            "ConfigProto_31": {
                "variable": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_34": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "optimizers.py": {
        "tensorflow": {}
    }
}