{
    "cooc_utils.py": {
        "sklearn": {
            "KMeans_93": {
                "variable": {
                    "value": "cc_kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(gmm.mean)",
                            "Call"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "tol": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PCA_397": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "pca_dimensions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_439": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "unsqueeze_56": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_138": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(input_image).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "input_image",
                            "Method Argument"
                        ],
                        [
                            "input_image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_139": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(input_image).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "input_image",
                            "Method Argument"
                        ],
                        [
                            "input_image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_141": {
                "variable": {
                    "value": "level_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "input_image == level",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(input_image)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(input_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_142": {
                "variable": {
                    "value": "level_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "level_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(input_image == level, ones, zeros)",
                            "Call"
                        ],
                        [
                            "torch.sum(level_mask, dim=1, keepdim=True).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_142": {
                "variable": {
                    "value": "level_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "variable": {
                    "value": "cooc_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_171": {
                "variable": {
                    "value": "soft_assign_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "soft_assign",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[apply_exponential_kernel_batch(input_images, torch.from_numpy(gmm.mean[i]), torch.from_numpy(gmm.var[i])) for i in range(k)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_200": {
                "variable": {
                    "value": "cooc_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cooc_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size, 1), dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "cooc_mat[:, 1:cooc_mat.shape[1] + 1]",
                            "Subscript"
                        ],
                        [
                            "cooc_mat.view((batch_size, k, k))",
                            "Call"
                        ],
                        [
                            "cooc_mat + cooc_mat.permute(0, 2, 1)",
                            "BinOp"
                        ],
                        [
                            "cooc_mat / torch.unsqueeze(torch.unsqueeze(cooc_sum, dim=1), dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(cooc_mat, min=0, max=max_val)",
                            "Call"
                        ],
                        [
                            "torch.cat((cooc_mat, cooc_row), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_204": {
                "variable": {
                    "value": "max_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cooc_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size, 1), dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "cooc_mat[:, 1:cooc_mat.shape[1] + 1]",
                            "Subscript"
                        ],
                        [
                            "cooc_mat.view((batch_size, k, k))",
                            "Call"
                        ],
                        [
                            "cooc_mat + cooc_mat.permute(0, 2, 1)",
                            "BinOp"
                        ],
                        [
                            "cooc_mat / torch.unsqueeze(torch.unsqueeze(cooc_sum, dim=1), dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(cooc_mat, min=0, max=max_val)",
                            "Call"
                        ],
                        [
                            "torch.cat((cooc_mat, cooc_row), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_205": {
                "variable": {
                    "value": "cooc_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cooc_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size, 1), dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "cooc_mat[:, 1:cooc_mat.shape[1] + 1]",
                            "Subscript"
                        ],
                        [
                            "cooc_mat.view((batch_size, k, k))",
                            "Call"
                        ],
                        [
                            "cooc_mat + cooc_mat.permute(0, 2, 1)",
                            "BinOp"
                        ],
                        [
                            "cooc_mat / torch.unsqueeze(torch.unsqueeze(cooc_sum, dim=1), dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(cooc_mat, min=0, max=max_val)",
                            "Call"
                        ],
                        [
                            "torch.cat((cooc_mat, cooc_row), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "max_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(cooc_mat).item()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_224": {
                "input": {
                    "value": "mu.to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_226": {
                "input": {
                    "value": "sigma_sq.to(device) + EPSILON",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_229": {
                "variable": {
                    "value": "dist_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(input_images_expand - mu_expand, 2) / sigma_sq_expand",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_230": {
                "variable": {
                    "value": "output_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-dist_sq",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_179": {
                "variable": {
                    "value": "level_i_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "level_i_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "soft_assign[i]",
                            "Subscript"
                        ],
                        [
                            "torch.mul(level_i_mask, torch.unsqueeze(input_masks, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(level_i_mask, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_182": {
                "variable": {
                    "value": "cooc_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "level_i_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "soft_assign[i]",
                            "Subscript"
                        ],
                        [
                            "torch.mul(level_i_mask, torch.unsqueeze(input_masks, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(level_i_mask, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "f_cooc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_gaussian_filter(WIN_SIZE, SIGMA)",
                            "Call"
                        ],
                        [
                            "build_gaussian_filter(WIN_SIZE, SIGMA)",
                            "Call"
                        ],
                        [
                            "f_cooc",
                            "Method Argument"
                        ],
                        [
                            "f_cooc",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "((WIN_SIZE - 1) // 2, (WIN_SIZE - 1) // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_190": {
                "variable": {
                    "value": "cooc_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cooc_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.conv2d(level_i_mask, weight=f_cooc, padding=((WIN_SIZE - 1) // 2, (WIN_SIZE - 1) // 2))",
                            "Call"
                        ],
                        [
                            "torch.mul(cooc_weight, input_masks)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(cooc_weight, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_192": {
                "variable": {
                    "value": "cooc_row",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cooc_weight.repeat(1, k, 1, 1, 1) * soft_assign_tensor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "cooc_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cooc_mat, cooc_row)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_327": {
                "variable": {
                    "value": "reshaped_cooc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "processed_crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "process_crops_for_cooc(crops, batch_cooc, gmm_in=im_gmm, f_cooc=f_cooc, k=k, require_tensor=requires_tensor, input_numpy=True)",
                            "Call"
                        ],
                        [
                            "process_crops_for_cooc(crops, batch_cooc, gmm_in=im_gmm, f_cooc=f_cooc, k=k, require_tensor=requires_tensor)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_363": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "original_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_image[curr_image, :, :, :].unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "original_image",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(PATCH_SIZE // 2 - 1, PATCH_SIZE // 2, PATCH_SIZE // 2, PATCH_SIZE // 2 - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mul_177": {
                "variable": {
                    "value": "level_i_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "level_i_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "soft_assign[i]",
                            "Subscript"
                        ],
                        [
                            "torch.mul(level_i_mask, torch.unsqueeze(input_masks, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(level_i_mask, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(input_masks, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_188": {
                "variable": {
                    "value": "cooc_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cooc_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.conv2d(level_i_mask, weight=f_cooc, padding=((WIN_SIZE - 1) // 2, (WIN_SIZE - 1) // 2))",
                            "Call"
                        ],
                        [
                            "torch.mul(cooc_weight, input_masks)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(cooc_weight, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_201": {
                "input": {
                    "value": "cooc_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(cooc_mat, dim=(1, 2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_285": {
                "variable": {
                    "value": "crops_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "crops_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "crops[batch_start:batch_end]",
                            "Subscript"
                        ],
                        [
                            "[(image_tf(image_crop) * 255).to(device) for image_crop in crops_batch]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(crops_batch, axis=0).squeeze(0)",
                            "Call"
                        ],
                        [
                            "torch.stack(crops_batch, axis=1).squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_285": {
                "variable": {
                    "value": "crops_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_287": {
                "variable": {
                    "value": "crops_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "crops_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "crops[batch_start:batch_end]",
                            "Subscript"
                        ],
                        [
                            "[(image_tf(image_crop) * 255).to(device) for image_crop in crops_batch]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(crops_batch, axis=0).squeeze(0)",
                            "Call"
                        ],
                        [
                            "torch.stack(crops_batch, axis=1).squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_287": {
                "variable": {
                    "value": "crops_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_384": {
                "variable": {
                    "value": "reshaped_cooc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "processed_crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "process_crops_for_cooc(crops, batch_cooc, gmm_in=im_gmm, f_cooc=f_cooc, k=k, require_tensor=requires_tensor, input_numpy=True)",
                            "Call"
                        ],
                        [
                            "process_crops_for_cooc(crops, batch_cooc, gmm_in=im_gmm, f_cooc=f_cooc, k=k, require_tensor=requires_tensor)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_387": {
                "variable": {
                    "value": "reshaped_cooc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "processed_crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "process_crops_for_cooc(crops, batch_cooc, gmm_in=im_gmm, f_cooc=f_cooc, k=k, require_tensor=requires_tensor, input_numpy=True)",
                            "Call"
                        ],
                        [
                            "process_crops_for_cooc(crops, batch_cooc, gmm_in=im_gmm, f_cooc=f_cooc, k=k, require_tensor=requires_tensor)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_391": {
                "tensors": {
                    "value": "batched_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "is_available_439": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_168": {
                "ndarray": {
                    "value": "gmm.var[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_229": {
                "input": {
                    "value": "input_images_expand - mu_expand",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_177": {
                "input": {
                    "value": "input_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "config.py": {
        "torch": {
            "device_103": {
                "variable": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "BCELoss_52": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_86": {
                "seed": {
                    "value": "opt.manualSeed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_87": {
                "seed": {
                    "value": "opt.manualSeed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_97": {
                "*size": {
                    "value": "opt.kVal ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_97": {
                "*size": {
                    "value": "opt.kVal ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "evaluate_model.py": {
        "torch": {
            "from_numpy_92": {
                "variable": {
                    "value": "line_color",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(color)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "cooc_vol",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "number_of_samples * [cooc_crop_tensor]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_271": {
                "variable": {
                    "value": "diversity_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image_crop_tensor, diversity_output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_348": {
                "variable": {
                    "value": "entire_block",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cooc_crop1] * size[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_349": {
                "variable": {
                    "value": "entire_block",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[entire_block] * size[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_373": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_374": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_375": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_376": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_379": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_380": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_381": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_382": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_383": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_384": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_385": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_386": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_389": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_390": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_391": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_392": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_393": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_394": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_397": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_398": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_399": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_400": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_401": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_402": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_405": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_406": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_407": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_408": {
                "tensors": {
                    "value": "[diff_cooc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_450": {
                "variable": {
                    "value": "cooc_interp_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cooc_interp_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_cooc_interps(data_image, cooc_vol, scale_factor, crop_size, number_of_samples, extrapolation=extra, top_idx=top_idx, left_idx=left_idx)",
                            "Call"
                        ],
                        [
                            "torch.cat(cooc_interp_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_29": {
                "variable": {
                    "value": "model_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(noise_vec, cooc_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "model_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cooc_vec, noise_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_456": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_454": {
                "tensors": {
                    "value": "(number_of_samples + 2 * extra) * [noise_in]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_502": {
                "f": {
                    "value": "location_string",
                    "type": "variable",
                    "possible_values": [
                        [
                            "results_folder + 'netG_' + str(epoch) + '_fc1.0_ngf120_ndf120_dep5-5_WGAN.pth'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "network.py": {
        "torch": {
            "rand_11": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake_data.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_11": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "grad_16": {
                "outputs": {
                    "value": "disc_interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD(interpolates, cooc_vol_D)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha * real_data + (1 - alpha) * fake_data",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(disc_interpolates.size()).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers[0:6]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.after_concat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers[6:]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "main_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(main_output, cooc_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_17": {
                "*size": {
                    "value": "disc_interpolates.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "of",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ncIn",
                            "variable"
                        ],
                        [
                            "of + cooc_size",
                            "BinOp"
                        ],
                        [
                            "nf",
                            "variable"
                        ],
                        [
                            "nz",
                            "variable"
                        ],
                        [
                            "nf",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "ndf * 2 ** i",
                            "BinOp"
                        ],
                        [
                            "ndf * 2 ** i",
                            "BinOp"
                        ],
                        [
                            "nc",
                            "variable"
                        ],
                        [
                            "ngf * 2 ** (nDep - 2 - i)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_102": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "in_channels": {
                    "value": "of",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ncIn",
                            "variable"
                        ],
                        [
                            "of + cooc_size",
                            "BinOp"
                        ],
                        [
                            "nf",
                            "variable"
                        ],
                        [
                            "nz",
                            "variable"
                        ],
                        [
                            "nf",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "ndf * 2 ** i",
                            "BinOp"
                        ],
                        [
                            "ndf * 2 ** i",
                            "BinOp"
                        ],
                        [
                            "nc",
                            "variable"
                        ],
                        [
                            "ngf * 2 ** (nDep - 2 - i)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_60": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_model.py": {
        "torch": {
            "Adam_108": {
                "variable": {
                    "value": "optimizerD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_109": {
                "variable": {
                    "value": "optimizerG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[param for net in Gnets for param in list(net.parameters())]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {}
    }
}