{
    "probing/reporter.py": {
        "sklearn": {
            "TSNE_159": {
                "variable": {
                    "value": "tsne",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "verbose": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "ppl",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.args['reporting']['reporting_settings']['ppl']",
                            "Subscript"
                        ],
                        [
                            "30",
                            "Constant"
                        ],
                        [
                            "self.args['reporting']['reporting_settings']['ppl']",
                            "Subscript"
                        ],
                        [
                            "30",
                            "Constant"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "n_iter",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.args['reporting_settings']['n_iter']",
                            "Subscript"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "self.args['reporting_settings']['n_iter']",
                            "Subscript"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "PCA_220": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "229",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PCA_273": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "229",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TSNE_313": {
                "variable": {
                    "value": "tsne",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "verbose": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "ppl",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.args['reporting']['reporting_settings']['ppl']",
                            "Subscript"
                        ],
                        [
                            "30",
                            "Constant"
                        ],
                        [
                            "self.args['reporting']['reporting_settings']['ppl']",
                            "Subscript"
                        ],
                        [
                            "30",
                            "Constant"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "n_iter",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.args['reporting_settings']['n_iter']",
                            "Subscript"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "self.args['reporting_settings']['n_iter']",
                            "Subscript"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "matmul_93": {
                "variable": {
                    "value": "projection",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "representation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model(representation[:length])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "proj_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.probe.proj if hasattr(self.probe, 'proj') else self.probe.linear1.weight.data.transpose(0, 1)",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "probing/data.py": {
        "torch": {
            "tensor_366": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[len(x) for x in seqs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.args['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pad_sequence_367": {
                "variable": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[x[0].embeddings.to(device=self.args['device']) for x in batch_observations]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(x[0].sentence, device=self.args['device']) for x in batch_observations]",
                            "ListComp"
                        ],
                        [
                            "nn.utils.rnn.pad_sequence(seqs, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_380": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[-torch.ones(*label_maxshape, device=self.args['device']) for x in seqs]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_317": {
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.custom_pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_328": {
                "dataset": {
                    "value": "self.dev_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.custom_pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_339": {
                "dataset": {
                    "value": "self.test_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.custom_pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_525": {
                "variable": {
                    "value": "single_layer_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[np.mean(single_layer_features[untok_tok_mapping[i][0]:untok_tok_mapping[i][-1] + 1, :], axis=0) for i in range(len(untokenized_sent))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_365": {
                "data": {
                    "value": "x[0].sentence",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.args['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_371": {
                "*size": {
                    "value": "*label_maxshape",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "self.args['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "probing/loss.py": {
        "torch": {
            "sum_34": {
                "variable": {
                    "value": "total_sents",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "length_batch != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_69": {
                "variable": {
                    "value": "total_sents",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "length_batch != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_88": {
                "variable": {
                    "value": "self.pytorch_ce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_37": {
                "variable": {
                    "value": "loss_per_sent",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(predictions_masked - labels_masked)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.word_pair_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "batch_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.args['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_74": {
                "variable": {
                    "value": "loss_per_sent",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(predictions_masked - labels_masked)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.word_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "variable": {
                    "value": "batch_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.args['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_96": {
                "variable": {
                    "value": "total_sents",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "length_batch != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "abs_37": {
                "input": {
                    "value": "predictions_masked - labels_masked",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_39": {
                "input": {
                    "value": "normalized_loss_per_sent",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "loss_per_sent / squared_lengths",
                            "BinOp"
                        ],
                        [
                            "loss_per_sent / length_batch.float()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_74": {
                "input": {
                    "value": "predictions_masked - labels_masked",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_76": {
                "input": {
                    "value": "normalized_loss_per_sent",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "loss_per_sent / squared_lengths",
                            "BinOp"
                        ],
                        [
                            "loss_per_sent / length_batch.float()",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "probing/model.py": {
        "torch": {
            "LSTM_56": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args['model']['hidden_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "int(input_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "forward_aggregate",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*batch.size()",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "self.args['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "variable": {
                    "value": "backward_aggregate",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*batch.size()",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "self.args['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "forward_normalization_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.args['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "backward_normalization_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.args['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "batch_seq_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.args['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "variable": {
                    "value": "decay_constant",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.args['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "probing/probe.py": {
        "torch": {
            "Parameter_21": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.model_dim, self.probe_rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_38": {
                "variable": {
                    "value": "transformed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.linear1(batch)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_45": {
                "variable": {
                    "value": "squared_distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "squared_diffs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "diffs.pow(2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_59": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.model_dim, self.probe_rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "variable": {
                    "value": "transformed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.linear1(batch)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_77": {
                "variable": {
                    "value": "norms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transformed.view(batchlen * seqlen, 1, rank)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "transformed.view(batchlen * seqlen, rank, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_95": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.model_dim, self.model_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_111": {
                "variable": {
                    "value": "transformed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.linear1(batch)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_113": {
                "variable": {
                    "value": "norms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transformed.view(batchlen * seqlen, 1, rank)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "batch.view(batchlen * seqlen, rank, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_130": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.model_dim, self.model_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_150": {
                "variable": {
                    "value": "psd_transformed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diffs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transformed - transposed",
                            "BinOp"
                        ],
                        [
                            "(batch_square - batch_square.transpose(1, 2)).view(batchlen * seqlen * seqlen, rank)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_151": {
                "variable": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psd_transformed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(diffs, self.proj).view(batchlen * seqlen * seqlen, 1, rank)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "diffs.view(batchlen * seqlen * seqlen, rank, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_164": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.model_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.maximum_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_165": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.maximum_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.label_space_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "*size": {
                    "value": "self.model_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.probe_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "*size": {
                    "value": "self.model_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.probe_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "*size": {
                    "value": "self.model_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.model_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "*size": {
                    "value": "self.model_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.model_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "probing/regimen.py": {
        "torch": {
            "Adam_31": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "probe.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_32": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "Constant",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "patience": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_84": {
                "obj": {
                    "value": "probe.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.params_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "probing/run_demo.py": {
        "torch": {
            "device_126": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_88": {
                "seed": {
                    "value": "cli_args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_24": {
                "f": {
                    "value": "probe_params_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args['reporting']['root'], args['probe']['params_path'])",
                            "Call"
                        ],
                        [
                            "os.path.join(args['reporting']['root'], args['probe']['params_path'])",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "probing/run_experiment.py": {
        "torch": {
            "device_258": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_252": {
                "seed": {
                    "value": "cli_args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_154": {
                "f": {
                    "value": "probe_params_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args['reporting']['root'], args['probe']['params_path'])",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "probing/task.py": {
        "torch": {
            "zeros_37": {
                "variable": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(sentence_length, sentence_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_126": {
                "variable": {
                    "value": "depths",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sentence_length",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(observation[0])",
                            "Call"
                        ],
                        [
                            "len(observation[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_21": {
                "*size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_188": {}
        }
    },
    "scripts/randomize_bert.py": {
        "torch": {
            "save_22": {
                "obj": {
                    "value": "state_dict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "sys.argv[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}