{
    "src/analyzer/analysis.py": {
        "torch": {
            "device_60": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "rand_89": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, *input_res)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "next(student_model.parameters()).dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device(device if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/analyzer/encoder.py": {
        "torch": {
            "Sequential_43": {
                "variable": {
                    "value": "self._blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self._blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "src/coco_runner.py": {
        "torch": {
            "device_109": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_123": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model(model_config, device)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(model, device_ids=device_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/distillation/loss.py": {
        "torch": {}
    },
    "src/distillation/tool.py": {
        "torch": {}
    },
    "src/eval_dir.py": {
        "torch": {
            "device_111": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/mimic_analyzer.py": {
        "torch": {}
    },
    "src/mimic_fix.py": {
        "torch": {
            "device_104": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/mimic_runner.py": {
        "torch": {
            "device_192": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_214": {
                "variable": {
                    "value": "teacher_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "teacher_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model(config['teacher_model'], device)",
                            "Call"
                        ],
                        [
                            "DataParallel(teacher_model, device_ids=device_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_215": {
                "variable": {
                    "value": "student_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "student_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model(student_model_config, device, require_weights=args.require_weights)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(student_model, device_ids=device_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/models/__init__.py": {
        "torch": {
            "load_38": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_config['ckpt']",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/custom/resnet.py": {
        "torch": {
            "Conv2d_83": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_87": {
                "variable": {
                    "value": "maxpool",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/efficientdet/backbone.py": {
        "torch": {
            "ModuleList_184": {
                "variable": {
                    "value": "new_blocks",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Identity_37": {
                "variable": {
                    "value": "self.p3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_38": {
                "variable": {
                    "value": "self.p4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_39": {
                "variable": {
                    "value": "self.p5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.bifpn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[BiFPN(self.fpn_num_filters[self.compound_coef], conv_channel_coef[compound_coef], True if _ == 0 else False, attention=True if compound_coef < 6 else False, use_p8=compound_coef > 7) for _ in range(self.fpn_cell_repeats[compound_coef])]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "from_numpy_90": {
                "variable": {
                    "value": "framed_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(framed_imgs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_135": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_229": {
                "f": {
                    "value": "backbone_params_config['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_231": {
                "f": {
                    "value": "backbone_params_config['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "data": {
                    "value": "p['rois']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "data": {
                    "value": "p['scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_128": {
                "data": {
                    "value": "p['class_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_74": {
                "start": {
                    "value": "self.pyramid_levels[self.compound_coef]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/efficientdet/dataset.py": {
        "torch": {
            "from_numpy_91": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(imgs, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_97": {
                "*size": {
                    "value": "(len(annots), max_num_annots, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_103": {
                "*size": {
                    "value": "(len(annots), 1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_135": {
                "ndarray": {
                    "value": "annots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[s['annot'] for s in data]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/efficientdet/efficientnet/model.py": {
        "torch": {
            "BatchNorm2d_53": {
                "variable": {
                    "value": "self._bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "self._bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "final_oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._block_args.output_filters",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_141": {
                "variable": {
                    "value": "self._bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(1280, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(32, model._global_params)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - self._global_params.batch_norm_momentum",
                            "BinOp"
                        ]
                    ]
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._global_params.batch_norm_epsilon",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ModuleList_144": {
                "variable": {
                    "value": "self._blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm2d_165": {
                "variable": {
                    "value": "self._bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(1280, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(32, model._global_params)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - self._global_params.batch_norm_momentum",
                            "BinOp"
                        ]
                    ]
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._global_params.batch_norm_epsilon",
                            "Attribute"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_168": {
                "variable": {
                    "value": "self._avg_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_169": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self._global_params.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_170": {
                "variable": {
                    "value": "self._fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(1280, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(32, model._global_params)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self._global_params.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self._bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_87": {
                "variable": {
                    "value": "x_squeezed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._expand_conv(inputs)",
                            "Call"
                        ],
                        [
                            "self._bn0(x)",
                            "Call"
                        ],
                        [
                            "self._swish(x)",
                            "Call"
                        ],
                        [
                            "self._depthwise_conv(x)",
                            "Call"
                        ],
                        [
                            "self._bn1(x)",
                            "Call"
                        ],
                        [
                            "self._swish(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x_squeezed) * x",
                            "BinOp"
                        ],
                        [
                            "self._project_conv(x)",
                            "Call"
                        ],
                        [
                            "self._bn2(x)",
                            "Call"
                        ],
                        [
                            "drop_connect(x, p=drop_connect_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x + inputs",
                            "BinOp"
                        ],
                        [
                            "self._swish(self._bn0(self._conv_stem(inputs)))",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn1(self._conv_head(x)))",
                            "Call"
                        ],
                        [
                            "block(x, drop_connect_rate=drop_connect_rate)",
                            "Call"
                        ],
                        [
                            "self.extract_features(inputs)",
                            "Call"
                        ],
                        [
                            "self._avg_pooling(x)",
                            "Call"
                        ],
                        [
                            "x.view(bs, -1)",
                            "Call"
                        ],
                        [
                            "self._dropout(x)",
                            "Call"
                        ],
                        [
                            "self._fc(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_91": {
                "input": {
                    "value": "x_squeezed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "self._se_reduce(x_squeezed)",
                            "Call"
                        ],
                        [
                            "self._swish(x_squeezed)",
                            "Call"
                        ],
                        [
                            "self._se_expand(x_squeezed)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/efficientdet/efficientnet/utils.py": {
        "torch": {
            "floor_92": {
                "variable": {
                    "value": "binary_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "random_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Name"
                        ],
                        [
                            "random_tensor + torch.rand([batch_size, 1, 1, 1], dtype=inputs.dtype, device=inputs.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_48": {
                "variable": {
                    "value": "sigmoid_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.saved_variables[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rand_91": {
                "*size": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_121": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_122": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_41": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.saved_variables[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_59": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "device_303": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/efficientdet/efficientnet/utils_extra.py": {
        "torch": {
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels if depthwise else groups",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_46": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [left, right, top, bottom])",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [left, right, top, bottom])",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[left, right, top, bottom]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MaxPool2d_61": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "pad_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [left, right, top, bottom])",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [left, right, top, bottom])",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[left, right, top, bottom]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/efficientdet/loss.py": {
        "torch": {
            "clamp_17": {
                "variable": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(torch.unsqueeze(a[:, 3], dim=1), b[:, 2]) - torch.max(torch.unsqueeze(a[:, 1], 1), b[:, 0])",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(iw, min=0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_18": {
                "variable": {
                    "value": "ih",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ih",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(torch.unsqueeze(a[:, 2], dim=1), b[:, 3]) - torch.max(torch.unsqueeze(a[:, 0], 1), b[:, 1])",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(ih, min=0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_20": {
                "variable": {
                    "value": "ua",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ua",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze((a[:, 2] - a[:, 0]) * (a[:, 3] - a[:, 1]), dim=1) + area - iw * ih",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(ua, min=1e-08)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_15": {
                "input": {
                    "value": "torch.unsqueeze(a[:, 3], dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_15": {
                "input": {
                    "value": "torch.unsqueeze(a[:, 1], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_16": {
                "input": {
                    "value": "torch.unsqueeze(a[:, 2], dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_16": {
                "input": {
                    "value": "torch.unsqueeze(a[:, 0], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "bbox_annotation",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(boxes, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_58": {
                "variable": {
                    "value": "classification",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "classification",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifications[j, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(classification, 0.0001, 1.0 - 0.0001)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0 - 0.0001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_93": {
                "variable": {
                    "value": "(IoU_max, IoU_argmax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "IoU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intersection / ua",
                            "BinOp"
                        ],
                        [
                            "calc_iou(anchor[:, :], bbox_annotation[:, :4])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ge_102": {
                "variable": {
                    "value": "positive_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "IoU_max",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "where_115": {
                "variable": {
                    "value": "alpha_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.eq(targets, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "alpha_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(classification) * alpha",
                            "BinOp"
                        ],
                        [
                            "alpha_factor.cuda()",
                            "Call"
                        ],
                        [
                            "1.0 - alpha_factor",
                            "BinOp"
                        ],
                        [
                            "torch.ones_like(classification) * alpha",
                            "BinOp"
                        ],
                        [
                            "1.0 - alpha_factor",
                            "BinOp"
                        ],
                        [
                            "torch.ones_like(targets) * alpha",
                            "BinOp"
                        ],
                        [
                            "alpha_factor.cuda()",
                            "Call"
                        ],
                        [
                            "torch.where(torch.eq(targets, 1.0), alpha_factor, 1.0 - alpha_factor)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 - alpha_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_116": {
                "variable": {
                    "value": "focal_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.eq(targets, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0 - classification",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "classification",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifications[j, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(classification, 0.0001, 1.0 - 0.0001)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_123": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "focal_weight * bce",
                            "BinOp"
                        ],
                        [
                            "focal_weight * bce",
                            "BinOp"
                        ],
                        [
                            "focal_weight * bce",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.ne(targets, -1.0), cls_loss, zeros)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_126": {
                "variable": {
                    "value": "cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.ne(targets, -1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "focal_weight * bce",
                            "BinOp"
                        ],
                        [
                            "focal_weight * bce",
                            "BinOp"
                        ],
                        [
                            "focal_weight * bce",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.ne(targets, -1.0), cls_loss, zeros)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(cls_loss)",
                            "Call"
                        ],
                        [
                            "zeros.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_15": {
                "input": {
                    "value": "a[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_16": {
                "input": {
                    "value": "a[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_19": {
                "input": {
                    "value": "(a[:, 2] - a[:, 0]) * (a[:, 3] - a[:, 1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_145": {
                "variable": {
                    "value": "gt_widths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "assigned_annotations[:, 2] - assigned_annotations[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(gt_widths, min=1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_146": {
                "variable": {
                    "value": "gt_heights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "assigned_annotations[:, 3] - assigned_annotations[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(gt_heights, min=1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_150": {
                "variable": {
                    "value": "targets_dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / anchor_widths_pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_151": {
                "variable": {
                    "value": "targets_dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / anchor_heights_pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_153": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dy, targets_dx, targets_dh, targets_dw)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_156": {
                "variable": {
                    "value": "regression_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets - regression[positive_indices, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_158": {
                "variable": {
                    "value": "regression_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.le(regression_diff, 1.0 / 9.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * 9.0 * torch.pow(regression_diff, 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "regression_diff - 0.5 / 9.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_185": {
                "tensors": {
                    "value": "classification_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_185": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_96": {
                "input": {
                    "value": "classification",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifications[j, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(classification, 0.0001, 1.0 - 0.0001)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_111": {
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(classification) * -1",
                            "BinOp"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack((targets_dy, targets_dx, targets_dh, targets_dw))",
                            "Call"
                        ],
                        [
                            "targets.t()",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_115": {
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(classification) * -1",
                            "BinOp"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack((targets_dy, targets_dx, targets_dh, targets_dw))",
                            "Call"
                        ],
                        [
                            "targets.t()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "eq_116": {
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(classification) * -1",
                            "BinOp"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack((targets_dy, targets_dx, targets_dh, targets_dw))",
                            "Call"
                        ],
                        [
                            "targets.t()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_117": {
                "input": {
                    "value": "focal_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classification",
                            "Name"
                        ],
                        [
                            "alpha_factor * torch.pow(focal_weight, gamma)",
                            "BinOp"
                        ],
                        [
                            "classification",
                            "Name"
                        ],
                        [
                            "alpha_factor * torch.pow(focal_weight, gamma)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.eq(targets, 1.0), 1.0 - classification, classification)",
                            "Call"
                        ],
                        [
                            "alpha_factor * torch.pow(focal_weight, gamma)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "ne_126": {
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(classification) * -1",
                            "BinOp"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack((targets_dy, targets_dx, targets_dh, targets_dw))",
                            "Call"
                        ],
                        [
                            "targets.t()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_177": {
                "tensors": {
                    "value": "[anchors[0]] * imgs.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_186": {
                "tensors": {
                    "value": "regression_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_186": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "lt_100": {
                "input": {
                    "value": "IoU_max",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_128": {
                "input": {
                    "value": "num_positive_anchors.to(dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "le_159": {
                "input": {
                    "value": "regression_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(targets - regression[positive_indices, :])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1.0 / 9.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_63": {
                "input": {
                    "value": "classification",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifications[j, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(classification, 0.0001, 1.0 - 0.0001)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_67": {
                "input": {
                    "value": "focal_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classification",
                            "Name"
                        ],
                        [
                            "alpha_factor * torch.pow(focal_weight, gamma)",
                            "BinOp"
                        ],
                        [
                            "classification",
                            "Name"
                        ],
                        [
                            "alpha_factor * torch.pow(focal_weight, gamma)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.eq(targets, 1.0), 1.0 - classification, classification)",
                            "Call"
                        ],
                        [
                            "alpha_factor * torch.pow(focal_weight, gamma)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "log_69": {
                "input": {
                    "value": "1.0 - classification",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_77": {
                "input": {
                    "value": "classification",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifications[j, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(classification, 0.0001, 1.0 - 0.0001)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_80": {
                "input": {
                    "value": "focal_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classification",
                            "Name"
                        ],
                        [
                            "alpha_factor * torch.pow(focal_weight, gamma)",
                            "BinOp"
                        ],
                        [
                            "classification",
                            "Name"
                        ],
                        [
                            "alpha_factor * torch.pow(focal_weight, gamma)",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.eq(targets, 1.0), 1.0 - classification, classification)",
                            "Call"
                        ],
                        [
                            "alpha_factor * torch.pow(focal_weight, gamma)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "log_82": {
                "input": {
                    "value": "1.0 - classification",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_119": {
                "input": {
                    "value": "1.0 - classification",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_160": {
                "input": {
                    "value": "regression_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(targets - regression[positive_indices, :])",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_166": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_168": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/efficientdet/model.py": {
        "torch": {
            "Upsample_90": {
                "variable": {
                    "value": "self.p6_upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_91": {
                "variable": {
                    "value": "self.p5_upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_92": {
                "variable": {
                    "value": "self.p4_upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_93": {
                "variable": {
                    "value": "self.p3_upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_143": {
                "variable": {
                    "value": "self.p6_w1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(2, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_144": {
                "variable": {
                    "value": "self.p6_w1_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_145": {
                "variable": {
                    "value": "self.p5_w1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(2, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_146": {
                "variable": {
                    "value": "self.p5_w1_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_147": {
                "variable": {
                    "value": "self.p4_w1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(2, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_148": {
                "variable": {
                    "value": "self.p4_w1_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_149": {
                "variable": {
                    "value": "self.p3_w1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(2, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_150": {
                "variable": {
                    "value": "self.p3_w1_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_152": {
                "variable": {
                    "value": "self.p4_w2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(3, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_153": {
                "variable": {
                    "value": "self.p4_w2_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_154": {
                "variable": {
                    "value": "self.p5_w2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(3, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_155": {
                "variable": {
                    "value": "self.p5_w2_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_156": {
                "variable": {
                    "value": "self.p6_w2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(3, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_157": {
                "variable": {
                    "value": "self.p6_w2_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_158": {
                "variable": {
                    "value": "self.p7_w2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(2, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_159": {
                "variable": {
                    "value": "self.p7_w2_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_353": {
                "variable": {
                    "value": "self.conv_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SeparableConvBlock(in_channels, in_channels, norm=False, activation=False) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_355": {
                "variable": {
                    "value": "self.bn_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.ModuleList([nn.BatchNorm2d(in_channels, momentum=0.01, eps=0.001) for i in range(num_layers)]) for j in range(pyramid_levels)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_375": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feats, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feats, dim=1)",
                            "Call"
                        ],
                        [
                            "feats.sigmoid()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_390": {
                "variable": {
                    "value": "self.conv_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SeparableConvBlock(in_channels, in_channels, norm=False, activation=False) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_392": {
                "variable": {
                    "value": "self.bn_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.ModuleList([nn.BatchNorm2d(in_channels, momentum=0.01, eps=0.001) for i in range(num_layers)]) for j in range(pyramid_levels)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_414": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feats, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feats, dim=1)",
                            "Call"
                        ],
                        [
                            "feats.sigmoid()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_434": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Upsample_100": {
                "variable": {
                    "value": "self.p7_upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "self.p5_down_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2dStaticSamePadding(conv_channels[2], num_channels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.p4_down_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2dStaticSamePadding(conv_channels[1], num_channels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "variable": {
                    "value": "self.p3_down_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2dStaticSamePadding(conv_channels[0], num_channels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.p5_to_p6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2dStaticSamePadding(conv_channels[2], num_channels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "self.p6_to_p7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MaxPool2dStaticSamePadding(3, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.p4_down_channel_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2dStaticSamePadding(conv_channels[1], num_channels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "variable": {
                    "value": "self.p5_down_channel_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2dStaticSamePadding(conv_channels[2], num_channels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "self.p7_to_p8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MaxPool2dStaticSamePadding(3, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_143": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_145": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_147": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_149": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_152": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_154": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_156": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_158": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_109": {
                "num_features": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_113": {
                "num_features": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_117": {
                "num_features": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_122": {
                "num_features": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_135": {
                "num_features": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_139": {
                "num_features": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_213": {
                "input": {
                    "value": "p6_w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p6_w1_relu(self.p6_w1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_219": {
                "input": {
                    "value": "p5_w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p5_w1_relu(self.p5_w1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_225": {
                "input": {
                    "value": "p4_w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p4_w1_relu(self.p4_w1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_231": {
                "input": {
                    "value": "p3_w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p3_w1_relu(self.p3_w1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_241": {
                "input": {
                    "value": "p4_w2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p4_w2_relu(self.p4_w2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_248": {
                "input": {
                    "value": "p5_w2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p5_w2_relu(self.p5_w2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_255": {
                "input": {
                    "value": "p6_w2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p6_w2_relu(self.p6_w2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_262": {
                "input": {
                    "value": "p7_w2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p7_w2_relu(self.p7_w2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_356": {
                "modules": {
                    "value": "[nn.BatchNorm2d(in_channels, momentum=0.01, eps=0.001) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_393": {
                "modules": {
                    "value": "[nn.BatchNorm2d(in_channels, momentum=0.01, eps=0.001) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_356": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_393": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/efficientdet/model_utils.py": {
        "torch": {
            "clamp_45": {
                "variable": {
                    "value": "boxes[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_46": {
                "variable": {
                    "value": "boxes[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_48": {
                "variable": {
                    "value": "boxes[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max": {
                    "value": "width - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_49": {
                "variable": {
                    "value": "boxes[:, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes[:, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max": {
                    "value": "height - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_133": {
                "variable": {
                    "value": "anchor_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "anchor_boxes.astype(dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_35": {
                "tensors": {
                    "value": "[xmin, ymin, xmax, ymax]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/efficientdet/utils/sync_batchnorm/batchnorm.py": {
        "torch": {
            "batch_norm_66": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(input.size(0), self.num_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/models/efficientdet/utils/sync_batchnorm/batchnorm_reimpl.py": {
        "torch": {
            "Parameter_33": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_33": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_34": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_36": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/efficientdet/utils/sync_batchnorm/replicate.py": {
        "torch": {}
    },
    "src/models/efficientdet/utils/sync_batchnorm/unittest.py": {
        "torch": {
            "allclose_28": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/efficientdet/utils/utils.py": {
        "torch": {
            "max_104": {
                "input": {
                    "value": "classification",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/ext/backbone.py": {
        "torch": {}
    },
    "src/models/ext/classifier.py": {
        "torch": {
            "Sequential_19": {
                "variable": {
                    "value": "self.extractor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d((64, 64))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * 8 * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_20": {
                "output_size": {
                    "value": "(64, 64)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "input_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_30": {
                "output_size": {
                    "value": "(8, 8)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/mimic/base.py": {
        "torch": {
            "Sequential_66": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Identity()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Identity()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/models/mimic/efficientdet_layer.py": {
        "torch": {
            "ReLU_11": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(original_channels, original_channels, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(bottleneck_channel, original_channels, kernel_size=1, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(original_channels, original_channels, kernel_size=3, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "USConv2d(bottleneck_channel, original_channels, kernel_size=1, padding=1, bias=True, slimmable_output=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_169": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(original_channels, 64, kernel_size=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_179": {
                "variable": {
                    "value": "decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(bottleneck_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "original_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "original_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "original_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "original_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bottleneck_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "num_features": {
                    "value": "bottleneck_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "bottleneck_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "original_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "original_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "original_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "original_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "num_features": {
                    "value": "original_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "original_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "original_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "num_features": {
                    "value": "original_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_82": {
                "num_features": {
                    "value": "bottleneck_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "original_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "original_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "num_features": {
                    "value": "original_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_170": {
                "in_channels": {
                    "value": "original_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_171": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_173": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_175": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_176": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_177": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "bottleneck_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_180": {
                "num_features": {
                    "value": "bottleneck_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_182": {
                "in_channels": {
                    "value": "bottleneck_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ],
                        [
                            "config['bottleneck']['bottleneck_channel']",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_183": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_184": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_185": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_187": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_188": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "original_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_190": {
                "num_features": {
                    "value": "original_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ],
                        [
                            "get_channel_number(compound_coef)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/mimic/resnet_layer.py": {
        "torch": {
            "Sequential_9": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 64, kernel_size=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(bottleneck_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 64, kernel_size=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(bottleneck_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 64, kernel_size=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "USBatchNorm2d(bottleneck_channel, width_mult_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "USConv2d(64, 64, kernel_size=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "USBatchNorm2d(bottleneck_channel, width_mult_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_150": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_151": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "bottleneck_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "Constant"
                        ],
                        [
                            "12",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "bottleneck_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "Constant"
                        ],
                        [
                            "12",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "bottleneck_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "Constant"
                        ],
                        [
                            "12",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "bottleneck_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "Constant"
                        ],
                        [
                            "12",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "num_features": {
                    "value": "bottleneck_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "Constant"
                        ],
                        [
                            "12",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_54": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "bottleneck_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "Constant"
                        ],
                        [
                            "12",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_83": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_88": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_90": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_92": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_95": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_125": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_127": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_128": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_130": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_132": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/mimic/split_rcnn.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "self.layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "backbone.body.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "annotate_101": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "the_type": {
                    "value": "List[List[torch.Tensor]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_107": {
                "tensors": {
                    "value": "anchors_per_image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_197": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_198": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_198": {
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_199": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "17",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/org/rcnn.py": {
        "torch": {
            "tensor_31": {
                "variable": {
                    "value": "im_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "image.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_cache_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_32": {
                "input": {
                    "value": "im_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(image.shape[-2:])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_33": {
                "input": {
                    "value": "im_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(image.shape[-2:])",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_45": {
                "input": {
                    "value": "image[None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size / min_size",
                            "BinOp"
                        ],
                        [
                            "self.max_size / max_size",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_123": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_124": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_125": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "17",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/slimmable/__init__.py": {
        "torch": {
            "load_25": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_config['ckpt']",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/slimmable/compute_post_bn.py": {
        "torch": {
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/models/slimmable/slimmable_ops.py": {
        "torch": {
            "conv2d_141": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight[:out_channels, :in_channels, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.conv.weight[:out_channels, :in_channels, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias[:out_channels]",
                            "Subscript"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.conv.bias[:out_channels]",
                            "Subscript"
                        ],
                        [
                            "self.conv.bias",
                            "Attribute"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_159": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.BatchNorm2d(i, affine=False) for i in [int(round(num_features * width_mult)) for width_mult in width_mult_list]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_209": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias[:out_channels]",
                            "Subscript"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.conv.bias[:out_channels]",
                            "Subscript"
                        ],
                        [
                            "self.conv.bias",
                            "Attribute"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels_max if depthwise else 1",
                            "IfExp"
                        ],
                        [
                            "in_channels_max if depthwise else groups",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_256": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [left, right, top, bottom])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._expand_conv(inputs)",
                            "Call"
                        ],
                        [
                            "self._bn0(x)",
                            "Call"
                        ],
                        [
                            "self._swish(x)",
                            "Call"
                        ],
                        [
                            "self._depthwise_conv(x)",
                            "Call"
                        ],
                        [
                            "self._bn1(x)",
                            "Call"
                        ],
                        [
                            "self._swish(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x_squeezed) * x",
                            "BinOp"
                        ],
                        [
                            "self._project_conv(x)",
                            "Call"
                        ],
                        [
                            "self._bn2(x)",
                            "Call"
                        ],
                        [
                            "drop_connect(x, p=drop_connect_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x + inputs",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "[left, right, top, bottom]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_266": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [left, right, top, bottom])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._expand_conv(inputs)",
                            "Call"
                        ],
                        [
                            "self._bn0(x)",
                            "Call"
                        ],
                        [
                            "self._swish(x)",
                            "Call"
                        ],
                        [
                            "self._depthwise_conv(x)",
                            "Call"
                        ],
                        [
                            "self._bn1(x)",
                            "Call"
                        ],
                        [
                            "self._swish(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x_squeezed) * x",
                            "BinOp"
                        ],
                        [
                            "self._project_conv(x)",
                            "Call"
                        ],
                        [
                            "self._bn2(x)",
                            "Call"
                        ],
                        [
                            "drop_connect(x, p=drop_connect_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x + inputs",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight[:out_channels, :in_channels, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.conv.weight[:out_channels, :in_channels, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias[:out_channels]",
                            "Subscript"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.conv.bias[:out_channels]",
                            "Subscript"
                        ],
                        [
                            "self.conv.bias",
                            "Attribute"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.conv.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(s[0], self.output_channels - s[1], s[2], s[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_norm_175": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.bn[idx].running_mean[:c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.bn[idx].running_var[:c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight[:c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias[:c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_norm_185": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight[:c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias[:c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_325": {
                "variable": {
                    "value": "self._bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_343": {
                "variable": {
                    "value": "self._bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "final_oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._block_args.output_filters",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_368": {
                "variable": {
                    "value": "x_squeezed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [left, right, top, bottom])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._expand_conv(inputs)",
                            "Call"
                        ],
                        [
                            "self._bn0(x)",
                            "Call"
                        ],
                        [
                            "self._swish(x)",
                            "Call"
                        ],
                        [
                            "self._depthwise_conv(x)",
                            "Call"
                        ],
                        [
                            "self._bn1(x)",
                            "Call"
                        ],
                        [
                            "self._swish(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x_squeezed) * x",
                            "BinOp"
                        ],
                        [
                            "self._project_conv(x)",
                            "Call"
                        ],
                        [
                            "self._bn2(x)",
                            "Call"
                        ],
                        [
                            "drop_connect(x, p=drop_connect_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x + inputs",
                            "BinOp"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_71": {
                "variable": {
                    "value": "magnitude",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.square(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-1, -2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_315": {
                "variable": {
                    "value": "self._bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_160": {
                "num_features": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(y.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_372": {
                "input": {
                    "value": "x_squeezed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "self._se_reduce(x_squeezed)",
                            "Call"
                        ],
                        [
                            "self._swish(x_squeezed)",
                            "Call"
                        ],
                        [
                            "self._se_expand(x_squeezed)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_71": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sort_72": {
                "input": {
                    "value": "magnitude",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.square(input), dim=(-1, -2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "y[i][j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.shape[2:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/structure/sampler.py": {
        "torch": {
            "DataLoader_98": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_SubsetSampler(indices)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x[0]",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "src/structure/transformer.py": {
        "torch": {}
    },
    "src/utils/coco_eval_util.py": {
        "torch": {
            "stack_155": {
                "tensors": {
                    "value": "(xmin, ymin, xmax - xmin, ymax - ymin)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/coco_util.py": {
        "torch": {
            "Subset_143": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(dataset, ids)",
                            "Call"
                        ],
                        [
                            "{'images': [], 'categories': [], 'annotations': []}",
                            "Dict"
                        ],
                        [
                            "dataset.dataset",
                            "Attribute"
                        ],
                        [
                            "ExtCocoDetection(os.path.expanduser(img_dir_path), os.path.expanduser(ann_file_path), transforms=transforms, jpeg_quality=jpeg_quality)",
                            "Call"
                        ],
                        [
                            "remove_images_without_annotations(dataset)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "as_tensor_40": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coco_mask.decode(rles)",
                            "Call"
                        ],
                        [
                            "mask[..., None]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(mask, dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "mask.any(dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_44": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(masks, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.zeros((0, height, width), dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "targets['masks']",
                            "Subscript"
                        ],
                        [
                            "masks.permute(0, 2, 1).contiguous().permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "convert_coco_poly_to_mask(segmentations, h, w)",
                            "Call"
                        ],
                        [
                            "masks[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "image_id",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[image_id]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_63": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes, dtype=torch.float32).reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "boxes[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_63": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[obj['category_id'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes, dtype=torch.int64)",
                            "Call"
                        ],
                        [
                            "classes[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "variable": {
                    "value": "area",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obj['area'] for obj in anno]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "iscrowd",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obj['iscrowd'] for obj in anno]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "as_tensor_77": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets['keypoints']",
                            "Subscript"
                        ],
                        [
                            "keypoints.reshape(keypoints.shape[0], -1).tolist()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "[obj['keypoints'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(keypoints, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "keypoints.view(num_keypoints, -1, 3)",
                            "Call"
                        ],
                        [
                            "keypoints[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/data_util.py": {
        "torch": {
            "DataLoader_42": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_coco_dataset(dataset_splits['train'], True)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "train_batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupedBatchSampler(train_sampler, group_ids, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.BatchSampler(train_sampler, batch_size, drop_last=True)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_config['num_workers']",
                            "Subscript"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "misc_util.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_44": {
                "variable": {
                    "value": "val_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_coco_dataset(dataset_splits['val'], False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(val_dataset)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_config['num_workers']",
                            "Subscript"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "misc_util.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "variable": {
                    "value": "test_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_coco_dataset(dataset_splits['test'], False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(test_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(test_dataset)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_config['num_workers']",
                            "Subscript"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "misc_util.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_28": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_coco_dataset(dataset_splits['train'], True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_29": {
                "variable": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_coco_dataset(dataset_splits['val'], False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_30": {
                "variable": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_coco_dataset(dataset_splits['test'], False)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_32": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_coco_dataset(dataset_splits['train'], True)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_33": {
                "variable": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_coco_dataset(dataset_splits['val'], False)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_34": {
                "variable": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_coco_dataset(dataset_splits['test'], False)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchSampler_40": {
                "variable": {
                    "value": "train_batch_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.RandomSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/main_util.py": {
        "torch": {
            "get_num_threads_77": {
                "variable": {
                    "value": "n_threads",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_80": {
                "variable": {
                    "value": "cpu_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_55": {
                "device": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(os.environ['LOCAL_RANK'])",
                            "Call"
                        ],
                        [
                            "rank % torch.cuda.device_count()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "LambdaLR_72": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_num_threads_79": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_num_threads_117": {
                "int": {
                    "value": "n_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.get_num_threads()",
                            "Call"
                        ]
                    ]
                }
            },
            "synchronize_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/misc_util.py": {
        "torch": {
            "tensor_90": {
                "variable": {
                    "value": "local_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[tensor.numel()]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.count, self.total]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_103": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(max_size - local_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_134": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(values, dim=0)",
                            "Call"
                        ],
                        [
                            "values / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_262": {
                "obj": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "empty_101": {
                "*size": {
                    "value": "(max_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/visual_util.py": {
        "torch": {
            "cat_193": {
                "variable": {
                    "value": "kps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(kps[:, :, 0:2], scores[:, :, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "palette",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2 ** 25 - 1, 2 ** 15 - 1, 2 ** 21 - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}